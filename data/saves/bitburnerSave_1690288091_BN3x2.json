{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":314,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":7551271.379199039,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.28,\"hacking_speed\":1.28,\"hacking_money\":1.28,\"hacking_grow\":1.5104,\"hacking\":1.28,\"strength\":1.28,\"defense\":1.28,\"dexterity\":1.28,\"agility\":1.28,\"charisma\":1.3824,\"hacking_exp\":1.28,\"strength_exp\":1.28,\"defense_exp\":1.28,\"dexterity_exp\":1.28,\"agility_exp\":1.28,\"charisma_exp\":1.28,\"company_rep\":1.28,\"faction_rep\":1.28,\"crime_money\":1.28,\"crime_success\":1.28,\"hacknet_node_money\":1.28,\"hacknet_node_purchase_cost\":0.78125,\"hacknet_node_ram_cost\":0.78125,\"hacknet_node_core_cost\":0.78125,\"hacknet_node_level_cost\":0.78125,\"work_money\":1.3824,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":3,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"NiteSec\",\"Chongqing\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[],\"has4SData\":false,\"has4SDataTixApi\":true,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{\"Bachman & Associates\":\"Junior Software Engineer\",\"OmniTek Incorporated\":\"Junior Software Engineer\",\"Blade Industries\":\"Software Engineering Intern\",\"NWO\":\"Software Engineering Intern\",\"ECorp\":\"Software Engineering Intern\"},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"ECorp\",\"money\":15162.40985025093,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":150000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":528853433.1990974,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":105907662213.31879,\"total\":14083.40985025093,\"work\":0,\"servers\":-101580901563.10802,\"other\":-5005600000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":150000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":528853433.1990974,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":105907662213.31879,\"total\":14083.40985025093,\"work\":0,\"servers\":-101580901563.10802,\"other\":-5005600000,\"augmentations\":0}},\"playtimeSinceLastAug\":156231800,\"playtimeSinceLastBitnode\":156231800,\"lastAugReset\":1690131857373,\"lastNodeReset\":1690131857373,\"purchasedServers\":[\"CLOUD-000\"],\"scriptProdSinceLastAug\":460196520441.9723,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,3],[4,3],[8,2],[3,1]]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1686525459069},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1686525759083},{\"ID\":\"WORKOUT\",\"unlockedOn\":1686528279088},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1686532892094},{\"ID\":\"TRAVEL\",\"unlockedOn\":1686563653859},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1686567073861},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1686654552271},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1686667992269},{\"ID\":\"NITESEC\",\"unlockedOn\":1686679931301},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1686687177835},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1686697617844},{\"ID\":\"FROZE\",\"unlockedOn\":1686704316676},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1686746667786},{\"ID\":\"TOR\",\"unlockedOn\":1686746787787},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1686746893212},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1686762613218},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1686764833216},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1686767653216},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1686860173219},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1686862933218},{\"ID\":\"4S\",\"unlockedOn\":1686863833212},{\"ID\":\"DONATION\",\"unlockedOn\":1687005871880},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1687008391895},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1687017151898},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1687131964898},{\"ID\":\"SF1.1\",\"unlockedOn\":1687262446639},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1688063566853},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1688088406853},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1688429201871},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1688468232306},{\"ID\":\"SF4.1\",\"unlockedOn\":1688489952298},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1688562948355},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1688694948374},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1688720088407},{\"ID\":\"SF8.1\",\"unlockedOn\":1689334420195},{\"ID\":\"CORPORATION\",\"unlockedOn\":1689335320195},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1690127753231},{\"ID\":\"SF3.1\",\"unlockedOn\":1690131893170}],\"terminalCommandHistory\":[\"nano data/corporation.txt \",\"nano test.js \",\"run test.js \",\"nano data/corporation.txt \",\"free\",\"nano data/corporation.txt \",\"nano data/stockMarketReserveMoney.txt \",\"nano data/batchQueue.txt \",\"nano test.js \",\"run test.js \",\"nano data/corporation.txt \",\"run test.js \",\"nano data/corporation.txt \",\"run test.js \",\"gome\",\"home\",\"nano data/corporation.txt \",\"home\",\"nano test.js \",\"run test.js \",\"nano data/corporation.txt \",\"run test.js \",\"nano thing.txt \",\"free\",\"run scripts/coordinator.js \",\"nano data/ramToReserveOnHome.txt \",\"mem scripts/singularity/do-work.js \",\"nano data/ramToReserveOnHome.txt \",\"nano scripts/singularity/do-work\",\"nano scripts/singularity/do-work.js\",\"mem scripts/singularity/do-work\",\"mem scripts/singularity/do-work.js\",\"nano data/ramToReserveOnHome.txt \",\"mem scripts/singularity/do-job.js \",\"nano data/ramToReserveOnHome.txt \",\"mem scripts/stock/get-stock-quotes.js \",\"nano scripts/ramt\",\"nano data/ramToReserveOnHome.txt \",\"mem scripts/stock/invest-in-stocks.js \",\"nano data/latestQuotes.txt \",\"connect n00dles \",\"nano hack.js\",\"run hack.js \",\"rm hack.js \",\"home\",\"ls\",\"ls scripts/tools/ \",\"free\",\"nano data/stockMarketReserveMoney.txt \",\"nano data/latestQuotes.txt \"],\"lastUpdate\":1690288090540,\"lastSave\":1690284185668,\"totalPlaytime\":3766912800,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":true,\"cyclesWorked\":19800,\"factionWorkType\":\"hacking\",\"factionName\":\"Chongqing\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"40a77882039c0\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"43.3.1.6\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"corporation-management-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"Formulas.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/tools/delete-all-js.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    \\r\\n    const doNoDeleteFolders = [];\\r\\n\\r\\n    for (const textFile of ns.ls(\\\"home\\\", \\\".js\\\")) {\\r\\n        if(!doNoDeleteFolders.find(x => textFile.startsWith(x))){\\r\\n            ns.rm(textFile);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"scripts/tools/delete-all-js.js\",\"server\":\"home\"}}],[\"scripts/contracts/do.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const solverRegistry = [\\r\\n        new LzDecompression2Handler(),\\r\\n        new AlgorithmicStockTrading4Handler(),\\r\\n        new AlgorithmicStockTrading3Handler(),\\r\\n        new AlgorithmicStockTrading1Handler(),\\r\\n        new AlgorithmicStockTrading2Handler(),\\r\\n        new SpiralizeMatrixHandler(),\\r\\n        new Encryption1Handler(),\\r\\n        new Encryption2Handler(),\\r\\n    ]\\r\\n\\r\\n    const contracts = JSON.parse(ns.read(thisRoundsContractsFileName));\\r\\n    contracts\\r\\n        .forEach(contract => {\\r\\n            if (contract.attemptsLeft === 10 || contract.attemptsLeft === 5) {\\r\\n                const solver = solverRegistry.find(x => x.type === contract.type);\\r\\n                if (solver) {\\r\\n                    const result = solver.solve(contract.input);\\r\\n                    const success = ns.codingcontract.attempt(result, contract.name, contract.server);\\r\\n                    if (success === \\\"\\\") {\\r\\n                        const failuresContractsFileName = `contracts/failure/${contract.server}-${contract.name}-${contract.type.replaceAll(\\\" \\\", \\\"\\\")}.txt`;\\r\\n\\r\\n                        const saveThis = { contract, wrongResult: result };\\r\\n\\r\\n                        ns.write(failuresContractsFileName, JSON.stringify(saveThis), \\\"W\\\");\\r\\n\\r\\n                        ns.alert(`${contract.name} on ${contract.server} had a problem solving. You need to figure this out. Type: ${contract.type}`);\\r\\n                    } else {\\r\\n                        ns.toast(`Contract completed: ${success} Type: ${contract.type}`, \\\"success\\\", null);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        });\\r\\n}\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\";\\r\\n\\r\\nclass LzDecompression2Handler {\\r\\n    type = 'Compression II: LZ Decompression';\\r\\n\\r\\n    solve(input) {\\r\\n        return this.lzDecompression(input);\\r\\n    }\\r\\n\\r\\n    /// all need to be worked on in tests. These are just copies.\\r\\n    lzDecompression(stringToDecode) {\\r\\n        let decompressedString = '';\\r\\n        let startOfNextChunk = 0\\r\\n        let nextSectionCompressed = false;\\r\\n\\r\\n\\r\\n        while (startOfNextChunk < stringToDecode.length) {\\r\\n            const chunkLength = Number(stringToDecode[startOfNextChunk]);\\r\\n\\r\\n\\r\\n            if (chunkLength === 0) {\\r\\n                startOfNextChunk++;\\r\\n                nextSectionCompressed = !nextSectionCompressed;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (nextSectionCompressed) {\\r\\n                const nextCharacterInEncoded = parseInt(stringToDecode[startOfNextChunk + 1]);\\r\\n\\r\\n                const placesBack = nextCharacterInEncoded;\\r\\n                const startText = decompressedString.length - placesBack;\\r\\n                const endOfText = startText + chunkLength;\\r\\n\\r\\n                if (chunkLength <= nextCharacterInEncoded) {\\r\\n                    decompressedString += decompressedString.slice(startText, endOfText);\\r\\n                } else {\\r\\n                    let nextChunk = \\\"\\\";\\r\\n                    const partialChunk = decompressedString.slice(startText, endOfText);\\r\\n\\r\\n                    while (nextChunk.length < chunkLength) {\\r\\n                        if (nextChunk.length + partialChunk.length > chunkLength) {\\r\\n                            const howMuchLeftInChunk = chunkLength - nextChunk.length;\\r\\n                            nextChunk += partialChunk.slice(0, howMuchLeftInChunk)\\r\\n                        } else {\\r\\n                            nextChunk += partialChunk;\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    decompressedString += nextChunk;\\r\\n                }\\r\\n\\r\\n                startOfNextChunk += 2;\\r\\n                nextSectionCompressed = false;\\r\\n            } else {\\r\\n                const startText = startOfNextChunk + 1;\\r\\n                const endOfText = startText + chunkLength;\\r\\n                decompressedString += stringToDecode.slice(startText, endOfText);\\r\\n                startOfNextChunk = endOfText;\\r\\n                nextSectionCompressed = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        return decompressedString;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading1Handler {\\r\\n    type = 'Algorithmic Stock Trader I';\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = 1;\\r\\n        const stockPricesByDay = input;\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return new AlgorithmicStockTrading4Handler().tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading2Handler {\\r\\n    type = 'Algorithmic Stock Trader II';\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = input.length;\\r\\n        const stockPricesByDay = input;\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return new AlgorithmicStockTrading4Handler().tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading3Handler {\\r\\n    type = 'Algorithmic Stock Trader III';\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = 2;\\r\\n        const stockPricesByDay = input;\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return new AlgorithmicStockTrading4Handler().tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading4Handler {\\r\\n    type = 'Algorithmic Stock Trader IV';\\r\\n\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = input[0];\\r\\n        const stockPricesByDay = input[1];\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return this.tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n\\r\\n    tradeStock(maxNumberOfTrades, stockPricesByDay) {\\r\\n        if (maxNumberOfTrades === 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        let profitsPerTransaction = []\\r\\n\\r\\n        for (let i = stockPricesByDay.length - 1; i >= 1; i--) {\\r\\n            const priceToSeeIfHasNoVolitility = stockPricesByDay[i];\\r\\n\\r\\n            const yesterdaysPrice = stockPricesByDay[i - 1]\\r\\n            const tomorrowsPrice = stockPricesByDay[i + 1]\\r\\n\\r\\n            if (\\r\\n                (yesterdaysPrice <= priceToSeeIfHasNoVolitility && priceToSeeIfHasNoVolitility <= tomorrowsPrice) || // rising prices filter\\r\\n                (!tomorrowsPrice && yesterdaysPrice >= priceToSeeIfHasNoVolitility) || // end price\\r\\n                (yesterdaysPrice >= priceToSeeIfHasNoVolitility && priceToSeeIfHasNoVolitility >= tomorrowsPrice)) { // falling price filter\\r\\n                stockPricesByDay.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < stockPricesByDay.length; i++) {\\r\\n            const price = stockPricesByDay[i];\\r\\n            const potentialBuyPrice = stockPricesByDay[i - 1];\\r\\n            let potentialProfit = 0;\\r\\n\\r\\n            if (potentialBuyPrice) {\\r\\n                potentialProfit = price - potentialBuyPrice;\\r\\n            }\\r\\n\\r\\n            if (potentialProfit < 0) {\\r\\n                potentialProfit = 0;\\r\\n            }\\r\\n\\r\\n\\r\\n            profitsPerTransaction.push({ price, potentialProfit });\\r\\n        }\\r\\n\\r\\n        if (maxNumberOfTrades >= profitsPerTransaction.filter(x => x.potentialProfit > 0).length) {\\r\\n            return profitsPerTransaction\\r\\n                .reduce((acc, x) => acc + x.potentialProfit, 0);\\r\\n        }\\r\\n\\r\\n        const minProfit = Math.min(...profitsPerTransaction.filter(x => x.potentialProfit !== 0).map(x => x.potentialProfit));\\r\\n        const countOfMinProfits = profitsPerTransaction.filter(x => x.potentialProfit === minProfit).length;\\r\\n        const maxPrice = Math.max(...stockPricesByDay);\\r\\n        const arraysToWorkWith = [];\\r\\n\\r\\n        for (let i = 0; i < profitsPerTransaction.length; i++) {\\r\\n            const profitPerTranaction = profitsPerTransaction[i];\\r\\n\\r\\n            if (profitPerTranaction.potentialProfit === minProfit) {\\r\\n\\r\\n                const copyOfProfitsPerTransaction = profitsPerTransaction.map(x => x)\\r\\n                if (profitPerTranaction.price === maxPrice) {\\r\\n                    copyOfProfitsPerTransaction.splice(i - 1, 1);\\r\\n                } else {\\r\\n                    copyOfProfitsPerTransaction.splice(i, 1); // if there is a bigger price in the future, splice sell price. \\r\\n                }\\r\\n\\r\\n                arraysToWorkWith.push(copyOfProfitsPerTransaction.map(x => x.price));\\r\\n            }\\r\\n\\r\\n            if (arraysToWorkWith.length === countOfMinProfits) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        const potentialProfitsForAllTrades = []\\r\\n        for (const newArrayOfPrices of arraysToWorkWith) {\\r\\n            potentialProfitsForAllTrades.push(this.tradeStock(maxNumberOfTrades, newArrayOfPrices))\\r\\n        }\\r\\n\\r\\n        return Math.max(...potentialProfitsForAllTrades);\\r\\n\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass SpiralizeMatrixHandler {\\r\\n    type = \\\"Spiralize Matrix\\\";\\r\\n\\r\\n    solve(matrix) {\\r\\n        return this.solveRecursively(JSON.parse(JSON.stringify(matrix)));\\r\\n    }\\r\\n\\r\\n    solveRecursively(matrix, spiralOrderResult = []) {\\r\\n\\r\\n        if (matrix.length === 0) {\\r\\n            return spiralOrderResult;\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < matrix.length; i++) {\\r\\n            if (i === 0 || i === matrix.length - 1) {\\r\\n                let rowToEmpty = matrix[i];\\r\\n\\r\\n                if (i === matrix.length - 1 && i !== 0) {\\r\\n                    rowToEmpty.reverse()\\r\\n                }\\r\\n\\r\\n                for (let x = 0; x < rowToEmpty.length; x++) {\\r\\n                    const number = rowToEmpty[x];\\r\\n                    \\r\\n                    spiralOrderResult.push(number);\\r\\n                }\\r\\n\\r\\n                rowToEmpty.length = 0\\r\\n            } else {\\r\\n                let rowBeingUsed = matrix[i];\\r\\n                const number = rowBeingUsed.pop()\\r\\n\\r\\n                if(number){\\r\\n                    spiralOrderResult.push(number);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        for (let i = matrix.length - 1; i > -1; i--) {\\r\\n            if (matrix[i].length === 0) {\\r\\n                matrix.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (let i = matrix.length - 1; i > -1; i--) {\\r\\n            const row = matrix[i];\\r\\n            row.reverse();\\r\\n            spiralOrderResult.push(row.pop());\\r\\n            row.reverse();\\r\\n        }\\r\\n\\r\\n        return this.solveRecursively(matrix, spiralOrderResult)\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Encryption1Handler {\\r\\n    type = 'Encryption I: Caesar Cipher';\\r\\n\\r\\n    solve([string, shift]) {\\r\\n\\r\\n        let returnString = \\\"\\\";\\r\\n\\r\\n        if (string) {\\r\\n            for (const character of string) {\\r\\n                if (character === \\\" \\\") {\\r\\n                    returnString += \\\" \\\";\\r\\n                }\\r\\n                else {\\r\\n                    const charCode = character.charCodeAt(0);\\r\\n\\r\\n                    if (charCode) {\\r\\n                        let newCharCode = charCode - shift;\\r\\n\\r\\n                        if (newCharCode < 65) {\\r\\n                            const amountLessThan65 = 65 - newCharCode;\\r\\n                            newCharCode = 91 - amountLessThan65;\\r\\n                        }\\r\\n\\r\\n                        returnString += String.fromCharCode(newCharCode);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return returnString;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass Encryption2Handler {\\r\\n    type = 'Encryption II: Vigenère Cipher';\\r\\n\\r\\n    solve([plainText, key]) {\\r\\n\\r\\n        let encryptedText = \\\"\\\";\\r\\n\\r\\n        if(plainText){\\r\\n            let keyIndex = 0;\\r\\n\\r\\n            for (let i = 0; i < plainText.length; i++) {\\r\\n                const plainTextCharacter = plainText[i];\\r\\n\\r\\n                if(plainTextCharacter === \\\" \\\"){\\r\\n                    encryptedText += \\\" \\\";\\r\\n                } else {\\r\\n                    const keyCharCode = key[keyIndex].charCodeAt(0);\\r\\n                    const shift = keyCharCode - 65;\\r\\n\\r\\n                    const plainTextCode = plainTextCharacter.charCodeAt(0);\\r\\n                    let encryptedCharacterCode = plainTextCode + shift;\\r\\n\\r\\n                    if (encryptedCharacterCode > 90) {\\r\\n                        const amountMoreThan91 = encryptedCharacterCode - 91;\\r\\n                        encryptedCharacterCode = amountMoreThan91 + 65;\\r\\n                    }\\r\\n\\r\\n                    encryptedText += String.fromCharCode(encryptedCharacterCode);\\r\\n                }\\r\\n\\r\\n                \\r\\n                keyIndex++;\\r\\n                if(keyIndex >= key.length){\\r\\n                    keyIndex = 0;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return encryptedText;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/contracts/do.js\",\"server\":\"home\"}}],[\"scripts/contracts/get.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// let savedContractsFileNameForHuman;\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \\r\\n\\r\\nexport async function main(ns) {\\r\\n    const allContracts = [];\\r\\n\\r\\n    JSON\\r\\n        .parse(ns.read('../../data/enviroment.txt'))\\r\\n        .map(server => {\\r\\n            const hostName = server.name;\\r\\n            ns\\r\\n                .ls(hostName)\\r\\n                .filter(file => file.endsWith('.cct'))\\r\\n                .map(contract => {\\r\\n                    const cont = new Contract(\\r\\n                        hostName,\\r\\n                        contract,\\r\\n                        ns.codingcontract.getContractType(contract, hostName),\\r\\n                        ns.codingcontract.getNumTriesRemaining(contract, hostName)\\r\\n                    );\\r\\n\\r\\n                    allContracts.push(cont);\\r\\n                });\\r\\n        });\\r\\n    \\r\\n\\r\\n    ns.rm(thisRoundsContractsFileName);\\r\\n    ns.write(thisRoundsContractsFileName, JSON.stringify(allContracts), \\\"W\\\");\\r\\n}\\r\\n\\r\\nclass Contract {\\r\\n    constructor(server, name, type, attemptsLeft, input, description) {\\r\\n        this.server = server;\\r\\n        this.name = name;\\r\\n        this.type = type;\\r\\n        this.attemptsLeft = attemptsLeft;\\r\\n        this.input = input;\\r\\n        this.description = description;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/contracts/get.js\",\"server\":\"home\"}}],[\"scripts/contracts/populate-description.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const contracts = JSON.parse(ns.read(thisRoundsContractsFileName))\\r\\n\\r\\n    for (const contract of contracts) {\\r\\n        const hostName = contract.server;\\r\\n        const contractName = contract.name;\\r\\n        contract.description = ns.codingcontract.getDescription(contractName, hostName);\\r\\n    }\\r\\n\\r\\n    ns.rm(thisRoundsContractsFileName);\\r\\n    ns.write(thisRoundsContractsFileName, JSON.stringify(contracts), \\\"W\\\");\\r\\n}\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \",\"filename\":\"scripts/contracts/populate-description.js\",\"server\":\"home\"}}],[\"scripts/contracts/populate-input.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const contracts = JSON.parse(ns.read(thisRoundsContractsFileName))\\r\\n\\r\\n    for (const contract of contracts) {\\r\\n        const hostName = contract.server;\\r\\n        const contractName = contract.name;\\r\\n        contract.input = ns.codingcontract.getData(contractName, hostName);\\r\\n    }\\r\\n\\r\\n    ns.rm(thisRoundsContractsFileName);\\r\\n    ns.write(thisRoundsContractsFileName, JSON.stringify(contracts), \\\"W\\\");\\r\\n}\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \",\"filename\":\"scripts/contracts/populate-input.js\",\"server\":\"home\"}}],[\"scripts/contracts/save-contracts-for-thomas.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \\r\\nlet savedContractsFileNameForHuman;\\r\\n\\r\\nexport async function main(ns) {\\r\\n\\r\\n    let savedContracts;\\r\\n\\r\\n    const contractsFromThisRound = JSON.parse(ns.read(thisRoundsContractsFileName));\\r\\n\\r\\n    if(savedContractsFileNameForHuman){\\r\\n        savedContracts = JSON.parse(ns.read(savedContractsFileNameForHuman));\\r\\n    }\\r\\n\\r\\n    if (!savedContracts || contractsFromThisRound.length === 0 && savedContracts.length > 0){\\r\\n        const now = new Date();\\r\\n        savedContractsFileNameForHuman = `contracts/${now.toISOString()}.txt`\\r\\n    }\\r\\n\\r\\n    ns.rm(savedContractsFileNameForHuman);\\r\\n    ns.write(savedContractsFileNameForHuman, JSON.stringify(contractsFromThisRound), \\\"W\\\");\\r\\n}\",\"filename\":\"scripts/contracts/save-contracts-for-thomas.js\",\"server\":\"home\"}}],[\"scripts/corporations/start-company.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if(ns.corporation.hasCorporation()){\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if(moneyOnHome > 200_000_000_000){\\r\\n        ns.corporation.createCorporation(\\\"Gidget's Keiretsu\\\", true)\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\",\"filename\":\"scripts/corporations/start-company.js\",\"server\":\"home\"}}],[\"scripts/hacking/advanced-dispatch.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const nameOfrecordOfWhoIsBeingHacked = 'data/recordOfWhoIsBeingHacked.txt';\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\";\\r\\n\\r\\n    const hackScript = 'scripts/hacking/hack-until-worked.js';\\r\\n    const growScript = 'scripts/hacking/grow.js';\\r\\n    const weakenScript = 'scripts/hacking/weaken.js';\\r\\n\\r\\n    let memoryLimited = false;\\r\\n    if(ns.fileExists('data/ramObservations.txt') || ns.fileExists('buyOrUpgradeServerFlag.txt')){\\r\\n        memoryLimited = true;\\r\\n    }\\r\\n\\r\\n    const homeMemoryLimitations = JSON.parse(ns.read(\\\"data/ramToReserveOnHome.txt\\\"));\\r\\n\\r\\n    let batchTargets = [];\\r\\n\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        const batchQueue = JSON.parse(ns.read(batchQueuesFileName));\\r\\n        batchTargets = batchQueue.map(x => x[0]);\\r\\n    }\\r\\n\\r\\n    let recordOfWhoIsBeingHacked = new Map();\\r\\n\\r\\n    if (ns.fileExists(nameOfrecordOfWhoIsBeingHacked)) {\\r\\n        recordOfWhoIsBeingHacked = new Map(JSON.parse(ns.read(nameOfrecordOfWhoIsBeingHacked)));\\r\\n    }\\r\\n\\r\\n    for (const recordKey of recordOfWhoIsBeingHacked.keys()) {\\r\\n        const record = recordOfWhoIsBeingHacked.get(recordKey);\\r\\n        if (record.pid === 0) {\\r\\n            recordOfWhoIsBeingHacked.delete(recordKey);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n\\r\\n    const allHackedMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    let allMachinesByOrderOfValue = allHackedMachines\\r\\n        .filter(x => !x.server.purchasedByPlayer && !batchTargets.includes(x.name) && x.server.moneyMax > 0)\\r\\n        .sort((a, b) => b.server.moneyMax - a.server.moneyMax)\\r\\n        .map(x => new HackedRecord(\\r\\n            x.name,\\r\\n            x.server.moneyMax,\\r\\n            x.server.minDifficulty,\\r\\n            x.server.hackDifficulty,\\r\\n            x.server.moneyAvailable,\\r\\n        ))\\r\\n\\r\\n    if(memoryLimited){\\r\\n        allMachinesByOrderOfValue = allMachinesByOrderOfValue.slice(0, 15);\\r\\n    }\\r\\n\\r\\n    cleanProcessesAttackingBatchTarget(ns, recordOfWhoIsBeingHacked, batchTargets);\\r\\n    \\r\\n    cleanRecordOfWhoIsBeingHacked(ns, recordOfWhoIsBeingHacked);\\r\\n\\r\\n    const machinesNextInQueueToHack = getMachinesToHack(allMachinesByOrderOfValue, recordOfWhoIsBeingHacked, ns);\\r\\n\\r\\n    const hackQueue = [];\\r\\n    const growAndWeakenQueue = [];\\r\\n\\r\\n    machinesNextInQueueToHack.forEach(machineInQuestion => {\\r\\n        if (machineInQuestion.needsWeakening() || machineInQuestion.needsGrowing()) {\\r\\n            growAndWeakenQueue.push(machineInQuestion);\\r\\n        } else {\\r\\n            hackQueue.push(machineInQuestion);\\r\\n        }\\r\\n    });\\r\\n\\r\\n    const ramNeededForOneHackThread = ns.getScriptRam(hackScript);\\r\\n\\r\\n    hackQueue.forEach(target => {\\r\\n\\r\\n        let numberOfThreads = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable));\\r\\n        const ramNeeded = ramNeededForOneHackThread * numberOfThreads;\\r\\n        let machineToRunOn = getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations);\\r\\n\\r\\n        if (machineToRunOn && numberOfThreads > 0) {\\r\\n            ns.scp(hackScript, machineToRunOn.hostname);\\r\\n            const pid = ns.exec(hackScript, machineToRunOn.hostname, numberOfThreads, target.name);\\r\\n            if (pid !== 0) {\\r\\n                target.hacking();\\r\\n                target.machineRunningOn = machineToRunOn.hostname;\\r\\n                target.pid = pid;\\r\\n                recordOfWhoIsBeingHacked.set(target.name, target);\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n\\r\\n\\r\\n    const ramNeededForWeaken = ns.getScriptRam(weakenScript);\\r\\n    const ramNeededForGrow = ns.getScriptRam(growScript);\\r\\n    growAndWeakenQueue.map(target => {\\r\\n        let machineToRunOn;\\r\\n        let threadsNeeded;\\r\\n        let script;\\r\\n\\r\\n        if (target.needsGrowing()) {\\r\\n            target.growing();\\r\\n\\r\\n            script = growScript;\\r\\n            const serverToHack = getServer(ns, target.name, homeMemoryLimitations);\\r\\n            const player = ns.getPlayer();\\r\\n\\r\\n            if (ns.fileExists('Formulas.exe')) {\\r\\n                threadsNeeded = Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, 1));\\r\\n            } else {\\r\\n                threadsNeeded = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable)) * 5;\\r\\n\\r\\n                if (threadsNeeded === 0) {\\r\\n                    threadsNeeded = 5000;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            machineToRunOn = getMachineWithEnoughRam(ns, threadsNeeded * ramNeededForGrow, enviroment, homeMemoryLimitations);\\r\\n\\r\\n            if (!machineToRunOn) {\\r\\n                [threadsNeeded, machineToRunOn] = getMachineWithNumberOfThreads(ns, enviroment, threadsNeeded, ramNeededForGrow, homeMemoryLimitations);\\r\\n            }\\r\\n\\r\\n            if (machineToRunOn && machineToRunOn.cpuCores > 1 && ns.fileExists('Formulas.exe')) {\\r\\n                threadsNeeded = Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, machineToRunOn.cpuCores));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (target.needsWeakening()) {\\r\\n            target.weakening();\\r\\n\\r\\n            script = weakenScript;\\r\\n            const amountToWeaken = target.hackDifficulty - target.minDifficulty;\\r\\n\\r\\n            threadsNeeded = getNumberOfThreadsToWeaken(ns, 1, amountToWeaken);\\r\\n\\r\\n            machineToRunOn = getMachineWithEnoughRam(ns, threadsNeeded * ramNeededForWeaken, enviroment, homeMemoryLimitations);\\r\\n\\r\\n            if (!machineToRunOn) {\\r\\n                [threadsNeeded, machineToRunOn] = getMachineWithNumberOfThreads(ns, enviroment, threadsNeeded, ramNeededForWeaken, homeMemoryLimitations);\\r\\n            }\\r\\n\\r\\n            if (machineToRunOn && machineToRunOn.cpuCores > 1) {\\r\\n                threadsNeeded = getNumberOfThreadsToWeaken(ns, machineToRunOn.cpuCores, amountToWeaken);\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n\\r\\n        if (machineToRunOn && threadsNeeded > 0) {\\r\\n            ns.scp(script, machineToRunOn.hostname);\\r\\n            const pid = ns.exec(script, machineToRunOn.hostname, threadsNeeded, target.name);\\r\\n\\r\\n            if (pid !== 0) {\\r\\n                target.machineRunningOn = machineToRunOn.hostname;\\r\\n                target.pid = pid;\\r\\n\\r\\n                recordOfWhoIsBeingHacked.set(target.name, target);\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n\\r\\n    ns.rm(nameOfrecordOfWhoIsBeingHacked);\\r\\n    ns.write(nameOfrecordOfWhoIsBeingHacked, JSON.stringify(Array.from(recordOfWhoIsBeingHacked.entries()), \\\"W\\\"));\\r\\n\\r\\n    function cleanProcessesAttackingBatchTarget(ns, recordOfWhoIsBeingHacked, batchTargets) {\\r\\n        for (const machineHackin of recordOfWhoIsBeingHacked) {\\r\\n            const whoTheyHackin = machineHackin[0];\\r\\n\\r\\n            if (batchTargets.includes(whoTheyHackin)) {\\r\\n                ns.kill(recordOfWhoIsBeingHacked.get(whoTheyHackin).pid);\\r\\n                recordOfWhoIsBeingHacked.delete(whoTheyHackin);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getMachineWithNumberOfThreads(ns, enviroment, threads, ramCostPerThread, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n    const buyOrUpgradeServerFlag = 'buyOrUpgradeServerFlag.txt';\\r\\n    let originalAmountNeeded = ramCostPerThread * threads;\\r\\n\\r\\n    let globalMaxAmountNeeded = 0;\\r\\n\\r\\n    if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n        globalMaxAmountNeeded = JSON.parse(ns.read(buyOrUpgradeServerFlag));\\r\\n    }\\r\\n\\r\\n    if (originalAmountNeeded > globalMaxAmountNeeded) {\\r\\n        globalMaxAmountNeeded = originalAmountNeeded;\\r\\n        ns.rm(buyOrUpgradeServerFlag);\\r\\n        ns.write(buyOrUpgradeServerFlag, globalMaxAmountNeeded, \\\"W\\\");\\r\\n    }\\r\\n\\r\\n    while (threads > 0 && !machineToRunOn) {\\r\\n        threads--;\\r\\n\\r\\n        machineToRunOn = getMachineWithEnoughRam(ns, threads * ramCostPerThread, enviroment, homeMemoryLimitations)\\r\\n    }\\r\\n\\r\\n    return [threads, machineToRunOn];\\r\\n}\\r\\n\\r\\nfunction getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n\\r\\n    const allHackableMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    allHackableMachines.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const machinesWithRamAvailable = allHackableMachines\\r\\n        .filter(x => x.server.ramUsed < x.server.maxRam && x.server.maxRam !== 0);\\r\\n\\r\\n    const serversWithEnoughRam = machinesWithRamAvailable\\r\\n        .filter(x => (x.server.maxRam - x.server.ramUsed) > ramNeeded)\\r\\n        .sort((b, a) => b.server.maxRam - a.server.maxRam);\\r\\n\\r\\n    for (const potentialServerToRun of serversWithEnoughRam) {\\r\\n        const server = getServer(ns, potentialServerToRun.name, homeMemoryLimitations);\\r\\n        const freeRam = server.maxRam - server.ramUsed;\\r\\n        if (freeRam > ramNeeded) {\\r\\n            machineToRunOn = server;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machineToRunOn;\\r\\n}\\r\\n\\r\\n\\r\\nfunction getServer(ns, serverName, homeMemoryLimitations) {\\r\\n    const server = ns.getServer(serverName);\\r\\n\\r\\n    if (serverName === \\\"home\\\") {\\r\\n\\r\\n        let ramToReserve = homeMemoryLimitations.ramToReserve;\\r\\n\\r\\n        if(server.maxRam < ramToReserve){\\r\\n            ramToReserve = homeMemoryLimitations.ramToReserveInLimitedEnvironment;\\r\\n        }\\r\\n\\r\\n        server.maxRam -= ramToReserve;\\r\\n        server.ramUsed -= ramToReserve;\\r\\n\\r\\n        if (server.ramUsed < 0) {\\r\\n            server.ramUsed = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return server;\\r\\n}\\r\\n\\r\\nfunction getMachinesToHack(hackableMachinesInTheEnvironment, recordOfWhoIsBeingHacked, ns) {\\r\\n    const machinesNextInQueueToHack = [];\\r\\n    const namesOfMachinesBeingHacked = Array.from(recordOfWhoIsBeingHacked.keys());\\r\\n\\r\\n    for (const hackableMachine of hackableMachinesInTheEnvironment) {\\r\\n        if (!namesOfMachinesBeingHacked.includes(hackableMachine.name)) {\\r\\n            machinesNextInQueueToHack.push(hackableMachine);\\r\\n        } else {\\r\\n            const recordOfHackin = recordOfWhoIsBeingHacked.get(hackableMachine.name);\\r\\n            const moneyChange = recordOfHackin.moneyAvailable - hackableMachine.moneyAvailable;\\r\\n            const difficultyChange = recordOfHackin.hackDifficulty - hackableMachine.hackDifficulty;\\r\\n\\r\\n            if (moneyChange !== 0 || difficultyChange !== 0) {\\r\\n                machinesNextInQueueToHack.push(hackableMachine);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machinesNextInQueueToHack;\\r\\n}\\r\\n\\r\\nexport class HackedRecord {\\r\\n    constructor(name, maxMoney, minDifficulty, hackDifficulty, moneyAvailable) {\\r\\n        this.name = name;\\r\\n        this.moneyThreshhold = maxMoney * 0.75;\\r\\n        this.securityThreshholdTarget = minDifficulty + 5;\\r\\n        this.hackDifficulty = hackDifficulty;\\r\\n        this.moneyAvailable = moneyAvailable;\\r\\n        this.minDifficulty = minDifficulty;\\r\\n        this.machineRunningOn;\\r\\n        this.pid;\\r\\n\\r\\n        this.isWeakening = false;\\r\\n        this.isGrowing = false;\\r\\n        this.isHacking = false;\\r\\n    }\\r\\n\\r\\n    needsWeakening() {\\r\\n        return this.hackDifficulty > this.securityThreshholdTarget;\\r\\n    }\\r\\n\\r\\n    needsGrowing() {\\r\\n        return this.moneyAvailable < this.moneyThreshhold;\\r\\n    }\\r\\n\\r\\n    weakening() {\\r\\n        this.isWeakening = true;\\r\\n        this.isGrowing = false;\\r\\n        this.isHacking = false;\\r\\n    }\\r\\n\\r\\n    growing() {\\r\\n        this.isWeakening = false;\\r\\n        this.isGrowing = true;\\r\\n        this.isHacking = false;\\r\\n    }\\r\\n\\r\\n    hacking() {\\r\\n        this.isWeakening = false;\\r\\n        this.isGrowing = false;\\r\\n        this.isHacking = true;\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getNumberOfThreadsToWeaken(ns, cpuCores, amountToWeaken) {\\r\\n    let numberOfThreadsToWeaken = 0;\\r\\n    let foundNumberOfThreads = false;\\r\\n    while (!foundNumberOfThreads) {\\r\\n        numberOfThreadsToWeaken++;\\r\\n\\r\\n        const amountNumberOfThreadsWillWeaken = Math.ceil(ns.weakenAnalyze(numberOfThreadsToWeaken, cpuCores));\\r\\n        if (amountNumberOfThreadsWillWeaken > amountToWeaken) {\\r\\n            foundNumberOfThreads = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //add a small margin\\r\\n    numberOfThreadsToWeaken += 20;\\r\\n    return numberOfThreadsToWeaken;\\r\\n}\\r\\n\\r\\nfunction cleanRecordOfWhoIsBeingHacked(ns, recordOfWhoIsBeingHacked) {\\r\\n    for (const key of recordOfWhoIsBeingHacked.keys()) {\\r\\n        const record = recordOfWhoIsBeingHacked.get(key);\\r\\n        \\r\\n        if(!ns.isRunning(record.pid)){\\r\\n            recordOfWhoIsBeingHacked.delete(key);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/advanced-dispatch.js\",\"server\":\"home\"}}],[\"scripts/hacking/batch-dispatch.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let failuresThisRun = 0;\\r\\nlet successesThisRun = 0;\\r\\n\\r\\nlet lastTimeVisited = new Date();\\r\\nlet secondsBetweenVisits = [];\\r\\nlet lastRecordedToConsole = new Date();\\r\\n\\r\\nlet visitsToFunction = 0;\\r\\n\\r\\nlet countOfSuccesses = [];\\r\\nlet countOfFailures = [];\\r\\nlet averageErrorRateOver10Minutes = 1;\\r\\nlet errorRateAtWhichWeAllowNewThings = 0.1;\\r\\n\\r\\nexport async function main(ns) {\\r\\n    visitsToFunction++;\\r\\n\\r\\n    const buyOrUpgradeServerFlagFile = 'buyOrUpgradeServerFlag.txt';\\r\\n    const memoryConstrained = ns.fileExists('data/ramObservations.txt') || ns.fileExists(buyOrUpgradeServerFlagFile);\\r\\n\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\"\\r\\n\\r\\n    let batchQueueForDifferentTargets = new Map();\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        batchQueueForDifferentTargets = new Map(JSON.parse(ns.read(batchQueuesFileName)));\\r\\n    }\\r\\n\\r\\n    const homeMemoryLimitations = JSON.parse(ns.read(\\\"data/ramToReserveOnHome.txt\\\"));\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n\\r\\n    const playerServers = enviroment\\r\\n        .filter(x => x.server.purchasedByPlayer);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    playerServers.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const totalBoughtMemory = playerServers.reduce((acc, x) => acc + x.server.maxRam, 0);\\r\\n\\r\\n    const ramNeededForBatchesFile = \\\"data/ramNeededToStartBatches.txt\\\";\\r\\n    const memoryNeededForBatches = 105_000;\\r\\n\\r\\n    if (totalBoughtMemory < memoryNeededForBatches) {\\r\\n        const ramNeededToStartBatches = Math.round(memoryNeededForBatches - totalBoughtMemory);\\r\\n        ns.rm(ramNeededForBatchesFile);\\r\\n        ns.write(ramNeededForBatchesFile, ramNeededToStartBatches, \\\"W\\\");\\r\\n\\r\\n        if (visitsToFunction > 100) {\\r\\n            visitsToFunction = 0;\\r\\n            ns.toast(`Ram Needed to Start Batches: ${ramNeededToStartBatches}`, \\\"warning\\\", 180000)\\r\\n        }\\r\\n\\r\\n        ns.run('scripts/hacking/memory-starved-dispatch.js');\\r\\n        return;\\r\\n    } else {\\r\\n        ns.rm(ramNeededForBatchesFile);\\r\\n    }\\r\\n\\r\\n    const targetNames = Array.from(batchQueueForDifferentTargets.keys());\\r\\n    const player = ns.getPlayer();\\r\\n\\r\\n    giveBatchQueueStructure(targetNames, batchQueueForDifferentTargets);\\r\\n    cleanFinishedAndPoisonedJobsFromQueue(targetNames, batchQueueForDifferentTargets, ns);\\r\\n\\r\\n    const noMoreInvestingForEndGame = ns.fileExists(\\\"stopInvesting.txt\\\");\\r\\n\\r\\n    const anyBatchNotPrepping = targetNames\\r\\n        .map(x => batchQueueForDifferentTargets.get(x))\\r\\n        .filter(x => !x.prepStage)\\r\\n        .length > 0;\\r\\n\\r\\n\\r\\n    for (const nameOfTarget of targetNames) {\\r\\n        const targetServer = ns.getServer(nameOfTarget);\\r\\n        const batchForTarget = batchQueueForDifferentTargets.get(nameOfTarget);\\r\\n\\r\\n        if (!noMoreInvestingForEndGame) {\\r\\n            prepServerForBatching(targetServer, batchForTarget, ns, player, nameOfTarget, anyBatchNotPrepping);\\r\\n        }\\r\\n\\r\\n        createBatchesOfJobs(batchForTarget, ns, targetServer, player);\\r\\n    }\\r\\n\\r\\n    await executeJobs(ns, targetNames, batchQueueForDifferentTargets, player, enviroment, homeMemoryLimitations);\\r\\n    addNewTargetsToQueueIfNeeded(batchQueueForDifferentTargets, targetNames, ns, enviroment, player, noMoreInvestingForEndGame, homeMemoryLimitations);\\r\\n    adjustTimingsOrOutrightDeleteDependingOnReliability(ns, batchQueueForDifferentTargets, targetNames);\\r\\n\\r\\n    ns.rm(batchQueuesFileName);\\r\\n    ns.write(batchQueuesFileName, JSON.stringify(Array.from(batchQueueForDifferentTargets.entries()), \\\"W\\\"));\\r\\n\\r\\n    const total = failuresThisRun + successesThisRun;\\r\\n    const now = new Date();\\r\\n    const secondsSinceLastVisit = Math.abs(now.getTime() - lastTimeVisited.getTime()) / 1000;\\r\\n    lastTimeVisited = now;\\r\\n    if (secondsSinceLastVisit !== 0) {\\r\\n        secondsBetweenVisits.push(secondsSinceLastVisit);\\r\\n    }\\r\\n\\r\\n\\r\\n    const moneyWeHaveNow = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (now.getMinutes() !== lastRecordedToConsole.getMinutes() && total > 0) {\\r\\n        const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n\\r\\n        const errorRate = 1 - (successesThisRun / total);\\r\\n\\r\\n        if (errorRate > 0.03) {\\r\\n            ns.toast(`${timeStamp} Error Rate in batches ${errorRate.toLocaleString(undefined, { style: 'percent', minimumFractionDigits: 2 })}`, \\\"error\\\", 60000);\\r\\n        }\\r\\n\\r\\n        const averageTimeBetweenVisits = secondsBetweenVisits.reduce((acc, b) => acc + b, 0) / secondsBetweenVisits.length;\\r\\n\\r\\n        if (averageTimeBetweenVisits > 3) {\\r\\n            ns.toast(`${timeStamp} Average of ${averageTimeBetweenVisits.toFixed(2)} seconds between visits`, \\\"warning\\\", null)\\r\\n        }\\r\\n\\r\\n        const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n        let stockMarketReserveMoney = new ReserveForTrading();\\r\\n        if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n            stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n        }\\r\\n\\r\\n        const formatter = new Intl.NumberFormat('en-US', {\\r\\n            style: 'currency',\\r\\n            currency: 'USD',\\r\\n        });\\r\\n\\r\\n        const moneyFormatted = formatter.format(moneyWeHaveNow + stockMarketReserveMoney.moneyInvested);\\r\\n\\r\\n        let consoleUpdate = `${timeStamp} Money we have now: ${moneyFormatted} | Number of targeted server: ${String(targetNames.length).padStart(2, 0)}`;\\r\\n\\r\\n        if (memoryConstrained) {\\r\\n            consoleUpdate += \\\" | Memory Constrained\\\";\\r\\n        }\\r\\n\\r\\n        ns.tprint(consoleUpdate);\\r\\n\\r\\n        const reliabilityForBatchFile = 'data/reliabilityForEvery100Batches.txt';\\r\\n        let batchReliability = [];\\r\\n\\r\\n        if (ns.fileExists(reliabilityForBatchFile)) {\\r\\n            batchReliability = JSON.parse(ns.read(reliabilityForBatchFile));\\r\\n        }\\r\\n\\r\\n        batchReliability.push({ errorRate, averageTimeBetweenVisits, now, moneyWeHaveNow, numberOfTargetedServers: targetNames.length });\\r\\n\\r\\n\\r\\n        ns.rm(reliabilityForBatchFile);\\r\\n        ns.write(reliabilityForBatchFile, JSON.stringify(batchReliability), \\\"W\\\");\\r\\n\\r\\n\\r\\n        countOfFailures.push(failuresThisRun);\\r\\n        countOfSuccesses.push(successesThisRun);\\r\\n\\r\\n        if (countOfFailures.length > 10) {\\r\\n            countOfFailures.shift();\\r\\n        }\\r\\n\\r\\n        if (countOfSuccesses.length > 10) {\\r\\n            countOfSuccesses.shift();\\r\\n        }\\r\\n\\r\\n        const successesIn10Minutes = countOfSuccesses.reduce((acc, b) => acc + b, 0);\\r\\n        const failuresIn10Minutes = countOfFailures.reduce((acc, b) => acc + b, 0);\\r\\n        const totalIn10Minutes = successesIn10Minutes + failuresIn10Minutes;\\r\\n\\r\\n        averageErrorRateOver10Minutes = 1 - (successesIn10Minutes / totalIn10Minutes);\\r\\n\\r\\n        if (averageErrorRateOver10Minutes > errorRateAtWhichWeAllowNewThings) {\\r\\n            ns.toast(`${timeStamp} Error Rate over 10 minutes is: ${averageErrorRateOver10Minutes.toLocaleString(undefined, { style: 'percent', minimumFractionDigits: 2 })}`, \\\"error\\\", 15000);\\r\\n        }\\r\\n\\r\\n\\r\\n        failuresThisRun = 0;\\r\\n        successesThisRun = 0;\\r\\n        secondsBetweenVisits.length = 0;\\r\\n        lastRecordedToConsole = now;\\r\\n    }\\r\\n\\r\\n    if (moneyWeHaveNow > 1_000_000_000_000 ||\\r\\n        homeServer.maxRam - homeServer.ramUsed > 300000 ||\\r\\n        targetNames\\r\\n            .map(x => batchQueueForDifferentTargets.get(x))\\r\\n            .every(x => !x.targetMachineSaturatedWithAttacks)) {\\r\\n        if (!memoryConstrained) {\\r\\n            ns.run('scripts/hacking/advanced-dispatch.js');\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nclass BatchQueueForTarget {\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    targetMachineSaturatedWithAttacks = false;\\r\\n\\r\\n    prepStage = true;\\r\\n    weakeningDoneAfter;\\r\\n    successfulWeakening = false;\\r\\n    growDoneAfter;\\r\\n    successfulGrowing = false;\\r\\n    hackDoneAfter;\\r\\n    successfulHacking = false;\\r\\n\\r\\n    securityWeNeedToReduceAfterFullHack;\\r\\n    securityWeNeedToReduceAfterFullGrowth;\\r\\n    originalNumberOfThreadsForFullMoney;\\r\\n\\r\\n    successes = 0;\\r\\n    failures = 0;\\r\\n    successesInTheLastHour = 0;\\r\\n    failuresInTheLastHour = 0;\\r\\n    lastResetHour = 0\\r\\n\\r\\n    executionWindowSizeInSeconds = 4;\\r\\n\\r\\n    batchesQueue = [];\\r\\n\\r\\n    lastFailure;\\r\\n\\r\\n    getAllocatedMemory(machineRunningOn) {\\r\\n        return this.batchesQueue\\r\\n            .reduce((acc, x) => acc.concat(x.jobs), [])\\r\\n            .filter(x => x.machineRunningOn === machineRunningOn)\\r\\n            .reduce((acc, x) => acc + x, 0);\\r\\n    }\\r\\n\\r\\n    thereAreNoJobsRunningAfter() {\\r\\n        return Math.max(...this.batchesQueue.map(x => x.wholeBatchFinishsBefore()));\\r\\n    }\\r\\n}\\r\\n\\r\\nclass BatchOfJobs {\\r\\n    jobs = [];\\r\\n    //6 second window? 2 cycles seems like enough for each step.\\r\\n\\r\\n    startTime;\\r\\n    poisonedBatch = false;\\r\\n\\r\\n    wholeBatchFinishsBefore() {\\r\\n        return Math.max(...this.jobs.map(x => new Date(x.endBefore)))\\r\\n    }\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n}\\r\\n\\r\\nclass JobHasTo {\\r\\n    executing = false;\\r\\n    ramCost = 0;\\r\\n    machineRunningOn;\\r\\n    pid;\\r\\n    executedAt;\\r\\n    expectedEndTime;\\r\\n\\r\\n    firstLookStartedNowEndAt;\\r\\n\\r\\n    lastMissForDoneBeforeWindow;\\r\\n    firstMissForAfterWindow;\\r\\n\\r\\n    constructor(endAfter, endBefore, type) {\\r\\n        this.endAfter = endAfter;\\r\\n        this.endBefore = endBefore;\\r\\n        this.type = type;\\r\\n        // this.types = [\\\"grow\\\", \\\"hack\\\", \\\"weaken-after-hack\\\", \\\"weaken-after-grow\\\",\\r\\n        //     \\\"weaken-dynamic\\\", \\\"grow-dynamic\\\", \\\"hack-dynamic\\\"]\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction adjustTimingsOrOutrightDeleteDependingOnReliability(ns, batchQueueForDifferentTargets, targetNames) {\\r\\n    const currentTime = new Date();\\r\\n    let countOfDeleted = 0;\\r\\n\\r\\n    for (const nameOfTarget of targetNames) {\\r\\n        const queueOfBatches = batchQueueForDifferentTargets.get(nameOfTarget);\\r\\n        const currentHour = currentTime.getHours()\\r\\n\\r\\n        if (currentHour !== queueOfBatches.lastResetHour) {\\r\\n            if (queueOfBatches.failuresInTheLastHour === 0 && queueOfBatches.successesInTheLastHour > 0 && queueOfBatches.executionWindowSizeInSeconds > 2) {\\r\\n                queueOfBatches.executionWindowSizeInSeconds--;\\r\\n            }\\r\\n\\r\\n            const totalRunsThisHour = queueOfBatches.successesInTheLastHour + queueOfBatches.failuresInTheLastHour;\\r\\n            const ratioOfFailuresThisHour = 1 - (queueOfBatches.successesInTheLastHour / totalRunsThisHour);\\r\\n\\r\\n            if (ratioOfFailuresThisHour > 0.1) {\\r\\n                queueOfBatches.executionWindowSizeInSeconds++;\\r\\n            }\\r\\n\\r\\n\\r\\n            queueOfBatches.lastResetHour = currentHour;\\r\\n            queueOfBatches.successesInTheLastHour = 0;\\r\\n            queueOfBatches.failuresInTheLastHour = 0;\\r\\n\\r\\n            if (ratioOfFailuresThisHour > 0.9 && totalRunsThisHour > 10 && countOfDeleted < 2 && targetNames.length > 2) {\\r\\n                for (const batch of queueOfBatches.batchesQueue) {\\r\\n                    batch.jobs.map(x => {\\r\\n                        if (x.pid) {\\r\\n                            ns.kill(x.pid);\\r\\n                        }\\r\\n                    });\\r\\n\\r\\n                }\\r\\n\\r\\n                batchQueueForDifferentTargets.delete(nameOfTarget);\\r\\n                ns.tprint(`Deleted ${nameOfTarget} from batchQueue for failing too often. Ratio of Failure: ${ratioOfFailuresThisHour}. Total Runs: ${totalRunsThisHour}`);\\r\\n                countOfDeleted++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction createBatchesOfJobs(batchForTarget, ns, targetServer, player) {\\r\\n    if (batchForTarget.prepStage === false) {\\r\\n\\r\\n        if (batchForTarget.batchesQueue.length === 0 || batchForTarget.batchesQueue.every(x => new Date() > new Date(x.startTime))) {\\r\\n            const batch = new BatchOfJobs();\\r\\n\\r\\n            const secondsToPadEndTime = batchForTarget.executionWindowSizeInSeconds;\\r\\n            const msToPadStartTime = 1;\\r\\n\\r\\n            const noJobsRunningAfter = batchForTarget.thereAreNoJobsRunningAfter();\\r\\n\\r\\n            let noMoreJobsAfter = new Date(noJobsRunningAfter);\\r\\n\\r\\n            const defaultStartTime = getWeakenEndDate(ns, targetServer, player, batchForTarget.securityWeNeedToReduceAfterFullGrowth);\\r\\n\\r\\n            if (noJobsRunningAfter < 0 || defaultStartTime > noMoreJobsAfter) {\\r\\n\\r\\n                addSecondsToDate(defaultStartTime, secondsToPadEndTime);\\r\\n                const defaultEndTime = new Date(defaultStartTime);\\r\\n\\r\\n                noMoreJobsAfter = defaultEndTime;\\r\\n            }\\r\\n\\r\\n            const hackStart = createNewDataFromOldDateAndAddMilliseconds(noMoreJobsAfter, msToPadStartTime);\\r\\n            const hackEnd = createNewDataFromOldDateAndAddSeconds(hackStart, secondsToPadEndTime);\\r\\n\\r\\n            const weakenAfterhackStart = createNewDataFromOldDateAndAddMilliseconds(hackEnd, msToPadStartTime);\\r\\n            const weakenAfterHackEnd = createNewDataFromOldDateAndAddSeconds(weakenAfterhackStart, secondsToPadEndTime);\\r\\n\\r\\n            const growStart = createNewDataFromOldDateAndAddMilliseconds(weakenAfterHackEnd, msToPadStartTime);\\r\\n            const growEnd = createNewDataFromOldDateAndAddSeconds(growStart, secondsToPadEndTime);\\r\\n\\r\\n            const weakenAfterGrowStart = createNewDataFromOldDateAndAddMilliseconds(growEnd, msToPadStartTime);\\r\\n            const weakenAfterGrowEnd = createNewDataFromOldDateAndAddSeconds(weakenAfterGrowStart, secondsToPadEndTime);\\r\\n\\r\\n            // get them in the order they are executed. \\r\\n            batch.jobs.push(new JobHasTo(weakenAfterGrowStart, weakenAfterGrowEnd, \\\"weaken-after-grow\\\"));\\r\\n            batch.jobs.push(new JobHasTo(weakenAfterhackStart, weakenAfterHackEnd, \\\"weaken-after-hack\\\"));\\r\\n            batch.jobs.push(new JobHasTo(growStart, growEnd, \\\"grow\\\"));\\r\\n            batch.jobs.push(new JobHasTo(hackStart, hackEnd, \\\"hack\\\"));\\r\\n\\r\\n            batchForTarget.batchesQueue.push(batch);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function executeJobs(ns, targetNames, batchQueueForDifferentTargets, player, environment, homeMemoryLimitations) {\\r\\n    const hackScript = 'scripts/hacking/hack.js';\\r\\n    const growScript = 'scripts/hacking/grow.js';\\r\\n    const weakenScript = 'scripts/hacking/weaken.js';\\r\\n\\r\\n    const ramNeededForWeaken = ns.getScriptRam(weakenScript);\\r\\n    const ramNeededForGrow = ns.getScriptRam(growScript);\\r\\n    const ramNeededForHack = ns.getScriptRam(hackScript);\\r\\n\\r\\n    for (const nameOfTarget of targetNames) {\\r\\n        const batchForTarget = batchQueueForDifferentTargets.get(nameOfTarget);\\r\\n\\r\\n        for (let i = 0; i < batchForTarget.batchesQueue.length; i++) {\\r\\n            const batchOfJobs = batchForTarget.batchesQueue[i];\\r\\n\\r\\n            for (let y = 0; y < batchOfJobs.jobs.length; y++) {\\r\\n                const job = batchOfJobs.jobs[y];\\r\\n\\r\\n                if (job.executing === false) {\\r\\n\\r\\n                    const targetServer = ns.getServer(nameOfTarget);\\r\\n\\r\\n                    let machineToRunOn;\\r\\n                    let script;\\r\\n                    let numberOfThreads;\\r\\n                    let ramCost;\\r\\n                    let shouldExecute = false;\\r\\n\\r\\n                    if (job.type.startsWith(\\\"weaken\\\")) {\\r\\n                        let amountToWeaken = targetServer.hackDifficulty - targetServer.minDifficulty;\\r\\n\\r\\n                        if (job.type === \\\"weaken-after-hack\\\") {\\r\\n                            amountToWeaken = batchForTarget.securityWeNeedToReduceAfterFullHack;\\r\\n                        }\\r\\n\\r\\n                        if (job.type === \\\"weaken-after-grow\\\") {\\r\\n                            amountToWeaken = batchForTarget.securityWeNeedToReduceAfterFullGrowth;\\r\\n                        }\\r\\n\\r\\n                        const ifStartedNowWeakenDoneAt = getWeakenEndDate(ns, targetServer, player, amountToWeaken);\\r\\n                        shouldExecute = shouldWeExecute(job, ifStartedNowWeakenDoneAt, batchOfJobs, ns);\\r\\n\\r\\n                        if (shouldExecute === false) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        script = weakenScript;\\r\\n\\r\\n\\r\\n                        numberOfThreads = getNumberOfThreadsToWeaken(ns, 1, amountToWeaken);\\r\\n                        ramCost = ramNeededForWeaken * numberOfThreads;\\r\\n\\r\\n                        machineToRunOn = getMachineWithEnoughRam(ns, ramCost, environment, homeMemoryLimitations);\\r\\n\\r\\n                        if (machineToRunOn && machineToRunOn.cpuCores > 1) {\\r\\n                            numberOfThreads = getNumberOfThreadsToWeaken(ns, machineToRunOn.cpuCores, amountToWeaken);\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    if (job.type.startsWith(\\\"grow\\\")) {\\r\\n                        const ifStartedNowGrowDoneAt = getGrowEndDate(ns, targetServer, player);\\r\\n                        shouldExecute = shouldWeExecute(job, ifStartedNowGrowDoneAt, batchOfJobs, ns);\\r\\n\\r\\n                        if (shouldExecute === false) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        script = growScript;\\r\\n\\r\\n                        if (job.type !== \\\"grow-dynamic\\\") {\\r\\n                            targetServer.moneyAvailable = 0;\\r\\n                        }\\r\\n\\r\\n                        numberOfThreads = getGrowThreads(ns, targetServer, player, 1);\\r\\n                        ramCost = ramNeededForGrow * numberOfThreads;\\r\\n\\r\\n                        machineToRunOn = getMachineWithEnoughRam(ns, ramCost, environment, homeMemoryLimitations);\\r\\n\\r\\n                        if (machineToRunOn && machineToRunOn.cpuCores > 1) {\\r\\n                            numberOfThreads = getGrowThreads(ns, targetServer, player, machineToRunOn.cpuCores);\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    if (job.type.startsWith(\\\"hack\\\")) {\\r\\n                        const ifStartedNowHackDoneAt = getHackEndDate(ns, targetServer, player);\\r\\n                        shouldExecute = shouldWeExecute(job, ifStartedNowHackDoneAt, batchOfJobs, ns);\\r\\n\\r\\n                        if (shouldExecute === false) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        script = hackScript;\\r\\n\\r\\n                        if (job.type === \\\"hack\\\") {\\r\\n                            targetServer.moneyAvailable = targetServer.moneyMax;\\r\\n                        }\\r\\n\\r\\n\\r\\n                        numberOfThreads = getHackThreadsForTotalStealing(ns, nameOfTarget, targetServer);\\r\\n\\r\\n                        if (numberOfThreads === -1) {\\r\\n                            numberOfThreads = batchForTarget.originalNumberOfThreadsForFullMoney;\\r\\n                        }\\r\\n\\r\\n                        ramCost = ramNeededForHack * numberOfThreads;\\r\\n\\r\\n                        machineToRunOn = getMachineWithEnoughRam(ns, ramCost, environment, homeMemoryLimitations);\\r\\n                    }\\r\\n\\r\\n                    if (shouldExecute && machineToRunOn) {\\r\\n                        ns.scp(script, machineToRunOn.hostname);\\r\\n                        const pid = ns.exec(script, machineToRunOn.hostname, numberOfThreads, nameOfTarget);\\r\\n\\r\\n                        if (pid === 0) {\\r\\n                            ns.tprint(\\\"failed exec\\\")\\r\\n                        }\\r\\n\\r\\n                        job.ramCost = ramCost;\\r\\n                        job.executing = true;\\r\\n                        job.machineRunningOn = machineToRunOn.hostname;\\r\\n                        job.pid = pid;\\r\\n                        job.executedAt = new Date();\\r\\n\\r\\n                        if (!batchOfJobs.startTime) {\\r\\n                            batchOfJobs.startTime = new Date();\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction shouldWeExecute(job, ifStartedNowWeWouldBeDoneAtString, batchOfJobs, ns) {\\r\\n\\r\\n    const endBeforeDate = new Date(job.endBefore);\\r\\n    const endAfterDate = new Date(job.endAfter);\\r\\n    const ifStartedNowWeWouldBeDoneAt = new Date(ifStartedNowWeWouldBeDoneAtString)\\r\\n\\r\\n    if (!job.firstLookStartedNowEndAt) {\\r\\n        job.firstLookStartedNowEndAt = ifStartedNowWeWouldBeDoneAt;\\r\\n    }\\r\\n\\r\\n    if (endAfterDate > ifStartedNowWeWouldBeDoneAt) {\\r\\n        job.lastMissForDoneBeforeWindow = ifStartedNowWeWouldBeDoneAt;\\r\\n    }\\r\\n\\r\\n    if (ifStartedNowWeWouldBeDoneAt > endBeforeDate) {\\r\\n        if (!job.firstMissForAfterWindow) {\\r\\n            job.firstMissForAfterWindow = ifStartedNowWeWouldBeDoneAt;\\r\\n            batchOfJobs.poisonedBatch = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (endAfterDate < ifStartedNowWeWouldBeDoneAt && ifStartedNowWeWouldBeDoneAt < endBeforeDate) {\\r\\n        job.expectedEndTime = ifStartedNowWeWouldBeDoneAt;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n}\\r\\n\\r\\nfunction getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n\\r\\n    const allHackedMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    allHackedMachines.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const machinesWithRamAvailable = allHackedMachines\\r\\n        .filter(x => x.server.ramUsed < x.server.maxRam && x.server.maxRam !== 0);\\r\\n\\r\\n    const serversWithEnoughRam = machinesWithRamAvailable\\r\\n        .filter(x => (x.server.maxRam - x.server.ramUsed) > ramNeeded)\\r\\n        .sort((b, a) => b.server.maxRam - a.server.maxRam);\\r\\n\\r\\n    for (const potentialServerToRun of serversWithEnoughRam) {\\r\\n        const server = getServer(ns, potentialServerToRun.name, homeMemoryLimitations);\\r\\n        const freeRam = server.maxRam - server.ramUsed;\\r\\n        if (freeRam > ramNeeded) {\\r\\n            machineToRunOn = server;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (machineToRunOn === undefined) {\\r\\n        const buyOrUpgradeServerFlag = 'buyOrUpgradeServerFlag.txt';\\r\\n\\r\\n        let maxAmountNeeded = 0;\\r\\n        if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n            maxAmountNeeded = ns.read(buyOrUpgradeServerFlag);\\r\\n        }\\r\\n\\r\\n        if (maxAmountNeeded < ramNeeded) {\\r\\n            maxAmountNeeded = ramNeeded;\\r\\n            ns.rm(buyOrUpgradeServerFlag);\\r\\n            ns.write(buyOrUpgradeServerFlag, maxAmountNeeded, \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machineToRunOn;\\r\\n}\\r\\n\\r\\nfunction getServer(ns, serverName, homeMemoryLimitations) {\\r\\n    const server = ns.getServer(serverName);\\r\\n\\r\\n    if (serverName === \\\"home\\\") {\\r\\n\\r\\n        let ramToReserve = homeMemoryLimitations.ramToReserve;\\r\\n\\r\\n        if (server.maxRam < ramToReserve) {\\r\\n            ramToReserve = homeMemoryLimitations.ramToReserveInLimitedEnvironment;\\r\\n        }\\r\\n\\r\\n        server.maxRam -= ramToReserve;\\r\\n\\r\\n        const freeRam = server.maxRam - server.ramUsed\\r\\n\\r\\n        if (freeRam < 0) {\\r\\n            server.ramUsed = server.maxRam;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return server;\\r\\n}\\r\\n\\r\\nfunction prepServerForBatching(targetServer, batchForTarget, ns, player, nameOfTarget, anyBatchNotPrepping) {\\r\\n    const amountToWeaken = targetServer.hackDifficulty - targetServer.minDifficulty;\\r\\n    const serverHasMaxMoney = targetServer.moneyMax === targetServer.moneyAvailable;\\r\\n    const currentTime = new Date();\\r\\n\\r\\n    if (amountToWeaken === 0 && serverHasMaxMoney && batchForTarget.securityWeNeedToReduceAfterFullHack && batchForTarget.securityWeNeedToReduceAfterFullGrowth && batchForTarget.prepStage && batchForTarget.originalNumberOfThreadsForFullMoney) {\\r\\n\\r\\n        if (averageErrorRateOver10Minutes < errorRateAtWhichWeAllowNewThings || !anyBatchNotPrepping) {\\r\\n            batchForTarget.prepStage = false;\\r\\n            batchForTarget.targetMachineSaturatedWithAttacks = false;\\r\\n            ns.toast(`Added ${nameOfTarget} to in process batch attack.`, 'success')\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (batchForTarget.prepStage) {\\r\\n        batchForTarget.targetMachineSaturatedWithAttacks = false;\\r\\n\\r\\n        if (batchForTarget.successfulWeakening === false) {\\r\\n            if (currentTime > new Date(batchForTarget.weakeningDoneAfter) || !batchForTarget.weakeningDoneAfter) {\\r\\n                if (amountToWeaken !== 0) {\\r\\n                    let endDate = new Date();\\r\\n                    endDate = getWeakenEndDate(ns, targetServer, player, targetServer.hackDifficulty - targetServer.minDifficulty);\\r\\n                    addSecondsToDate(endDate, 10);\\r\\n\\r\\n                    const job = new JobHasTo(new Date(), endDate, \\\"weaken-dynamic\\\");\\r\\n                    const batchOfJobs = new BatchOfJobs();\\r\\n                    batchOfJobs.jobs.push(job);\\r\\n\\r\\n                    batchForTarget.batchesQueue.push(batchOfJobs);\\r\\n                    batchForTarget.weakeningDoneAfter = endDate;\\r\\n                } else if (amountToWeaken === 0) {\\r\\n                    batchForTarget.successfulWeakening = true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (batchForTarget.successfulWeakening && batchForTarget.successfulGrowing === false) {\\r\\n            if (currentTime > new Date(batchForTarget.growDoneAfter) || !batchForTarget.growDoneAfter) {\\r\\n\\r\\n                if (serverHasMaxMoney === false) {\\r\\n\\r\\n                    if (targetServer.moneyAvailable === 0) {\\r\\n                        const growThreads = getGrowThreads(ns, targetServer, player, 1);\\r\\n                        batchForTarget.securityWeNeedToReduceAfterFullGrowth = ns.growthAnalyzeSecurity(growThreads, nameOfTarget, 1);\\r\\n                    }\\r\\n\\r\\n                    let endDate = getGrowEndDate(ns, targetServer, player);\\r\\n                    addSecondsToDate(endDate, 10);\\r\\n\\r\\n                    const job = new JobHasTo(new Date(), endDate, \\\"grow-dynamic\\\");\\r\\n                    const batchOfJobs = new BatchOfJobs();\\r\\n                    batchOfJobs.jobs.push(job);\\r\\n\\r\\n                    batchForTarget.batchesQueue.push(batchOfJobs);\\r\\n                    batchForTarget.growDoneAfter = endDate;\\r\\n                }\\r\\n\\r\\n\\r\\n                if (serverHasMaxMoney) {\\r\\n                    batchForTarget.successfulGrowing = true;\\r\\n                    batchForTarget.successfulWeakening = false;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (batchForTarget.successfulGrowing && batchForTarget.successfulHacking === false && batchForTarget.successfulWeakening) {\\r\\n\\r\\n            if (currentTime > new Date(batchForTarget.hackDoneAfter) || !batchForTarget.hackDoneAfter) {\\r\\n                if (serverHasMaxMoney) {\\r\\n                    if (currentTime > new Date(batchForTarget.hackDoneAfter)) {\\r\\n\\r\\n                        batchForTarget.successfulWeakening = false;\\r\\n                        batchForTarget.successfulGrowing = false;\\r\\n                        batchForTarget.successfulHacking = false;\\r\\n                        batchForTarget.hackDoneAfter = undefined;\\r\\n\\r\\n                    } else {\\r\\n                        const hackThreads = getHackThreadsForTotalStealing(ns, nameOfTarget, targetServer);\\r\\n                        batchForTarget.securityWeNeedToReduceAfterFullHack = ns.hackAnalyzeSecurity(hackThreads, nameOfTarget);\\r\\n                        batchForTarget.originalNumberOfThreadsForFullMoney = hackThreads;\\r\\n\\r\\n                        let endDate = getHackEndDate(ns, targetServer, player);\\r\\n                        addSecondsToDate(endDate, 100);\\r\\n\\r\\n                        const job = new JobHasTo(new Date(), endDate, \\\"hack-dynamic\\\");\\r\\n                        const batchOfJobs = new BatchOfJobs();\\r\\n                        batchOfJobs.jobs.push(job);\\r\\n\\r\\n                        batchForTarget.batchesQueue.push(batchOfJobs);\\r\\n                        batchForTarget.hackDoneAfter = endDate;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (targetServer.moneyAvailable === 0) {\\r\\n                    batchForTarget.successfulGrowing = false;\\r\\n                    batchForTarget.successfulWeakening = false;\\r\\n                    batchForTarget.successfulHacking = true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nfunction giveBatchQueueStructure(targetNames, batchQueue) {\\r\\n    for (const target of targetNames) {\\r\\n        let targetObject = batchQueue.get(target);\\r\\n        targetObject = new BatchQueueForTarget(targetObject);\\r\\n\\r\\n        for (let i = 0; i < targetObject.batchesQueue.length; i++) {\\r\\n            targetObject.batchesQueue[i] = new BatchOfJobs(targetObject.batchesQueue[i]);\\r\\n        }\\r\\n\\r\\n        batchQueue.set(target, targetObject);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction cleanFinishedAndPoisonedJobsFromQueue(targetNames, batchQueue, ns) {\\r\\n\\r\\n    for (const target of targetNames) {\\r\\n        const batches = batchQueue.get(target);\\r\\n        const currentTime = new Date();\\r\\n\\r\\n        for (let i = batches.batchesQueue.length - 1; i > -1; i--) {\\r\\n            const batch = batches.batchesQueue[i];\\r\\n            let remove = false;\\r\\n\\r\\n            if (batch.wholeBatchFinishsBefore() < currentTime) {\\r\\n\\r\\n                if (batch.jobs.every(x => x.executing) === false) {\\r\\n                    batches.failures++;\\r\\n                    batches.failuresInTheLastHour++;\\r\\n                    batches.lastFailure = batch;\\r\\n                    failuresThisRun++;\\r\\n                } else {\\r\\n                    batches.successes++;\\r\\n                    batches.successesInTheLastHour++;\\r\\n                    successesThisRun++;\\r\\n                }\\r\\n\\r\\n                remove = true;\\r\\n                batches.targetMachineSaturatedWithAttacks = true;\\r\\n            }\\r\\n\\r\\n            if (batch.poisonedBatch) {\\r\\n                batches.failures++;\\r\\n                batches.failuresInTheLastHour++;\\r\\n                batches.lastFailure = batch;\\r\\n                failuresThisRun++;\\r\\n\\r\\n                remove = true;\\r\\n\\r\\n                batch.jobs.map(x => {\\r\\n                    if (x.pid) {\\r\\n                        ns.kill(x.pid);\\r\\n                    }\\r\\n                });\\r\\n            }\\r\\n\\r\\n            if (remove) {\\r\\n                batches.batchesQueue.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction addNewTargetsToQueueIfNeeded(batchQueue, targetNames, ns, enviroment, player, noMoreInvestingForEndGame, homeMemoryLimitations) {\\r\\n    const batchesAreSaturated = targetNames.map(x => batchQueue.get(x)).every(x => x.targetMachineSaturatedWithAttacks);\\r\\n    const over2andAHalfTrillionDollars = ns.getServerMoneyAvailable(\\\"home\\\") > 2_500_000_000_000;\\r\\n    const massiveRamOnHome = getServer(ns, \\\"home\\\", homeMemoryLimitations).maxRam > 400_000;\\r\\n\\r\\n    let addNewServerToAttack = false;\\r\\n\\r\\n    if (batchQueue.size < 15 && batchesAreSaturated && averageErrorRateOver10Minutes < errorRateAtWhichWeAllowNewThings && !noMoreInvestingForEndGame) {\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if (over2andAHalfTrillionDollars && batchQueue.size < 20) {\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if (over2andAHalfTrillionDollars && batchesAreSaturated && batchQueue.size < 50) {\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if(massiveRamOnHome && batchQueue.size < 50){\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if (batchQueue.size < 2 || addNewServerToAttack) {\\r\\n\\r\\n        const allHackedMachines = enviroment\\r\\n            .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n        const allMachinesByOrderOfValue = allHackedMachines\\r\\n            .filter(x => !x.server.purchasedByPlayer && x.server.moneyMax !== 0 && !targetNames.includes(x.name))\\r\\n            .sort((a, b) => b.server.moneyMax - a.server.moneyMax);\\r\\n\\r\\n        // only add machine if 90%+ chances of successfully hacking at minDifficulty. \\r\\n        let mostValuableMachine;\\r\\n        for (const hackPossibility of allMachinesByOrderOfValue) {\\r\\n            const server = ns.getServer(hackPossibility.name);\\r\\n            server.hackDifficulty = server.minDifficulty;\\r\\n            const chanceOfHackingAtMinDif = ns.formulas.hacking.hackChance(server, player);\\r\\n\\r\\n            if (chanceOfHackingAtMinDif > 0.8) {\\r\\n                mostValuableMachine = hackPossibility;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (mostValuableMachine) {\\r\\n            batchQueue.set(mostValuableMachine.name, new BatchQueueForTarget());\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getHackThreadsForTotalStealing(ns, theTarget, targetServer) {\\r\\n    return Math.ceil(ns.hackAnalyzeThreads(theTarget, targetServer.moneyAvailable));\\r\\n}\\r\\n\\r\\nfunction getGrowThreads(ns, serverToHack, player, cpuCores) {\\r\\n    return Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, cpuCores));\\r\\n}\\r\\n\\r\\nfunction createNewDataFromOldDateAndAddSeconds(date, secondsToAdd) {\\r\\n    const newDate = new Date(date);\\r\\n    addSecondsToDate(newDate, secondsToAdd);\\r\\n    return newDate;\\r\\n}\\r\\n\\r\\nfunction createNewDataFromOldDateAndAddMilliseconds(date, secondsToAdd) {\\r\\n    const newDate = new Date(date);\\r\\n    addMillisecondsToDate(newDate, secondsToAdd);\\r\\n    return newDate;\\r\\n}\\r\\n\\r\\n\\r\\nfunction addSecondsToDate(date, secondsToAdd) {\\r\\n    date.setSeconds(date.getSeconds() + secondsToAdd);\\r\\n}\\r\\n\\r\\nfunction addMillisecondsToDate(date, msToAdd) {\\r\\n    date.setMilliseconds(date.getMilliseconds() + msToAdd);\\r\\n}\\r\\n\\r\\nfunction getWeakenEndDate(ns, targetServer, player, difficultyToWeaken) {\\r\\n    let endDate = new Date();\\r\\n    targetServer.hackDifficulty = targetServer.minDifficulty + difficultyToWeaken;\\r\\n\\r\\n    const howLongToWeaken = ns.formulas.hacking.weakenTime(targetServer, player);\\r\\n\\r\\n    endDate.setMilliseconds(endDate.getMilliseconds() + howLongToWeaken);\\r\\n    return endDate;\\r\\n}\\r\\n\\r\\nfunction getGrowEndDate(ns, targetServer, player) {\\r\\n    let endDate = new Date();\\r\\n    targetServer.moneyAvailable = 0;\\r\\n    targetServer.hackDifficulty = targetServer.minDifficulty;\\r\\n\\r\\n    const howLongToGrow = ns.formulas.hacking.growTime(targetServer, player);\\r\\n\\r\\n    endDate.setMilliseconds(endDate.getMilliseconds() + howLongToGrow);\\r\\n    return endDate;\\r\\n}\\r\\n\\r\\nfunction getHackEndDate(ns, targetServer, player) {\\r\\n    let endDate = new Date();\\r\\n    targetServer.moneyAvailable = targetServer.moneyMax;\\r\\n    targetServer.hackDifficulty = targetServer.minDifficulty;\\r\\n\\r\\n    const howLongToHack = ns.formulas.hacking.hackTime(targetServer, player);\\r\\n\\r\\n    endDate.setMilliseconds(endDate.getMilliseconds() + howLongToHack);\\r\\n    return endDate;\\r\\n}\\r\\n\\r\\nfunction getNumberOfThreadsToWeaken(ns, cpuCores, amountToWeaken) {\\r\\n    let numberOfThreadsToWeaken = 0;\\r\\n    let foundNumberOfThreads = false;\\r\\n    while (!foundNumberOfThreads) {\\r\\n        numberOfThreadsToWeaken++;\\r\\n\\r\\n        const amountNumberOfThreadsWillWeaken = Math.ceil(ns.weakenAnalyze(numberOfThreadsToWeaken, cpuCores));\\r\\n        if (amountNumberOfThreadsWillWeaken > amountToWeaken) {\\r\\n            foundNumberOfThreads = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //add a small margin\\r\\n    numberOfThreadsToWeaken += 20;\\r\\n    return numberOfThreadsToWeaken;\\r\\n}\\r\\n\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    canSellAmountAndStillHaveReserve(amountToSell) {\\r\\n        return (this.moneyInvested - amountToSell) > this.capitalToReserveForTrading;\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = (moneyInvested + ns.getServerMoneyAvailable(\\\"home\\\")) * .75;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"batch-dispatch\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"batch-dispatch\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/hacking/batch-dispatch.js\",\"server\":\"home\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"home\"}}],[\"scripts/hacking/memory-starved-dispatch.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const hackScript = 'scripts/hacking/hack.js';\\r\\nconst growScript = 'scripts/hacking/grow.js';\\r\\nconst weakenScript = 'scripts/hacking/weaken.js';\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const memoryStarvedQueueFileName = 'data/memoryStarvedQueue.txt';\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\";\\r\\n\\r\\n    const homeMemoryLimitations = JSON.parse(ns.read(\\\"data/ramToReserveOnHome.txt\\\"));\\r\\n\\r\\n\\r\\n    let batchTargets = [];\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        const batchQueue = JSON.parse(ns.read(batchQueuesFileName));\\r\\n        batchTargets = batchQueue.map(x => x[0]);\\r\\n    }\\r\\n\\r\\n\\r\\n    let memoryStarvedQueue = new Map();\\r\\n    if (ns.fileExists(memoryStarvedQueueFileName)) {\\r\\n        memoryStarvedQueue = new Map(JSON.parse(ns.read(memoryStarvedQueueFileName)));\\r\\n    }\\r\\n\\r\\n    cleanProcessesAttackingBatchTarget(ns, memoryStarvedQueue, batchTargets);\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n    const allHackedMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    let allMachinesByOrderOfValue = allHackedMachines\\r\\n        .filter(x => !x.server.purchasedByPlayer && !batchTargets.includes(x.name) && x.server.moneyMax > 0)\\r\\n        .sort((a, b) => b.server.moneyMax - a.server.moneyMax)\\r\\n        .map(x => new HackedRecord(\\r\\n            x.name,\\r\\n            x.server.moneyMax,\\r\\n            x.server.minDifficulty,\\r\\n            x.server.hackDifficulty,\\r\\n            x.server.moneyAvailable,\\r\\n        ))\\r\\n\\r\\n    if (ns.getHackingLevel() < 250) {\\r\\n        allMachinesByOrderOfValue = allMachinesByOrderOfValue\\r\\n            .sort((a, b) => a.hackDifficulty - b.hackDifficulty)\\r\\n    }\\r\\n\\r\\n    seeIfWeNeedToDoNextStep(ns, memoryStarvedQueue);\\r\\n\\r\\n    const machinesNextInQueueToHack = getMachinesToHack(allMachinesByOrderOfValue, memoryStarvedQueue, ns);\\r\\n\\r\\n    const hackQueue = [];\\r\\n    const growAndWeakenQueue = [];\\r\\n\\r\\n    machinesNextInQueueToHack.forEach(machineInQuestion => {\\r\\n        if (machineInQuestion.needsWeakening() || machineInQuestion.needsGrowing()) {\\r\\n            growAndWeakenQueue.push(machineInQuestion);\\r\\n        } else {\\r\\n            hackQueue.push(machineInQuestion);\\r\\n        }\\r\\n    });\\r\\n\\r\\n    for (const target of hackQueue) {\\r\\n        let numberOfThreads = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable));\\r\\n\\r\\n        await executeScriptAcrossFleet(ns, hackScript, enviroment, homeMemoryLimitations, numberOfThreads, target, memoryStarvedQueue);\\r\\n    }\\r\\n\\r\\n    for (const target of growAndWeakenQueue) {\\r\\n        let threadsNeeded;\\r\\n        let script;\\r\\n\\r\\n        if (target.needsGrowing()) {\\r\\n\\r\\n            script = growScript;\\r\\n            const serverToHack = getServer(ns, target.name, homeMemoryLimitations);\\r\\n            const player = ns.getPlayer();\\r\\n\\r\\n            if (ns.fileExists('Formulas.exe')) {\\r\\n                threadsNeeded = Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, 1));\\r\\n            } else {\\r\\n                threadsNeeded = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable)) * 5;\\r\\n\\r\\n                if (threadsNeeded === 0) {\\r\\n                    threadsNeeded = 500;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (target.needsWeakening()) {\\r\\n            script = weakenScript;\\r\\n            const amountToWeaken = target.hackDifficulty - target.minDifficulty;\\r\\n\\r\\n            threadsNeeded = getNumberOfThreadsToWeaken(ns, 1, amountToWeaken);\\r\\n        }\\r\\n\\r\\n        await executeScriptAcrossFleet(ns, script, enviroment, homeMemoryLimitations, threadsNeeded, target, memoryStarvedQueue);\\r\\n    }\\r\\n\\r\\n    ns.rm(memoryStarvedQueueFileName);\\r\\n    ns.write(memoryStarvedQueueFileName, JSON.stringify(Array.from(memoryStarvedQueue.entries()), \\\"W\\\"));\\r\\n}\\r\\n\\r\\nasync function executeScriptAcrossFleet(ns, script, enviroment, homeMemoryLimitations, numberOfThreadsWanted, target, memoryStarvedQueue) {\\r\\n    const ramNeededForOneThread = ns.getScriptRam(script);\\r\\n\\r\\n    let numberOfThreadsLeft = numberOfThreadsWanted;\\r\\n    let serversExausted = false;\\r\\n\\r\\n    while (numberOfThreadsLeft > 0 && serversExausted === false) {\\r\\n        const result = getMachineWithNumberOfThreads(ns, enviroment, numberOfThreadsLeft, ramNeededForOneThread, homeMemoryLimitations);\\r\\n\\r\\n        if (!result.machineToRunOn || result.threads <= 0) {\\r\\n            serversExausted = true;\\r\\n        } else {\\r\\n            const machineToRunOn = result.machineToRunOn.hostname;\\r\\n            const threads = result.threads\\r\\n\\r\\n            ns.scp(script, machineToRunOn);\\r\\n            const pid = ns.exec(script, machineToRunOn, threads, target.name);\\r\\n\\r\\n            if (pid !== 0) {\\r\\n                target.pids.push(pid);\\r\\n                target.runningOn.push({ machineToRunOn, threads })\\r\\n            }\\r\\n\\r\\n            numberOfThreadsLeft -= threads;\\r\\n\\r\\n            memoryStarvedQueue.set(target.name, target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getMachineWithNumberOfThreads(ns, enviroment, threads, ramCostPerThread, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n    const buyOrUpgradeServerFlag = 'buyOrUpgradeServerFlag.txt';\\r\\n    let originalAmountNeeded = ramCostPerThread * threads;\\r\\n\\r\\n    let globalMaxAmountNeeded = 0;\\r\\n\\r\\n    if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n        globalMaxAmountNeeded = JSON.parse(ns.read(buyOrUpgradeServerFlag));\\r\\n    }\\r\\n\\r\\n    if (originalAmountNeeded > globalMaxAmountNeeded) {\\r\\n        globalMaxAmountNeeded = originalAmountNeeded;\\r\\n        ns.rm(buyOrUpgradeServerFlag);\\r\\n        ns.write(buyOrUpgradeServerFlag, globalMaxAmountNeeded, \\\"W\\\");\\r\\n    }\\r\\n\\r\\n    machineToRunOn = getMachineWithEnoughRam(ns, threads * ramCostPerThread, enviroment, homeMemoryLimitations);\\r\\n\\r\\n    while (threads > 0 && !machineToRunOn) {\\r\\n        threads--;\\r\\n\\r\\n        machineToRunOn = getMachineWithEnoughRam(ns, threads * ramCostPerThread, enviroment, homeMemoryLimitations);\\r\\n    }\\r\\n\\r\\n    return { threads, machineToRunOn };\\r\\n}\\r\\n\\r\\nfunction getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n\\r\\n    const allHackableMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    allHackableMachines.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const machinesWithRamAvailable = allHackableMachines\\r\\n        .filter(x => x.server.ramUsed < x.server.maxRam && x.server.maxRam !== 0);\\r\\n\\r\\n    const serversWithEnoughRam = machinesWithRamAvailable\\r\\n        .filter(x => (x.server.maxRam - x.server.ramUsed) > ramNeeded)\\r\\n        .sort((b, a) => b.server.maxRam - a.server.maxRam);\\r\\n\\r\\n    for (const potentialServerToRun of serversWithEnoughRam) {\\r\\n        const server = getServer(ns, potentialServerToRun.name, homeMemoryLimitations);\\r\\n\\r\\n        const freeRam = server.maxRam - server.ramUsed;\\r\\n        if (freeRam > ramNeeded) {\\r\\n            machineToRunOn = server;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machineToRunOn;\\r\\n}\\r\\n\\r\\n\\r\\nfunction getServer(ns, serverName, homeMemoryLimitations) {\\r\\n    const server = ns.getServer(serverName);\\r\\n\\r\\n    if (serverName === \\\"home\\\") {\\r\\n\\r\\n        let ramToReserve = homeMemoryLimitations.ramToReserve;\\r\\n\\r\\n        if (server.maxRam < ramToReserve) {\\r\\n            ramToReserve = homeMemoryLimitations.ramToReserveInLimitedEnvironment;\\r\\n        }\\r\\n\\r\\n        server.maxRam -= ramToReserve;\\r\\n\\r\\n        const freeRam = server.maxRam - server.ramUsed\\r\\n\\r\\n        if (freeRam < 0) {\\r\\n            server.ramUsed = server.maxRam;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return server;\\r\\n}\\r\\n\\r\\nfunction cleanProcessesAttackingBatchTarget(ns, memoryStarvedQueue, batchTargets) {\\r\\n    for (const machineBeingHacked of memoryStarvedQueue) {\\r\\n        const whoTheyHackin = machineBeingHacked[0];\\r\\n\\r\\n        if (batchTargets.includes(whoTheyHackin)) {\\r\\n            const hackinRecord = memoryStarvedQueue.get(whoTheyHackin);\\r\\n            for (const pid of hackinRecord.pids) {\\r\\n                ns.kill(pid);\\r\\n            }\\r\\n\\r\\n            memoryStarvedQueue.delete(whoTheyHackin);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nfunction getMachinesToHack(hackableMachinesInTheEnvironment, memoryStarvedQueue, ns) {\\r\\n    const machinesNextInQueueToHack = [];\\r\\n    const doNotAdd = [];\\r\\n\\r\\n    for (const hackableMachine of hackableMachinesInTheEnvironment) {\\r\\n        if (memoryStarvedQueue.has(hackableMachine.name)) {\\r\\n            const record = memoryStarvedQueue.get(hackableMachine.name);\\r\\n            if (record.readyForNextProcess) {\\r\\n                machinesNextInQueueToHack.push(hackableMachine);\\r\\n            }\\r\\n\\r\\n            doNotAdd.push(hackableMachine);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const hackableMachine of hackableMachinesInTheEnvironment) {\\r\\n        if (!doNotAdd.find(x => x.name === hackableMachine.name)) {\\r\\n            machinesNextInQueueToHack.push(hackableMachine);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machinesNextInQueueToHack;\\r\\n}\\r\\n\\r\\nexport class HackedRecord {\\r\\n    constructor(name, maxMoney, minDifficulty, hackDifficulty, moneyAvailable) {\\r\\n        this.name = name;\\r\\n        this.moneyThreshhold = maxMoney * 0.75;\\r\\n        this.securityThreshholdTarget = minDifficulty + 5;\\r\\n        this.hackDifficulty = hackDifficulty;\\r\\n        this.moneyAvailable = moneyAvailable;\\r\\n        this.minDifficulty = minDifficulty;\\r\\n        this.pids = [];\\r\\n\\r\\n        this.runningOn = [];\\r\\n\\r\\n        this.isHacking = false;\\r\\n        this.readyForNextProcess = false;\\r\\n    }\\r\\n\\r\\n    needsWeakening() {\\r\\n        return this.hackDifficulty > this.securityThreshholdTarget;\\r\\n    }\\r\\n\\r\\n    needsGrowing() {\\r\\n        return this.moneyAvailable < this.moneyThreshhold;\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getNumberOfThreadsToWeaken(ns, cpuCores, amountToWeaken) {\\r\\n    let numberOfThreadsToWeaken = 0;\\r\\n    let foundNumberOfThreads = false;\\r\\n    while (!foundNumberOfThreads) {\\r\\n        numberOfThreadsToWeaken++;\\r\\n\\r\\n        const amountNumberOfThreadsWillWeaken = Math.ceil(ns.weakenAnalyze(numberOfThreadsToWeaken, cpuCores));\\r\\n        if (amountNumberOfThreadsWillWeaken > amountToWeaken) {\\r\\n            foundNumberOfThreads = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //add a small margin\\r\\n    numberOfThreadsToWeaken += 20;\\r\\n    return numberOfThreadsToWeaken;\\r\\n}\\r\\n\\r\\nfunction seeIfWeNeedToDoNextStep(ns, recordOfWhoIsBeingHacked) {\\r\\n    for (const companyBeingHacked of recordOfWhoIsBeingHacked.keys()) {\\r\\n        const record = recordOfWhoIsBeingHacked.get(companyBeingHacked);\\r\\n\\r\\n        if (record.pids.every(x => !ns.isRunning(x))) {\\r\\n            if (record.isHacking) {\\r\\n                recordOfWhoIsBeingHacked.delete(companyBeingHacked)\\r\\n            } else {\\r\\n                record.readyForNextProcess = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/memory-starved-dispatch.js\",\"server\":\"home\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"home\"}}],[\"scripts/hacking/hack-until-worked.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n    let moneyStolen = 0;\\r\\n\\r\\n    while (moneyStolen === 0) {\\r\\n        moneyStolen = await ns.hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/hack-until-worked.js\",\"server\":\"home\"}}],[\"scripts/hacking/hack-all-machines.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const helpers = new Helpers(ns);\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n\\r\\n    const portsWeCanPop = helpers.numberOfPortsWeCanPop();\\r\\n    const currentHackingLevel = ns.getHackingLevel();\\r\\n\\r\\n    const allHackableMachines = enviroment\\r\\n        .filter(x => x.server.requiredHackingSkill < currentHackingLevel)\\r\\n        .filter(x => x.server.numOpenPortsRequired <= portsWeCanPop || x.server.purchasedByPlayer);\\r\\n\\r\\n    allHackableMachines\\r\\n        .filter(x => !x.server.hasAdminRights)\\r\\n        .map(x => helpers.hackMachine(x.name));\\r\\n}\\r\\n\\r\\nexport class Helpers {\\r\\n    constructor(ns) {\\r\\n        this.ns = ns;\\r\\n    }\\r\\n\\r\\n    hackMachine(hostname) {\\r\\n        if (this.fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n            this.ns.brutessh(hostname);\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"FTPCrack.exe\\\")) {\\r\\n            this.ns.ftpcrack(hostname);\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"relaySMTP.exe\\\")) {\\r\\n            this.ns.relaysmtp(hostname)\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"HTTPWorm.exe\\\")) {\\r\\n            this.ns.httpworm(hostname)\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"SQLInject.exe\\\")) {\\r\\n            this.ns.sqlinject(hostname)\\r\\n        }\\r\\n\\r\\n        this.ns.nuke(hostname);\\r\\n        this.ns.killall(hostname);\\r\\n    }\\r\\n\\r\\n    numberOfPortsWeCanPop() {\\r\\n        let portsWeCanPop = 0;\\r\\n        if (this.fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"FTPCrack.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"relaySMTP.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"HTTPWorm.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"SQLInject.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        return portsWeCanPop;\\r\\n    }\\r\\n\\r\\n    fileExists(fileName) {\\r\\n        return this.ns.fileExists(fileName, \\\"home\\\");\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/hack-all-machines.js\",\"server\":\"home\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"home\"}}],[\"scripts/investments/invest-in-nodes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const moneyToInvest = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (moneyToInvest < 1_000_000_000_000) {\\r\\n        return;\\r\\n    }\\r\\n    \\r\\n    let endDate = ns.args[0];\\r\\n\\r\\n    if (endDate === undefined){\\r\\n        endDate = new Date();\\r\\n        endDate.setHours(endDate.getHours() + 6);\\r\\n    } else {\\r\\n        const timeLeftInSeconds = (new Date(endDate) - new Date()) / 1000;\\r\\n        const conservativeTimeLeft = timeLeftInSeconds / 2;\\r\\n    \\r\\n        let numberPurchased = 0\\r\\n    \\r\\n        while(buyHacknetNodeIfAboveBreakeven(ns, conservativeTimeLeft)){\\r\\n            numberPurchased++;\\r\\n        }\\r\\n\\r\\n        if(numberPurchased != 0){\\r\\n            ns.tprint(\\\"Total nodes purchase: \\\", numberPurchased);\\r\\n        }        \\r\\n    }\\r\\n}\\r\\n\\r\\nfunction buyHacknetNodeIfAboveBreakeven(ns, secondsLeft) {\\r\\n    const productionMultiplier = 2.8991;\\r\\n    const upgradeCostMultiplier = 0.8700;\\r\\n\\r\\n    const fixedCostOfFullyUpgradedNode = 409_194_200 * upgradeCostMultiplier;\\r\\n    const variableCost = ns.hacknet.getPurchaseNodeCost();\\r\\n    const totalCost = variableCost + fixedCostOfFullyUpgradedNode;\\r\\n\\r\\n    const moneyToInvest = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (totalCost > moneyToInvest) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    const revPerSecond = 9172 * productionMultiplier;\\r\\n    const expectedValue = secondsLeft * revPerSecond;\\r\\n\\r\\n    if (expectedValue < totalCost) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    const indexOfNode = ns.hacknet.purchaseNode();\\r\\n    ns.hacknet.upgradeLevel(indexOfNode, 199);\\r\\n    ns.hacknet.upgradeRam(indexOfNode, 6);\\r\\n    ns.hacknet.upgradeCore(indexOfNode, 15);\\r\\n\\r\\n    return true;\\r\\n}\\r\\n\\r\\n\",\"filename\":\"scripts/investments/invest-in-nodes.js\",\"server\":\"home\"}}],[\"scripts/investments/purchase-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let countOfTriesToBuyServers = 0;\\r\\nlet countOfVisitsWithoutTryingToBuy = 0;\\r\\nconst beforeFormulasServerSpendFile = \\\"data/beforeFormulasServerSpend.txt\\\";\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const buyOrUpgradeServerFlag = \\\"../../buyOrUpgradeServerFlag.txt\\\";\\r\\n    const ramObservationsTextFile = '../../data/ramObservations.txt';\\r\\n    const typeRecord = \\\"../../data/typeOfServerPurchase.txt\\\";\\r\\n    \\r\\n    const stopInvestingFileName = \\\"stopInvesting.txt\\\";\\r\\n    if (ns.fileExists(stopInvestingFileName)) {\\r\\n        if (ns.fileExists(ramObservationsTextFile)) {\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let additionalRamNeeded = 0;\\r\\n    let ramObservations = [];\\r\\n    let type = new TypeOfPurchase();\\r\\n\\r\\n    if (ns.fileExists(ramObservationsTextFile)) {\\r\\n        countOfVisitsWithoutTryingToBuy++;\\r\\n    } else {\\r\\n        countOfVisitsWithoutTryingToBuy = 0;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n        countOfVisitsWithoutTryingToBuy = 0;\\r\\n    }\\r\\n\\r\\n    let tryToBuy = ns.fileExists(buyOrUpgradeServerFlag);\\r\\n\\r\\n    if (tryToBuy === false && countOfVisitsWithoutTryingToBuy < 300) {\\r\\n        tryToBuy = true;\\r\\n    }\\r\\n\\r\\n    if (tryToBuy === false) {\\r\\n        return;\\r\\n    } else {\\r\\n        countOfTriesToBuyServers++;\\r\\n\\r\\n        if (ns.fileExists(typeRecord)) {\\r\\n            const tempType = JSON.parse(ns.read(typeRecord));\\r\\n            type = new TypeOfPurchase(tempType);\\r\\n        }\\r\\n\\r\\n        if (!type.lastPurchaseDate) {\\r\\n            type.lastPurchaseDate = new Date();\\r\\n        }\\r\\n\\r\\n        if (ns.fileExists(ramObservationsTextFile)) {\\r\\n            ramObservations = JSON.parse(ns.read(ramObservationsTextFile));\\r\\n\\r\\n        }\\r\\n\\r\\n        if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n            const latestRamNeeded = JSON.parse(ns.read(buyOrUpgradeServerFlag));\\r\\n\\r\\n            ramObservations.push(latestRamNeeded);\\r\\n\\r\\n            ns.rm(buyOrUpgradeServerFlag);\\r\\n\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n            ns.write(ramObservationsTextFile, JSON.stringify(ramObservations), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        if (ramObservations.length === 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (ramObservations.length > 10 || countOfTriesToBuyServers > 300) {\\r\\n\\r\\n            additionalRamNeeded = Math.min(...ramObservations);\\r\\n\\r\\n            if (type.average) {\\r\\n                additionalRamNeeded = ramObservations.reduce((a, b) => a + b) / ramObservations.length;\\r\\n            }\\r\\n\\r\\n            if (ns.fileExists('Formulas.exe')) {\\r\\n                if (type.max) {\\r\\n                    additionalRamNeeded = Math.max(...ramObservations);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            const ramNeededForBatchesFile = \\\"data/ramNeededToStartBatches.txt\\\";\\r\\n            if (ns.fileExists(ramNeededForBatchesFile)) {\\r\\n                const ramNeededToStartBatches = Number(ns.read(ramNeededForBatchesFile));\\r\\n\\r\\n                if (ramNeededToStartBatches < additionalRamNeeded) {\\r\\n                    additionalRamNeeded = ramNeededToStartBatches;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (additionalRamNeeded === 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        let maxRam = 1048576;\\r\\n\\r\\n        const enviroment = JSON.parse(ns.read('../../data/enviroment.txt'));\\r\\n\\r\\n        const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n        let stockMarketReserveMoney = new ReserveForTrading();\\r\\n        if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n            stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n        }\\r\\n\\r\\n\\r\\n        const playerPurchasedServers = enviroment\\r\\n            .filter(x => x.server.purchasedByPlayer && x.server.maxRam < maxRam)\\r\\n            .sort((b, a) => a.server.maxRam - b.server.maxRam)\\r\\n\\r\\n        let upgradedOrPurchased = false;\\r\\n        if (playerPurchasedServers.length === 0) {\\r\\n            upgradedOrPurchased = purchaseServer(ns, maxRam, additionalRamNeeded, stockMarketReserveMoney);\\r\\n        } else {\\r\\n            const smallestPlayerPurchasedServer = playerPurchasedServers.pop();\\r\\n            upgradedOrPurchased = upgradeSmallMachine(ns, smallestPlayerPurchasedServer, maxRam, additionalRamNeeded, stockMarketReserveMoney);\\r\\n        }\\r\\n\\r\\n        if (upgradedOrPurchased) {\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n            type.changeType();\\r\\n            const now = new Date();\\r\\n            const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n            ns.toast(`${timeStamp} More than ${Math.round(additionalRamNeeded)} GB bought for server`, \\\"success\\\", 300000);\\r\\n        }\\r\\n\\r\\n        ns.rm(typeRecord);\\r\\n        ns.write(typeRecord, JSON.stringify(type), \\\"W\\\");\\r\\n        if (countOfTriesToBuyServers > 100) {\\r\\n            countOfTriesToBuyServers = 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction purchaseServer(ns, maxRam, additionalRamNeeded, stockMarketReserveMoney) {\\r\\n    let currentNumberOfPurchasedServers = ns.getPurchasedServers().length;\\r\\n    let ramToBuy = 64;\\r\\n\\r\\n    if (currentNumberOfPurchasedServers < ns.getPurchasedServerLimit()) {\\r\\n\\r\\n        let purchaseCost = ns.getPurchasedServerCost(ramToBuy);\\r\\n        let moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        if (moneyAvailable > purchaseCost) {\\r\\n\\r\\n            while (moneyAvailable > purchaseCost && ramToBuy < additionalRamNeeded) {\\r\\n\\r\\n                ramToBuy = ramToBuy * 2;\\r\\n\\r\\n                purchaseCost = ns.getPurchasedServerCost(ramToBuy);\\r\\n            }\\r\\n\\r\\n            if (ramToBuy > maxRam) {\\r\\n                ramToBuy = maxRam;\\r\\n            }\\r\\n            const canBuy = stockMarketReserveMoney.canSpend(ns, purchaseCost);\\r\\n\\r\\n            if (canBuy && ramToBuy > additionalRamNeeded) {\\r\\n                const hostname = \\\"CLOUD-\\\" + String(currentNumberOfPurchasedServers).padStart(3, '0')\\r\\n                ns.purchaseServer(hostname, ramToBuy);\\r\\n\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            if (countOfTriesToBuyServers > 100) {\\r\\n                ns.toast(\\\"Not enough money to buy new server\\\", \\\"warning\\\", 3000)\\r\\n                countOfTriesToBuyServers = 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n}\\r\\n\\r\\nfunction upgradeSmallMachine(ns, smallestPlayerPurchasedServer, maxRam, additionalRamNeeded, stockMarketReserveMoney) {\\r\\n\\r\\n    let ramToBuy = smallestPlayerPurchasedServer.server.maxRam * 2;\\r\\n\\r\\n    while (!(ramToBuy - smallestPlayerPurchasedServer.server.maxRam > additionalRamNeeded)) {\\r\\n        ramToBuy = ramToBuy * 2;\\r\\n    }\\r\\n\\r\\n    if (ramToBuy >= maxRam) {\\r\\n        ramToBuy = maxRam;\\r\\n    }\\r\\n\\r\\n    const costOfRamToBuy = ns.getPurchasedServerUpgradeCost(smallestPlayerPurchasedServer.name, ramToBuy);\\r\\n    const canSpendMoney = stockMarketReserveMoney.canSpend(ns, costOfRamToBuy);\\r\\n\\r\\n    if (canSpendMoney) {\\r\\n        ns.upgradePurchasedServer(smallestPlayerPurchasedServer.name, ramToBuy);\\r\\n\\r\\n        return true;\\r\\n    } else {\\r\\n        if (countOfTriesToBuyServers > 100) {\\r\\n            const now = new Date();\\r\\n            const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n            ns.toast(`${timeStamp} Too expensive to buy ${ramToBuy} $${Number((costOfRamToBuy).toFixed(2)).toLocaleString()}`, \\\"warning\\\", 300000);\\r\\n            countOfTriesToBuyServers = 0;\\r\\n        }\\r\\n\\r\\n        return purchaseServer(ns, maxRam, additionalRamNeeded, stockMarketReserveMoney);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nclass TypeOfPurchase {\\r\\n\\r\\n    max = false;\\r\\n    min = true;\\r\\n    average = false;\\r\\n    lastPurchaseDate = new Date();\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n\\r\\n    changeType() {\\r\\n\\r\\n        if (this.min) {\\r\\n            this.min = false;\\r\\n            this.average = true;\\r\\n            this.max = false;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (this.average) {\\r\\n            this.min = false;\\r\\n            this.average = false;\\r\\n            this.max = true;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (this.max) {\\r\\n            this.min = true;\\r\\n            this.average = false;\\r\\n            this.max = false;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        this.lastPurchaseDate = new Date();\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = moneyInvested / 2;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n// ns.tprint(`${canSpend} = ${moneyNeeded} < ${moneyOnHome} - ${moneyToSaveForTrading}`)\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            const debugInfor = {moneyOnHome, moneyNeeded, moneyToSaveForTrading, canSpend}\\r\\n            // ns.write(`data/canpuchase${new Date().toJSON().replaceAll(\\\".\\\", \\\"\\\")}.txt`, JSON.stringify(debugInfor), \\\"W\\\")\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"purchase-server\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"purchase-server\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/investments/purchase-server.js\",\"server\":\"home\"}}],[\"scripts/investments/invest-in-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const ramObservationsTextFile = '../../data/ramObservations.txt';\\r\\n    \\r\\n    const stopInvestingFileName = \\\"stopInvesting.txt\\\";\\r\\n    if (ns.fileExists(stopInvestingFileName)) {\\r\\n        if (ns.fileExists(ramObservationsTextFile)) {\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n    let stockMarketReserveMoney = new ReserveForTrading();\\r\\n    if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n        stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n    }\\r\\n\\r\\n    checkTor(ns, stockMarketReserveMoney);\\r\\n\\r\\n    if (stockMarketReserveMoney.capitalToReserveForTrading > 4_000_000_000) {\\r\\n        if (!ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n            checkTor(ns);\\r\\n            const formulasCost = ns.singularity.getDarkwebProgramCost(\\\"Formulas.exe\\\")\\r\\n            if(stockMarketReserveMoney.canSpend(ns, formulasCost)){\\r\\n                ns.singularity.purchaseProgram(\\\"Formulas.exe\\\");\\r\\n                ns.rm(ramObservationsTextFile);\\r\\n                ns.rm('../../buyOrUpgradeServerFlag.txt');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    purchaseProgram(ns, 50, \\\"BruteSSH.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 100, \\\"FTPCrack.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 250, \\\"relaySMTP.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 500, \\\"HTTPWorm.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 750, \\\"SQLInject.exe\\\", stockMarketReserveMoney);\\r\\n}\\r\\n\\r\\nfunction purchaseProgram(ns, atWhatHackingLevelToBuy, programToBuy, stockMarketReserveMoney) {\\r\\n    const playerHackingLevel = ns.getHackingLevel();\\r\\n    if (!ns.fileExists(programToBuy) && playerHackingLevel > atWhatHackingLevelToBuy && ns.hasTorRouter()) {\\r\\n\\r\\n        const cost = ns.singularity.getDarkwebProgramCost(programToBuy);\\r\\n\\r\\n        if(stockMarketReserveMoney.canSpend(ns, cost)){\\r\\n            ns.singularity.purchaseProgram(programToBuy);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction checkTor(ns, stockMarketReserveMoney) {\\r\\n    if (!ns.hasTorRouter() && stockMarketReserveMoney.canSpend(ns, 200_000)) {\\r\\n        ns.singularity.purchaseTor()\\r\\n    }\\r\\n}\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns){\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = moneyInvested / 2;\\r\\n        \\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if(this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit){\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded){\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if(moneyToSaveForTrading < 0){\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if(moneyToSaveForTrading > this.stockMarketReserveMoneyLimit){\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if(canSpend === false){\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"invest-in-programs\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount){\\r\\n\\r\\n        const nameOfRequest = \\\"invest-in-programs\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n\\r\\n        if(moneyRequestedPreviously){\\r\\n            if(moneyRequestedPreviously < amount){\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/investments/invest-in-programs.js\",\"server\":\"home\"}}],[\"scripts/singularity/backdoor-all-machines.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const backdooringFile = \\\"data/backdooring.txt\\\";\\r\\n// run on n00dles continuously? that way we can maybe avoid the annoyingness on home of it going to other machiens. \\r\\nexport async function main(ns) {\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n\\r\\n    if(ns.fileExists(backdooringFile)){\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const machinesToBackdoorFirst = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I.\\\", \\\"run4theh111z\\\"]\\r\\n\\r\\n    for(const machineName of machinesToBackdoorFirst){\\r\\n        if(await backdoorMachine(machineName, enviroment, ns)){\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const machineName of enviroment.map(x => x.name)) {\\r\\n        if(await backdoorMachine(machineName, enviroment, ns)){\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function backdoorMachine (machineName, enviroment, ns){\\r\\n    const serverWithLineage = enviroment.find(x => x.name === machineName)\\r\\n\\r\\n    if (serverWithLineage && !serverWithLineage.server.backdoorInstalled && serverWithLineage.server.hasAdminRights && !serverWithLineage.server.purchasedByPlayer) {\\r\\n        \\r\\n        ns.write(backdooringFile, JSON.stringify(new Date()), \\\"W\\\");\\r\\n        \\r\\n        for (const server of serverWithLineage.lineage) {\\r\\n            await ns.singularity.connect(server);\\r\\n        }\\r\\n\\r\\n        await ns.singularity.connect(serverWithLineage.name);\\r\\n        await ns.singularity.installBackdoor();\\r\\n        await ns.singularity.connect(\\\"home\\\");\\r\\n\\r\\n        ns.rm(backdooringFile);\\r\\n        return true;\\r\\n    } \\r\\n\\r\\n    return false;\\r\\n\\r\\n}\",\"filename\":\"scripts/singularity/backdoor-all-machines.js\",\"server\":\"home\"}}],[\"scripts/singularity/workout.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(false);\\r\\n    const includesHVMind = ownedAugmentations.includes(\\\"ECorp HVMind Implant\\\");\\r\\n\\r\\n    if (!includesHVMind) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    // if(getBuffForFaction(ns, \\\"The Covenant\\\", 850)){\\r\\n    //     return;\\r\\n    // } \\r\\n\\r\\n    if(getBuffForFaction(ns, \\\"Illuminati\\\", 1200)){\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n    if(currentWork && currentWork.type === \\\"CLASS\\\"){\\r\\n        ns.singularity.stopAction();\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\nfunction getBuffForFaction(ns, faction, targetForAttributes){\\r\\n    const player = ns.getPlayer();\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (!player.factions.includes(faction) && (!currentWork || currentWork.type === \\\"CLASS\\\")) {\\r\\n        \\r\\n        if(doExersizeIfAppropriate(player.skills.agility, currentWork, ns, 'agi', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        if(doExersizeIfAppropriate(player.skills.defense, currentWork, ns, 'def', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        if(doExersizeIfAppropriate(player.skills.strength, currentWork, ns, 'str', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        if(doExersizeIfAppropriate(player.skills.dexterity, currentWork, ns, 'dex', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction doExersizeIfAppropriate(skill, currentWork, ns, type, targetForAttributes) {\\r\\n    if (skill < targetForAttributes) {\\r\\n        if (!currentWork || currentWork.classType !== type) {\\r\\n            ns.singularity.travelToCity(\\\"Sector-12\\\");\\r\\n            ns.singularity.gymWorkout(\\\"powerhouse gym\\\", type, true);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/workout.js\",\"server\":\"home\"}}],[\"scripts/singularity/upgade-home-machine.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let visitedBefore = false;\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const ramObservationsTextFile = '../../data/ramObservations.txt';\\r\\n    const stopInvestingFileName = \\\"stopInvesting.txt\\\";\\r\\n    if (ns.fileExists(stopInvestingFileName)) {\\r\\n        if (ns.fileExists(ramObservationsTextFile)) {\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    visitedBefore = false;\\r\\n\\r\\n    await upgradeHomeRamOrCpu(ns, 11_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 100_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 30_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 100_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 1_000_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 10_000_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 100_000_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 1_000_000_000_000_000);\\r\\n}\\r\\n\\r\\nasync function upgradeHomeRamOrCpu(ns, moneyLimit) {\\r\\n    if (visitedBefore) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const ramUpgradeCost = ns.singularity.getUpgradeHomeRamCost();\\r\\n    const coreUpgradeCost = ns.singularity.getUpgradeHomeCoresCost();\\r\\n\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (moneyLimit < coreUpgradeCost && moneyLimit < ramUpgradeCost) {\\r\\n        return;\\r\\n    } else {\\r\\n        visitedBefore = true;\\r\\n    }\\r\\n\\r\\n    const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n    let stockMarketReserveMoney = new ReserveForTrading();\\r\\n    if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n        stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n    }\\r\\n\\r\\n    if (ramUpgradeCost < coreUpgradeCost) {\\r\\n\\r\\n        const moneyLeftOverForRam = moneyAvailable - ramUpgradeCost;\\r\\n\\r\\n        if (moneyLeftOverForRam > moneyLimit) {\\r\\n            if (stockMarketReserveMoney.canSpend(ns, ramUpgradeCost)) {\\r\\n                ns.singularity.upgradeHomeRam();\\r\\n                ns.toast(`Upgraded home ram`, \\\"success\\\", null);\\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n        }\\r\\n\\r\\n    } else {\\r\\n\\r\\n        const moneyLeftOverForCores = moneyAvailable - coreUpgradeCost;\\r\\n\\r\\n        if (moneyLeftOverForCores > moneyLimit) {\\r\\n            if (stockMarketReserveMoney.canSpend(ns, coreUpgradeCost)) {\\r\\n                ns.singularity.upgradeHomeCores()\\r\\n                ns.toast(`Upgraded home core`, \\\"success\\\", null);\\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = moneyInvested / 2;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"upgrade-home-machine\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"upgrade-home-machine\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/upgade-home-machine.js\",\"server\":\"home\"}}],[\"scripts/singularity/travel-to-get-augs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const ownedAugmentations = JSON.parse(ns.read(\\\"data/ownedAugs.txt\\\"));\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (moneyAvailable > 10_000_000 && notInAnyCityFaction(ns)) {\\r\\n\\r\\n        if (travelToGetUniqueAugments(ns, \\\"Neuregen Gene Modification\\\", \\\"Chongqing\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, 'PCMatrix', \\\"Aevum\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, 'CashRoot Starter Kit', \\\"Sector-12\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, \\\"DermaForce Particle Barrier\\\", \\\"Volhaven\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, \\\"NutriGen Implant\\\", \\\"New Tokyo\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, \\\"INFRARET Enhancement\\\", \\\"Ishima\\\", ownedAugmentations)) { return; }\\r\\n    }\\r\\n\\r\\n    const playersLocation = ns.getPlayer().city\\r\\n    if (moneyAvailable > 250_000_000) {\\r\\n        if (ns.singularity.getFactionRep(\\\"Tian Di Hui\\\") === 0 && playersLocation !== \\\"Chongqing\\\") {\\r\\n            ns.singularity.travelToCity(\\\"Chongqing\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction notInAnyCityFaction(ns){\\r\\n    const cityFactions = [\\\"Chongqing\\\", \\\"Aevum\\\", \\\"Sector-12\\\", \\\"Volhaven\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"];\\r\\n\\r\\n    for (const city of cityFactions) {\\r\\n        if(ns.singularity.getFactionRep(city)){\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n}\\r\\n\\r\\nfunction travelToGetUniqueAugments(ns, augmentWanted, city, ownedAugmentations) {\\r\\n    if (!ownedAugmentations.includes(augmentWanted)) {\\r\\n\\r\\n        const playersLocation = ns.getPlayer().city\\r\\n        if (ns.singularity.getFactionRep(city) === 0 && playersLocation !== city) {\\r\\n            ns.singularity.travelToCity(city);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\n\\r\\n\",\"filename\":\"scripts/singularity/travel-to-get-augs.js\",\"server\":\"home\"}}],[\"scripts/singularity/study-computer-science.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (player.factions.length === 0 && !currentWork) {\\r\\n        ns.singularity.universityCourse(\\\"Rothman University\\\", \\\"Computer Science\\\", true);\\r\\n        return;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/singularity/study-computer-science.js\",\"server\":\"home\"}}],[\"scripts/singularity/join-organziations.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const toJoinInOrderInWhichIWantToComplete = [\\r\\n        \\\"CyberSec\\\",\\r\\n        \\\"NiteSec\\\",\\r\\n        \\\"Chongqing\\\",\\r\\n        \\\"The Black Hand\\\",\\r\\n        \\\"Bachman & Associates\\\",\\r\\n        \\\"BitRunners\\\",\\r\\n        \\\"Daedalus\\\",\\r\\n        \\\"NWO\\\",\\r\\n        \\\"OmniTek Incorporated\\\",\\r\\n        \\\"Blade Industries\\\",\\r\\n        \\\"ECorp\\\",\\r\\n    // \\\"The Covenant\\\",\\r\\n        \\\"Illuminati\\\",\\r\\n        \\\"Aevum\\\",\\r\\n        \\\"Volhaven\\\",\\r\\n        \\\"New Tokyo\\\",\\r\\n        \\\"Ishima\\\",\\r\\n        \\\"Tian Di Hui\\\",\\r\\n        \\\"Netburners\\\",\\r\\n    ];\\r\\n\\r\\n    const companiesWeWantToBecomePartOf = [\\r\\n        \\\"Bachman & Associates\\\", \\r\\n        \\\"NWO\\\", \\r\\n        \\\"OmniTek Incorporated\\\", \\r\\n        \\\"Blade Industries\\\", \\r\\n        \\\"ECorp\\\"\\r\\n    ]; \\r\\n\\r\\n    const doNoWorkFor = [\\r\\n        \\\"Aevum\\\",\\r\\n        \\\"Volhaven\\\",\\r\\n        \\\"New Tokyo\\\",\\r\\n        \\\"Ishima\\\",\\r\\n        \\\"Tian Di Hui\\\",\\r\\n        \\\"Netburners\\\"\\r\\n    ];\\r\\n\\r\\n    const stopAtAugments = [\\r\\n        { final: true, faction: \\\"Chongqing\\\", augmentToStopAt: \\\"Neuregen Gene Modification\\\" },\\r\\n        { final: true, faction: \\\"NiteSec\\\", augmentToStopAt: \\\"Cranial Signal Processors - Gen III\\\" },\\r\\n        { final: true, faction: \\\"The Black Hand\\\", augmentToStopAt: \\\"Cranial Signal Processors - Gen IV\\\" },\\r\\n    ]\\r\\n\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    if (moneyAvailable > 150_000_000) {\\r\\n        toJoinInOrderInWhichIWantToComplete.push(\\\"Sector-12\\\");\\r\\n        doNoWorkFor.push(\\\"Sector-12\\\");\\r\\n    }\\r\\n\\r\\n    const factionInvitations = ns.singularity.checkFactionInvitations();\\r\\n\\r\\n    const organzations = { toJoinInOrderInWhichIWantToComplete, companiesWeWantToBecomePartOf, doNoWorkFor, stopAtAugments };\\r\\n\\r\\n    const organizationTextFileName = \\\"data/organizations.txt\\\";\\r\\n    ns.rm(organizationTextFileName);\\r\\n    ns.write(organizationTextFileName, JSON.stringify(organzations), \\\"W\\\");\\r\\n\\r\\n    for (const name of toJoinInOrderInWhichIWantToComplete) {\\r\\n        if (factionInvitations.includes(name)) {\\r\\n            await ns.singularity.joinFaction(name);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/singularity/join-organziations.js\",\"server\":\"home\"}}],[\"scripts/singularity/finish-round.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let incomePerHourEstimate;\\r\\nlet updatedMoneyEstimate = false;\\r\\n\\r\\nexport async function main(ns) {\\r\\n\\r\\n    if (!ns.stock.has4SDataTIXAPI() || !ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const factionToMaxFile = \\\"data/factionToMax.txt\\\";\\r\\n    const factionDonationFile = 'data/factionDonatation.txt'\\r\\n    const incomeEveryMinuteObservationsFile = 'data/incomeEveryMinuteForTheLast30Minutes.txt'\\r\\n\\r\\n    let factionToMax;\\r\\n\\r\\n    let incomeObservations = [];\\r\\n    const lastObservation = new Date();\\r\\n    let lastObservationRecordedMoney = new Date();\\r\\n\\r\\n    const formatter = new Intl.NumberFormat('en-US', {\\r\\n        style: 'currency',\\r\\n        currency: 'USD',\\r\\n    });\\r\\n\\r\\n    if (ns.fileExists(incomeEveryMinuteObservationsFile)) {\\r\\n        const incomePlusDateFromFile = JSON.parse(ns.read(incomeEveryMinuteObservationsFile));\\r\\n        incomeObservations = incomePlusDateFromFile.incomeObservations;\\r\\n        lastObservationRecordedMoney = new Date(incomePlusDateFromFile.lastObservation);\\r\\n    } else {\\r\\n        ns.write(incomeEveryMinuteObservationsFile, JSON.stringify({ incomeObservations, lastObservation }), \\\"W\\\");\\r\\n    }\\r\\n\\r\\n    if (lastObservationRecordedMoney.getMinutes() !== lastObservation.getMinutes()) {\\r\\n        let totalIncomeSinceAugInstall = 0\\r\\n\\r\\n        const moneySources = ns.getMoneySources();\\r\\n\\r\\n        for (let [key, value] of Object.entries(moneySources.sinceInstall)) {\\r\\n            if (key !== \\\"total\\\" && value > 0 && key !== \\\"stock\\\") {\\r\\n                totalIncomeSinceAugInstall += value;\\r\\n            }\\r\\n        }\\r\\n        incomeObservations.push(totalIncomeSinceAugInstall);\\r\\n\\r\\n        const totalIncome30MinutesAgo = incomeObservations[0];\\r\\n\\r\\n        const incomePerMinute = (totalIncomeSinceAugInstall - totalIncome30MinutesAgo) / incomeObservations.length;\\r\\n        incomePerHourEstimate = incomePerMinute * 60;\\r\\n        updatedMoneyEstimate = true;\\r\\n\\r\\n        if (incomeObservations.length > 30) {\\r\\n            incomeObservations.shift();\\r\\n        }\\r\\n\\r\\n        ns.rm(incomeEveryMinuteObservationsFile);\\r\\n        ns.write(incomeEveryMinuteObservationsFile, JSON.stringify({ incomeObservations, lastObservation }), \\\"W\\\");\\r\\n    } else {\\r\\n        updatedMoneyEstimate = false;\\r\\n    }\\r\\n\\r\\n    let analytics = new EndOfRoundAnalytics();\\r\\n    const endOfRoundAnalyticsFile = \\\"analytics/end-round.txt\\\";\\r\\n    if (ns.fileExists(endOfRoundAnalyticsFile)) {\\r\\n        analytics = JSON.parse(ns.read(endOfRoundAnalyticsFile));\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(factionToMaxFile) || ns.fileExists(factionDonationFile)) {\\r\\n        if (ns.fileExists(factionToMaxFile)) {\\r\\n            factionToMax = ns.read(factionToMaxFile);\\r\\n\\r\\n            if (!analytics.firstAssignFactionToMax) {\\r\\n                analytics.firstAssignFactionToMax = new Date();\\r\\n            }\\r\\n        } else {\\r\\n            factionToMax = ns.read(factionDonationFile);\\r\\n\\r\\n            if (!analytics.firstAssignFactionToMaxViaDonation) {\\r\\n                analytics.firstAssignFactionToMaxViaDonation = new Date();\\r\\n            }\\r\\n        }\\r\\n    } else {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (!analytics.factionsToMax.find(x => x.factionToMax === factionToMax)) {\\r\\n        const firstTime = new Date();\\r\\n        analytics.factionsToMax.push({ factionToMax, firstTime });\\r\\n    }\\r\\n\\r\\n    saveAnalytics(ns, analytics);\\r\\n\\r\\n    const player = ns.getPlayer();\\r\\n\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n\\r\\n    const mostRepExpensiveForEachFaction = [];\\r\\n    for (const faction of player.factions) {\\r\\n        const maximumAugRep = Math.max(...ns\\r\\n            .singularity\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n            .filter(x => !ownedAugmentations.includes(x))\\r\\n            .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n        if (maximumAugRep > 0) {\\r\\n            mostRepExpensiveForEachFaction.push({ faction, maximumAugRep });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const targetFaction = mostRepExpensiveForEachFaction\\r\\n        .filter(x => x.faction === factionToMax)\\r\\n        .pop();\\r\\n\\r\\n    setGoalAugment(ownedAugmentations, factionToMax, targetFaction, ns);\\r\\n\\r\\n    const currentFactionRep = ns.singularity.getFactionRep(targetFaction.faction);\\r\\n    const currentFactionFavor = ns.singularity.getFactionFavor(targetFaction.faction);\\r\\n\\r\\n    let targetRepForGettingToFavor = 700_000;\\r\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n        const favorGain = ns.singularity.getFactionFavorGain(targetFaction.faction);\\r\\n        if (favorGain + currentFactionFavor > 75) {\\r\\n            targetRepForGettingToFavor = currentFactionFavor;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (!analytics.firstEncounterOfRepTrigger) {\\r\\n        const repTrigger = populateRepTrigger(targetFaction, currentFactionRep, targetRepForGettingToFavor, ns, factionDonationFile, factionToMaxFile);\\r\\n        analytics.firstEncounterOfRepTrigger = repTrigger;\\r\\n        saveAnalytics(ns, analytics);\\r\\n    }\\r\\n\\r\\n    if (targetFaction.maximumAugRep < currentFactionRep || targetRepForGettingToFavor < currentFactionRep || (ns.fileExists(factionDonationFile) && !ns.fileExists(factionToMaxFile))) {\\r\\n\\r\\n        if (!analytics.repTrigger) {\\r\\n            const repTrigger = populateRepTrigger(targetFaction, currentFactionRep, targetRepForGettingToFavor, ns, factionDonationFile, factionToMaxFile);\\r\\n            analytics.repTrigger = repTrigger;\\r\\n            saveAnalytics(ns, analytics);\\r\\n        }\\r\\n\\r\\n        const factionsWithAugmentsToBuy =\\r\\n            mostRepExpensiveForEachFaction\\r\\n                .map(x => {\\r\\n                    {\\r\\n                        const faction = x.faction;\\r\\n                        const factionRep = ns.singularity.getFactionRep(faction);\\r\\n                        const factionAugmentsThatIDontOwnAndCanAfford = ns\\r\\n                            .singularity\\r\\n                            .getAugmentationsFromFaction(faction)\\r\\n                            .filter(y => y !== \\\"NeuroFlux Governor\\\")\\r\\n                            .filter(y => !ownedAugmentations.includes(y))\\r\\n                            .map(y => {\\r\\n                                return {\\r\\n                                    augmentName: y,\\r\\n                                    augmentationRepCost: ns.singularity.getAugmentationRepReq(y),\\r\\n                                    price: ns.singularity.getAugmentationPrice(y),\\r\\n                                    prereqs: ns.singularity.getAugmentationPrereq(y)\\r\\n                                }\\r\\n                            })\\r\\n                            .filter(y => y.augmentationRepCost < factionRep)\\r\\n                            .sort((a, b) => b.price - a.price);\\r\\n\\r\\n                        return {\\r\\n                            faction,\\r\\n                            factionRep,\\r\\n                            factionAugmentsThatIDontOwnAndCanAfford\\r\\n                        }\\r\\n                    }\\r\\n                });\\r\\n\\r\\n        const priceOfMostExpensiveAugment = Math.max(...factionsWithAugmentsToBuy.find(x => x.faction === targetFaction.faction).factionAugmentsThatIDontOwnAndCanAfford.map(x => x.price));\\r\\n\\r\\n\\r\\n        if (priceOfMostExpensiveAugment < 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // --------\\r\\n        // My augment script ranks every augment that hasn't been purchased by price, and then calculates how many of them I can buy (taking into account the 1.9x price increase per augment, and the additional 1.14x increase per NeuroFlux Governor level). \\r\\n\\r\\n        const purchasableAugments = new Map();\\r\\n\\r\\n        for (const factionWithAugments of factionsWithAugmentsToBuy) {\\r\\n            for (const augment of factionWithAugments.factionAugmentsThatIDontOwnAndCanAfford) {\\r\\n                if (purchasableAugments.has(augment.augmentName) === false) {\\r\\n                    const item = {\\r\\n                        augmentationRepCost: augment.augmentationRepCost,\\r\\n                        price: augment.price,\\r\\n                        prereqs: augment.prereqs,\\r\\n                        faction: factionWithAugments.faction\\r\\n                    }\\r\\n                    purchasableAugments.set(augment.augmentName, item)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        const augmentsLeft = Array.from(purchasableAugments.entries()).sort((a, b) => b[1].price - a[1].price);\\r\\n\\r\\n        const orderedAugments = []; // { factionName, augmentName, basePrice, multipledPrice}\\r\\n\\r\\n        function addPrereqs(prereqName) {\\r\\n            const augment = purchasableAugments.get(prereqName);\\r\\n\\r\\n            if (augment && !ownedAugmentations.find(x => x.augmentName === prereqName)) {\\r\\n\\r\\n                if (augment.prereqs.length > 0) {//it has prereqs, pass it into this. \\r\\n                    for (const prereq of augment.prereqs) {\\r\\n                        addPrereqs(prereq)\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (!orderedAugments.find(x => x.augmentName === prereqName)) {\\r\\n                    orderedAugments.push({ faction: augment.faction, augmentName: prereqName, basePrice: augment.price });\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (const augmentData of augmentsLeft) {\\r\\n            const augmentName = augmentData[0];\\r\\n            const augment = augmentData[1];\\r\\n\\r\\n            if (augment.prereqs.length > 0) {\\r\\n                for (const prereqName of augment.prereqs) {\\r\\n                    addPrereqs(prereqName);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (!orderedAugments.find(x => x.augmentName === augmentName)) {\\r\\n                orderedAugments.push({ faction: augment.faction, augmentName: augmentName, basePrice: augment.price, multipledPrice: 0 })\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        let priceMultipler = 1;\\r\\n\\r\\n        for (const augment of orderedAugments) {\\r\\n            augment.multipledPrice = augment.basePrice * priceMultipler;\\r\\n            priceMultipler *= 1.9;\\r\\n        }\\r\\n\\r\\n        const moneyNeededForAugments = orderedAugments.reduce((acc, x) => acc + x.multipledPrice, 0);\\r\\n\\r\\n        // make a pass for multiplied price\\r\\n\\r\\n        // (faction, augmentName)\\r\\n        // arrange with prereqs in mind\\r\\n        // then 1.9X the cost every purchase\\r\\n        // then figure out how many NeuroFlux governors we can buy with the rep, and then figure out how much that would cost. \\r\\n\\r\\n        // new order ->\\r\\n        // augments\\r\\n        // neuroflux\\r\\n        // computer\\r\\n        // if we have extra money, then we buy more neuroflux with purchased rep\\r\\n\\r\\n\\r\\n\\r\\n        /// ------\\r\\n\\r\\n\\r\\n        let buyAugmentsWhenWeHaveMoreThanThisMuchMoney = moneyNeededForAugments;\\r\\n\\r\\n        const estimatedIncomeForTheNextFourHours = incomePerHourEstimate * 4;\\r\\n\\r\\n        const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        const moneyFormatted = formatter.format(incomePerHourEstimate);\\r\\n\\r\\n        if (moneyFormatted !== \\\"$NaN\\\") {\\r\\n            const hoursTillInstall = Math.floor(buyAugmentsWhenWeHaveMoreThanThisMuchMoney / incomePerHourEstimate);\\r\\n            if (updatedMoneyEstimate) {\\r\\n                const now = new Date();\\r\\n                const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n\\r\\n                ns.toast(`${timeStamp} Income Per Hour Estimate: ${moneyFormatted}. ~Hours to install: ${hoursTillInstall}`, \\\"success\\\", 60000)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!analytics.firstEncoundedMoneyTrigger) {\\r\\n            const moneyTrigger = createMoneyTrigger(estimatedIncomeForTheNextFourHours, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, moneyAvailable, formatter);\\r\\n\\r\\n            analytics.firstEncoundedMoneyTrigger = moneyTrigger;\\r\\n            saveAnalytics(ns, analytics);\\r\\n        }\\r\\n\\r\\n        if (estimatedIncomeForTheNextFourHours > buyAugmentsWhenWeHaveMoreThanThisMuchMoney || moneyAvailable > buyAugmentsWhenWeHaveMoreThanThisMuchMoney) {\\r\\n\\r\\n            const stopInvestingFileName = \\\"stopInvesting.txt\\\";\\r\\n            if (!ns.fileExists(stopInvestingFileName)) {\\r\\n                ns.write(stopInvestingFileName, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, \\\"W\\\")\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            if (moneyAvailable > buyAugmentsWhenWeHaveMoreThanThisMuchMoney) {\\r\\n                const stopStockTradingFileName = \\\"stopTrading.txt\\\";\\r\\n                if (!ns.fileExists(stopStockTradingFileName)) {\\r\\n                    ns.write(stopStockTradingFileName, \\\"\\\", \\\"W\\\")\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                if (!analytics.moneyTrigger) {\\r\\n                    const moneyTrigger = createMoneyTrigger(estimatedIncomeForTheNextFourHours, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, moneyAvailable, formatter);\\r\\n\\r\\n                    analytics.moneyTrigger = moneyTrigger;\\r\\n                    saveAnalytics(ns, analytics);\\r\\n                }\\r\\n\\r\\n                for (const augment of orderedAugments) {\\r\\n                    purchaseAug(ns, augment, analytics);\\r\\n                }\\r\\n\\r\\n                upgradeHomeMachine(ns, analytics);\\r\\n\\r\\n                const factionsByRating = factionsWithAugmentsToBuy.sort((a, b) => b.factionRep - a.factionRep);\\r\\n\\r\\n                purchaseNeuroFluxGovernors(ns, factionsByRating[0].faction, analytics);\\r\\n\\r\\n                analytics.moneyLeft = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n                saveAnalytics(ns, analytics, true);\\r\\n\\r\\n                ns.singularity.installAugmentations('scripts/coordinator.js')\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    saveAnalytics(ns, analytics);\\r\\n}\\r\\n\\r\\nfunction createMoneyTrigger(estimatedIncomeForTheNextFourHours, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, moneyAvailable, formatter) {\\r\\n    const moneyTrigger = new MoneyTrigger();\\r\\n    moneyTrigger.estimatedIncomeTriggered = estimatedIncomeForTheNextFourHours > buyAugmentsWhenWeHaveMoreThanThisMuchMoney;\\r\\n    moneyTrigger.moneyIsGreaterThanTriggered = moneyAvailable > buyAugmentsWhenWeHaveMoreThanThisMuchMoney;\\r\\n\\r\\n    moneyTrigger.estimatedIncomeForTheNextFourHours = formatter.format(estimatedIncomeForTheNextFourHours);\\r\\n    moneyTrigger.moneyRightNow = formatter.format(moneyAvailable);\\r\\n    moneyTrigger.buyArgumentsWhenWeHave = formatter.format(buyAugmentsWhenWeHaveMoreThanThisMuchMoney);\\r\\n    return moneyTrigger;\\r\\n}\\r\\n\\r\\nfunction populateRepTrigger(targetFaction, currentFactionRep, targetRepForGettingToFavor, ns, factionDonationFile, factionToMaxFile) {\\r\\n    const repTrigger = new RepTrigger();\\r\\n    repTrigger.factionRepGreaterThanMaximumAug = targetFaction.maximumAugRep < currentFactionRep;\\r\\n    repTrigger.factionRepGreaterThanTargetToGetToFavorNeeded = targetRepForGettingToFavor < currentFactionRep;\\r\\n    repTrigger.factionDonationTrigger = ns.fileExists(factionDonationFile) && !ns.fileExists(factionToMaxFile);\\r\\n\\r\\n    repTrigger.maximumAugRepNeeded = targetFaction.maximumAugRep;\\r\\n    repTrigger.currentFactionRep = currentFactionRep;\\r\\n    repTrigger.targetRepForGettingToFavor = targetRepForGettingToFavor;\\r\\n    return repTrigger;\\r\\n}\\r\\n\\r\\nfunction saveAnalytics(ns, analytics, final = false) {\\r\\n    let endOfRoundAnalyticsFile = \\\"analytics/end-round.txt\\\";\\r\\n    ns.rm(endOfRoundAnalyticsFile);\\r\\n\\r\\n    if (final) {\\r\\n        const now = new Date()\\r\\n        const factionToMax = analytics.factionsToMax[analytics.factionsToMax.length - 1].factionToMax.replaceAll(' ', '');\\r\\n        endOfRoundAnalyticsFile = `analytics/${now.toISOString().split('T')[0]}-${String(now.getHours()).padStart(2, 0)}-${String(now.getMinutes()).padStart(2, 0)}-${factionToMax}-end-round.txt`;\\r\\n    }\\r\\n\\r\\n    analytics.lastSaved = new Date();\\r\\n    ns.write(endOfRoundAnalyticsFile, JSON.stringify(analytics), \\\"W\\\");\\r\\n}\\r\\n\\r\\nfunction setGoalAugment(ownedAugmentations, factionToMax, targetFaction, ns) {\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n\\r\\n    for (const stopAtAugment of organizations.stopAtAugments) {\\r\\n        const goalAugment = stopAtAugment.augmentToStopAt;\\r\\n        const goalFaction = stopAtAugment.faction;\\r\\n\\r\\n        if (!ownedAugmentations.includes(goalAugment) && factionToMax === goalFaction) {\\r\\n            targetFaction.maximumAugRep = ns.singularity.getAugmentationRepReq(goalAugment);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction purchaseNeuroFluxGovernors(ns, faction, analytics) {\\r\\n\\r\\n    const augmentName = \\\"NeuroFlux Governor\\\"\\r\\n\\r\\n    let price = ns.singularity.getAugmentationPrice(augmentName);\\r\\n    let moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    let augmentRepPrice = ns.singularity.getAugmentationRepReq(augmentName);\\r\\n    let factionRep = ns.singularity.getFactionRep(faction);\\r\\n\\r\\n    while (price < moneyAvailable) {\\r\\n        if (factionRep < augmentRepPrice) {\\r\\n            if (ns.singularity.getFactionFavor(faction) > 75 && ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n                const repNeeded = augmentRepPrice - factionRep;\\r\\n                let dollarsDonated = 0;\\r\\n                let purchasedRep = 0;\\r\\n                const player = ns.getPlayer();\\r\\n                while (repNeeded > purchasedRep) {\\r\\n                    dollarsDonated += 1_000_000;\\r\\n                    purchasedRep = ns.formulas.reputation.repFromDonation(dollarsDonated, player);\\r\\n                }\\r\\n\\r\\n                analytics.moneySpent.repPurchased += dollarsDonated;\\r\\n                ns.singularity.donateToFaction(faction, dollarsDonated);\\r\\n            } else {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        factionRep = ns.singularity.getFactionRep(faction);\\r\\n\\r\\n        if (factionRep > augmentRepPrice) {\\r\\n            analytics.moneySpent.fluxGovernors += price;\\r\\n            ns.singularity.purchaseAugmentation(faction, augmentName);\\r\\n        }\\r\\n\\r\\n        price = ns.singularity.getAugmentationPrice(augmentName);\\r\\n        moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n        augmentRepPrice = ns.singularity.getAugmentationRepReq(augmentName);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction upgradeHomeMachine(ns, analytics) {\\r\\n    const home = \\\"home\\\";\\r\\n    const ramCost = ns.singularity.getUpgradeHomeRamCost();\\r\\n    const coreCost = ns.singularity.getUpgradeHomeCoresCost();\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(home);\\r\\n    const orginalSpecs = ns.getServer(home);\\r\\n\\r\\n    if (ramCost > moneyAvailable && coreCost > moneyAvailable) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (ramCost > coreCost) {\\r\\n        analytics.moneySpent.homeCores += coreCost;\\r\\n        ns.singularity.upgradeHomeCores();\\r\\n    } else {\\r\\n        analytics.moneySpent.homeRam += ramCost;\\r\\n        ns.singularity.upgradeHomeRam();\\r\\n    }\\r\\n\\r\\n    const upgradedServer = ns.getServer(home);\\r\\n\\r\\n    analytics.amountOfRamIncrease += upgradedServer.maxRam - orginalSpecs.maxRam;\\r\\n    analytics.amountOfCoresIncrease += upgradedServer.cpuCores - orginalSpecs.cpuCores;\\r\\n\\r\\n    return upgradeHomeMachine(ns, analytics);\\r\\n}\\r\\n\\r\\nfunction purchaseAug(ns, augment, analytics) {\\r\\n    const ownedAugments = ns.singularity.getOwnedAugmentations(true);\\r\\n    const augmentName = augment.augmentName;\\r\\n\\r\\n    if (ownedAugments.includes(augmentName) === false) {\\r\\n        const augmentPrice = ns.singularity.getAugmentationPrice(augmentName);\\r\\n        const amountOfMoneyWeHave = ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n\\r\\n        if (augmentPrice < amountOfMoneyWeHave) {\\r\\n            analytics.moneySpent.augments += augmentPrice;\\r\\n            if (!analytics.augsBought) {\\r\\n                analytics.augsBought = [];\\r\\n            }\\r\\n            analytics.augsBought.push(augmentName)\\r\\n\\r\\n            ns.singularity.purchaseAugmentation(augment.faction, augmentName);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass EndOfRoundAnalytics {\\r\\n    firstStarted = new Date();\\r\\n\\r\\n\\r\\n    firstAssignFactionToMax;\\r\\n    firstAssignFactionToMaxViaDonation;\\r\\n\\r\\n    factionsToMax = [];\\r\\n\\r\\n    firstEncounterOfRepTrigger;\\r\\n    repTrigger;\\r\\n\\r\\n\\r\\n    firstEncoundedMoneyTrigger;\\r\\n    moneyTrigger;\\r\\n\\r\\n    augsBought = [];\\r\\n\\r\\n    amountOfRamIncrease\\r\\n    amountOfCoresIncrease\\r\\n\\r\\n    moneySpent = new MoneySpent();\\r\\n\\r\\n    moneyLeft = 0;\\r\\n    lastSaved;\\r\\n}\\r\\n\\r\\nclass MoneyTrigger {\\r\\n    estimatedIncomeTriggered;\\r\\n    moneyIsGreaterThanTriggered;\\r\\n\\r\\n    estimatedIncomeForTheNextFourHours;\\r\\n    moneyRightNow;\\r\\n    buyArgumentsWhenWeHave;\\r\\n\\r\\n    time = new Date();\\r\\n}\\r\\n\\r\\nclass MoneySpent {\\r\\n\\r\\n    augments = 0;\\r\\n    homeCores = 0;\\r\\n    homeRam = 0;\\r\\n    fluxGovernors = 0;\\r\\n    repPurchased = 0;\\r\\n}\\r\\n\\r\\nclass RepTrigger {\\r\\n\\r\\n    factionRepGreaterThanMaximumAug;\\r\\n    factionRepGreaterThanTargetToGetToFavorNeeded;\\r\\n    factionDonationTrigger;\\r\\n\\r\\n\\r\\n    maximumAugRepNeeded;\\r\\n    currentFactionRep;\\r\\n    targetRepForGettingToFavor;\\r\\n\\r\\n    time = new Date();\\r\\n}\",\"filename\":\"scripts/singularity/finish-round.js\",\"server\":\"home\"}}],[\"scripts/singularity/finish-bitnode.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(false);\\r\\n    const includesRedPill = ownedAugmentations.includes(\\\"The Red Pill\\\");\\r\\n    const currentHackingLevel = ns.getHackingLevel();\\r\\n    const endgameServer = \\\"w0r1d_d43m0n\\\";\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n    const serverWithLineage = enviroment.find(x => x.name === endgameServer);\\r\\n\\r\\n    if (includesRedPill && currentHackingLevel > serverWithLineage.server.requiredHackingSkill) {\\r\\n        if (serverWithLineage && serverWithLineage.server.hasAdminRights) {\\r\\n            for (const server of serverWithLineage.lineage) {\\r\\n                await ns.singularity.connect(server);\\r\\n            }\\r\\n\\r\\n            await ns.singularity.connect(endgameServer);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n\\r\\n\\r\\n        ns.singularity.destroyW0r1dD43m0n(3, 'scripts/coordinator.js'); // 3 (corps) - 8 passive - 5.1 (formula.exe + int passive) - 10 (new mechanic) \\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/finish-bitnode.js\",\"server\":\"home\"}}],[\"scripts/singularity/do-work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n\\r\\n    const factionToMaxFile = \\\"data/factionToMax.txt\\\";\\r\\n\\r\\n    let factionToMax;\\r\\n\\r\\n    if (ns.fileExists(factionToMaxFile)) {\\r\\n        factionToMax = ns.read(factionToMaxFile);\\r\\n    }\\r\\n\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const organizationsToJoinInTheOrderWeWantToComplete = organizations.toJoinInOrderInWhichIWantToComplete;\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavor = JSON.parse(ns.read(\\\"data/factionsWithAugsToBuyAndNotEnoughtFavor.txt\\\"))\\r\\n\\r\\n    for (const faction of organizationsToJoinInTheOrderWeWantToComplete) {\\r\\n        const factionInAugsMix = factionsWithAugsToBuyAndNotEnoughtFavor.find(x => x.faction === faction);\\r\\n\\r\\n        if (factionInAugsMix) {\\r\\n\\r\\n            const newFactionToMax = factionInAugsMix.faction;\\r\\n\\r\\n            if (factionToMax !== newFactionToMax) {\\r\\n                factionToMax = newFactionToMax;\\r\\n                ns.rm(factionToMaxFile);\\r\\n                ns.write(factionToMaxFile, factionToMax, \\\"W\\\");\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (currentWork && currentWork.type === \\\"CREATE_PROGRAM\\\") {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    for (const faction of organizationsToJoinInTheOrderWeWantToComplete) {\\r\\n\\r\\n        if (currentWork &&\\r\\n            currentWork.type === \\\"COMPANY\\\" &&\\r\\n            currentWork.companyName === faction &&\\r\\n            !player.factions.includes(faction)) {\\r\\n\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        if (currentWork &&\\r\\n            currentWork.type === \\\"CLASS\\\" &&\\r\\n            currentWork.classType === \\\"Leadership\\\" &&\\r\\n            factionToMax !== \\\"Chongqing\\\") {\\r\\n\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        const factionsAugs = factionsWithAugsToBuyAndNotEnoughtFavor.find(x => x.faction === faction);\\r\\n\\r\\n        if (!factionsAugs) {\\r\\n            continue;\\r\\n        }\\r\\n\\r\\n        const maxRepNeeded = factionsAugs.maximumAugRep;\\r\\n        const factionRep = ns.singularity.getFactionRep(faction);\\r\\n\\r\\n        if (maxRepNeeded > factionRep) {\\r\\n\\r\\n            if (!currentWork || currentWork.factionName !== faction) {\\r\\n                await ns.singularity.workForFaction(faction, \\\"hacking\\\", true);\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/do-work.js\",\"server\":\"home\"}}],[\"scripts/singularity/do-job.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const companiesWeWantToBecomePartOf = organizations.companiesWeWantToBecomePartOf;\\r\\n    const orderedFactions = organizations.toJoinInOrderInWhichIWantToComplete;\\r\\n\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (currentWork && currentWork.type === \\\"CREATE_PROGRAM\\\") {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let factionWeAreWorkingAtNow;\\r\\n    if (currentWork && currentWork.type === \\\"FACTION\\\") {\\r\\n        factionWeAreWorkingAtNow = currentWork.factionName;\\r\\n    }\\r\\n\\r\\n    if (currentWork && currentWork.type === \\\"COMPANY\\\") {\\r\\n        factionWeAreWorkingAtNow = currentWork.companyName;\\r\\n    }\\r\\n\\r\\n    const player = ns.getPlayer();\\r\\n    let company;\\r\\n\\r\\n    for (const potentialCompany of companiesWeWantToBecomePartOf) {\\r\\n        if (!player.factions.includes(potentialCompany)) {\\r\\n\\r\\n            if (!factionWeAreWorkingAtNow) {\\r\\n                company = potentialCompany;\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            for (const faction of orderedFactions) {\\r\\n                if (faction === potentialCompany) {\\r\\n                    company = potentialCompany;\\r\\n                    break;\\r\\n                }\\r\\n\\r\\n                if (faction === factionWeAreWorkingAtNow) {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (!company) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n\\r\\n    const positionInCompany = player.jobs[company];\\r\\n\\r\\n    if(!positionInCompany){\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const currentPositionInfo = ns.singularity.getCompanyPositionInfo(company, positionInCompany);\\r\\n    const nextPositionInfo = ns.singularity.getCompanyPositionInfo(company, currentPositionInfo.nextPosition);\\r\\n    const companyRep = ns.singularity.getCompanyRep(company);\\r\\n\\r\\n    if (nextPositionInfo.requiredReputation < companyRep && nextPositionInfo.requiredSkills.charisma > player.skills.charisma) {\\r\\n        if (!currentWork || currentWork.type !== \\\"CLASS\\\") {\\r\\n            ns.singularity.travelToCity(\\\"Sector-12\\\");\\r\\n            ns.singularity.universityCourse(\\\"Rothman University\\\", \\\"Leadership\\\", true);\\r\\n            return;\\r\\n        }\\r\\n    } else {\\r\\n        if (!currentWork || currentWork.type !== \\\"COMPANY\\\") {\\r\\n            ns.singularity.workForCompany(company, true);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/do-job.js\",\"server\":\"home\"}}],[\"scripts/singularity/create-early-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (!currentWork || currentWork.type !== \\\"CREATE_PROGRAM\\\") {\\r\\n        if (!ns.fileExists(\\\"FTPCrack.exe\\\")) {\\r\\n           ns.singularity.createProgram(\\\"FTPCrack.exe\\\", true);\\r\\n        }\\r\\n\\r\\n        if (!ns.fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n            ns.singularity.createProgram(\\\"BruteSSH.exe\\\", true);\\r\\n        }\\r\\n\\r\\n        // if (!ns.fileExists(\\\"relaySMTP.exe\\\")) {\\r\\n        //     ns.singularity.createProgram(\\\"relaySMTP.exe\\\", true);\\r\\n \\r\\n        //  }\\r\\n \\r\\n        //  if (!ns.fileExists(\\\"SQLInject.exe\\\")) {\\r\\n        //     ns.singularity.createProgram(\\\"SQLInject.exe\\\", true);\\r\\n        //  }\\r\\n\\r\\n        //  if (!ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\r\\n        //     ns.singularity.createProgram(\\\"HTTPWorm.exe\\\", true);\\r\\n \\r\\n        //  }\\r\\n \\r\\n        //  if (!ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n        //     ns.singularity.createProgram(\\\"Formulas.exe\\\", true);\\r\\n        //  }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/singularity/create-early-programs.js\",\"server\":\"home\"}}],[\"scripts/singularity/buy-rep.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (moneyAvailable > 10_000_000_000_000){\\r\\n        const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n        const player = ns.getPlayer();\\r\\n\\r\\n        const mostRepExpensiveForEachFaction = [];\\r\\n\\r\\n        for (const faction of player.factions) {\\r\\n            const maximumAugRep = Math.max(...ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction)\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .filter(x => {\\r\\n                    const prereqs = ns.singularity.getAugmentationPrereq(x);\\r\\n                    return prereqs.every(y => ownedAugmentations.includes(y));\\r\\n                })\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n    \\r\\n            const favor = ns.singularity.getFactionFavor(faction);\\r\\n    \\r\\n            if (maximumAugRep > 0 && favor > 75) {\\r\\n                mostRepExpensiveForEachFaction.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(mostRepExpensiveForEachFaction.length > 0){\\r\\n            for (const factionWithRep of mostRepExpensiveForEachFaction) {\\r\\n                \\r\\n                const currentFactionRep = ns.singularity.getFactionRep(factionWithRep.faction);\\r\\n                const repNeeded = factionWithRep.maximumAugRep - currentFactionRep;\\r\\n\\r\\n                if(repNeeded < 0){\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                let purchasedRep = 0;\\r\\n                let dollarsDonated = 0;\\r\\n\\r\\n                while(repNeeded > purchasedRep){\\r\\n                    dollarsDonated += 10_000_000;\\r\\n                    purchasedRep = ns.formulas.reputation.repFromDonation(dollarsDonated, player);\\r\\n                }\\r\\n\\r\\n                ns.singularity.donateToFaction(factionWithRep.faction, dollarsDonated);\\r\\n                \\r\\n                const fileToIndicateWeDonatedToFaction = \\\"data/factionDonatation.txt\\\";\\r\\n                ns.rm(fileToIndicateWeDonatedToFaction);\\r\\n                ns.write(fileToIndicateWeDonatedToFaction, factionWithRep.faction, \\\"W\\\");\\r\\n            }\\r\\n        }\\r\\n    }   \\r\\n}\",\"filename\":\"scripts/singularity/buy-rep.js\",\"server\":\"home\"}}],[\"scripts/stock/buy-4s.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\") \\r\\n\\r\\n    if (moneyAvailable > 26_000_000_000 && !ns.stock.has4SDataTIXAPI()) {\\r\\n        ns.stock.purchase4SMarketDataTixApi();\\r\\n    }\\r\\n}\",\"filename\":\"scripts/stock/buy-4s.js\",\"server\":\"home\"}}],[\"scripts/stock/populate-forecast.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const latestStockQuotesFile = \\\"data/latestQuotes.txt\\\";\\r\\n    const stockRecords = JSON.parse(ns.read(latestStockQuotesFile));\\r\\n\\r\\n    const hasS4DataTIXAPI = ns.stock.has4SDataTIXAPI();\\r\\n\\r\\n    if (hasS4DataTIXAPI) {\\r\\n        for (const stockRecord of stockRecords) {\\r\\n            stockRecord.volatility = ns.stock.getVolatility(stockRecord.symbol);\\r\\n            stockRecord.forecast = ns.stock.getForecast(stockRecord.symbol);\\r\\n            stockRecord.bias = Math.abs(stockRecord.forecast - .5);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.rm(latestStockQuotesFile);\\r\\n    ns.write(latestStockQuotesFile, JSON.stringify(stockRecords), \\\"W\\\")\\r\\n}\",\"filename\":\"scripts/stock/populate-forecast.js\",\"server\":\"home\"}}],[\"scripts/stock/invest-in-stocks.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let lastRecordedToConsole = new Date();\\r\\n\\r\\nexport async function main(ns) {\\r\\n\\r\\n    let historicalData = new Map();\\r\\n\\r\\n    const nameOfStockHistoricalData = \\\"../../data/stockHistory.txt\\\";\\r\\n    if (ns.fileExists(nameOfStockHistoricalData)) {\\r\\n        historicalData = new Map(JSON.parse(ns.read(nameOfStockHistoricalData)));\\r\\n    }\\r\\n\\r\\n    const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n    let stockMarketReserveMoney = new ReserveForTrading();\\r\\n    if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n        stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n    }\\r\\n\\r\\n    const latestStockQuotesFile = \\\"data/latestQuotes.txt\\\";\\r\\n    const stockRecords = JSON.parse(ns.read(latestStockQuotesFile));\\r\\n\\r\\n    SaveHistoricData(stockRecords, historicalData, ns, nameOfStockHistoricalData);\\r\\n\\r\\n    let moneyInvested = 0;\\r\\n    moneyInvested += stockRecords.reduce((sum, record) => sum += record.price * record.investedShares, 0);\\r\\n    moneyInvested += stockRecords.reduce((sum, record) => sum += (record.averageShortPrice * record.sharesShort) + ((record.averageShortPrice - record.price) * record.sharesShort), 0);\\r\\n\\r\\n    stockMarketReserveMoney.setMoneyInvested(moneyInvested, ns);\\r\\n\\r\\n    const moneyWeHaveNow = ns.getServerMoneyAvailable(\\\"home\\\") + stockMarketReserveMoney.moneyInvested;\\r\\n\\r\\n    const now = new Date();\\r\\n    const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n    const formatter = new Intl.NumberFormat('en-US', {\\r\\n        style: 'currency',\\r\\n        currency: 'USD',\\r\\n    });\\r\\n\\r\\n    if (now.getMinutes() !== lastRecordedToConsole.getMinutes() && !ns.fileExists(\\\"data/batchQueue.txt\\\")) { // && batches not running\\r\\n        const moneyFormatted = formatter.format(moneyWeHaveNow);\\r\\n\\r\\n        let consoleUpdate = `${timeStamp} Money we have now: ${moneyFormatted}`;\\r\\n\\r\\n        ns.tprint(consoleUpdate);\\r\\n\\r\\n        lastRecordedToConsole = now;\\r\\n    }\\r\\n\\r\\n    const nameOfLedger = \\\"../../data/salesLedger.txt\\\"\\r\\n    let ledger = [];\\r\\n\\r\\n    if (ns.fileExists(nameOfLedger)) {\\r\\n        ledger = JSON.parse(ns.read(nameOfLedger));\\r\\n    }\\r\\n\\r\\n    stockMarketReserveMoney.moneyRequested = new Map(Array.from(stockMarketReserveMoney.moneyRequested));\\r\\n    const reserveMoneyKeys = stockMarketReserveMoney.moneyRequested.keys();\\r\\n    let moneyRequested = 0;\\r\\n\\r\\n\\r\\n    for (const requestKey of reserveMoneyKeys) {\\r\\n        const moneyRequestedFromService = stockMarketReserveMoney.moneyRequested.get(requestKey);\\r\\n        stockMarketReserveMoney.moneyRequested.set(requestKey, moneyRequestedFromService);\\r\\n        moneyRequested += moneyRequestedFromService + 100_000;\\r\\n    }\\r\\n\\r\\n    stockMarketReserveMoney.moneyRequested = Array.from(stockMarketReserveMoney.moneyRequested);\\r\\n\\r\\n    if (moneyRequested === 0) {\\r\\n        stockMarketReserveMoney.countOfVisitedWithoutFillingRequest = 0;\\r\\n    }\\r\\n\\r\\n    let sellSharesToSatisfyMoneyDemands = false;\\r\\n    if (stockMarketReserveMoney.countOfVisitedWithoutFillingRequest > 90) {\\r\\n        sellSharesToSatisfyMoneyDemands = true;\\r\\n    }\\r\\n\\r\\n    const commission = 100_001;\\r\\n\\r\\n    const stopTradingExists = ns.fileExists(\\\"../../stopTrading.txt\\\");\\r\\n\\r\\n    for (const stock of stockRecords) {\\r\\n        let sharesToSell = 0;\\r\\n        let type = \\\"Short-Term Long Sale\\\";\\r\\n        let averagePrice = 0;\\r\\n        let coverShort = false;\\r\\n\\r\\n        if (stock.investedShares > 0) {\\r\\n            sharesToSell = stock.investedShares;\\r\\n            type = \\\"Short-Term Long Sale\\\";\\r\\n            averagePrice = stock.averagePrice;\\r\\n            coverShort = false;\\r\\n        }\\r\\n\\r\\n        if (stock.sharesShort > 0) {\\r\\n            sharesToSell = stock.sharesShort;\\r\\n            type = \\\"Short-Term Cover Short\\\";\\r\\n            averagePrice = stock.averageShortPrice;\\r\\n            coverShort = true;\\r\\n        }\\r\\n\\r\\n        if (sellSharesToSatisfyMoneyDemands && sharesToSell > 0) {\\r\\n            if (stockMarketReserveMoney.canSellAmountAndStillHaveReserve(moneyRequested)) {\\r\\n                sharesToSell = Math.ceil(moneyRequested / stock.bid) + 5\\r\\n\\r\\n                if (sharesToSell > stock.investedShares && stock.investedShares !== 0) {\\r\\n                    sharesToSell = stock.investedShares;\\r\\n                }\\r\\n\\r\\n                if (sharesToSell > stock.sharesShort && stock.sharesShort !== 0) {\\r\\n                    sharesToSell = stock.sharesShort;\\r\\n                }\\r\\n            } else {\\r\\n                sellSharesToSatisfyMoneyDemands = false;\\r\\n                stockMarketReserveMoney.countOfVisitedWithoutFillingRequest = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (sharesToSell > 0) {\\r\\n            if ((stock.sellTrend && coverShort === false) || stopTradingExists || sellSharesToSatisfyMoneyDemands || (stock.coverShortTrend && coverShort)) {\\r\\n                let salePrice;\\r\\n                if (coverShort) {\\r\\n                    salePrice = ns.stock.sellShort(stock.symbol, sharesToSell);\\r\\n                } else {\\r\\n                    salePrice = ns.stock.sellStock(stock.symbol, sharesToSell);\\r\\n                }\\r\\n\\r\\n                stockMarketReserveMoney.moneyInvested -= salePrice * sharesToSell;\\r\\n\\r\\n                if(stockMarketReserveMoney.moneyInvested < 0){\\r\\n                    stockMarketReserveMoney.moneyInvested = 0;\\r\\n                }\\r\\n\\r\\n                ledger.push(new LedgerItem(\\r\\n                    stock.symbol,\\r\\n                    salePrice,\\r\\n                    averagePrice,\\r\\n                    sharesToSell,\\r\\n                    type,\\r\\n                    stock.forecast\\r\\n                ))\\r\\n\\r\\n                if (sellSharesToSatisfyMoneyDemands) {\\r\\n                    stockMarketReserveMoney.moneyRequested = [];\\r\\n                    sellSharesToSatisfyMoneyDemands = false;\\r\\n                    ns.toast(`${timeStamp} Sold ${formatter.format(moneyRequested)} for money request.`, \\\"success\\\", null)\\r\\n                }\\r\\n\\r\\n                if (stopTradingExists) {\\r\\n                    ns.toast(\\\"Stopped trading\\\", \\\"success\\\", null)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.rm(nameOfLedger);\\r\\n    ns.write(nameOfLedger, JSON.stringify(ledger), \\\"W\\\");\\r\\n\\r\\n    const liquidCash = ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n\\r\\n    let moneyAvailable = liquidCash - commission - moneyRequested;\\r\\n\\r\\n    if (stockMarketReserveMoney.capitalToReserveForTrading > stockMarketReserveMoney.moneyInvested) {\\r\\n        moneyAvailable = liquidCash - commission;\\r\\n    }\\r\\n\\r\\n    if (moneyAvailable > 5_000_000_000 && !ns.stock.has4SDataTIXAPI()) {\\r\\n        moneyAvailable = 5_000_000_000;\\r\\n    }\\r\\n\\r\\n    const onlyInvestIfWeHaveMoreThan = 12_000_000;\\r\\n\\r\\n    if (moneyAvailable > onlyInvestIfWeHaveMoreThan && !stopTradingExists) {\\r\\n        let stocksToTrade = stockRecords\\r\\n            .filter(stock =>\\r\\n                (stock.sellShortTrend && stock.maxShares !== stock.sharesShort) ||\\r\\n                (stock.buyTrend && stock.investedShares !== stock.maxShares))\\r\\n            .sort((a, b) => b.volatility - a.volatility);\\r\\n\\r\\n        if (!ns.stock.has4SDataTIXAPI()) {\\r\\n            stocksToTrade = stockRecords\\r\\n                .filter(stock =>\\r\\n                    (stock.sellShortTrend && stock.sharesShort === 0) ||\\r\\n                    (stock.buyTrend && stock.investedShares === 0))\\r\\n                .sort((a, b) => b.magnitudeOfSignal - a.magnitudeOfSignal);\\r\\n        }\\r\\n\\r\\n        if (stocksToTrade.length > 0) {\\r\\n            const stockToLookAt = stocksToTrade[0];\\r\\n\\r\\n            let sharesToBuy = 0;\\r\\n            const ticker = stockToLookAt.symbol;\\r\\n\\r\\n            if (stockToLookAt.buyTrend) {\\r\\n                sharesToBuy = Math.round(moneyAvailable / stockToLookAt.ask);\\r\\n\\r\\n                const totalSharesAfterBuy = sharesToBuy + stockToLookAt.investedShares;\\r\\n\\r\\n                if (stockToLookAt.maxShares < totalSharesAfterBuy) {\\r\\n                    sharesToBuy = stockToLookAt.maxShares - stockToLookAt.investedShares;\\r\\n                }\\r\\n\\r\\n                ns.stock.buyStock(ticker, sharesToBuy);\\r\\n            }\\r\\n\\r\\n            if (stockToLookAt.sellShortTrend) {\\r\\n                sharesToBuy = Math.round(moneyAvailable / stockToLookAt.bid);\\r\\n\\r\\n                const totalSharesAfterBuy = sharesToBuy + stockToLookAt.sharesShort;\\r\\n\\r\\n                if (stockToLookAt.maxShares < totalSharesAfterBuy) {\\r\\n                    sharesToBuy = stockToLookAt.maxShares - stockToLookAt.sharesShort;\\r\\n                }\\r\\n\\r\\n                ns.stock.buyShort(ticker, sharesToBuy);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.rm(stockMarketReserveMoneyFile);\\r\\n    ns.write(stockMarketReserveMoneyFile, JSON.stringify(stockMarketReserveMoney), \\\"W\\\");\\r\\n}\\r\\n\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    canSellAmountAndStillHaveReserve(amountToSell) {\\r\\n        return (this.moneyInvested - amountToSell) > this.capitalToReserveForTrading;\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = (moneyInvested + ns.getServerMoneyAvailable(\\\"home\\\")) * .75;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"invest-in-stocks\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"invest-in-stocks\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nclass LedgerItem {\\r\\n\\r\\n    constructor(symbol, price, averagePurchasePrice, shares, type, forecastAtSale) {\\r\\n        const formatter = new Intl.NumberFormat('en-US', {\\r\\n            style: 'currency',\\r\\n            currency: 'USD',\\r\\n        });\\r\\n\\r\\n        let numberProfit = (price - averagePurchasePrice) * shares;\\r\\n\\r\\n        if (type === \\\"Short-Term Cover Short\\\") {\\r\\n            numberProfit = (averagePurchasePrice - price) * shares;\\r\\n        }\\r\\n\\r\\n        this.date = new Date().toLocaleString();\\r\\n        this.symbol = symbol;\\r\\n        this.price = price;\\r\\n        this.averagePurchasePrice = averagePurchasePrice;\\r\\n        this.profit = formatter.format(numberProfit);\\r\\n        this.profitPercent = (numberProfit / (shares * averagePurchasePrice)).toLocaleString(undefined, { style: 'percent', minimumFractionDigits: 2 });\\r\\n        this.shares = shares;\\r\\n        this.type = type;\\r\\n        this.forecastAtSale = forecastAtSale;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass StockHistoricData {\\r\\n    shortTermRecords = [];\\r\\n    longTermRecords = [];\\r\\n    recentTicksOfPrices = [];\\r\\n\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    addRecord(record, ns) {\\r\\n        this.shortTermRecords.push(record);\\r\\n        this.recentTicksOfPrices.push(record.price);\\r\\n\\r\\n        if (this.recentTicksOfPrices.length === 21) {\\r\\n            record.countOfNegative = 0;\\r\\n            record.countOfPositive = 0;\\r\\n            record.magnitudeOfSignal = 0;\\r\\n\\r\\n            let lastPrice;\\r\\n            for (const price of this.recentTicksOfPrices) {\\r\\n                if (lastPrice) {\\r\\n                    if (lastPrice < price) {\\r\\n                        record.countOfPositive++;\\r\\n                    }\\r\\n\\r\\n                    if (lastPrice > price) {\\r\\n                        record.countOfNegative++;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                lastPrice = price;\\r\\n            }\\r\\n\\r\\n            this.recentTicksOfPrices.shift();\\r\\n        }\\r\\n\\r\\n        const hasOracle = ns.stock.has4SDataTIXAPI();\\r\\n\\r\\n\\r\\n        if (!hasOracle) {\\r\\n            if (record.countOfPositive >= 16) {\\r\\n                record.buyTrend = true;\\r\\n                record.magnitudeOfSignal = record.countOfPositive;\\r\\n            }\\r\\n\\r\\n            if (record.countOfPositive <= 12 && record.investedShares > 0) {\\r\\n                record.sellTrend = true;\\r\\n            }\\r\\n\\r\\n            if (record.countOfNegative >= 16) {\\r\\n                record.sellShortTrend = true;\\r\\n                record.magnitudeOfSignal = record.countOfNegative;\\r\\n            }\\r\\n\\r\\n            if (record.countOfNegative <= 12 && record.sharesShort > 0) {\\r\\n                record.coverShortTrend = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (hasOracle) {\\r\\n            if (record.forecast > 0.6) {\\r\\n                record.buyTrend = true;\\r\\n            }\\r\\n\\r\\n            if (record.forecast < 0.5 && record.investedShares > 0) {\\r\\n                record.sellTrend = true;\\r\\n            }\\r\\n\\r\\n            if (0.4 > record.forecast) {\\r\\n                record.sellShortTrend = true;\\r\\n            }\\r\\n\\r\\n            if (0.5 < record.forecast && record.sharesShort > 0) {\\r\\n                record.coverShortTrend = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    storeLongTerm() {\\r\\n        const newLongTermStock = new Stock(\\r\\n            this.shortTermRecords[0].symbol,\\r\\n            this.shortTermRecords.map(x => x.bid).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            this.shortTermRecords.map(x => x.ask).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            this.shortTermRecords.map(x => x.price).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            this.shortTermRecords[0].maxShares,\\r\\n            [\\r\\n                this.shortTermRecords.map(x => x.investedShares).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n                this.shortTermRecords.map(x => x.averagePrice).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n                this.shortTermRecords.map(x => x.sharesShort).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n                this.shortTermRecords.map(x => x.averageShortPrice).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            ]\\r\\n        );\\r\\n\\r\\n        newLongTermStock.volatility = this.shortTermRecords[0].volatility;\\r\\n        newLongTermStock.forecast = this.shortTermRecords.map(x => x.forecast).reduce((a, b) => a + b) / this.shortTermRecords.length;\\r\\n\\r\\n        newLongTermStock.bias = Math.max(...this.shortTermRecords.map(x => x.bias));\\r\\n\\r\\n        this.longTermRecords.push(newLongTermStock);\\r\\n\\r\\n        this.shortTermRecords.length = 0;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Stock {\\r\\n    constructor(symbol, bid, ask, price, maxShares, position = {}, dateObserved = new Date()) {\\r\\n        this.symbol = symbol;\\r\\n        this.bid = bid;\\r\\n        this.ask = ask;\\r\\n        this.price = price;\\r\\n        this.maxShares = maxShares;\\r\\n        this.investedShares = position[0];\\r\\n        this.averagePrice = position[1];\\r\\n        this.sharesShort = position[2];\\r\\n        this.averageShortPrice = position[3];\\r\\n        this.dateObserved = dateObserved.toLocaleString();\\r\\n    }\\r\\n\\r\\n    volatility;\\r\\n    forecast;\\r\\n\\r\\n    buyTrend = false;\\r\\n    sellTrend = false;\\r\\n    sellShortTrend = false;\\r\\n    coverShortTrend = false;\\r\\n\\r\\n}\\r\\n\\r\\nfunction SaveHistoricData(stockRecords, historicalData, ns, nameOfStockHistoricalData) {\\r\\n    stockRecords.map(x => {\\r\\n        if (historicalData.has(x.symbol)) {\\r\\n            const data = historicalData.get(x.symbol);\\r\\n\\r\\n            if (data.shortTermRecords[data.shortTermRecords.length - 1]?.price !== x.price) {\\r\\n                const record = new StockHistoricData(data);\\r\\n                record.addRecord(x, ns);\\r\\n\\r\\n                if (record.shortTermRecords.length >= 100) {\\r\\n                    record.storeLongTerm();\\r\\n                }\\r\\n\\r\\n                historicalData.set(x.symbol, record);\\r\\n            }\\r\\n\\r\\n        } else {\\r\\n            const stockHistoryData = new StockHistoricData();\\r\\n            stockHistoryData.addRecord(x, ns);\\r\\n            historicalData.set(x.symbol, stockHistoryData);\\r\\n        }\\r\\n    });\\r\\n\\r\\n    ns.rm(nameOfStockHistoricalData);\\r\\n    ns.write(nameOfStockHistoricalData, JSON.stringify(Array.from(historicalData.entries()), \\\"W\\\"));\\r\\n}\\r\\n\",\"filename\":\"scripts/stock/invest-in-stocks.js\",\"server\":\"home\"}}],[\"scripts/stock/get-stock-quotes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const stockRecords = ns.stock\\r\\n        .getSymbols()\\r\\n        .map(x => new Stock(\\r\\n            x,\\r\\n            ns.stock.getBidPrice(x),\\r\\n            ns.stock.getAskPrice(x),\\r\\n        ));\\r\\n\\r\\n    const latestStockQuotesFile = \\\"data/latestQuotes.txt\\\";\\r\\n    ns.rm(latestStockQuotesFile);\\r\\n    ns.write(latestStockQuotesFile, JSON.stringify(stockRecords), \\\"W\\\")\\r\\n}\\r\\n\\r\\n\\r\\nclass Stock {\\r\\n    constructor(symbol, bid, ask, dateObserved = new Date()) {\\r\\n        this.symbol = symbol;\\r\\n        this.bid = bid;\\r\\n        this.ask = ask;\\r\\n        this.dateObserved = dateObserved.toLocaleString();\\r\\n    }\\r\\n\\r\\n    volatility;\\r\\n    forecast;\\r\\n\\r\\n    buyTrend = false;\\r\\n    sellTrend = false;\\r\\n    sellShortTrend = false;\\r\\n    coverShortTrend = false;\\r\\n\\r\\n}\",\"filename\":\"scripts/stock/get-stock-quotes.js\",\"server\":\"home\"}}],[\"scripts/tools/manually-end-round.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const player = ns.getPlayer();\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n\\r\\n    const formatter = new Intl.NumberFormat('en-US', {\\r\\n        style: 'currency',\\r\\n        currency: 'USD',\\r\\n    });\\r\\n\\r\\n    let totalToSpend = 0;\\r\\n\\r\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n        const factionsThatNeedDonating = [];\\r\\n\\r\\n        for (const faction of player.factions) {\\r\\n            const maximumAugRep = Math.max(...ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction)\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .filter(x => {\\r\\n                    const prereqs = ns.singularity.getAugmentationPrereq(x);\\r\\n                    return prereqs.every(y => ownedAugmentations.includes(y));\\r\\n                })\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n            const favor = ns.singularity.getFactionFavor(faction);\\r\\n\\r\\n            if (maximumAugRep > 0 && favor >= 0) {\\r\\n                factionsThatNeedDonating.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (factionsThatNeedDonating.length > 0) {\\r\\n            for (const factionWithRep of factionsThatNeedDonating) {\\r\\n                let dollarsDonated = 0;\\r\\n\\r\\n                const currentFactionRep = ns.singularity.getFactionRep(factionWithRep.faction);\\r\\n                const repNeeded = factionWithRep.maximumAugRep - currentFactionRep;\\r\\n\\r\\n                if (repNeeded < 0) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                let purchasedRep = 0;\\r\\n\\r\\n                while (repNeeded > purchasedRep) {\\r\\n                    dollarsDonated += 10_000_000;\\r\\n                    purchasedRep = ns.formulas.reputation.repFromDonation(dollarsDonated, player);\\r\\n                }\\r\\n\\r\\n                ns.toast(`${factionWithRep.faction}`, 'success', null)\\r\\n                ns.toast(`Money needed for donations: ${formatter.format(dollarsDonated)}`, \\\"success\\\", null)\\r\\n\\r\\n                totalToSpend += dollarsDonated;\\r\\n\\r\\n                if (ns.args[0] === \\\"donate\\\") {\\r\\n                    ns.singularity.donateToFaction(factionWithRep.faction, dollarsDonated);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    const mostRepExpensiveForEachFaction = [];\\r\\n    for (const faction of player.factions) {\\r\\n        const maximumAugRep = Math.max(...ns\\r\\n            .singularity\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n            .filter(x => !ownedAugmentations.includes(x))\\r\\n            .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n        if (maximumAugRep > 0) {\\r\\n            mostRepExpensiveForEachFaction.push({ faction, maximumAugRep });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const factionsWithAugmentsToBuy =\\r\\n        mostRepExpensiveForEachFaction\\r\\n            .map(x => {\\r\\n                {\\r\\n                    const faction = x.faction;\\r\\n                    const factionRep = ns.singularity.getFactionRep(faction);\\r\\n                    const factionAugmentsThatIDontOwnAndCanAfford = ns\\r\\n                        .singularity\\r\\n                        .getAugmentationsFromFaction(faction)\\r\\n                        .filter(y => y !== \\\"NeuroFlux Governor\\\")\\r\\n                        .filter(y => !ownedAugmentations.includes(y))\\r\\n                        .map(y => {\\r\\n                            return {\\r\\n                                augmentName: y,\\r\\n                                augmentationRepCost: ns.singularity.getAugmentationRepReq(y),\\r\\n                                price: ns.singularity.getAugmentationPrice(y),\\r\\n                                prereqs: ns.singularity.getAugmentationPrereq(y)\\r\\n                            }\\r\\n                        })\\r\\n                        .filter(y => y.augmentationRepCost < factionRep)\\r\\n                        .sort((a, b) => b.price - a.price);\\r\\n\\r\\n                    return {\\r\\n                        faction,\\r\\n                        factionRep,\\r\\n                        factionAugmentsThatIDontOwnAndCanAfford\\r\\n                    }\\r\\n                }\\r\\n            });\\r\\n\\r\\n\\r\\n\\r\\n    const purchasableAugments = new Map();\\r\\n\\r\\n    for (const factionWithAugments of factionsWithAugmentsToBuy) {\\r\\n        for (const augment of factionWithAugments.factionAugmentsThatIDontOwnAndCanAfford) {\\r\\n            if (purchasableAugments.has(augment.augmentName) === false) {\\r\\n                const item = {\\r\\n                    augmentationRepCost: augment.augmentationRepCost,\\r\\n                    price: augment.price,\\r\\n                    prereqs: augment.prereqs,\\r\\n                    faction: factionWithAugments.faction\\r\\n                }\\r\\n                purchasableAugments.set(augment.augmentName, item)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const augmentsLeft = Array.from(purchasableAugments.entries()).sort((a, b) => b[1].price - a[1].price);\\r\\n\\r\\n    const orderedAugments = []; // { factionName, augmentName, basePrice, multipledPrice}\\r\\n\\r\\n    function addPrereqs(prereqName) {\\r\\n        const augment = purchasableAugments.get(prereqName);\\r\\n\\r\\n        if (augment && !ownedAugmentations.find(x => x.augmentName === prereqName)) {\\r\\n\\r\\n            if (augment.prereqs.length > 0) {//it has prereqs, pass it into this. \\r\\n                for (const prereq of augment.prereqs) {\\r\\n                    addPrereqs(prereq)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (!orderedAugments.find(x => x.augmentName === prereqName)) {\\r\\n                orderedAugments.push({ faction: augment.faction, augmentName: prereqName, basePrice: augment.price });\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const augmentData of augmentsLeft) {\\r\\n        const augmentName = augmentData[0];\\r\\n        const augment = augmentData[1];\\r\\n\\r\\n        if (augment.prereqs.length > 0) {\\r\\n            for (const prereqName of augment.prereqs) {\\r\\n                addPrereqs(prereqName);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!orderedAugments.find(x => x.augmentName === augmentName)) {\\r\\n            orderedAugments.push({ faction: augment.faction, augmentName: augmentName, basePrice: augment.price, multipledPrice: 0 })\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    let priceMultipler = 1;\\r\\n\\r\\n    for (const augment of orderedAugments) {\\r\\n        augment.multipledPrice = augment.basePrice * priceMultipler;\\r\\n        priceMultipler *= 1.9;\\r\\n    }\\r\\n\\r\\n    const moneyNeededForAugments = orderedAugments.reduce((acc, x) => acc + x.multipledPrice, 0);\\r\\n\\r\\n    totalToSpend += moneyNeededForAugments;\\r\\n\\r\\n    const moneyFormatted = formatter.format(moneyNeededForAugments);\\r\\n\\r\\n    if (ns.args[0] === \\\"finish\\\") {\\r\\n        for (const augment of orderedAugments) {\\r\\n            purchaseAug(ns, augment);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.toast(`Money needed for augs: ${moneyFormatted}`, 'success', null)\\r\\n\\r\\n    ns.toast(`Total Needed: ${formatter.format(totalToSpend)}`, 'success', null)\\r\\n\\r\\n    ns.rm('orderedAugments.txt')\\r\\n    ns.write(\\\"orderedAugments.txt\\\", JSON.stringify(orderedAugments), \\\"W\\\")\\r\\n\\r\\n}\\r\\n\\r\\nfunction purchaseAug(ns, augment) {\\r\\n    const ownedAugments = ns.singularity.getOwnedAugmentations(true);\\r\\n    const augmentName = augment.augmentName;\\r\\n\\r\\n    if (ownedAugments.includes(augmentName) === false) {\\r\\n        const augmentPrice = ns.singularity.getAugmentationPrice(augmentName);\\r\\n        const amountOfMoneyWeHave = ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n\\r\\n        if (augmentPrice < amountOfMoneyWeHave) {\\r\\n            ns.singularity.purchaseAugmentation(augment.faction, augmentName);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/tools/manually-end-round.js\",\"server\":\"home\"}}],[\"scripts/tools/delete-job-from-batch-queue.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n    const targetName = ns.args[0];\\r\\n\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\"\\r\\n\\r\\n    let batchQueueForDifferentTargets = new Map();\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        batchQueueForDifferentTargets = new Map(JSON.parse(ns.read(batchQueuesFileName)));\\r\\n    }\\r\\n\\r\\n    const target = batchQueueForDifferentTargets.get(targetName);\\r\\n\\r\\n    for (const batch of target.batchesQueue) {\\r\\n        batch.jobs.map(x => {\\r\\n            if (x.pid) {\\r\\n                ns.kill(x.pid);\\r\\n            }\\r\\n        });\\r\\n    };\\r\\n\\r\\n    batchQueueForDifferentTargets.delete(targetName);\\r\\n\\r\\n    ns.rm(batchQueuesFileName);\\r\\n    ns.write(batchQueuesFileName, JSON.stringify(Array.from(batchQueueForDifferentTargets.entries()), \\\"W\\\"));\\r\\n\\r\\n}\\r\\n\",\"filename\":\"scripts/tools/delete-job-from-batch-queue.js\",\"server\":\"home\"}}],[\"scripts/clean.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"//run scripts/clean.js \\r\\nexport async function main(ns) {\\r\\n    let newMachine = false;\\r\\n\\r\\n    if (ns.args[0] === \\\"new\\\") {\\r\\n        newMachine = true;\\r\\n    }\\r\\n\\r\\n    \\r\\n    if (!newMachine) {\\r\\n        ns.killall(\\\"home\\\", true);\\r\\n\\r\\n        const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n        enviroment\\r\\n            .filter(x => x.server.hasAdminRights)\\r\\n            .map(target => {\\r\\n                ns.killall(target.name);\\r\\n            })\\r\\n    }\\r\\n\\r\\n    const doNoDeleteFolders = [\\\"analytics\\\", \\\"contracts\\\"]\\r\\n\\r\\n\\r\\n    for (const textFile of ns.ls(\\\"home\\\", \\\".txt\\\")) {\\r\\n        if(!doNoDeleteFolders.find(x => textFile.startsWith(x))){\\r\\n            ns.rm(textFile);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/clean.js\",\"server\":\"home\"}}],[\"scripts/scan.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n/// run scripts/scan.js dispatchScript\\r\\nexport async function main(ns) {\\r\\n    const dispatchScript = ns.args[0];\\r\\n\\r\\n    if (dispatchScript === undefined){\\r\\n        ns.tprint(\\\"Must define dispatch script for scan.\\\")\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const result = new dataMonger(ns).scanEnvironment();\\r\\n\\r\\n    ns.rm('data/enviroment.txt')\\r\\n    ns.write('data/enviroment.txt', JSON.stringify(result), \\\"W\\\")\\r\\n\\r\\n    ns.run(dispatchScript)\\r\\n}\\r\\n\\r\\nexport class dataMonger {\\r\\n    constructor(ns) {\\r\\n        this.ns = ns;\\r\\n    }\\r\\n\\r\\n    scanEnvironment(machineToScan = \\\"home\\\", serversToScan = [], scannedServers = [], result = []) {\\r\\n        if (serversToScan.length === 0 && machineToScan !== \\\"home\\\") {\\r\\n            return result;\\r\\n        }\\r\\n\\r\\n        let lineage = result\\r\\n            .find(x => x.name === machineToScan)\\r\\n            ?.lineage\\r\\n            .map(x => x); // so we aren't using a reference\\r\\n\\r\\n        const scan = this.ns\\r\\n            .scan(machineToScan)\\r\\n            .map(x => new ServerNode(\\r\\n                machineToScan,\\r\\n                this.ns.getServer(x),\\r\\n                lineage\\r\\n            ));\\r\\n\\r\\n        scan.forEach(x => {\\r\\n            if (!scannedServers.includes(x.name) && !serversToScan.includes(x.name)) {\\r\\n                serversToScan.push(x.name);\\r\\n                result.push(x);\\r\\n            }\\r\\n        });\\r\\n\\r\\n        scannedServers.push(machineToScan);\\r\\n        machineToScan = serversToScan.pop();\\r\\n        return this.scanEnvironment(machineToScan, serversToScan, scannedServers, result);\\r\\n    }\\r\\n}\\r\\n\\r\\nclass ServerNode {\\r\\n    constructor(parentsName, server, lineage = []) {\\r\\n        this.name = server.hostname;\\r\\n        this.lineage = lineage\\r\\n        if (parentsName !== \\\"home\\\" && this.lineage !== undefined) {\\r\\n            if (!this.lineage.includes(parentsName)) {\\r\\n                this.lineage.push(parentsName)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.server = server;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/scan.js\",\"server\":\"home\"}}],[\"scripts/precalculate-important-data.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n  const notImportantScriptsForEarlyGame = [\\r\\n    \\\"scripts/singularity/finish-bitnode.js\\\", \\r\\n    \\\"scripts/singularity/finish-round.js\\\", \\r\\n    \\\"scripts/singularity/buy-rep.js\\\",\\r\\n    \\\"scripts/hacking/batch-dispatch.js\\\",\\r\\n    \\\"scripts/tools/manually-end-round.js\\\",\\r\\n  ];\\r\\n\\r\\n  const notImportantFolder = \\\"scripts/corporations/\\\"\\r\\n\\r\\n  const scriptsThatWeRun = JSON.parse(ns.read('data/scriptsToRun.txt'));\\r\\n\\r\\n  scriptsThatWeRun.push(\\\"scripts/coordinator.js\\\");\\r\\n\\r\\n  const orderedScriptsByRamUsage = scriptsThatWeRun\\r\\n    .map(x => new ScriptRam(ns.getScriptRam(x), x))\\r\\n    .sort((a, b) => b.ram - a.ram);\\r\\n\\r\\n  const mostExpensiveScript = orderedScriptsByRamUsage[0];\\r\\n  const coordinator = orderedScriptsByRamUsage.find(x => x.name === \\\"scripts/coordinator.js\\\");\\r\\n  const ramToReserve = coordinator.ram + mostExpensiveScript.ram + 1;\\r\\n\\r\\n  const earlyGameScriptsUsage = orderedScriptsByRamUsage\\r\\n    .filter(x => !notImportantScriptsForEarlyGame.includes(x.name))\\r\\n    .filter(x => !x.name.startsWith(notImportantFolder));\\r\\n\\r\\n  const mostExpensiveEarlyGame = earlyGameScriptsUsage[0];\\r\\n  const ramToReserveInLimitedEnvironment = coordinator.ram + mostExpensiveEarlyGame.ram + 1;\\r\\n  const earlyGameLimiter = mostExpensiveEarlyGame.name;\\r\\n\\r\\n  const ramReserveFile = 'data/ramToReserveOnHome.txt';\\r\\n\\r\\n\\r\\n  ns.rm(ramReserveFile);\\r\\n  ns.write(ramReserveFile, JSON.stringify({ramToReserve, ramToReserveInLimitedEnvironment, earlyGameLimiter}), \\\"W\\\");\\r\\n\\r\\n  const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n\\r\\n  const ownedAugsTextFileName = \\\"data/ownedAugs.txt\\\";\\r\\n  ns.rm(ownedAugsTextFileName);\\r\\n  ns.write(ownedAugsTextFileName, JSON.stringify(ownedAugmentations), \\\"W\\\");\\r\\n  \\r\\n}\\r\\n\\r\\nclass ScriptRam {\\r\\n  constructor(ram, name) {\\r\\n    this.ram = ram;\\r\\n    this.name = name;\\r\\n  }\\r\\n}\",\"filename\":\"scripts/precalculate-important-data.js\",\"server\":\"home\"}}],[\"scripts/coordinator.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const loopEveryXSeconds = 2;\\r\\n    const sleepTotalOfXMS = loopEveryXSeconds * 1000;\\r\\n    let dispatchScript = 'scripts/hacking/memory-starved-dispatch.js';\\r\\n\\r\\n    let runClean = true;\\r\\n    if (ns.args[0] === 'old') {\\r\\n        runClean = false;\\r\\n    }\\r\\n\\r\\n    if (runClean) {\\r\\n        ns.run('scripts/clean.js', 1, \\\"new\\\");\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n\\r\\n    ns.run('scripts/script-registry.js')\\r\\n\\r\\n    await ns.sleep(200);\\r\\n\\r\\n    ns.run('scripts/precalculate-important-data.js')\\r\\n\\r\\n    await ns.sleep(200);\\r\\n\\r\\n    const scriptsFile = 'data/scriptsToRun.txt';\\r\\n\\r\\n    while (true) {\\r\\n\\r\\n        let scriptsToRun = JSON.parse(ns.read(scriptsFile));\\r\\n\\r\\n        let numberOfScripts = scriptsToRun.length + 1;\\r\\n\\r\\n        let individualSleepAmount = sleepTotalOfXMS / numberOfScripts;\\r\\n\\r\\n        if (ns.fileExists('Formulas.exe')) {\\r\\n            dispatchScript = 'scripts/hacking/batch-dispatch.js'\\r\\n        }\\r\\n\\r\\n        ns.run(\\\"scripts/scan.js\\\", 1, dispatchScript);\\r\\n        await ns.sleep(individualSleepAmount);\\r\\n\\r\\n        for (const script of scriptsToRun) {\\r\\n            ns.run(script);\\r\\n            await ns.sleep(individualSleepAmount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"filename\":\"scripts/coordinator.js\",\"server\":\"home\"}}],[\"scripts/script-registry.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    let scriptsToRun = [];\\r\\n\\r\\n    const basicScripts = [\\r\\n        'scripts/hacking/hack-all-machines.js',\\r\\n        'scripts/precalculate-important-data.js',\\r\\n        'scripts/script-registry.js',\\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(basicScripts);\\r\\n\\r\\n    const stockScripts = [\\r\\n        'scripts/stock/get-stock-quotes.js',\\r\\n        'scripts/stock/second-part-of-quotes.js',\\r\\n        'scripts/stock/populate-forecast.js',\\r\\n        'scripts/stock/invest-in-stocks.js',\\r\\n        'scripts/stock/buy-4s.js',\\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(stockScripts);\\r\\n\\r\\n    const contractScripts = [\\r\\n        'scripts/contracts/get.js',\\r\\n        'scripts/contracts/populate-input.js',\\r\\n        'scripts/contracts/populate-description.js',\\r\\n        'scripts/contracts/do.js',\\r\\n        'scripts/contracts/save-contracts-for-thomas.js',\\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(contractScripts);\\r\\n\\r\\n    const singularityScripts = [\\r\\n        'scripts/singularity/apply-to-jobs.js',\\r\\n        'scripts/singularity/do-work-get-augments.js',\\r\\n        'scripts/singularity/backdoor-all-machines.js',\\r\\n        'scripts/singularity/join-organziations.js',\\r\\n        'scripts/singularity/do-work.js',\\r\\n        'scripts/singularity/finish-round.js',\\r\\n        'scripts/singularity/finish-bitnode.js',\\r\\n        'scripts/singularity/study-computer-science.js',\\r\\n        'scripts/singularity/create-early-programs.js',\\r\\n        'scripts/singularity/do-job.js',\\r\\n        'scripts/singularity/buy-rep.js',\\r\\n        'scripts/singularity/workout.js',\\r\\n        'scripts/singularity/upgade-home-machine.js',\\r\\n        'scripts/singularity/travel-to-get-augs.js',\\r\\n    ];\\r\\n    \\r\\n    scriptsToRun = scriptsToRun.concat(singularityScripts);\\r\\n\\r\\n    const investmentScripts = [\\r\\n        'scripts/investments/invest-in-nodes.js',\\r\\n        'scripts/investments/purchase-server.js',\\r\\n        'scripts/investments/invest-in-programs.js',\\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(investmentScripts);\\r\\n\\r\\n    const corporateScripts = [\\r\\n        'scripts/corporations/invest.js',\\r\\n        'scripts/corporations/start-company.js',\\r\\n        'scripts/corporations/get-corporate-info.js',\\r\\n        'scripts/corporations/add-supporting-material.js',\\r\\n        'scripts/corporations/upgrade-offices.js',\\r\\n        'scripts/corporations/upgrade-warehouse.js',\\r\\n        'scripts/corporations/expand.js',\\r\\n        'scripts/corporations/product-management.js',\\r\\n        'scripts/corporations/research.js',\\r\\n        'scripts/corporations/tea-party.js',\\r\\n        'scripts/corporations/adjust-prices-export.js',\\r\\n        'scripts/corporations/get-investments.js',\\r\\n        'scripts/corporations/bribe-factions.js', \\r\\n        'scripts/corporations/import-export.js', \\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(corporateScripts);\\r\\n    \\r\\n    const scriptsFile = 'data/scriptsToRun.txt';\\r\\n    ns.rm(scriptsFile);\\r\\n    ns.write(scriptsFile, JSON.stringify(scriptsToRun), \\\"W\\\");\\r\\n}\",\"filename\":\"scripts/script-registry.js\",\"server\":\"home\"}}],[\"test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  const moneyThing = 0;\\n        const gidgetsSmokes = \\\"Gidget's Smokes\\\";\\n    const city = \\\"Aevum\\\"\\n\\n  const thing = ns.corporation.getConstants();\\n\\nconst array =[]\\n  for (const upgrade of thing.industryNames) {\\n    array.push(ns.corporation.getIndustryData(upgrade));\\n  }\\n  \\n  ns.write(\\\"thing.txt\\\", JSON.stringify(array), \\\"W\\\")\\n\\n  const formatter = new Intl.NumberFormat('en-US', {\\n    style: 'currency',\\n    currency: 'USD',\\n  });\\n  const formattedMoneyThing = formatter.format(moneyThing);\\n\\nns.tprint(thing);\\n\\n}\",\"filename\":\"test.js\",\"server\":\"home\"}}],[\"scripts/corporations/get-corporate-info.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let lastRecorded = new Date();\\r\\n\\r\\nexport async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporationFileName = 'data/corporation.txt';\\r\\n    const constants = ns.corporation.getConstants();\\r\\n    let corporation = ns.corporation.getCorporation();\\r\\n    const divisions = [];\\r\\n\\r\\n    const rawMaterialProducers = [\\r\\n        { producer: \\\"Gidget's Farm\\\", materials: [\\\"Food\\\", \\\"Plants\\\"] },\\r\\n        { producer: \\\"Chemist Gidget's Lab\\\", materials: [ \\\"Chemicals\\\" ] }\\r\\n    ];\\r\\n\\r\\n    for (const divisionName of corporation.divisions) {\\r\\n        let division = ns.corporation.getDivision(divisionName)\\r\\n        division.offices = [];\\r\\n        division.productObjects = [];\\r\\n\\r\\n        for (const city of division.cities) {\\r\\n            let office = ns.corporation.getOffice(division.name, city)\\r\\n\\r\\n            if (ns.corporation.hasWarehouse(division.name, city)) {\\r\\n                office.warehouse = ns.corporation.getWarehouse(division.name, city);\\r\\n            }\\r\\n\\r\\n            division.offices.push(office);\\r\\n        }\\r\\n\\r\\n        for (const productName of division.products) {\\r\\n            division.productObjects.push(ns.corporation.getProduct(divisionName, \\\"Aevum\\\", productName));\\r\\n        }\\r\\n\\r\\n        division.materials = [];\\r\\n        const rawMaterialsProducer = rawMaterialProducers.find(x => x.producer === divisionName);\\r\\n        if(rawMaterialsProducer){\\r\\n        \\r\\n            for (const material of rawMaterialsProducer.materials) {\\r\\n                division.materials.push(ns.corporation.getMaterial(divisionName, \\\"Aevum\\\", material));\\r\\n            }            \\r\\n        }\\r\\n\\r\\n        divisions.push(division);\\r\\n    }\\r\\n\\r\\n    const corporationData = { constants, corporation, divisions };\\r\\n\\r\\n    ns.rm(corporationFileName);\\r\\n    ns.write(corporationFileName, JSON.stringify(corporationData), \\\"W\\\");\\r\\n\\r\\n\\r\\n    const now = new Date();\\r\\n    const formatter = new Intl.NumberFormat('en-US', {\\r\\n        style: 'currency',\\r\\n        currency: 'USD',\\r\\n    });\\r\\n\\r\\n    if (now.getHours() !== lastRecorded.getHours()) { // && batches not running\\r\\n        let snapshots = [];\\r\\n\\r\\n        const snapshotsFileName = \\\"data/corporateSnapshots.txt\\\";\\r\\n        if(ns.fileExists(snapshotsFileName)){\\r\\n            snapshots = JSON.parse(ns.read(snapshotsFileName));\\r\\n        }\\r\\n\\r\\n        corporation.profit = formatter.format(corporation.revenue - corporation.expenses);\\r\\n        corporation.funds = formatter.format(corporation.funds);\\r\\n        corporation.revenue = formatter.format(corporation.revenue);\\r\\n        corporation.expenses = formatter.format(corporation.expenses);\\r\\n        corporation.sharePrice = formatter.format(corporation.sharePrice);\\r\\n        corporation.snapshotTime = now;\\r\\n\\r\\n\\r\\n        snapshots.push({ corporation, divisions });\\r\\n        \\r\\n        ns.rm(snapshotsFileName);\\r\\n        ns.write(snapshotsFileName, JSON.stringify(snapshots), \\\"W\\\");\\r\\n\\r\\n        lastRecorded = now;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/get-corporate-info.js\",\"server\":\"home\"}}],[\"scripts/corporations/initial-expand.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const gidgetsFarm = \\\"Gidget's Farm\\\";\\r\\n    const industry = \\\"Agriculture\\\";\\r\\n\\r\\n    if (corporation.divisions.length === 0) {\\r\\n        ns.corporation.expandIndustry(industry, gidgetsFarm);\\r\\n    }\\r\\n\\r\\n    const smartSupplyName = \\\"Smart Supply\\\";\\r\\n    if (!ns.corporation.hasUnlock(smartSupplyName)) {\\r\\n        ns.corporation.purchaseUnlock(smartSupplyName);\\r\\n    }\\r\\n\\r\\n    const division = ns.corporation.getDivision(gidgetsFarm);\\r\\n\\r\\n    for (let [key, city] of Object.entries(ns.enums.CityName)) {\\r\\n        if (!division.cities.includes(city)) {\\r\\n            ns.corporation.expandCity(gidgetsFarm, city);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (let city of division.cities) {\\r\\n        if (!ns.corporation.hasWarehouse(gidgetsFarm, city)) {\\r\\n            ns.corporation.purchaseWarehouse(gidgetsFarm, city);\\r\\n        }\\r\\n\\r\\n        const warehouse = ns.corporation.getWarehouse(division.name, city);\\r\\n\\r\\n        if (warehouse.smartSupplyEnabled === false) {\\r\\n            ns.corporation.setSmartSupply(gidgetsFarm, city, true);\\r\\n            ns.corporation.setSmartSupplyOption(gidgetsFarm, city, \\\"Water\\\", \\\"leftovers\\\");\\r\\n            ns.corporation.setSmartSupplyOption(gidgetsFarm, city, \\\"Chemicals\\\", \\\"leftovers\\\");\\r\\n        }\\r\\n\\r\\n        const percentUsedOfWarehouse = warehouse.sizeUsed / warehouse.size;\\r\\n\\r\\n        if (warehouse.size < 300 && percentUsedOfWarehouse > 0.5){\\r\\n            ns.corporation.upgradeWarehouse(gidgetsFarm, city);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (let city of division.cities) {\\r\\n        const office = ns.corporation.getOffice(gidgetsFarm, city);\\r\\n\\r\\n        if (office.numEmployees < 3) {\\r\\n            ns.corporation.hireEmployee(gidgetsFarm, city, \\\"Operations\\\");\\r\\n            ns.corporation.hireEmployee(gidgetsFarm, city, \\\"Engineer\\\");\\r\\n            ns.corporation.hireEmployee(gidgetsFarm, city, \\\"Business\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (division.numAdVerts === 0) {\\r\\n        ns.corporation.hireAdVert(gidgetsFarm);\\r\\n    }\\r\\n\\r\\n    const initialUpgrades = [\\r\\n        \\\"FocusWires\\\",\\r\\n        \\\"Neural Accelerators\\\",\\r\\n        \\\"Speech Processor Implants\\\",\\r\\n        \\\"Nuoptimal Nootropic Injector Implants\\\",\\r\\n        \\\"Smart Factories\\\",\\r\\n    ];\\r\\n\\r\\n    for (const upgrade of initialUpgrades) {\\r\\n        const upgradeLevel = ns.corporation.getUpgradeLevel(upgrade);\\r\\n        const upgradeCost = ns.corporation.getUpgradeLevelCost(upgrade);\\r\\n\\r\\n        const reserve = 10_000_000_000;\\r\\n        const fundsLessReserve = ns.corporation.getCorporation().funds - reserve;\\r\\n\\r\\n        if (upgradeLevel < 2 && upgradeCost < fundsLessReserve) {\\r\\n            ns.corporation.levelUpgrade(upgrade);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    const thingsToUpgrade = [\\r\\n        \\\"Smart Factories\\\",\\r\\n        \\\"Smart Storage\\\",\\r\\n    ]\\r\\n\\r\\n    if (corporation.funds > 200_000_000_000 && profit > 1_000_000) {\\r\\n\\r\\n        for (const upgrade of thingsToUpgrade) {\\r\\n            const level = ns.corporation.getUpgradeLevel(upgrade);\\r\\n            if(level < 10){\\r\\n                ns.corporation.levelUpgrade(upgrade);\\r\\n            }\\r\\n        }      \\r\\n    }\\r\\n\\r\\n    if (corporation.funds > 200_000_000_000) {\\r\\n\\r\\n        const employeeGoals = [\\r\\n            { type: \\\"Operations\\\", number: 2 },\\r\\n            { type: \\\"Engineer\\\", number: 2 },\\r\\n            { type: \\\"Business\\\", number: 1 },\\r\\n            { type: \\\"Management\\\", number: 2 },\\r\\n            { type: \\\"Research & Development\\\", number: 2 }\\r\\n        ];\\r\\n\\r\\n        for (const city of division.cities) {\\r\\n            const office = ns.corporation.getOffice(gidgetsFarm, city);\\r\\n\\r\\n            if (office.size < 9) {\\r\\n                ns.corporation.upgradeOfficeSize(gidgetsFarm, city, 3);\\r\\n            }\\r\\n\\r\\n            for (let [type, numberOfEmployees] of Object.entries(office.employeeJobs)) {\\r\\n                const goal = employeeGoals.find(x => x.type === type);\\r\\n\\r\\n                if (goal) {\\r\\n                    if (numberOfEmployees < goal.number) {\\r\\n                        ns.corporation.hireEmployee(gidgetsFarm, city, type);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (corporation.funds > 40_000_000_000 && profit > 1_000_000) {\\r\\n        for (const city of division.cities) {\\r\\n            const warehouse = ns.corporation.getWarehouse(gidgetsFarm, city);\\r\\n\\r\\n            if (warehouse.size < 4_200){\\r\\n                ns.corporation.upgradeWarehouse(gidgetsFarm, city);\\r\\n            }\\r\\n        }   \\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/initial-expand.js\",\"server\":\"home\"}}],[\"scripts/corporations/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/upgrade.js\",\"server\":\"home\"}}],[\"scripts/corporations/add-supporting-material.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const materialGoalsGoals = [];\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    for (const divisionName of corporation.divisions.filter(x => x.name !== \\\"Gidget's Import/Export\\\")) {\\r\\n        const materialGoals = [];\\r\\n\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n        const allMaterials = [\\r\\n            { name: \\\"Water\\\", factorName: \\\"waterFactor\\\" },\\r\\n            { name: \\\"Hardware\\\", factorName: \\\"hardwareFactor\\\" },\\r\\n            { name: \\\"AI Cores\\\", factorName: \\\"aiCoreFactor\\\" },\\r\\n            { name: \\\"Robots\\\", factorName: \\\"robotFactor\\\" },\\r\\n            { name: \\\"Real Estate\\\", factorName: \\\"realEstateFactor\\\" },\\r\\n            // { name: \\\"Ore\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Minerals\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Food\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Plants\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Metal\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Chemicals\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Drugs\\\", factorName: \\\"\\\" },\\r\\n        ];\\r\\n\\r\\n        const materialsToBuy = [];\\r\\n\\r\\n        const industryInformation = ns.corporation.getIndustryData(division.type);\\r\\n        const itemsInIndustry = Object.entries(industryInformation);\\r\\n\\r\\n        let sumOfAllMaterialsFactors = 0;\\r\\n\\r\\n        for (const material of allMaterials) {\\r\\n            const materialImprovesProduction = itemsInIndustry.find(x => x[0] === material.factorName);\\r\\n\\r\\n            if (materialImprovesProduction) {\\r\\n                const materialData = ns.corporation.getMaterialData(material.name);\\r\\n\\r\\n                const factor = materialImprovesProduction[1];\\r\\n                sumOfAllMaterialsFactors += factor;\\r\\n\\r\\n                const size = materialData.size;\\r\\n                const name = material.name;\\r\\n                materialsToBuy.push({ name, factor, size });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        let fillXPercentOfWarehouseWithMultiplerMaterial = 0.5; // 0.5 was 789k profit 0.4 500k .6 was 402k\\r\\n\\r\\n        if(division.type === \\\"Chemical\\\"){\\r\\n            fillXPercentOfWarehouseWithMultiplerMaterial = 0.8;\\r\\n        }\\r\\n\\r\\n        for (const city of division.cities) {\\r\\n            const warehouse = ns.corporation.getWarehouse(divisionName, city);\\r\\n            const amountToFillWithMultipliers = warehouse.size * fillXPercentOfWarehouseWithMultiplerMaterial;\\r\\n\\r\\n            for (let material of materialsToBuy) {\\r\\n                const percentOf = material.factor / sumOfAllMaterialsFactors;\\r\\n                const spaceToFill = Math.floor(amountToFillWithMultipliers * percentOf);\\r\\n                const countToBuy = Math.floor(spaceToFill / material.size);\\r\\n\\r\\n                const materialInWarehouse = ns.corporation.getMaterial(divisionName, city, material.name);\\r\\n\\r\\n                let amountToBuy = 0;\\r\\n                if (materialInWarehouse.stored < (countToBuy * .95)) {\\r\\n                    if (countToBuy < 200) {\\r\\n                        ns.corporation.bulkPurchase(divisionName, city, material.name, countToBuy);\\r\\n                    } else {\\r\\n                        amountToBuy = Math.floor(countToBuy / 20);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                ns.corporation.buyMaterial(divisionName, city, material.name, amountToBuy)\\r\\n\\r\\n                let amountToSell = 0;\\r\\n                const freeSpacePercent = (warehouse.size - warehouse.sizeUsed) / warehouse.size\\r\\n                if (freeSpacePercent < 0.1 && materialInWarehouse.stored > countToBuy) {\\r\\n                    amountToSell = materialInWarehouse.stored - countToBuy;\\r\\n                    if (amountToSell > 30) {\\r\\n                        amountToSell = 30;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                ns.corporation.sellMaterial(divisionName, city, material.name, amountToSell, \\\"MP\\\");\\r\\n\\r\\n                material.countToBuy = countToBuy;\\r\\n                material.spaceToFill = spaceToFill;\\r\\n\\r\\n                const materialInGoals = materialGoals.find(x => x.name === material.name);\\r\\n\\r\\n                if (!materialInGoals) {\\r\\n                    materialGoals.push(material);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        materialGoalsGoals.push(materialGoals);\\r\\n    }\\r\\n\\r\\n    // ns.rm(\\\"stuff.txt\\\");\\r\\n    // ns.write(\\\"stuff.txt\\\", JSON.stringify(materialGoalsGoals), \\\"W\\\");\\r\\n}\",\"filename\":\"scripts/corporations/add-supporting-material.js\",\"server\":\"home\"}}],[\"scripts/corporations/upgrade-offices.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const capitalReserve = 400_000_000_000;\\r\\n    const liquidFunds = corporation.funds;\\r\\n    const investableAmount = liquidFunds - capitalReserve;\\r\\n\\r\\n    const employeeRatio = [\\r\\n        { type: \\\"Operations\\\", number: 2 },\\r\\n        { type: \\\"Engineer\\\", number: 2 },\\r\\n        { type: \\\"Business\\\", number: 1 },\\r\\n        { type: \\\"Management\\\", number: 2 },\\r\\n        { type: \\\"Research & Development\\\", number: 2 }\\r\\n    ];\\r\\n\\r\\n    const aevumEmployeeRatio = [\\r\\n        { type: \\\"Operations\\\", number: 1 },\\r\\n        { type: \\\"Engineer\\\", number: 1 },\\r\\n        { type: \\\"Business\\\", number: 1 },\\r\\n        { type: \\\"Management\\\", number: 1 },\\r\\n        { type: \\\"Research & Development\\\", number: 1 }\\r\\n    ];\\r\\n\\r\\n    for (const divisionName of corporation.divisions.filter(x => x.name !== \\\"Gidget's Import/Export\\\")) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        for (let [key, city] of Object.entries(ns.enums.CityName)) {\\r\\n            if (!division.cities.includes(city)) {\\r\\n                ns.corporation.expandCity(divisionName, city);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (division.makesProducts) {\\r\\n            const aevum = \\\"Aevum\\\";\\r\\n            const aevumOffice = ns.corporation.getOffice(divisionName, aevum);\\r\\n            const aevumHeadCount = aevumOffice.numEmployees;\\r\\n\\r\\n            const ishima = \\\"Ishima\\\";\\r\\n            const ishimaHeadCount = ns.corporation.getOffice(divisionName, ishima).numEmployees;\\r\\n\\r\\n            const expandOtherOffices = aevumHeadCount - ishimaHeadCount > 69;\\r\\n            const expandAevum = !expandOtherOffices;\\r\\n\\r\\n            if  (aevumHeadCount < 5){\\r\\n                const countNeeded = 5 - aevumOffice.size;\\r\\n                ns.corporation.upgradeOfficeSize(divisionName, aevum, countNeeded)\\r\\n            }\\r\\n\\r\\n            if (expandAevum) {\\r\\n                const costToExpand = ns.corporation.getOfficeSizeUpgradeCost(divisionName, aevum, 5);\\r\\n\\r\\n                let aevumHeadCountMax = ns.corporation.getUpgradeLevel(\\\"Wilson Analytics\\\") * 18;\\r\\n\\r\\n                if (aevumHeadCountMax < 90) {\\r\\n                    aevumHeadCountMax = 90;\\r\\n                }\\r\\n\\r\\n                if (costToExpand < investableAmount && aevumHeadCount < aevumHeadCountMax) {\\r\\n                    ns.corporation.upgradeOfficeSize(divisionName, aevum, 5);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            hireEmployees(aevumOffice, aevumEmployeeRatio, ns, divisionName);\\r\\n\\r\\n\\r\\n            const citiesWithOfficesWhoArentAevum = division.cities.filter(city => city !== aevum);\\r\\n\\r\\n            if (expandOtherOffices) {\\r\\n                const costToExpand = ns.corporation.getOfficeSizeUpgradeCost(divisionName, ishima, 9) * 5;\\r\\n\\r\\n                if (costToExpand < investableAmount) {\\r\\n                    for (const city of citiesWithOfficesWhoArentAevum) {\\r\\n                        ns.corporation.upgradeOfficeSize(divisionName, city, 9);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            for (const city of citiesWithOfficesWhoArentAevum) {\\r\\n                const office = ns.corporation.getOffice(divisionName, city);\\r\\n                hireEmployees(office, employeeRatio, ns, divisionName);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!division.makesProducts) {\\r\\n            const profit = division.lastCycleRevenue - division.lastCycleExpenses;\\r\\n\\r\\n            const constants = [\\r\\n                { minProfit: 0, officeSizeGoal: 9, minLiquidFunds: 20_000_000_000 },\\r\\n                { minProfit: 10_000_000, officeSizeGoal: 18, minLiquidFunds: 400_000_000_000 },\\r\\n                { minLoss: -900_000, officeSizeGoal: 64, minLiquidFunds: 10_000_000_000_000 },\\r\\n            ]\\r\\n\\r\\n            for (const constant of constants) {\\r\\n                for (const city of division.cities) {\\r\\n                    const office = ns.corporation.getOffice(divisionName, city);\\r\\n\\r\\n                    let sizeNeeded = 0;\\r\\n\\r\\n                    if (profit > constant.minProfit && liquidFunds > constant.minLiquidFunds) {\\r\\n                        sizeNeeded = constant.officeSizeGoal - office.size;\\r\\n                    }\\r\\n\\r\\n                    if(profit < constant.minLoss && liquidFunds > constant.minLiquidFunds){\\r\\n                        sizeNeeded = constant.officeSizeGoal - office.size;\\r\\n                    }\\r\\n\\r\\n                    if (sizeNeeded > 0) {\\r\\n                        ns.corporation.upgradeOfficeSize(divisionName, city, sizeNeeded);\\r\\n                    }\\r\\n\\r\\n                    hireEmployees(office, employeeRatio, ns, divisionName)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction hireEmployees(office, employeeJobsGoals, ns, divisionName) {\\r\\n    if (office.size === office.numEmployees) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let employeesInRatio = 0;\\r\\n    for (const goal of employeeJobsGoals) {\\r\\n        employeesInRatio += goal.number;\\r\\n    }\\r\\n\\r\\n    for (let [type, numberOfEmployees] of Object.entries(office.employeeJobs)) {\\r\\n        const goal = employeeJobsGoals.find(x => x.type === type);\\r\\n\\r\\n        if (goal) {\\r\\n            const percent = goal.number / employeesInRatio;\\r\\n            const requiredEmployeeNumber = percent * office.size;\\r\\n\\r\\n            if (numberOfEmployees < requiredEmployeeNumber) {\\r\\n                ns.corporation.hireEmployee(divisionName, office.city, type);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/upgrade-offices.js\",\"server\":\"home\"}}],[\"scripts/corporations/level-upgrades.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n}\",\"filename\":\"scripts/corporations/level-upgrades.js\",\"server\":\"home\"}}],[\"scripts/corporations/upgrade-warehouse.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const capitalReserve = 40_000_000_000;\\r\\n\\r\\n\\r\\n    for (const divisionName of corporation.divisions.filter(x => x !== \\\"Gidget's Import/Export\\\")) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        if(division.makesProducts && division.products.length < 2){\\r\\n            if(division.products.length === 0){\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            const product = ns.corporation.getProduct(divisionName, \\\"Aevum\\\", division.products[0]);\\r\\n\\r\\n            if(product.developmentProgress !== 100){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        const industryData = ns.corporation.getIndustryData(division.type); \\r\\n\\r\\n        for (let city of division.cities) {\\r\\n            if (!ns.corporation.hasWarehouse(divisionName, city)) {\\r\\n                ns.corporation.purchaseWarehouse(divisionName, city);\\r\\n            }\\r\\n\\r\\n            const warehouse = ns.corporation.getWarehouse(division.name, city);\\r\\n\\r\\n            ns.corporation.setSmartSupply(divisionName, city, true);\\r\\n\\r\\n            for (let [material, value] of Object.entries(industryData.requiredMaterials)) {\\r\\n                ns.corporation.setSmartSupplyOption(divisionName, city, material, \\\"leftovers\\\");\\r\\n            }\\r\\n\\r\\n            const percentUsedOfWarehouse = warehouse.sizeUsed / warehouse.size;\\r\\n            const warehouseUpgradeCost = ns.corporation.getUpgradeWarehouseCost(divisionName, city);\\r\\n\\r\\n            const moneyLeft = corporation.funds - warehouseUpgradeCost;\\r\\n            const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n            if (warehouse.size < 400 && percentUsedOfWarehouse > 0.5){\\r\\n                ns.corporation.upgradeWarehouse(divisionName, city);\\r\\n            }\\r\\n\\r\\n            if (warehouse.size < 2000 && percentUsedOfWarehouse > 0.5 && moneyLeft > capitalReserve && profit > 100) { \\r\\n                ns.corporation.upgradeWarehouse(divisionName, city);\\r\\n            }\\r\\n\\r\\n            if (warehouse.size < 5000 && percentUsedOfWarehouse > 0.5 && moneyLeft > capitalReserve && profit > 1_000_000) { \\r\\n                ns.corporation.upgradeWarehouse(divisionName, city);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/upgrade-warehouse.js\",\"server\":\"home\"}}],[\"scripts/corporations/expand-to-tobacco.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const gidgetsSmokes = \\\"Gidget's Smokes\\\";\\r\\n    const industry = \\\"Tobacco\\\";\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    if (corporation.divisions.length > 0 && corporation.funds > 750_000_000_000 && !corporation.divisions.includes(gidgetsSmokes)) {\\r\\n        ns.corporation.expandIndustry(industry, gidgetsSmokes);\\r\\n        const division = ns.corporation.getDivision(gidgetsSmokes);\\r\\n\\r\\n        const otherEmployeeGoals = [\\r\\n            { type: \\\"Operations\\\", number: 2 },\\r\\n            { type: \\\"Engineer\\\", number: 2 },\\r\\n            { type: \\\"Business\\\", number: 1 },\\r\\n            { type: \\\"Management\\\", number: 2 },\\r\\n            { type: \\\"Research & Development\\\", number: 2 }\\r\\n        ];\\r\\n\\r\\n        for (let [key, city] of Object.entries(ns.enums.CityName)) {\\r\\n            if (!division.cities.includes(city)) {\\r\\n                ns.corporation.expandCity(gidgetsSmokes, city);\\r\\n            }\\r\\n\\r\\n            const office = ns.corporation.getOffice(gidgetsSmokes, city);\\r\\n\\r\\n            if (office.size < 9) {\\r\\n                ns.corporation.upgradeOfficeSize(gidgetsSmokes, city, 3);\\r\\n            }\\r\\n\\r\\n            for (let [type, numberOfEmployees] of Object.entries(office.employeeJobs)) {\\r\\n                const goal = otherEmployeeGoals.find(x => x.type === type);\\r\\n\\r\\n                if (goal) {\\r\\n                    if (numberOfEmployees < goal.number) {\\r\\n                        ns.corporation.hireEmployee(gidgetsSmokes, city, type);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/expand-to-tobacco.js\",\"server\":\"home\"}}],[\"scripts/corporations/product-management.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const profitPerSecond = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    const divisionsProductNames = new Map();\\r\\n\\r\\n    if (corporation.divisions.includes(\\\"Gidget's Smokes\\\")){\\r\\n        divisionsProductNames.set(\\\"Gidget's Smokes\\\", { division: \\\"Gidget's Smokes\\\", productNames: [\\\"These Smokes Probably Won't Kill U v.\\\", \\\"These Smokes WILL Kill You v.\\\", \\\"This Leaf is Highly Addictive v.\\\", \\\"Behold, the bringer of Death v.\\\", \\\"You will live so fast and DIE young if you smoke these v.\\\"] });\\r\\n    }\\r\\n\\r\\n    if (corporation.divisions.includes(\\\"Gidget's Computers & Hardware\\\")){\\r\\n        divisionsProductNames.set(\\\"Gidget's Computers & Hardware\\\", { division: \\\"Gidget's Computers & Hardware\\\", productNames: [\\\"Desktop Computer v.\\\", \\\"Router v.\\\", \\\"Laptop Computer v.\\\", \\\"Smart Phone v.\\\", \\\"Computer Monitor v.\\\"] });\\r\\n    }\\r\\n\\r\\n    const includedDivisions = Array.from(divisionsProductNames.keys());\\r\\n\\r\\n    for (const divisionName of includedDivisions) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n        const divisionConstants = divisionsProductNames.get(divisionName);\\r\\n\\r\\n        const products = [];\\r\\n        let oneDeveloping = false;\\r\\n\\r\\n        for (const productName of division.products) {\\r\\n            const product = ns.corporation.getProduct(divisionName, \\\"Aevum\\\", productName);\\r\\n\\r\\n            if (product.developmentProgress < 100) {\\r\\n                oneDeveloping = true;\\r\\n            }\\r\\n\\r\\n            products.push(product);\\r\\n        }\\r\\n\\r\\n        let mimimumSpend = 1_000_000_000;\\r\\n\\r\\n        if(profitPerSecond > mimimumSpend){\\r\\n            mimimumSpend = profitPerSecond;\\r\\n        }\\r\\n\\r\\n        if (division.products.length < division.maxProducts && !oneDeveloping) {\\r\\n            const productName = divisionConstants.productNames[division.products.length];\\r\\n            ns.corporation.makeProduct(divisionName, \\\"Aevum\\\", productName + 1, mimimumSpend, mimimumSpend);\\r\\n        }\\r\\n\\r\\n        if (division.products.length === division.maxProducts && !oneDeveloping) {\\r\\n\\r\\n            const lowestRatedProduct = products\\r\\n                .sort((a, b) => b.rating - a.rating)\\r\\n                .pop();\\r\\n\\r\\n            ns.corporation.discontinueProduct(divisionName, lowestRatedProduct.name);\\r\\n\\r\\n            const splitName = lowestRatedProduct.name.split(\\\"v.\\\");\\r\\n\\r\\n            ns.corporation.makeProduct(divisionName, \\\"Aevum\\\", `${splitName[0]}v.${Number(splitName[1]) + 1}`, mimimumSpend, mimimumSpend);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/corporations/product-management.js\",\"server\":\"home\"}}],[\"scripts/corporations/invest.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const capitalReserve = 40_000_000_000;\\r\\n    const liquidFunds = corporation.funds;\\r\\n    const investableAmount = liquidFunds - capitalReserve;\\r\\n\\r\\n    initialUpgrades(corporation, ns);\\r\\n\\r\\n    if (investableAmount < 0 || corporation.divisions.length === 0) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const upgradeGoals = [\\r\\n        { name: \\\"FocusWires\\\", goalLvl: 20, topPriority: true },\\r\\n        { name: \\\"Neural Accelerators\\\", goalLvl: 20, topPriority: true },\\r\\n        { name: \\\"Speech Processor Implants\\\", goalLvl: 20, topPriority: true },\\r\\n        { name: \\\"Nuoptimal Nootropic Injector Implants\\\", goalLvl: 20, topPriority: true },\\r\\n        { name: \\\"Wilson Analytics\\\", goalLvl: 20, topPriority: false }, // if this was top it would take forever to get to the less important ones.\\r\\n        { name: \\\"DreamSense\\\", goalLvl: 14, topPriority: false },\\r\\n        { name: \\\"ABC SalesBots\\\", goalLvl: 20, topPriority: false },\\r\\n        { name: \\\"Project Insight\\\", goalLvl: 14, topPriority: false },\\r\\n        { name: \\\"Smart Storage\\\", goalLvl: 20, topPriority: false },\\r\\n        { name: \\\"Smart Factories\\\", goalLvl: 20, topPriority: false },\\r\\n    ]\\r\\n\\r\\n    let cheapestUpgrade;\\r\\n\\r\\n    if (investableAmount > 5_000_000_000_000_000) {\\r\\n        if (!ns.corporation.hasUnlock(\\\"Shady Accounting\\\")) {\\r\\n            ns.corporation.purchaseUnlock(\\\"Shady Accounting\\\");\\r\\n        }\\r\\n\\r\\n        if (!ns.corporation.hasUnlock(\\\"Government Partnership\\\")) {\\r\\n            ns.corporation.purchaseUnlock(\\\"Government Partnership\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const upgrade of upgradeGoals) {\\r\\n        if (cheapestUpgrade && cheapestUpgrade.topPriority && upgrade.topPriority === false) {\\r\\n            continue;\\r\\n        }\\r\\n\\r\\n        upgrade.cost = ns.corporation.getUpgradeLevelCost(upgrade.name);\\r\\n        upgrade.currentLvl = ns.corporation.getUpgradeLevel(upgrade.name);\\r\\n        upgrade.atGoal = upgrade.currentLvl >= upgrade.goalLvl;\\r\\n        upgrade.upgradeType = true;\\r\\n\\r\\n        if (!cheapestUpgrade || cheapestUpgrade.cost > upgrade.cost) {\\r\\n            if (!upgrade.atGoal) {\\r\\n                cheapestUpgrade = upgrade;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const divisionName of corporation.divisions.filter(x => x.name !== \\\"Gidget's Import/Export\\\")) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        if (division.numAdVerts === 0) {\\r\\n            ns.corporation.hireAdVert(divisionName);\\r\\n        }\\r\\n\\r\\n        if (division.makesProducts) {\\r\\n            const cost = ns.corporation.getHireAdVertCost(divisionName);\\r\\n\\r\\n            if (!cheapestUpgrade || cheapestUpgrade.cost > cost) {\\r\\n                cheapestUpgrade = { adVertType: true, division: divisionName, cost };\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (!cheapestUpgrade) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (investableAmount > cheapestUpgrade.cost) {\\r\\n        if (cheapestUpgrade.adVertType) {\\r\\n            if (ns.corporation.getHireAdVertCost(cheapestUpgrade.division) === cheapestUpgrade.cost) {\\r\\n                ns.corporation.hireAdVert(cheapestUpgrade.division);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (cheapestUpgrade.upgradeType) {\\r\\n            if (ns.corporation.getUpgradeLevelCost(cheapestUpgrade.name) === cheapestUpgrade.cost) {\\r\\n                ns.corporation.levelUpgrade(cheapestUpgrade.name);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction initialUpgrades(corporation, ns) {\\r\\n    const initialUpgrades = [\\r\\n        \\\"DreamSense\\\",\\r\\n        \\\"FocusWires\\\",\\r\\n        \\\"Neural Accelerators\\\",\\r\\n        \\\"Speech Processor Implants\\\",\\r\\n        \\\"Nuoptimal Nootropic Injector Implants\\\",\\r\\n        \\\"Smart Factories\\\",\\r\\n    ];\\r\\n\\r\\n    const smartSupplyName = \\\"Smart Supply\\\";\\r\\n    if (!ns.corporation.hasUnlock(smartSupplyName)) {\\r\\n        ns.corporation.purchaseUnlock(smartSupplyName);\\r\\n    }\\r\\n\\r\\n    for (const divisionName of corporation.divisions) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        if (division.numAdVerts === 0) {\\r\\n            ns.corporation.hireAdVert(divisionName);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    if(profit > 100_000){\\r\\n        for (const upgrade of initialUpgrades) {\\r\\n            const upgradeLevel = ns.corporation.getUpgradeLevel(upgrade);\\r\\n            const upgradeCost = ns.corporation.getUpgradeLevelCost(upgrade);\\r\\n    \\r\\n            const reserve = 10_000_000_000;\\r\\n            const fundsLessReserve = ns.corporation.getCorporation().funds - reserve;\\r\\n    \\r\\n            if (upgradeLevel < 2 && upgradeCost < fundsLessReserve) {\\r\\n                ns.corporation.levelUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const thingsToUpgrade = [\\r\\n        \\\"Smart Factories\\\",\\r\\n        \\\"Smart Storage\\\",\\r\\n    ]\\r\\n\\r\\n    if (corporation.funds > 200_000_000_000 && profit > 1_000_000) {\\r\\n        for (const upgrade of thingsToUpgrade) {\\r\\n            const level = ns.corporation.getUpgradeLevel(upgrade);\\r\\n            if (level < 10) {\\r\\n                ns.corporation.levelUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/invest.js\",\"server\":\"home\"}}],[\"scripts/corporations/research.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const researchGoals = [\\r\\n        { name: \\\"Hi-Tech R&D Laboratory\\\", prereqs: [] },\\r\\n        { name: \\\"Market-TA.II\\\", prereqs: [\\\"Market-TA.I\\\"] },\\r\\n        { name: \\\"uPgrade: Capacity.I\\\", prereqs: [\\\"uPgrade: Fulcrum\\\"], productOnly: true},\\r\\n        { name: \\\"uPgrade: Capacity.II\\\", prereqs: [], productOnly: true},\\r\\n        { name: \\\"Drones - Assembly\\\", prereqs: [ \\\"Drones\\\"] },\\r\\n        { name: \\\"Self-Correcting Assemblers\\\", prereqs: []}\\r\\n    ];\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    for (const divisionName of corporation.divisions.filter(x => x.name !== \\\"Gidget's Import/Export\\\")) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        let totalSpent = 0;\\r\\n        for (const research of researchGoals) {\\r\\n            if(research.productOnly && division.makesProducts === false){\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            let cost = ns.corporation.getResearchCost(divisionName, research.name);\\r\\n\\r\\n            for (const prereqName of research.prereqs) {\\r\\n                cost += ns.corporation.getResearchCost(divisionName, prereqName);\\r\\n            }\\r\\n\\r\\n            if (ns.corporation.hasResearched(divisionName, research.name)) {\\r\\n                totalSpent += cost;\\r\\n                continue;\\r\\n            }           \\r\\n\\r\\n            const researchPointsToSpend = division.researchPoints;\\r\\n\\r\\n            if ((cost * 2) + totalSpent < researchPointsToSpend) {\\r\\n                for (const prereqName of research.prereqs) {\\r\\n                    ns.corporation.research(divisionName, prereqName)\\r\\n                }\\r\\n\\r\\n                ns.corporation.research(divisionName, research.name);\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/research.js\",\"server\":\"home\"}}],[\"scripts/corporations/coffee-party.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const divisionsToOperateOn = corporation.divisions.filter(divisionName => divisionName !== \\\"Gidget's Farm\\\");\\r\\n\\r\\n    for (const divisionName of divisionsToOperateOn) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        for(const city of division.cities){\\r\\n            const office = ns.corporation.getOffice(divisionName);\\r\\n\\r\\n            if (office.avgEnergy < 20){\\r\\n                ns.corporation.buyTea(divisionName, city);\\r\\n            }\\r\\n\\r\\n            if(office.avgMoral < 20) {\\r\\n                ns.corporation.throwParty(divisionName, city, 50_000);\\r\\n            }            \\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/coffee-party.js\",\"server\":\"home\"}}],[\"scripts/corporations/tea-party.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const corporateProfits = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    const divisionalCorporateProfitsFile = \\\"data/divisionalCorporateProfits.txt\\\";\\r\\n    let divisionalCorporateProfits = new Map();\\r\\n    if (ns.fileExists(divisionalCorporateProfitsFile)) {\\r\\n        divisionalCorporateProfits = new Map(JSON.parse(ns.read(divisionalCorporateProfitsFile)));\\r\\n    }\\r\\n\\r\\n    for (const divisionName of corporation.divisions.filter(x => x.name !== \\\"Gidget's Import/Export\\\")) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        const divisionalProfitsLastCycle = division.lastCycleRevenue - division.lastCycleExpenses;\\r\\n\\r\\n        let divisionProfitsRecord;\\r\\n\\r\\n        if (divisionalCorporateProfits.has(divisionName)) {\\r\\n            divisionProfitsRecord = divisionalCorporateProfits.get(divisionName);\\r\\n        } else {\\r\\n            divisionProfitsRecord = { sumOfProfitsInThisAccountingPeriod: 0, count: 0, lastProfit: 0, teaPartyCost: 0, partyEffect: [] };\\r\\n        }\\r\\n\\r\\n        if (divisionProfitsRecord.lastProfit !== divisionalProfitsLastCycle) {\\r\\n            divisionProfitsRecord.count++;\\r\\n            divisionProfitsRecord.sumOfProfitsInThisAccountingPeriod += divisionalProfitsLastCycle;\\r\\n            divisionProfitsRecord.lastProfit = divisionalProfitsLastCycle;\\r\\n\\r\\n            let employeeCount = 0;\\r\\n            let morales = [];\\r\\n            let energies = [];\\r\\n\\r\\n            for (const city of division.cities) {\\r\\n                const office = ns.corporation.getOffice(divisionName, city);\\r\\n\\r\\n                morales.push(office.avgMorale);\\r\\n                energies.push(office.avgEnergy);\\r\\n\\r\\n                employeeCount += office.numEmployees;\\r\\n            }\\r\\n\\r\\n            const averageMorale = averageArray(morales);\\r\\n            const averageEnergy = averageArray(energies);\\r\\n\\r\\n            const teaCostPerHead = 500_000;\\r\\n            divisionProfitsRecord.teaPartyCost = employeeCount * teaCostPerHead;\\r\\n\\r\\n            let minimumMoraleAndEnergy = 70;\\r\\n            if (corporateProfits > 1_000_000_000_000){\\r\\n                minimumMoraleAndEnergy = 95;\\r\\n            }\\r\\n\\r\\n            const divisionIsStrugglingAndWeAreProfitableAndHaveMoney = (averageMorale < minimumMoraleAndEnergy || averageEnergy < minimumMoraleAndEnergy) && corporateProfits > 5_000_000 && corporation.funds > 100_000_000_000;\\r\\n\\r\\n\\r\\n            const divisionalProfitsCanSustain = divisionProfitsRecord.sumOfProfitsInThisAccountingPeriod > divisionProfitsRecord.teaPartyCost;\\r\\n            const shouldTreatOurEmployees = divisionalProfitsCanSustain || divisionIsStrugglingAndWeAreProfitableAndHaveMoney\\r\\n\\r\\n            if (shouldTreatOurEmployees) {\\r\\n                const goal = 95;\\r\\n\\r\\n                let tea = false;\\r\\n                let party = false;\\r\\n\\r\\n                if (averageEnergy <= averageMorale) {\\r\\n                    if (averageEnergy < goal) {\\r\\n                        tea = true;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (averageMorale < averageEnergy) {\\r\\n                    if (averageMorale < goal) {\\r\\n                        party = true;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                let effects = [];\\r\\n\\r\\n                for (const city of division.cities) {\\r\\n                    if (party) {\\r\\n                        const effect = ns.corporation.throwParty(divisionName, city, teaCostPerHead);\\r\\n                        effects.push(effect);\\r\\n                    }\\r\\n\\r\\n                    if (tea) {\\r\\n                        const effect = ns.corporation.buyTea(divisionName, city);\\r\\n                        effects.push(effect);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (party) {\\r\\n                    divisionProfitsRecord.partyEffect = recordEffectiveness(averageMorale, effects, divisionProfitsRecord.partyEffect);\\r\\n                }\\r\\n\\r\\n                resetProfitRecord(divisionProfitsRecord);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        divisionalCorporateProfits.set(divisionName, divisionProfitsRecord);\\r\\n    }\\r\\n\\r\\n    ns.rm(divisionalCorporateProfitsFile);\\r\\n    ns.write(divisionalCorporateProfitsFile, JSON.stringify(Array.from(divisionalCorporateProfits.entries()), \\\"W\\\"));\\r\\n}\\r\\n\\r\\nfunction recordEffectiveness(average, effects, array) {\\r\\n    const mapToWorkOn = new Map(array);\\r\\n\\r\\n    const averageBracket = Math.floor(average / 10);\\r\\n    const averageEffect = averageArray(effects);\\r\\n    let newAverageOverTime;\\r\\n\\r\\n    if (mapToWorkOn.has(averageBracket)) {\\r\\n        let previousEffect = mapToWorkOn.get(averageBracket);\\r\\n        previousEffect += averageEffect;\\r\\n        newAverageOverTime = previousEffect / 2;\\r\\n    } else {\\r\\n        newAverageOverTime = averageEffect;\\r\\n    }\\r\\n\\r\\n    mapToWorkOn.set(averageBracket, newAverageOverTime);\\r\\n\\r\\n   return Array.from(mapToWorkOn);\\r\\n}\\r\\n\\r\\nfunction averageArray(array) {\\r\\n    return array.reduce((acc, x) => acc + x, 0) / array.length;\\r\\n}\\r\\n\\r\\nfunction resetProfitRecord(divisionProfitsRecord) {\\r\\n    divisionProfitsRecord.count = 0;\\r\\n    divisionProfitsRecord.sumOfProfitsInThisAccountingPeriod = 0;\\r\\n}\\r\\n\",\"filename\":\"scripts/corporations/tea-party.js\",\"server\":\"home\"}}],[\"scripts/corporations/import-export.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const divisionName = \\\"Gidget's Import/Export\\\";\\r\\n    const unlocksNeeded = [\\r\\n        \\\"Export\\\",\\r\\n        \\\"Market Research - Demand\\\",\\r\\n    ]\\r\\n\\r\\n    const materialNames = [\\r\\n        \\\"Water\\\",\\r\\n        \\\"Ore\\\",\\r\\n        \\\"Minerals\\\",\\r\\n        \\\"Food\\\",\\r\\n        \\\"Plants\\\",\\r\\n        \\\"Metal\\\",\\r\\n        \\\"Hardware\\\",\\r\\n        \\\"Chemicals\\\",\\r\\n        \\\"Drugs\\\",\\r\\n        \\\"Robots\\\",\\r\\n        \\\"AI Cores\\\",\\r\\n        \\\"Real Estate\\\"\\r\\n    ]\\r\\n\\r\\n\\r\\n    for (const unlockName of unlocksNeeded) {\\r\\n        if (!ns.corporation.hasUnlock(\\\"Export\\\")) {\\r\\n            ns.corporation.purchaseUnlock(\\\"Export\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (corporation.divisions.includes(divisionName)) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        for (let [key, city] of Object.entries(ns.enums.CityName)) {\\r\\n            if (!division.cities.includes(city)) {\\r\\n                ns.corporation.expandCity(divisionName, city);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (let city of division.cities) {\\r\\n            if (!ns.corporation.hasWarehouse(divisionName, city)) {\\r\\n                ns.corporation.purchaseWarehouse(divisionName, city);\\r\\n            }\\r\\n\\r\\n            const warehouse = ns.corporation.getWarehouse(divisionName, city);\\r\\n\\r\\n            if (warehouse.smartSupplyEnabled) {\\r\\n                ns.corporation.setSmartSupply(divisionName, city, false);\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        let allMaterials = [];\\r\\n\\r\\n        for (const materialName of materialNames) {\\r\\n            let materials = []\\r\\n\\r\\n            let lowestPrice;\\r\\n            let highestPrice;\\r\\n\\r\\n            for (let city of division.cities) {\\r\\n                let materialFromCity = ns.corporation.getMaterial(divisionName, city, materialName);\\r\\n                materialFromCity.city = city;\\r\\n                materials.push(materialFromCity);\\r\\n\\r\\n                if (!lowestPrice || lowestPrice > materialFromCity.marketPrice) {\\r\\n                    lowestPrice = materialFromCity.marketPrice;\\r\\n                }\\r\\n\\r\\n                if (!highestPrice || highestPrice < materialFromCity.marketPrice) {\\r\\n                    highestPrice = materialFromCity.marketPrice;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            for (const materialFromCity of materials) {\\r\\n                materialFromCity.delta = materialFromCity.marketPrice - lowestPrice;\\r\\n            }\\r\\n\\r\\n            const delta = highestPrice - lowestPrice;\\r\\n            materials = materials.sort((a, b) => b.marketPrice - a.marketPrice);\\r\\n\\r\\n            allMaterials.push({ materials, delta });\\r\\n        }\\r\\n\\r\\n        allMaterials = allMaterials.sort((a, b) => b.delta - a.delta);\\r\\n\\r\\n        const filename = \\\"junk.txt\\\";\\r\\n        ns.rm(filename);\\r\\n        ns.write(filename, JSON.stringify(allMaterials), \\\"W\\\");\\r\\n\\r\\n        const materialsToImportExport = allMaterials.filter(x => x.delta > 500);\\r\\n\\r\\n        // if all stored === 0, then do another round\\r\\n        for (const materialToImportExport of materialsToImportExport) {\\r\\n            const exportOrders = []\\r\\n            // ns.tprint(materialToImportExport);\\r\\n            const inventoryCount = materialToImportExport.materials.reduce((acc, b) => acc + b.stored, 0);\\r\\n\\r\\n            if (inventoryCount > 0) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            for (const materialFromCity of materialToImportExport.materials) {\\r\\n                const materialName = materialFromCity.name;\\r\\n\\r\\n                for (const exportMaterial of materialFromCity.exports) {\\r\\n                    ns.corporation.cancelExportMaterial(divisionName, materialFromCity.city, divisionName, exportMaterial.city, materialName);\\r\\n                }\\r\\n\\r\\n                if (materialFromCity.delta > 0) {\\r\\n                    ns.corporation.sellMaterial(divisionName, materialFromCity.city, materialName, \\\"MAX\\\", \\\"MP\\\");\\r\\n\\r\\n                    if (materialFromCity.delta > 500) {\\r\\n                        exportOrders.push({ city: materialFromCity.city, demand: materialFromCity.demand });\\r\\n                    }\\r\\n                } else {\\r\\n                    ns.corporation.sellMaterial(divisionName, materialFromCity.city, materialName, 0, 0);\\r\\n\\r\\n                    let purchaseAmount = 0;\\r\\n                    for (const exportOrder of exportOrders) {\\r\\n                        ns.corporation.exportMaterial(divisionName, materialFromCity.city, divisionName, exportOrder.city, materialName, exportOrder.demand);\\r\\n                        purchaseAmount += exportOrder.demand;\\r\\n                    }\\r\\n\\r\\n                    const materialData = ns.corporation.getMaterialData(materialName); // {\\\"name\\\":\\\"Real Estate\\\",\\\"size\\\":0.005,\\\"demandBase\\\":50,\\\"demandRange\\\":[5,99],\\\"competitionBase\\\":50,\\\"competitionRange\\\":[25,75],\\\"baseCost\\\":80000,\\\"maxVolatility\\\":1.5,\\\"baseMarkup\\\":1.5}\\r\\n\\r\\n                    const spaceNeeded = purchaseAmount * materialData.size;\\r\\n\\r\\n                    const warehouse = ns.corporation.getWarehouse(divisionName, materialFromCity.city);\\r\\n                    const freeSpace = warehouse.size - warehouse.sizeUsed;\\r\\n\\r\\n                    if (freeSpace > spaceNeeded) {\\r\\n                        ns.corporation.bulkPurchase(divisionName, materialFromCity.city, materialName, purchaseAmount);\\r\\n                    } else {\\r\\n                        ns.corporation.upgradeWarehouse(divisionName, materialFromCity.city);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/import-export.js\",\"server\":\"home\"}}],[\"scripts/corporations/adjust-prices-export.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    if (corporation.state !== \\\"START\\\") {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if(corporation.divisions.length > 1){\\r\\n        if (!ns.corporation.hasUnlock(\\\"Export\\\")) {\\r\\n            ns.corporation.purchaseUnlock(\\\"Export\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const gidgetsFarm = \\\"Gidget's Farm\\\";\\r\\n    const gidgetsSmokes = \\\"Gidget's Smokes\\\";\\r\\n    const chemist = \\\"Chemist Gidget's Lab\\\";\\r\\n    const water = \\\"Gidget's Municipal Water\\\";\\r\\n    const hardware = \\\"Gidget's Computers & Hardware\\\";\\r\\n    const metal = \\\"Gidget's Metallurgy\\\";\\r\\n    const mining = \\\"Gidget's Land Destroyer\\\";\\r\\n\\r\\n    const divisionalTies = [\\r\\n        {\\r\\n            name: gidgetsFarm, materialsSold: [\\\"Food\\\", \\\"Plants\\\"], exports: [\\r\\n                { importer: gidgetsSmokes, material: \\\"Plants\\\" },\\r\\n                { importer: chemist, material: \\\"Plants\\\" }\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: chemist, materialsSold: [\\\"Chemicals\\\"], exports: [\\r\\n                { importer: gidgetsFarm, material: \\\"Chemicals\\\" }\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: water, materialsSold: [\\\"Water\\\"], exports: [\\r\\n                { importer: gidgetsFarm, material: \\\"Water\\\" },\\r\\n                { importer: chemist, material: \\\"Water\\\" },\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: hardware, materialsSold: [\\\"Hardware\\\"], exports: [\\r\\n                { importer: water, material: \\\"Hardware\\\" },\\r\\n                { importer: mining, material: \\\"Hardware\\\" },\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: metal, materialsSold: [\\\"Metal\\\"], exports: [\\r\\n                { importer: hardware, material: \\\"Metal\\\" },\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: mining, materialsSold: [\\\"Ore\\\", \\\"Minerals\\\"], exports: [\\r\\n                    { importer: metal, material: \\\"Ore\\\" },\\r\\n                ]\\r\\n        },\\r\\n    ]\\r\\n\\r\\n    const rawMaterialProducers = [];\\r\\n    const importExportRelationships = [];\\r\\n\\r\\n    for (const division of divisionalTies) {\\r\\n        if (corporation.divisions.includes(division.name)) {\\r\\n            rawMaterialProducers.push({ producer: division.name, materials: division.materialsSold });\\r\\n            for (const EXPORT of division.exports) {\\r\\n                if(corporation.divisions.includes(EXPORT.importer)){\\r\\n                    importExportRelationships.push({ exporter: division.name, importer: EXPORT.importer, material: EXPORT.material });\\r\\n                }                \\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const divisionName of corporation.divisions.filter(x => x.name !== \\\"Gidget's Import/Export\\\")) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        const divisionHasExportRelationship = importExportRelationships.find(x => x.exporter === divisionName);\\r\\n\\r\\n        const exportRelationships = importExportRelationships.filter(x => x.exporter === divisionName);\\r\\n\\r\\n        for (const exportRelationship of exportRelationships) {\\r\\n            for (const city of division.cities) {\\r\\n                ns.corporation.cancelExportMaterial(exportRelationship.exporter, city, exportRelationship.importer, city, exportRelationship.material);\\r\\n                ns.corporation.exportMaterial(exportRelationship.exporter, city, exportRelationship.importer, city, exportRelationship.material, \\\"-(IPROD)\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (const productName of division.products) {\\r\\n            if (ns.corporation.hasResearched(divisionName, \\\"Market-TA.II\\\")) {\\r\\n                ns.corporation.setProductMarketTA2(divisionName, productName, true);\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            for (const city of division.cities) {\\r\\n                const product = ns.corporation.getProduct(divisionName, city, productName);\\r\\n\\r\\n                if (product.developmentProgress !== 100) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                if (product.desiredSellPrice === 0) {\\r\\n                    let mostExpensivePrice = 0;\\r\\n\\r\\n                    for (const productNameForPrice of division.products) {\\r\\n                        const product = ns.corporation.getProduct(divisionName, city, productNameForPrice);\\r\\n                        if (product.desiredSellPrice === 0) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        let price = product.desiredSellPrice;\\r\\n\\r\\n                        if (isNaN(price)) {\\r\\n                            price = Number(price.split(')')[1]);\\r\\n                        }\\r\\n\\r\\n                        if (price > mostExpensivePrice) {\\r\\n                            mostExpensivePrice = price;\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    if (mostExpensivePrice === 0) {\\r\\n                        mostExpensivePrice = product.productionCost * 2;\\r\\n                    }\\r\\n\\r\\n                    ns.corporation.sellProduct(divisionName, city, productName, \\\"MAX\\\", `${mostExpensivePrice}`, false)\\r\\n                } else {\\r\\n                    if (product.stored === 0) {\\r\\n                        const priceToSet = adjustPriceUp(product.desiredSellPrice, product.productionCost);\\r\\n\\r\\n                        ns.corporation.sellProduct(divisionName, city, productName, \\\"MAX\\\", priceToSet, false)\\r\\n                    }\\r\\n\\r\\n                    if (product.stored > 20) {\\r\\n                        const priceToSet = adjustPriceDown(product.desiredSellPrice, product.productionCost);\\r\\n\\r\\n                        ns.corporation.sellProduct(divisionName, city, productName, \\\"MAX\\\", priceToSet, false);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        const rawMaterialProducer = rawMaterialProducers.find(x => x.producer === divisionName);\\r\\n\\r\\n        if (rawMaterialProducer) {\\r\\n            for (const city of division.cities) {\\r\\n                for (const materialName of rawMaterialProducer.materials) {\\r\\n\\r\\n                    const material = ns.corporation.getMaterial(divisionName, city, materialName);\\r\\n\\r\\n                    const warehouse = ns.corporation.getWarehouse(divisionName, city);\\r\\n\\r\\n                    const percentUsed = warehouse.sizeUsed / warehouse.size;\\r\\n\\r\\n                    if (ns.corporation.hasResearched(divisionName, \\\"Market-TA.II\\\") && material.stored === 0) {\\r\\n                        ns.corporation.setMaterialMarketTA2(divisionName, city, materialName, true);\\r\\n                        continue;\\r\\n                    } else if (ns.corporation.hasResearched(divisionName, \\\"Market-TA.II\\\") && percentUsed < 0.8) {\\r\\n                        ns.corporation.setMaterialMarketTA2(divisionName, city, materialName, true);\\r\\n                        continue;\\r\\n                    } else if (ns.corporation.hasResearched(divisionName, \\\"Market-TA.II\\\")) {\\r\\n                        ns.corporation.setMaterialMarketTA2(divisionName, city, materialName, false);\\r\\n                    }\\r\\n\\r\\n                    const marketPrice = material.marketPrice;\\r\\n\\r\\n                    if (material.desiredSellPrice === 0 || material.desiredSellPrice === \\\"MP\\\" || material.desiredSellPrice === \\\"MP+5\\\") {\\r\\n                        ns.corporation.sellMaterial(divisionName, city, material.name, \\\"MAX\\\", marketPrice);\\r\\n                    } else {\\r\\n\\r\\n                        const materialData = ns.corporation.getMaterialData(material.name);\\r\\n                        const costOfGoodsSold = material.marketPrice / materialData.baseMarkup;\\r\\n\\r\\n                        if (material.stored === 0) {\\r\\n                            let priceToSet = adjustPriceUp(material.desiredSellPrice, marketPrice);\\r\\n\\r\\n                            if (priceToSet < costOfGoodsSold){\\r\\n                                priceToSet = costOfGoodsSold * 1.04;\\r\\n                            }\\r\\n\\r\\n                            ns.corporation.sellMaterial(divisionName, city, material.name, \\\"MAX\\\", priceToSet);\\r\\n                        }\\r\\n\\r\\n                        if (material.stored > 20) {\\r\\n                            let priceToSet = adjustPriceDown(material.desiredSellPrice, marketPrice);\\r\\n\\r\\n                            if  (material.stored > material.productionAmount * 2){\\r\\n                                priceToSet = adjustPriceDown(priceToSet, marketPrice, true);\\r\\n                            }\\r\\n\\r\\n                            if (priceToSet < costOfGoodsSold){\\r\\n                                priceToSet = costOfGoodsSold * 1.04;\\r\\n                            }\\r\\n\\r\\n                            ns.corporation.sellMaterial(divisionName, city, material.name, \\\"MAX\\\", priceToSet);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction adjustPriceUp(oldPrice, marketPrice) {\\r\\n\\r\\n    if (isNaN(oldPrice)) {\\r\\n        const adjuster = Number(oldPrice.split(')')[1]);\\r\\n        oldPrice = adjuster + marketPrice;\\r\\n    }\\r\\n\\r\\n    let newPrice = 0;\\r\\n    if (oldPrice >= 0) {\\r\\n        if (oldPrice > 100) {\\r\\n            newPrice = oldPrice * 1.05;\\r\\n        } else {\\r\\n            newPrice = oldPrice + 10;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (oldPrice < 0) {\\r\\n        newPrice = 10;\\r\\n    }\\r\\n\\r\\n    if (newPrice <= 0) {\\r\\n        return oldPrice;\\r\\n    }\\r\\n\\r\\n    return newPrice;\\r\\n}\\r\\n\\r\\nfunction adjustPriceDown(oldPrice, marketPrice, fastDrop) {\\r\\n\\r\\n    if (isNaN(oldPrice)) {\\r\\n        const adjuster = Number(oldPrice.split(')')[1]);\\r\\n        oldPrice = adjuster + marketPrice;\\r\\n    }\\r\\n\\r\\n    let newPrice = 0;\\r\\n    if (oldPrice >= 0) {\\r\\n        if (oldPrice > 100) {\\r\\n            newPrice = oldPrice * 0.97;\\r\\n        } else {\\r\\n            newPrice = oldPrice - 5;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (fastDrop){\\r\\n        newPrice = oldPrice * 0.9;\\r\\n    }\\r\\n\\r\\n    if (oldPrice < 0) {\\r\\n        newPrice = 10;\\r\\n    }\\r\\n\\r\\n    if (newPrice <= 0) {\\r\\n        return oldPrice;\\r\\n    }\\r\\n\\r\\n    return newPrice;\\r\\n}\\r\\n\",\"filename\":\"scripts/corporations/adjust-prices-export.js\",\"server\":\"home\"}}],[\"scripts/corporations/go-public.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    if (profit > 200_000_000 && corporation.public === false){\\r\\n        ns.corporation.goPublic(0);\\r\\n    }\\r\\n\\r\\n    if(corporation.public && corporation.dividendRate !== .01){\\r\\n        ns.corporation.issueDividends(.01);\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/go-public.js\",\"server\":\"home\"}}],[\"scripts/corporations/get-investments.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    // ns.tprint(ns.corporation.getInvestmentOffer())\\r\\n\\r\\n    ///{\\\"funds\\\":96283140000,\\\"shares\\\":100000000,\\\"round\\\":1}\\r\\n\\r\\n    // { round: 1, investment: 100_000_000 },\\r\\n    // { round: 2, investment: 300_000_000 }, // worked, but I bet we can do better\\r\\n    // { round: 3, investment: 3_000_000_000 },\\r\\n    \\r\\n    const investmentWeWillTake = [\\r\\n        { round: 1, investment: 95_000_000_000 },   \\r\\n        { round: 2, investment: 1_000_000_000_000 },\\r\\n    ]\\r\\n\\r\\n    const investmentOffer = ns.corporation.getInvestmentOffer();\\r\\n\\r\\n    if (corporation.public === false) {\\r\\n        for (const minimumInvestment of investmentWeWillTake) {\\r\\n            if(investmentOffer.round === minimumInvestment.round && investmentOffer.funds > minimumInvestment.investment) {\\r\\n                ns.corporation.acceptInvestmentOffer();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (profit > 200_000_000 && corporation.public === false) {\\r\\n        ns.corporation.goPublic(0);\\r\\n    }\\r\\n\\r\\n    if (corporation.public && corporation.dividendRate !== .01 && !ns.corporation.hasUnlock(\\\"Government Partnership\\\")) {\\r\\n        ns.corporation.issueDividends(.01);\\r\\n    }\\r\\n\\r\\n    if (corporation.public && corporation.dividendRate !== .5 && ns.corporation.hasUnlock(\\\"Government Partnership\\\")) {\\r\\n        ns.corporation.issueDividends(.5);\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/get-investments.js\",\"server\":\"home\"}}],[\"scripts/corporations/expand.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const divisionsGoal = [\\r\\n        // { order: 0, fundsNeeded: 100_000_000_000, name: \\\"Gidget's Import/Export\\\", industry: \\\"Agriculture\\\", profitNeeded: 0 },\\r\\n        { order: 0, fundsNeeded: 0, name: \\\"Gidget's Farm\\\", industry: \\\"Agriculture\\\", profitNeeded: 0 },\\r\\n        { order: 1, fundsNeeded: 500_000_000_000, name: \\\"Gidget's Smokes\\\",  industry: \\\"Tobacco\\\", profitNeeded: 1_000_000 },\\r\\n        { order: 2, fundsNeeded: 2_000_000_000_000, name: \\\"Chemist Gidget's Lab\\\", industry: \\\"Chemical\\\", profitNeeded: 2_000_000_000 },\\r\\n        { order: 3, fundsNeeded: 3_000_000_000_000, name: \\\"Gidget's Municipal Water\\\", industry: \\\"Water Utilities\\\", profitNeeded: 10_000_000_000 },\\r\\n        { order: 4, fundsNeeded: 100_000_000_000_000, name: \\\"Gidget's Computers & Hardware\\\", industry: \\\"Computer Hardware\\\", profitNeeded: 1_000_000_000_000 },\\r\\n        { order: 5, fundsNeeded: 200_000_000_000_000, name: \\\"Gidget's Metallurgy\\\", industry: \\\"Refinery\\\", profitNeeded: 2_000_000_000_000 }, \\r\\n        { order: 6, fundsNeeded: 300_000_000_000_000, name: \\\"Gidget's Land Destroyer\\\", industry: \\\"Mining\\\", profitNeeded: 3_000_000_000_000 },\\r\\n    ]\\r\\n\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n    for (const divisionGoal of divisionsGoal) {\\r\\n        if (corporation.divisions.length === divisionGoal.order && corporation.funds > divisionGoal.fundsNeeded && !corporation.divisions.includes(divisionGoal.name) && profit >= divisionGoal.profitNeeded) {\\r\\n            ns.corporation.expandIndustry(divisionGoal.industry, divisionGoal.name);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/expand.js\",\"server\":\"home\"}}],[\"scripts/corporations/bribe-factions.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let corporation = ns.corporation.getCorporation();\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    if(profit > 1_000_000_000_000){\\r\\n        const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n        const player = ns.getPlayer();\\r\\n\\r\\n        const mostRepExpensiveForEachFaction = [];\\r\\n\\r\\n        for (const faction of player.factions) {\\r\\n            const maximumAugRep = Math.max(...ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction)\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .filter(x => {\\r\\n                    const prereqs = ns.singularity.getAugmentationPrereq(x);\\r\\n                    return prereqs.every(y => ownedAugmentations.includes(y));\\r\\n                })\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n    \\r\\n            if (maximumAugRep > 0) {\\r\\n                mostRepExpensiveForEachFaction.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(mostRepExpensiveForEachFaction.length > 0){\\r\\n            for (const factionWithRep of mostRepExpensiveForEachFaction) {\\r\\n                \\r\\n                let currentFactionRep = ns.singularity.getFactionRep(factionWithRep.faction);\\r\\n                const repNeeded = factionWithRep.maximumAugRep - currentFactionRep;\\r\\n                \\r\\n                corporation = ns.corporation.getCorporation();\\r\\n                const capitalReserve = 400_000_000_000;\\r\\n                const liquidFunds = corporation.funds;\\r\\n                const investableAmount = liquidFunds - capitalReserve;\\r\\n\\r\\n                const amountToDonate = 1_000_000_000_000;\\r\\n                \\r\\n                let amountSpent = amountToDonate;\\r\\n                while(currentFactionRep < repNeeded && investableAmount > amountSpent){\\r\\n\\r\\n                    ns.corporation.bribe(factionWithRep.faction, amountToDonate)\\r\\n                    \\r\\n                    amountSpent += amountToDonate;\\r\\n                    currentFactionRep = ns.singularity.getFactionRep(factionWithRep.faction);           \\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"scripts/corporations/bribe-factions.js\",\"server\":\"home\"}}],[\"scripts/singularity/do-work-get-augs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const player = ns.getPlayer();\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const organizationsToJoinInTheOrderWeWantToComplete = organizations.toJoinInOrderInWhichIWantToComplete;\\r\\n    const ownedAugmentations = JSON.parse(ns.read(\\\"data/ownedAugs.txt\\\"));\\r\\n\\r\\n    const doNoWorkFor = organizations.doNoWorkFor;\\r\\n    const stopAtAugments = organizations.stopAtAugments;\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavor = [];\\r\\n\\r\\n    for (const faction of organizationsToJoinInTheOrderWeWantToComplete) {\\r\\n        if (player.factions.includes(faction) && !doNoWorkFor.includes(faction)) {\\r\\n\\r\\n            let augmentsForFaction = ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction);\\r\\n\\r\\n            let stopAtAugmentForFaction = stopAtAugments\\r\\n                .find(x => x.faction === faction);\\r\\n\\r\\n            if (stopAtAugmentForFaction) {\\r\\n                if (ownedAugmentations.includes(stopAtAugmentForFaction.augmentToStopAt) && stopAtAugmentForFaction.final) {\\r\\n                    augmentsForFaction = [];\\r\\n                } else if (ownedAugmentations.includes(stopAtAugmentForFaction.augmentToStopAt) && !stopAtAugmentForFaction.final) {\\r\\n                    augmentsForFaction = augmentsForFaction;\\r\\n                } else {\\r\\n                    augmentsForFaction = augmentsForFaction.filter(x => x === stopAtAugmentForFaction.augmentToStopAt);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            const maximumAugRep = Math.max(...augmentsForFaction\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n            const favor = ns.singularity.getFactionFavor(faction);\\r\\n\\r\\n            if (maximumAugRep > 0 && favor < 75) {\\r\\n                factionsWithAugsToBuyAndNotEnoughtFavor.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavorFile = 'data/factionsWithAugsToBuyAndNotEnoughtFavor.txt';\\r\\n    ns.rm(factionsWithAugsToBuyAndNotEnoughtFavorFile);\\r\\n    ns.write(factionsWithAugsToBuyAndNotEnoughtFavorFile, JSON.stringify(factionsWithAugsToBuyAndNotEnoughtFavor), \\\"W\\\");\\r\\n}\",\"filename\":\"scripts/singularity/do-work-get-augs.js\",\"server\":\"home\"}}],[\"scripts/singularity/do-work-get-augments.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n\\r\\n    const ownedAugmentations = JSON.parse(ns.read(\\\"data/ownedAugs.txt\\\"));\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const organizationsToJoinInTheOrderWeWantToComplete = organizations.toJoinInOrderInWhichIWantToComplete;\\r\\n    const doNoWorkFor = organizations.doNoWorkFor;\\r\\n    const stopAtAugments = organizations.stopAtAugments;\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavor = [];\\r\\n\\r\\n    for (const faction of organizationsToJoinInTheOrderWeWantToComplete) {\\r\\n        if (player.factions.includes(faction) && !doNoWorkFor.includes(faction)) {\\r\\n\\r\\n            let augmentsForFaction = ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction);\\r\\n\\r\\n            let stopAtAugmentForFaction = stopAtAugments\\r\\n                .find(x => x.faction === faction);\\r\\n\\r\\n            if (stopAtAugmentForFaction) {\\r\\n                if (ownedAugmentations.includes(stopAtAugmentForFaction.augmentToStopAt) && stopAtAugmentForFaction.final) {\\r\\n                    augmentsForFaction = [];\\r\\n                } else if (ownedAugmentations.includes(stopAtAugmentForFaction.augmentToStopAt) && !stopAtAugmentForFaction.final) {\\r\\n                    augmentsForFaction = augmentsForFaction;\\r\\n                } else {\\r\\n                    augmentsForFaction = augmentsForFaction.filter(x => x === stopAtAugmentForFaction.augmentToStopAt);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            const maximumAugRep = Math.max(...augmentsForFaction\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n            const favor = ns.singularity.getFactionFavor(faction);\\r\\n\\r\\n            if (maximumAugRep > 0 && favor < 75) {\\r\\n                factionsWithAugsToBuyAndNotEnoughtFavor.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavorFile = \\\"data/factionsWithAugsToBuyAndNotEnoughtFavor.txt\\\";\\r\\n    ns.rm(factionsWithAugsToBuyAndNotEnoughtFavorFile);\\r\\n    ns.write(factionsWithAugsToBuyAndNotEnoughtFavorFile, JSON.stringify(factionsWithAugsToBuyAndNotEnoughtFavor), \\\"W\\\");\\r\\n\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/do-work-get-augments.js\",\"server\":\"home\"}}],[\"scripts/singularity/apply-to-jobs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const companiesWeWantToBecomePartOf = organizations.companiesWeWantToBecomePartOf;\\r\\n\\r\\n    for (const companyName of companiesWeWantToBecomePartOf) {\\r\\n        ns.singularity.applyToCompany(companyName, \\\"software\\\");\\r\\n    }\\r\\n}\",\"filename\":\"scripts/singularity/apply-to-jobs.js\",\"server\":\"home\"}}],[\"scripts/stock/second-part-of-quotes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const latestStockQuotesFile = \\\"data/latestQuotes.txt\\\";\\r\\n    const stockRecords = JSON.parse(ns.read(latestStockQuotesFile));\\r\\n\\r\\n    for (const quote of stockRecords) {\\r\\n        quote.price = ns.stock.getPrice(quote.symbol);\\r\\n        quote.maxShares = ns.stock.getMaxShares(quote.symbol);\\r\\n\\r\\n        const position = ns.stock.getPosition(quote.symbol);\\r\\n        quote.investedShares = position[0];\\r\\n        quote.averagePrice = position[1];\\r\\n        quote.sharesShort = position[2];\\r\\n        quote.averageShortPrice = position[3];\\r\\n    }\\r\\n\\r\\n\\r\\n    ns.rm(latestStockQuotesFile);\\r\\n    ns.write(latestStockQuotesFile, JSON.stringify(stockRecords), \\\"W\\\")\\r\\n}\",\"filename\":\"scripts/stock/second-part-of-quotes.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"CLOUD-000\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"analytics/2023-07-07-11-15-Bachman&Associates-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-07-11-15-Bachman&Associates-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-07T15:01:39.037Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-07T15:01:39.037Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Bachman & Associates\\\",\\\"firstTime\\\":\\\"2023-07-07T15:01:39.037Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":333650.9080521832,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-07T15:01:39.037Z\\\"},\\\"moneySpent\\\":{\\\"augments\\\":0,\\\"homeCores\\\":23730468750000,\\\"homeRam\\\":31587660778186.953,\\\"fluxGovernors\\\":0,\\\"augment\\\":null},\\\"lastSaved\\\":\\\"2023-07-07T16:15:57.700Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":375000.40990502154,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-07T16:10:26.619Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$108,452,850,558,874.11\\\",\\\"moneyRightNow\\\":\\\"$103,101,209,025,358.40\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T16:10:26.620Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$108,452,850,558,874.11\\\",\\\"moneyRightNow\\\":\\\"$103,681,640,147,085.58\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T16:10:30.684Z\\\"},\\\"augsBought\\\":[\\\"SmartJaw\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"FocusWire\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"CashRoot Starter Kit\\\",\\\"Nanofiber Weave\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\"]}\"}}],[\"analytics/2023-07-07-14-03-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-07-14-03-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-07T16:19:40.262Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-07T16:19:40.262Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-07T16:19:40.262Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-07T16:19:40.262Z\\\"},\\\"augsBought\\\":[\\\"Neural Accelerator\\\"],\\\"moneySpent\\\":{\\\"augments\\\":0,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0,\\\"augment\\\":null},\\\"lastSaved\\\":\\\"2023-07-07T19:03:34.187Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":207528.18490936968,\\\"targetRepForGettingToFavor\\\":207510.3723,\\\"time\\\":\\\"2023-07-07T19:03:30.139Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$11,781,091,031,741.60\\\",\\\"moneyRightNow\\\":\\\"$1,303,091,345,518.27\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T19:03:30.139Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$11,781,091,031,741.60\\\",\\\"moneyRightNow\\\":\\\"$2,544,403,997,543.49\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T19:03:34.186Z\\\"}}\"}}],[\"analytics/2023-07-08-19-48-Daedalus-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-19-48-Daedalus-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-07T19:06:59.469Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-07T19:06:59.469Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-07T19:06:59.470Z\\\"},{\\\"factionToMax\\\":\\\"Daedalus\\\",\\\"firstTime\\\":\\\"2023-07-07T21:55:21.354Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-07T19:06:59.470Z\\\"},\\\"augsBought\\\":[\\\"PCMatrix\\\",\\\"Synfibril Muscle\\\"],\\\"moneySpent\\\":{\\\"augments\\\":4137500000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0},\\\"lastSaved\\\":\\\"2023-07-08T00:48:28.885Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":32865.1277346334,\\\"targetRepForGettingToFavor\\\":21865.9969,\\\"time\\\":\\\"2023-07-07T19:21:42.026Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$20,200,143,877,934.50\\\",\\\"moneyRightNow\\\":\\\"$3,911,461,428,002.28\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$225,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T20:39:02.138Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$20,200,143,877,934.50\\\",\\\"moneyRightNow\\\":\\\"$4,117,056,489,229.67\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$225,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T20:39:06.169Z\\\"},\\\"moneyLeft\\\":7852910581520.66}\"}}],[\"analytics/2023-07-08-22-54-NWO-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-22-54-NWO-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T01:27:34.503Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T01:27:34.503Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-08T01:27:34.503Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T01:27:34.503Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"BitRunners Neurolink\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Synthetic Heart\\\",\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"DermaForce Particle Barrier\\\",\\\"The Red Pill\\\"],\\\"moneySpent\\\":{\\\"augments\\\":501848779077.36707,\\\"homeCores\\\":0,\\\"homeRam\\\":99817008059070.77,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":75733371162620.36,\\\"lastSaved\\\":\\\"2023-07-08T03:54:59.353Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":462501.05086586776,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T03:54:55.304Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$526,824,656,393,874.44\\\",\\\"moneyRightNow\\\":\\\"$251,999,971,224,510.60\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$18,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T03:54:55.304Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$526,824,656,393,874.44\\\",\\\"moneyRightNow\\\":\\\"$253,602,470,575,079.72\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$18,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T03:54:59.351Z\\\"}}\"}}],[\"analytics/2023-07-08-00-56-OmniTekIncorporated-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-00-56-OmniTekIncorporated-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T04:26:57.384Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T04:26:57.384Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"OmniTek Incorporated\\\",\\\"firstTime\\\":\\\"2023-07-08T04:26:57.384Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":15.124617264295333,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T04:26:57.384Z\\\"},\\\"augsBought\\\":[\\\"Hydroflame Left Arm\\\",\\\"Xanipher\\\",\\\"PC Direct-Neural Interface\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"Combat Rib III\\\",\\\"Augmented Targeting III\\\",\\\"NutriGen Implant\\\"],\\\"moneySpent\\\":{\\\"augments\\\":2534418700549.75,\\\"homeCores\\\":177978515625000,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":280042565488.5333,\\\"lastSaved\\\":\\\"2023-07-08T05:56:46.954Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":462548.0785199993,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T05:56:42.882Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$505,066,407,135,123.06\\\",\\\"moneyRightNow\\\":\\\"$180,386,298,617,236.44\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$375,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T05:56:42.883Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$505,066,407,135,123.06\\\",\\\"moneyRightNow\\\":\\\"$181,269,916,019,448.78\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$375,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T05:56:46.945Z\\\"}}\"}}],[\"analytics/2023-07-08-02-29-BladeIndustries-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-02-29-BladeIndustries-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T06:21:45.808Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T06:21:45.808Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Blade Industries\\\",\\\"firstTime\\\":\\\"2023-07-08T06:21:45.808Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T06:21:45.809Z\\\"},\\\"augsBought\\\":[\\\"OmniTek InfoLoad\\\",\\\"HyperSight Corneal Implant\\\",\\\"INFRARET Enhancement\\\"],\\\"moneySpent\\\":{\\\"augments\\\":8208300000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":70843557655495.1,\\\"lastSaved\\\":\\\"2023-07-08T07:29:39.410Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":462652.03280345845,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T07:29:35.219Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$572,996,898,778,520.20\\\",\\\"moneyRightNow\\\":\\\"$140,624,600,817,489.31\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T07:29:35.219Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$572,996,898,778,520.20\\\",\\\"moneyRightNow\\\":\\\"$143,621,626,658,752.25\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T07:29:39.320Z\\\"}}\"}}],[\"contracts/2023-07-08T15:46:33.989Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-08T15:46:33.989Z.txt\",\"text\":\"[{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-301865-NiteSec.cct\\\",\\\"type\\\":\\\"Spiralize Matrix\\\",\\\"attemptsLeft\\\":9},{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-605082-ECorp.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-715836-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-574766-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-546533.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-207182.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-562846-Chongqing.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-147112-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10}]\"}}],[\"analytics/2023-07-08-10-55-CyberSec-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-10-55-CyberSec-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T07:45:28.397Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T07:45:28.397Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"ECorp\\\",\\\"firstTime\\\":\\\"2023-07-08T07:45:28.397Z\\\"},{\\\"factionToMax\\\":\\\"CyberSec\\\",\\\"firstTime\\\":\\\"2023-07-08T15:55:34.597Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1625000,\\\"currentFactionRep\\\":7.83489646900019,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T07:45:28.397Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Neurotrainer II\\\",\\\"BitWire\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neurotrainer I\\\"],\\\"moneySpent\\\":{\\\"augments\\\":2927417203.1,\\\"homeCores\\\":0,\\\"homeRam\\\":132545749.31540185,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":76065861.37635517,\\\"lastSaved\\\":\\\"2023-07-08T15:55:38.636Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":18750,\\\"currentFactionRep\\\":19144.520172309567,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-08T15:55:34.597Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$3,136,028,813.79\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,250,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T15:55:34.597Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$3,136,028,813.79\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,250,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T15:55:38.627Z\\\"}}\"}}],[\"contracts/failure/unitalife-contract-457057-BachmanAssociates.cct-AlgorithmicStockTraderIV.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/unitalife-contract-457057-BachmanAssociates.cct-AlgorithmicStockTraderIV.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-457057-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[2,[104,1,164,22,87,58,184,182,187,31,33,15,132,75,200,78,154]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [2, [104,67,1,164,22,87,58,118,184,182,187,31,33,15,132,75,200,78,154,61]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},\\\"wrongResult\\\":348}\"}}],[\"contracts/2023-07-08T16:02:50.327Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-08T16:02:50.327Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-287914-ECorp.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,3,2,4,0,0,3,2,4,3,2,1,4,3,3,1,2,1,5,6,2,4,2,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,2,4,0,0,3,2,4,3,2,1,4,3,3,1,2,1,5,6,2,4,2,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"max-hardware\\\",\\\"name\\\":\\\"contract-489132.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"5ddddddddM0C1ag3juL3juL3jQaVwdNEQdNGShqNEQdNGSrBfBf2rBfBr1OvIK6r1OvIa\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 5ddddddddM0C1ag3juL3juL3jQaVwdNEQdNGShqNEQdNGSrBfBf2rBfBr1OvIK6r1OvIa\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-522441-TianDiHui.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,7],\\\"description\\\":\\\"You are in a grid with 8 rows and 7 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 7]\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-895014-CyberSec.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[2,7,-9,5,4,-8,-10,-5,4,-6,-4,0,6,10,-3,6,2,-8,-1,6,-3,-10,-3,8,6,-2,-8,2,3,-4,0,0,9,-9,-8,5,4,4],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 2,7,-9,5,4,-8,-10,-5,4,-6,-4,0,6,10,-3,6,2,-8,-1,6,-3,-10,-3,8,6,-2,-8,2,3,-4,0,0,9,-9,-8,5,4,4\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-875528.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[11,9],\\\"description\\\":\\\"You are in a grid with 11 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [11, 9]\\\"},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-125441.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[147,[1,2,4,5,7,8,10,11,12]],\\\"description\\\":\\\"How many different distinct ways can the number 147 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,7,8,10,11,12]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-338676.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[149,[2,3,4,6,9,11,12,13,14]],\\\"description\\\":\\\"How many different distinct ways can the number 149 be written as a sum of integers contained in the set:\\\\n\\\\n [2,3,4,6,9,11,12,13,14]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-265891-TheBlackHand.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0],[1,0,0,0],[0,0,0,0],[1,0,1,0],[0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,\\\\n1,0,0,0,\\\\n0,0,0,0,\\\\n1,0,1,0,\\\\n0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-457057-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[2,[104,67,1,164,22,87,58,118,184,182,187,31,33,15,132,75,200,78,154,61]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [2, [104,67,1,164,22,87,58,118,184,182,187,31,33,15,132,75,200,78,154,61]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-98816-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[8,[[1,3],[3,5],[6,7],[4,5],[1,7],[4,7],[2,7],[2,5]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [8,[[1,3],[3,5],[6,7],[4,5],[1,7],[4,7],[2,7],[2,5]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 7. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-852569.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0],[1,0,0,0,0,0],[0,1,0,0,0,0],[0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,\\\\n1,0,0,0,0,0,\\\\n0,1,0,0,0,0,\\\\n0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-193066-Chongqing.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[3],[4,8],[1,6,7],[3,8,3,9],[1,3,6,1,2],[4,4,7,8,8,1],[1,4,3,6,1,4,6],[1,9,8,7,9,9,4,3],[3,2,1,2,1,8,4,2,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,8,3,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,3,6,1,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,4,7,8,8,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,4,3,6,1,4,6],\\\\n&nbsp;&nbsp;&nbsp;[1,9,8,7,9,9,4,3],\\\\n&nbsp;&nbsp;[3,2,1,2,1,8,4,2,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-774587-TianDiHui.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[8,0,1,5,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 8,0,1,5,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-321076.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[12,[[7,11],[1,8],[2,9],[2,8],[1,2],[0,4],[0,3],[2,3],[5,8],[3,5],[4,7],[1,6],[9,10],[4,10],[6,8],[3,10],[0,1],[7,8]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [12,[[7,11],[1,8],[2,9],[2,8],[1,2],[0,4],[0,3],[2,3],[5,8],[3,5],[4,7],[1,6],[9,10],[4,10],[6,8],[3,10],[0,1],[7,8]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 11. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-885023.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,1,0,1,0,1,1,1,0],[0,0,1,1,1,1,0,0,1],[0,1,0,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-450371-NWO.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"zzzzzzzzzzVVVVVVVVVff66666dddddd3Dxjjjjjjjjjjjll3nMIEooooooooooIrrQQ3333333333GGGGG220\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; zzzzzzzzzzVVVVVVVVVff66666dddddd3Dxjjjjjjjjjjjll3nMIEooooooooooIrrQQ3333333333GGGGG220\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-409303-CyberSec.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"koU6koU6koU8koU6ko66SU6ko66Sko66SkoSkoSkoSkXSkoSkoSkXSkoSXSkoSXSuKvMuK5CCCCCCZA\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; koU6koU6koU8koU6ko66SU6ko66Sko66SkoSkoSkoSkXSkoSkoSkXSkoSXSkoSXSuKvMuK5CCCCCCZA\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-741436-TianDiHui.cct\\\",\\\"type\\\":\\\"Spiralize Matrix\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[[41,7],[46,49],[18,23],[1,16],[46,1],[49,27]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a 2D matrix, return the elements of the matrix as an array in spiral order:\\\\n\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[41, 7]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[46,49]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[18,23]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 1,16]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[46, 1]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[49,27]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;]\\\\n\\\\nHere is an example of what spiral order should be:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1, 2, 3]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4, 5, 6]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7, 8, 9]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;]\\\\n\\\\n Answer: [1, 2, 3, 6, 9, 8 ,7, 4, 5]\\\\n\\\\n Note that the matrix will not always be square:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,&nbsp;&nbsp;2,&nbsp;&nbsp;3,&nbsp;&nbsp;4]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,&nbsp;&nbsp;6,&nbsp;&nbsp;7,&nbsp;&nbsp;8]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,&nbsp;10,&nbsp;11,&nbsp;12]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;]\\\\n\\\\n Answer: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-481575.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[10,10,2,4,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 10,10,2,4,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-926552.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"ppppppppD6ggxxxxxxxxWk88uVVqdddddddHHH811EEE00WWyy333NvvvvvvvWWWWWWWWWA88iii\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; ppppppppD6ggxxxxxxxxWk88uVVqdddddddHHH811EEE00WWyy333NvvvvvvvWWWWWWWWWA88iii\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-550315.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":59,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 59 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-895133.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,2,3,1,0,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,2,3,1,0,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-858682.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[197,[1,2,4,5,6,10,12,13]],\\\"description\\\":\\\"How many different distinct ways can the number 197 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,6,10,12,13]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-938387.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":8,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 8 be written as a sum of at least two positive integers?\\\"}]\"}}],[\"analytics/2023-07-09-05-42-NiteSec-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-09-05-42-NiteSec-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T16:31:11.237Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T16:31:11.237Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NiteSec\\\",\\\"firstTime\\\":\\\"2023-07-08T16:31:11.237Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-08T16:31:11.237Z\\\"},\\\"augsBought\\\":[\\\"Cranial Signal Processors - Gen III\\\",\\\"DataJack\\\",\\\"Neuregen Gene Modification\\\",\\\"Neural-Retention Enhancement\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Speech Processor Implant\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"Speech Enhancement\\\",\\\"Wired Reflexes\\\"],\\\"moneySpent\\\":{\\\"augments\\\":20381378226.862747,\\\"homeCores\\\":7500000000,\\\"homeRam\\\":14539978074.787807,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":12810898749.805788,\\\"lastSaved\\\":\\\"2023-07-09T10:42:24.377Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":112505.95319020352,\\\"targetRepForGettingToFavor\\\":274320.6381,\\\"time\\\":\\\"2023-07-09T04:32:21.711Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$25,622,206,359.90\\\",\\\"moneyRightNow\\\":\\\"$5,243,979,923.03\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$55,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-09T04:32:21.712Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$37,197,430,004.03\\\",\\\"moneyRightNow\\\":\\\"$55,232,255,051.46\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$55,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-09T10:42:24.369Z\\\"}}\"}}],[\"contracts/failure/blade-contract-989459-Sector12.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/blade-contract-989459-Sector12.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-989459-Sector12.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[179,52,138,20,181,47,87,38,133,124,174,123,169,54,138],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":256}\"}}],[\"contracts/2023-07-09T10:42:27.655Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-09T10:42:27.655Z.txt\",\"text\":\"[{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-306430.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,3,0,2,0,0,4,0,5,0,7,9,4,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,3,0,2,0,0,4,0,5,0,7,9,4,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-93220.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":596871453,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 596871453?\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-688654.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-610288.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 12. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-908915-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,0,1,0,0],[1,0,0,0,1],[0,0,0,1,1],[0,0,1,0,0],[0,1,0,1,0],[0,0,0,1,0],[1,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,1,0,0,\\\\n1,0,0,0,1,\\\\n0,0,0,1,1,\\\\n0,0,1,0,0,\\\\n0,1,0,1,0,\\\\n0,0,0,1,0,\\\\n1,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-225615.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-876968-BitRunners.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"251150140129\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 251150140129\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-793514-NWO.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-308718.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-726515.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-206621.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(((())(aa\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (((())(aa\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-517629.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,1,0,1],[0,0,0,0,1,1,1,1],[1,0,0,0,0,1,1,0],[0,0,0,0,0,0,0,0],[0,1,0,1,1,1,0,0],[0,1,1,0,1,0,0,0],[0,1,0,0,1,0,0,0],[1,0,0,1,0,0,1,0],[1,1,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,0,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-989459-Sector12.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-248819.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[7],[3,4],[1,2,9],[1,8,8,1],[4,7,4,6,4],[9,3,4,6,9,3]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,2,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,8,8,1],\\\\n&nbsp;&nbsp;&nbsp;[4,7,4,6,4],\\\\n&nbsp;&nbsp;[9,3,4,6,9,3]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-759274-BladeIndustries.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[197,[1,3,4,6,7,8,9,10,13,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 197 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,6,7,8,9,10,13,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-755946-Aevum.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-239892.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1110100011010100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1110100011010100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-650735.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-923111.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,0,1,1,1,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,0,1,0,0,\\\\n0,0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,1,0,1,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,\\\\n0,0,1,1,1,0,0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-140416.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-149794.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[17,[4,5,6,7,8,10,11,12,13,14]],\\\"description\\\":\\\"How many different distinct ways can the number 17 be written as a sum of integers contained in the set:\\\\n\\\\n [4,5,6,7,8,10,11,12,13,14]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-95536.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":21,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 21 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-389211.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-80334.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-204128.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[3,3,10,0,0,0,4,0,6,0,4,10],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,10,0,0,0,4,0,6,0,4,10\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-90930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[7,11],\\\"description\\\":\\\"You are in a grid with 7 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [7, 11]\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-693793.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-188719-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[84,[2,5,6,7,8,9,10,12,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 84 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,7,8,9,10,12,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-889582.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":42771,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 42771 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-18930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[5,14],\\\"description\\\":\\\"You are in a grid with 5 rows and 14 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [5, 14]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-53463.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"12010722233\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 12010722233\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"}]\"}}],[\"contracts/2023-07-10T11:30:35.720Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T11:30:35.720Z.txt\",\"text\":\"[{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-306430.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,3,0,2,0,0,4,0,5,0,7,9,4,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,3,0,2,0,0,4,0,5,0,7,9,4,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-93220.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":596871453,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 596871453?\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-688654.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-610288.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 12. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-908915-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,0,1,0,0],[1,0,0,0,1],[0,0,0,1,1],[0,0,1,0,0],[0,1,0,1,0],[0,0,0,1,0],[1,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,1,0,0,\\\\n1,0,0,0,1,\\\\n0,0,0,1,1,\\\\n0,0,1,0,0,\\\\n0,1,0,1,0,\\\\n0,0,0,1,0,\\\\n1,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-225615.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-876968-BitRunners.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"251150140129\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 251150140129\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-793514-NWO.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-308718.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-726515.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-206621.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(((())(aa\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (((())(aa\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-517629.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,1,0,1],[0,0,0,0,1,1,1,1],[1,0,0,0,0,1,1,0],[0,0,0,0,0,0,0,0],[0,1,0,1,1,1,0,0],[0,1,1,0,1,0,0,0],[0,1,0,0,1,0,0,0],[1,0,0,1,0,0,1,0],[1,1,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,0,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-989459-Sector12.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-248819.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[7],[3,4],[1,2,9],[1,8,8,1],[4,7,4,6,4],[9,3,4,6,9,3]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,2,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,8,8,1],\\\\n&nbsp;&nbsp;&nbsp;[4,7,4,6,4],\\\\n&nbsp;&nbsp;[9,3,4,6,9,3]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-759274-BladeIndustries.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[197,[1,3,4,6,7,8,9,10,13,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 197 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,6,7,8,9,10,13,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-755946-Aevum.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-239892.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1110100011010100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1110100011010100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-650735.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-923111.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,0,1,1,1,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,0,1,0,0,\\\\n0,0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,1,0,1,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,\\\\n0,0,1,1,1,0,0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-140416.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-149794.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[17,[4,5,6,7,8,10,11,12,13,14]],\\\"description\\\":\\\"How many different distinct ways can the number 17 be written as a sum of integers contained in the set:\\\\n\\\\n [4,5,6,7,8,10,11,12,13,14]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-95536.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":21,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 21 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-389211.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-80334.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-204128.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[3,3,10,0,0,0,4,0,6,0,4,10],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,10,0,0,0,4,0,6,0,4,10\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-90930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[7,11],\\\"description\\\":\\\"You are in a grid with 7 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [7, 11]\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-693793.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-188719-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[84,[2,5,6,7,8,9,10,12,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 84 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,7,8,9,10,12,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-889582.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":42771,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 42771 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-18930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[5,14],\\\"description\\\":\\\"You are in a grid with 5 rows and 14 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [5, 14]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-53463.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"12010722233\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 12010722233\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"}]\"}}],[\"contracts/2023-07-10T11:32:16.363Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T11:32:16.363Z.txt\",\"text\":\"[{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-977017-BitRunners.cct\\\",\\\"type\\\":\\\"Encryption II: Vigenère Cipher\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"FLASHMEDIAMOUSELOGINDEBUG\\\",\\\"MACINTOSH\\\"],\\\"description\\\":\\\"Vigenère cipher is a type of polyalphabetic substitution. It uses  the Vigenère square to encrypt and decrypt plaintext with a keyword.\\\\n\\\\n &nbsp;&nbsp;Vigenère square:\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----------------------------------------------------\\\\n &nbsp;&nbsp;&nbsp;&nbsp; A | A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \\\\n &nbsp;&nbsp;&nbsp;&nbsp; B | B C D E F G H I J K L M N O P Q R S T U V W X Y Z A \\\\n &nbsp;&nbsp;&nbsp;&nbsp; C | C D E F G H I J K L M N O P Q R S T U V W X Y Z A B\\\\n &nbsp;&nbsp;&nbsp;&nbsp; D | D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\\\\n &nbsp;&nbsp;&nbsp;&nbsp; E | E F G H I J K L M N O P Q R S T U V W X Y Z A B C D\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...\\\\n &nbsp;&nbsp;&nbsp;&nbsp; Y | Y Z A B C D E F G H I J K L M N O P Q R S T U V W X\\\\n &nbsp;&nbsp;&nbsp;&nbsp; Z | Z A B C D E F G H I J K L M N O P Q R S T U V W X Y\\\\n\\\\n For encryption each letter of the plaintext is paired with the corresponding letter of a repeating keyword. For example, the plaintext DASHBOARD is encrypted with the keyword LINUX:\\\\n &nbsp;&nbsp; Plaintext: DASHBOARD\\\\n &nbsp;&nbsp; Keyword:&nbsp;&nbsp;&nbsp;LINUXLINU\\\\n So, the first letter D is paired with the first letter of the key L. Therefore, row D and column L of the  Vigenère square are used to get the first cipher letter O. This must be repeated for the whole ciphertext.\\\\n\\\\n You are given an array with two elements:\\\\n &nbsp;&nbsp;[\\\\\\\"FLASHMEDIAMOUSELOGINDEBUG\\\\\\\", \\\\\\\"MACINTOSH\\\\\\\"]\\\\n The first element is the plaintext, the second element is the keyword.\\\\n\\\\n Return the ciphertext as uppercase string.\\\"}]\"}}],[\"contracts/2023-07-10T12:00:27.917Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T12:00:27.917Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-872924-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11000000100000010111100101110010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11000000100000010111100101110010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-358562-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[124,[2,5,6,9,10,11,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 124 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-373303.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,1],[6,1,7],[2,7,1,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[3,1],\\\\n&nbsp;&nbsp;&nbsp;[6,1,7],\\\\n&nbsp;&nbsp;[2,7,1,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-959133.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0],[0,0,1,0,0,1,0,0],[0,0,0,0,1,1,1,0],[0,0,1,0,1,0,1,0],[1,0,0,1,0,0,0,0],[0,0,0,1,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,1],[1,0,1,0,0,0,0,0],[1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-769367.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,8],\\\"description\\\":\\\"You are in a grid with 9 rows and 8 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [9, 8]\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-633776.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":915078480,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 915078480?\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-310837.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-806259.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010100000000000100000100000111101001011001001110100101110000010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010100000000000100000100000111101001011001001110100101110000010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-545916-BitRunners.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,1,1,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-691109-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"}]\"}}],[\"contracts/failure/fulcrumtech-contract-772507-NiteSec.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/fulcrumtech-contract-772507-NiteSec.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-772507-NiteSec.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[129,63,116,46,105,9,146,49,190,102,143,96,122,89,173,62,178],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 129,121,121,63,116,108,46,105,9,146,49,190,102,115,143,116,96,122,95,89,173,62,178\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":278}\"}}],[\"contracts/2023-07-10T22:53:06.799Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T22:53:06.799Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-872924-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11000000100000010111100101110010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11000000100000010111100101110010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-310546-NiteSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0110000000010000\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0110000000010000' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-358562-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[124,[2,5,6,9,10,11,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 124 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-373303.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,1],[6,1,7],[2,7,1,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[3,1],\\\\n&nbsp;&nbsp;&nbsp;[6,1,7],\\\\n&nbsp;&nbsp;[2,7,1,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-959133.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0],[0,0,1,0,0,1,0,0],[0,0,0,0,1,1,1,0],[0,0,1,0,1,0,1,0],[1,0,0,1,0,0,0,0],[0,0,0,1,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,1],[1,0,1,0,0,0,0,0],[1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-373990-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100000000000000100000000000000000111011110101110011000111010001\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100000000000000100000000000000000111011110101110011000111010001' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-772507-NiteSec.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[129,121,121,63,116,108,46,105,9,146,49,190,102,115,143,116,96,122,95,89,173,62,178],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 129,121,121,63,116,108,46,105,9,146,49,190,102,115,143,116,96,122,95,89,173,62,178\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-769367.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,8],\\\"description\\\":\\\"You are in a grid with 9 rows and 8 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [9, 8]\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-633776.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":915078480,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 915078480?\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-310837.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-719753-Sector12.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"2515122107\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 2515122107\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-806259.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010100000000000100000100000111101001011001001110100101110000010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010100000000000100000100000111101001011001001110100101110000010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-387600-BladeIndustries.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[51,[1,3,4,5,6,7,8,9]],\\\"description\\\":\\\"How many different distinct ways can the number 51 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,5,6,7,8,9]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-545916-BitRunners.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,1,1,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-691109-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"}]\"}}],[\"analytics/2023-07-11-02-27-Bachman&Associates-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-02-27-Bachman&Associates-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-09T10:51:29.538Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-09T10:51:29.538Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"The Black Hand\\\",\\\"firstTime\\\":\\\"2023-07-09T10:51:29.539Z\\\"},{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-10T11:30:36.002Z\\\"},{\\\"factionToMax\\\":\\\"Bachman & Associates\\\",\\\"firstTime\\\":\\\"2023-07-10T20:03:02.082Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":175000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-09T10:51:29.539Z\\\"},\\\"augsBought\\\":[\\\"SmartJaw\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"FocusWire\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"Neuroreceptor Management Implant\\\",\\\"Nanofiber Weave\\\"],\\\"moneySpent\\\":{\\\"augments\\\":22646728750,\\\"homeCores\\\":23730468750000,\\\"homeRam\\\":31587660778186.953,\\\"fluxGovernors\\\":57032927790864.44},\\\"moneyLeft\\\":12203039917625.707,\\\"lastSaved\\\":\\\"2023-07-11T07:27:30.663Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":175000,\\\"currentFactionRep\\\":162129.75593228705,\\\"targetRepForGettingToFavor\\\":162120.6286,\\\"time\\\":\\\"2023-07-09T18:56:46.726Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$56,926,395,005.04\\\",\\\"moneyRightNow\\\":\\\"$6,976,811,949.53\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-09T18:56:46.726Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$286,650,154,139.07\\\",\\\"moneyRightNow\\\":\\\"$300,169,387,386.01\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-10T08:59:23.830Z\\\"},\\\"amountOfRamIncrease\\\":null,\\\"amountOfCoresIncrease\\\":null}\"}}],[\"contracts/2023-07-11T07:27:33.925Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T07:27:33.925Z.txt\",\"text\":\"[{\\\"server\\\":\\\"crush-fitness\\\",\\\"name\\\":\\\"contract-703070-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a))()aa)))())))a))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a))()aa)))())))a))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-760582-NWO.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[19,26],[5,11],[23,33],[18,24],[16,24],[4,6],[19,23],[19,20],[15,22],[17,24],[23,26],[18,28],[11,14],[3,5],[14,17],[23,24]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[19,26],[5,11],[23,33],[18,24],[16,24],[4,6],[19,23],[19,20],[15,22],[17,24],[23,26],[18,28],[11,14],[3,5],[14,17],[23,24]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-660870-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,-5,1,9,9,0,5,-3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,-5,1,9,9,0,5,-3\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-657153-CyberSec.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")())()()(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )())()()(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"}]\"}}],[\"analytics/2023-07-11-07-24-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-07-24-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T10:42:16.637Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T10:42:16.638Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-11T10:42:16.638Z\\\"},{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-11T10:46:46.120Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-11T10:42:16.638Z\\\"},\\\"augsBought\\\":[\\\"Neural Accelerator\\\"],\\\"moneySpent\\\":{\\\"augments\\\":1750000000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":4554283656849.052,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":1755961103764.4956,\\\"lastSaved\\\":\\\"2023-07-11T12:24:47.532Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1000000,\\\"currentFactionRep\\\":78668.58510156769,\\\"targetRepForGettingToFavor\\\":78604.3905,\\\"time\\\":\\\"2023-07-11T11:26:08.909Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$74,796,262,687,719.81\\\",\\\"moneyRightNow\\\":\\\"$5,775,539,522,926.99\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T12:24:43.465Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$74,796,262,687,719.81\\\",\\\"moneyRightNow\\\":\\\"$6,311,994,760,613.55\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T12:24:47.531Z\\\"}}\"}}],[\"contracts/2023-07-11T12:24:50.788Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T12:24:50.788Z.txt\",\"text\":\"[{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-294274.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"27278324\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 27278324\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-34323.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,1,0,6,4,3,2,1,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,1,0,6,4,3,2,1,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-156862.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[3,3,8,10,9,5,2,0,9,0,5,10,10,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,8,10,9,5,2,0,9,0,5,10,10,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-330757.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010100001111101\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010100001111101' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"}]\"}}],[\"analytics/2023-07-11-12-29-Daedalus-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-12-29-Daedalus-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T12:24:51.094Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T12:24:51.094Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-11T12:24:51.094Z\\\"},{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-11T12:29:47.178Z\\\"},{\\\"factionToMax\\\":\\\"Daedalus\\\",\\\"firstTime\\\":\\\"2023-07-11T15:04:35.038Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T12:24:51.094Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"BitRunners Neurolink\\\",\\\"Synfibril Muscle\\\",\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"DermaForce Particle Barrier\\\"],\\\"moneySpent\\\":{\\\"augments\\\":27917957472.5,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":91422048319347.48,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":41005533440689.86,\\\"lastSaved\\\":\\\"2023-07-11T17:29:31.733Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1000000,\\\"currentFactionRep\\\":45618.14880600499,\\\"targetRepForGettingToFavor\\\":13348.8089,\\\"time\\\":\\\"2023-07-11T12:48:04.959Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$12,712,609,677,232.98\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T14:27:37.793Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$13,879,516,076,246.31\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T14:27:41.820Z\\\"}}\"}}],[\"contracts/2023-07-11T17:29:34.923Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T17:29:34.923Z.txt\",\"text\":\"[{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-978804-BladeIndustries.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":36677,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 36677 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"analytics/2023-07-11-13-33-NWO-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-13-33-NWO-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T17:29:35.209Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T17:29:35.209Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-11T17:29:35.209Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T17:29:35.209Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Synthetic Heart\\\",\\\"NutriGen Implant\\\",\\\"The Red Pill\\\"],\\\"moneySpent\\\":{\\\"augments\\\":102280939975,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":33234729138126.324,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":27397945380899.656,\\\"lastSaved\\\":\\\"2023-07-11T18:33:24.220Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":188501.26059445622,\\\"targetRepForGettingToFavor\\\":125.34820000000002,\\\"time\\\":\\\"2023-07-11T17:53:45.496Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$438,057,836,945,340.10\\\",\\\"moneyRightNow\\\":\\\"$58,736,735,518,839.44\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$102,280,939,975.00\\\",\\\"time\\\":\\\"2023-07-11T18:33:20.148Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$438,057,836,945,340.10\\\",\\\"moneyRightNow\\\":\\\"$60,734,955,459,000.98\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$102,280,939,975.00\\\",\\\"time\\\":\\\"2023-07-11T18:33:24.219Z\\\"}}\"}}],[\"analytics/2023-07-11-15-02-OmniTekIncorporated-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-15-02-OmniTekIncorporated-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T18:52:58.390Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T18:52:58.390Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"OmniTek Incorporated\\\",\\\"firstTime\\\":\\\"2023-07-11T18:52:58.390Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T18:52:58.391Z\\\"},\\\"augsBought\\\":[\\\"Hydroflame Left Arm\\\",\\\"Xanipher\\\",\\\"PC Direct-Neural Interface\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"Combat Rib III\\\",\\\"Augmented Targeting III\\\",\\\"INFRARET Enhancement\\\"],\\\"moneySpent\\\":{\\\"augments\\\":2536876847832,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":158008228467501.8,\\\"repPurchased\\\":1011071000000},\\\"moneyLeft\\\":3118364148690.9688,\\\"lastSaved\\\":\\\"2023-07-11T20:02:57.795Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":462635.4572515714,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-11T20:02:53.557Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$569,163,675,385,318.20\\\",\\\"moneyRightNow\\\":\\\"$163,160,637,846,968.20\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$2,536,876,847,832.00\\\",\\\"time\\\":\\\"2023-07-11T20:02:53.557Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$569,163,675,385,318.20\\\",\\\"moneyRightNow\\\":\\\"$164,674,540,464,024.78\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$2,536,876,847,832.00\\\",\\\"time\\\":\\\"2023-07-11T20:02:57.609Z\\\"}}\"}}],[\"contracts/2023-07-11T18:33:27.509Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T18:33:27.509Z.txt\",\"text\":\"[{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-315110.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"640193486\\\",65],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 640193486\\\\n\\\\n You are also given a target number of 65. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"640193486\\\\\\\", 65]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"}]\"}}],[\"analytics/2023-07-11-16-04-BladeIndustries-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-16-04-BladeIndustries-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T20:16:37.898Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T20:16:37.898Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Blade Industries\\\",\\\"firstTime\\\":\\\"2023-07-11T20:16:37.898Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T20:16:37.899Z\\\"},\\\"augsBought\\\":[\\\"OmniTek InfoLoad\\\",\\\"HyperSight Corneal Implant\\\"],\\\"moneySpent\\\":{\\\"augments\\\":8100000000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":85747668719937.4,\\\"repPurchased\\\":4751786000000},\\\"moneyLeft\\\":13842981133569.93,\\\"lastSaved\\\":\\\"2023-07-11T21:04:19.385Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":462578.8960435048,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-11T21:04:14.492Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$530,007,418,535,109.50\\\",\\\"moneyRightNow\\\":\\\"$102,174,957,837,653.20\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$8,100,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T21:04:14.492Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$530,007,418,535,109.50\\\",\\\"moneyRightNow\\\":\\\"$104,350,535,853,507.34\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$8,100,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T21:04:18.527Z\\\"}}\"}}],[\"contracts/2023-07-11T21:04:22.607Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T21:04:22.607Z.txt\",\"text\":\"[{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-461331.cct\\\",\\\"type\\\":\\\"Compression II: LZ Decompression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"5QFg8D941R640269V6p8o0r4N989p8ok5ZyGC04NHYU621B92079\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following LZ-encoded string:\\\\n &nbsp; &nbsp; 5QFg8D941R640269V6p8o0r4N989p8ok5ZyGC04NHYU621B92079\\\\n Decode it and output the original string.\\\\n\\\\n Example: decoding '5aaabb450723abb' chunk-by-chunk\\\\n &nbsp; &nbsp; 5aaabb &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;aaabb\\\\n &nbsp; &nbsp; 5aaabb45 &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;aaabbaaab\\\\n &nbsp; &nbsp; 5aaabb450 &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;aaabbaaab\\\\n &nbsp; &nbsp; 5aaabb45072 &nbsp; &nbsp; &nbsp;-> &nbsp;aaabbaaababababa\\\\n &nbsp; &nbsp; 5aaabb450723abb &nbsp;-> &nbsp;aaabbaaababababaabb\\\"}]\"}}],[\"contracts/2023-07-11T22:03:07.982Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T22:03:07.982Z.txt\",\"text\":\"[{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-708430-Sector12.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-444562.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,1,0],[0,1,1,0,0,0,0,1,0,1,0,1],[0,0,1,1,0,0,0,1,0,1,0,0],[0,0,1,0,1,0,0,0,0,1,0,0],[0,0,0,0,0,1,1,1,0,0,1,1],[0,0,1,1,1,1,1,1,0,0,0,0],[0,1,0,0,1,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0,0,1,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1,1,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,1,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"}]\"}}],[\"contracts/2023-07-12T00:04:23.916Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-12T00:04:23.916Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-729164-TianDiHui.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[2],[7,6],[8,8,1],[2,7,3,5],[6,7,2,3,2],[1,5,3,1,3,1],[7,3,6,1,2,5,5],[2,4,9,7,5,9,9,9],[6,4,4,5,1,7,5,7,3],[6,4,8,1,7,8,7,6,7,5],[2,8,2,9,2,4,6,1,4,7,5]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,8,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,3,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,7,2,3,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,5,3,1,3,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,3,6,1,2,5,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,4,9,7,5,9,9,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[6,4,4,5,1,7,5,7,3],\\\\n&nbsp;&nbsp;&nbsp;[6,4,8,1,7,8,7,6,7,5],\\\\n&nbsp;&nbsp;[2,8,2,9,2,4,6,1,4,7,5]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-336770-NWO.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[3],[6,7],[8,1,4],[6,9,3,1],[8,4,5,6,3]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[8,1,4],\\\\n&nbsp;&nbsp;&nbsp;[6,9,3,1],\\\\n&nbsp;&nbsp;[8,4,5,6,3]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-723216-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,5,1,4,7,8,3,0,9,0,3,9,1,10,0,1,5,0,0,0,8,6,10,3,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,5,1,4,7,8,3,0,9,0,3,9,1,10,0,1,5,0,0,0,8,6,10,3,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-176172-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"88599944\\\",-84],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 88599944\\\\n\\\\n You are also given a target number of -84. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"88599944\\\\\\\", -84]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"the-hub\\\",\\\"name\\\":\\\"contract-271928.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"884220150\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 884220150\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"the-hub\\\",\\\"name\\\":\\\"contract-512438-Sector12.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1100101010011111\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1100101010011111' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-627073-TheBlackHand.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"280206263\\\",22],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 280206263\\\\n\\\\n You are also given a target number of 22. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"280206263\\\\\\\", 22]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-804374.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[1,10,3,0,1,6,0,10,0,10,9,1,6,3,1,0,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,10,3,0,1,6,0,10,0,10,9,1,6,3,1,0,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-713319-ECorp.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0],[0,1],[1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,\\\\n0,1,\\\\n1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"omnia\\\",\\\"name\\\":\\\"contract-939274.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":75,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 75 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"omnia\\\",\\\"name\\\":\\\"contract-95916.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[6,0,9,7,8,8,4,3,4,7,0,6,10,3,6,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 6,0,9,7,8,8,4,3,4,7,0,6,10,3,6,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-512616.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((a(a))()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((a(a))()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-142431-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,10],[11,16],[21,23],[24,29]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,10],[11,16],[21,23],[24,29]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-8446-NiteSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100000010000100111011101110101110011110111001110111000110011101\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100000010000100111011101110101110011110111001110111000110011101' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"global-pharm\\\",\\\"name\\\":\\\"contract-202045.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[2,5],[6,13],[15,22],[7,9],[15,16],[25,29]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[2,5],[6,13],[15,22],[7,9],[15,16],[25,29]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-778253.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,3,0,3,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,0,3,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-708430-Sector12.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-868385-ECorp.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"4811648251\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 4811648251\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-941799-NiteSec.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,6,1,9,5,2,10,5,6,3,7,2,3,7,7,3,1,6,1,5,9,0,4,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,6,1,9,5,2,10,5,6,3,7,2,3,7,7,3,1,6,1,5,9,0,4,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-670821.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[9,8],[5,3,1],[6,3,2,3],[8,3,8,4,7],[6,8,6,3,5,9],[1,6,2,8,3,1,3],[1,5,8,2,6,5,8,4],[6,1,4,2,4,7,1,6,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,3,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,3,2,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,3,8,4,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,8,6,3,5,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,6,2,8,3,1,3],\\\\n&nbsp;&nbsp;&nbsp;[1,5,8,2,6,5,8,4],\\\\n&nbsp;&nbsp;[6,1,4,2,4,7,1,6,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-348053-NWO.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,1,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,0,1,0,\\\\n0,0,0,0,1,0,0,\\\\n0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-585222-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1100101000010101\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1100101000010101' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-101786-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1110000010001011011111101001000001101110001101010000110101011100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1110000010001011011111101001000001101110001101010000110101011100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-111223.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[0,2,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,2,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-288053-BladeIndustries.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,2,1,2,3,0,5,4,1,1,2,3,1,0,0,1,4,3,3,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,2,1,2,3,0,5,4,1,1,2,3,1,0,0,1,4,3,3,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-367042.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"()(a))(a)aaa)((a(((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ()(a))(a)aaa)((a(((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-867548-ECorp.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[12,[[6,10],[0,6],[8,11],[6,8],[0,2],[4,11],[0,1],[1,5],[7,11],[0,9],[8,9],[2,7],[6,7],[4,9],[3,9]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [12,[[6,10],[0,6],[8,11],[6,8],[0,2],[4,11],[0,1],[1,5],[7,11],[0,9],[8,9],[2,7],[6,7],[4,9],[3,9]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 11. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-275073.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":155085324086,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 155085324086 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-444562.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,1,0],[0,1,1,0,0,0,0,1,0,1,0,1],[0,0,1,1,0,0,0,1,0,1,0,0],[0,0,1,0,1,0,0,0,0,1,0,0],[0,0,0,0,0,1,1,1,0,0,1,1],[0,0,1,1,1,1,1,1,0,0,0,0],[0,1,0,0,1,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0,0,1,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1,1,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,1,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"}]\"}}],[\"contracts/2023-07-12T21:20:44.230Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-12T21:20:44.230Z.txt\",\"text\":\"[{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-750531.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"3358\\\",53],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 3358\\\\n\\\\n You are also given a target number of 53. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"3358\\\\\\\", 53]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-461484.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,0],[0,0,0,0,1,0,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,0],[0,0,0,0,1,0,1],[0,1,1,0,0,0,0],[0,0,1,0,0,0,0],[1,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-523040.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-2,-9,-2,-9,4,2,10,-5,-2,3,7,2,0,6,5,-7,8,-1,-8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -2,-9,-2,-9,4,2,10,-5,-2,3,7,2,0,6,5,-7,8,-1,-8\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-741432.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[111,[1,2,3,4,6,7,8,11,12,15]],\\\"description\\\":\\\"How many different distinct ways can the number 111 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,3,4,6,7,8,11,12,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-149047-NiteSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"01101011010010011111101000011100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '01101011010010011111101000011100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-55508.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":194455156,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 194455156?\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-713464-BladeIndustries.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,-6,9,7,-4,8,0,-10,-10,-1,5,1,4,-1,9,1,6,-4,-4,6,8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,-6,9,7,-4,8,0,-10,-10,-1,5,1,4,-1,9,1,6,-4,-4,6,8\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-9550.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[2],[4,4],[9,6,8],[6,1,4,4],[3,3,1,5,5],[9,5,1,2,3,2],[4,4,4,3,1,2,1],[2,6,2,2,1,4,3,9],[8,7,3,3,6,7,5,7,4],[5,1,4,5,2,1,5,4,3,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,6,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,1,4,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,3,1,5,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,5,1,2,3,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,4,4,3,1,2,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[2,6,2,2,1,4,3,9],\\\\n&nbsp;&nbsp;&nbsp;[8,7,3,3,6,7,5,7,4],\\\\n&nbsp;&nbsp;[5,1,4,5,2,1,5,4,3,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-367378.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[7,[[1,3],[5,6],[2,4],[4,5],[2,3],[0,6]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [7,[[1,3],[5,6],[2,4],[4,5],[2,3],[0,6]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 6. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"}]\"}}],[\"contracts/2023-07-13T01:43:07.575Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-13T01:43:07.575Z.txt\",\"text\":\"[{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-313731.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[13,15],[2,12],[5,9],[5,14],[3,12],[5,8],[10,15],[11,15],[23,27],[16,25],[10,18],[9,11],[19,21],[13,15],[11,20],[21,23],[15,20]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[13,15],[2,12],[5,9],[5,14],[3,12],[5,8],[10,15],[11,15],[23,27],[16,25],[10,18],[9,11],[19,21],[13,15],[11,20],[21,23],[15,20]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-579159-NWO.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a()a))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a()a))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-922188.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"10170141214\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 10170141214\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-202147-Aevum.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"91119053\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 91119053\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-33073.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":97,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 97 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-158550.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"724124252400\\\",-100],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 724124252400\\\\n\\\\n You are also given a target number of -100. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"724124252400\\\\\\\", -100]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-409368-ECorp.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0000000010011001\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0000000010011001' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-613982-Aevum.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,1,1],[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,0,0,0],[0,0,0,1,0,0,0,0,0,0],[1,1,0,0,0,0,1,0,1,0],[0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,\\\\n0,1,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,1,0,0,1,1,\\\\n0,0,0,0,0,0,0,0,0,1,\\\\n0,0,0,0,0,0,0,0,0,1,\\\\n0,0,0,0,0,0,1,0,0,0,\\\\n0,0,0,1,0,0,0,0,0,0,\\\\n1,1,0,0,0,0,1,0,1,0,\\\\n0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-193179.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"yYDDDDDDDDDDDDDDGGrrrrQQQQQQQQQQQQQqqGGHHpHHppkWWoooooooooooooaaaggggggFF\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; yYDDDDDDDDDDDDDDGGrrrrQQQQQQQQQQQQQqqGGHHpHHppkWWoooooooooooooaaaggggggFF\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-454624.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":81239038,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 81239038?\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-670555.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":486152158932188,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 486152158932188 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-915610-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[9],[3,7],[1,3,1],[1,2,5,6],[6,9,9,4,8],[7,4,1,8,6,5],[6,8,5,2,5,5,3],[6,6,2,6,3,9,4,9],[6,3,4,8,5,5,4,6,7],[6,3,5,1,4,9,1,4,6,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,3,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,2,5,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,9,9,4,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,4,1,8,6,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,8,5,2,5,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[6,6,2,6,3,9,4,9],\\\\n&nbsp;&nbsp;&nbsp;[6,3,4,8,5,5,4,6,7],\\\\n&nbsp;&nbsp;[6,3,5,1,4,9,1,4,6,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"}]\"}}],[\"contracts/2023-07-13T11:39:25.939Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-13T11:39:25.939Z.txt\",\"text\":\"[]\"}}],[\"contracts/2023-07-13T12:06:58.738Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-13T12:06:58.738Z.txt\",\"text\":\"[{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-782097.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[7,[[0,5],[3,4],[2,4],[1,6],[3,5],[4,6],[1,4],[0,1]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [7,[[0,5],[3,4],[2,4],[1,6],[3,5],[4,6],[1,4],[0,1]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 6. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-773336.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,1,1,0],[0,0,0,0,1,0,1,1],[1,0,0,0,1,0,0,0],[0,0,0,1,0,0,1,0],[0,0,0,0,0,1,0,1],[0,0,0,0,0,1,1,0],[0,1,1,0,0,0,0,1],[0,0,0,0,0,1,0,0],[1,0,0,0,0,0,0,0],[1,0,1,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-432225-CyberSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":23,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 23 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-410663.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[3],[1,9],[5,4,4],[9,7,8,5],[2,2,3,8,2],[9,8,4,6,5,8],[8,1,1,7,6,5,3],[1,5,1,2,7,7,8,4],[6,2,3,2,9,9,1,5,3],[9,6,3,3,4,2,7,9,7,6],[4,2,2,3,1,5,9,6,3,4,5],[6,3,8,1,9,7,7,9,1,6,8,5]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,7,8,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,2,3,8,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,8,4,6,5,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,1,1,7,6,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,5,1,2,7,7,8,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,2,3,2,9,9,1,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[9,6,3,3,4,2,7,9,7,6],\\\\n&nbsp;&nbsp;&nbsp;[4,2,2,3,1,5,9,6,3,4,5],\\\\n&nbsp;&nbsp;[6,3,8,1,9,7,7,9,1,6,8,5]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"netlink\\\",\\\"name\\\":\\\"contract-795996-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":73,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 73 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-391770-TheBlackHand.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,0,1,0],[0,0,1,0,1,0,1,0,0],[0,0,0,1,0,0,1,0,0],[0,0,0,1,1,1,0,1,1],[0,0,1,0,1,1,0,1,0],[0,1,1,0,1,0,0,0,0],[1,1,0,1,0,1,1,0,1],[0,1,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,1,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,0,1,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-440346.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[15,22],[5,12],[13,21]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[15,22],[5,12],[13,21]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"nwo\\\",\\\"name\\\":\\\"contract-593748-NiteSec.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"666RB6666R1lbVoooooooooFiqXWXi68O5iANQyv4BRCCD4vXClee3MRmMoe3MRmRmR\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 666RB6666R1lbVoooooooooFiqXWXi68O5iANQyv4BRCCD4vXClee3MRmMoe3MRmRmR\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-178512-ECorp.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[0,1,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,0,1,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,1,0,\\\\n0,1,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-195663.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[1,0,0,4,2,7,6,3,5,5,10,10,3,0,9,7,10,2,0,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,0,0,4,2,7,6,3,5,5,10,10,3,0,9,7,10,2,0,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-233152.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[13,3],\\\"description\\\":\\\"You are in a grid with 13 rows and 3 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [13, 3]\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-510847-BladeIndustries.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"()((a((a(a)())(a()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ()((a((a(a)())(a()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-632773.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[23,29],[14,20],[24,30],[4,11],[4,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[23,29],[14,20],[24,30],[4,11],[4,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"}]\"}}],[\"contracts/2023-07-13T23:55:09.875Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-13T23:55:09.875Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-968783-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[72,[2,7,9,10,11,12,13,14,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 72 be written as a sum of integers contained in the set:\\\\n\\\\n [2,7,9,10,11,12,13,14,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-401139.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"MNFQerwPERzhONkIylMk83cIylMk83caaaauGSlk8QkMi6FmnFdgji6Fm73\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; MNFQerwPERzhONkIylMk83cIylMk83caaaauGSlk8QkMi6FmnFdgji6Fm73\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-151497-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11000000000000001010100100001111\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11000000000000001010100100001111' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-21990.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":41,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 41 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-377673.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[8,1,6,3,6,0,0,10,8,0,2,6,1,1,2,4,0,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 8,1,6,3,6,0,0,10,8,0,2,6,1,1,2,4,0,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-242228-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":33283024047570444,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 33283024047570444 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"contracts/2023-07-14T11:18:31.118Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-14T11:18:31.118Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-968783-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[72,[2,7,9,10,11,12,13,14,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 72 be written as a sum of integers contained in the set:\\\\n\\\\n [2,7,9,10,11,12,13,14,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-401139.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"MNFQerwPERzhONkIylMk83cIylMk83caaaauGSlk8QkMi6FmnFdgji6Fm73\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; MNFQerwPERzhONkIylMk83cIylMk83caaaauGSlk8QkMi6FmnFdgji6Fm73\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-307979.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-6,-3,-2,0,-8,-6,-9,-8,2,2,-4,-2,-5,-9,-1,-1,1,1,9,-10,-10,-4,-5,-9,9,2,-10,-3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -6,-3,-2,0,-8,-6,-9,-8,2,2,-4,-2,-5,-9,-1,-1,1,1,9,-10,-10,-4,-5,-9,9,2,-10,-3\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-170537-ECorp.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[0,4,8,0,1,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,4,8,0,1,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-395864.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"A55jrr6vvJJm00000055BBTTT66UDnnneeeeeeGGGGGGGGGimmVGGJJJJJJJJJJJJJhmYYYYYYYYYYll66FFeennk\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; A55jrr6vvJJm00000055BBTTT66UDnnneeeeeeGGGGGGGGGimmVGGJJJJJJJJJJJJJhmYYYYYYYYYYll66FFeennk\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-151497-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11000000000000001010100100001111\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11000000000000001010100100001111' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-424542-NWO.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[16,[1,3,4,5,7,9,10,11]],\\\"description\\\":\\\"How many different distinct ways can the number 16 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,5,7,9,10,11]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-21990.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":41,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 41 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-855488.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,6,2,0,2,1,2,3,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,6,2,0,2,1,2,3,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-377673.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[8,1,6,3,6,0,0,10,8,0,2,6,1,1,2,4,0,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 8,1,6,3,6,0,0,10,8,0,2,6,1,1,2,4,0,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-216499.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[5,9],\\\"description\\\":\\\"You are in a grid with 5 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [5, 9]\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-242228-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":33283024047570444,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 33283024047570444 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"contracts/2023-07-14T11:23:56.906Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-14T11:23:56.906Z.txt\",\"text\":\"[{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-243939.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[11,11],\\\"description\\\":\\\"You are in a grid with 11 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [11, 11]\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-912092.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,15],[14,15],[1,2],[7,15],[25,30],[7,14],[13,21],[18,22],[14,16],[23,27],[12,14],[21,24],[15,17],[4,13],[8,17],[16,17],[17,24],[2,10],[19,28]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,15],[14,15],[1,2],[7,15],[25,30],[7,14],[13,21],[18,22],[14,16],[23,27],[12,14],[21,24],[15,17],[4,13],[8,17],[16,17],[17,24],[2,10],[19,28]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"}]\"}}],[\"contracts/2023-07-14T12:44:38.173Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-14T12:44:38.173Z.txt\",\"text\":\"[{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-48939-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[26,[1,3,5,8,10,11,15,16,17]],\\\"description\\\":\\\"How many different distinct ways can the number 26 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,5,8,10,11,15,16,17]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-470979.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"2209419733\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 2209419733\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-234597.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[5,8],[1,1,1],[2,8,3,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[5,8],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1],\\\\n&nbsp;&nbsp;[2,8,3,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-448836-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"66hhhhhhhhhhhhhh22YttttttttttttDD666666666666CCKTxxxxxx2\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 66hhhhhhhhhhhhhh22YttttttttttttDD666666666666CCKTxxxxxx2\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-558999-NWO.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1110100010011110000011110010100011001110000000011010011111100101\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1110100010011110000011110010100011001110000000011010011111100101' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-190826.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(())a)())a)((a)()()(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (())a)())a)((a)()()(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-480856-CyberSec.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,5,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,5,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"}]\"}}],[\"analytics/2023-07-14-13-42-Chongqing-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-14-13-42-Chongqing-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T21:37:36.719Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T21:37:36.719Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"CyberSec\\\",\\\"firstTime\\\":\\\"2023-07-11T21:37:36.719Z\\\"},{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-14T02:08:45.834Z\\\"},{\\\"factionToMax\\\":\\\"Chongqing\\\",\\\"firstTime\\\":\\\"2023-07-14T12:31:21.811Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":18750,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T21:37:36.720Z\\\"},\\\"augsBought\\\":[\\\"Neurotrainer I\\\"],\\\"moneySpent\\\":{\\\"augments\\\":4000000,\\\"homeCores\\\":0,\\\"homeRam\\\":100683790.34535334,\\\"fluxGovernors\\\":124980102.68536004,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":21525525.99539931,\\\"lastSaved\\\":\\\"2023-07-14T18:42:23.498Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1250000,\\\"currentFactionRep\\\":1318070.89911256,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-14T11:18:31.206Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$3,672.06\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$2,509,649,050,250.00\\\",\\\"time\\\":\\\"2023-07-14T11:18:31.207Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$251,189,419.03\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$4,000,000.00\\\",\\\"time\\\":\\\"2023-07-14T18:42:23.494Z\\\"},\\\"amountOfRamIncrease\\\":null,\\\"amountOfCoresIncrease\\\":null}\"}}],[\"contracts/failure/defcomm-contract-100448.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/defcomm-contract-100448.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-100448.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[152,38,124,58,150,20,97],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 152,38,124,112,58,135,150,20,97,44,5\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":178}\"}}],[\"contracts/2023-07-14T17:49:59.207Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-14T17:49:59.207Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-950777-Chongqing.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[14,11],\\\"description\\\":\\\"You are in a grid with 14 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [14, 11]\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-92525-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"5149180136\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 5149180136\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-536552-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Xcxhhhhhhhhhh6uh6uhT6HV8V8V8V8V8tIV8V8tI8t5idt00l0H00lA0l0H00lARlARlARlA\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Xcxhhhhhhhhhh6uh6uhT6HV8V8V8V8V8tIV8V8tI8t5idt00l0H00lA0l0H00lARlARlARlA\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-58197.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[14,20],[13,18],[19,21],[17,25],[21,26],[5,11],[21,27],[15,25],[13,14],[2,12],[16,20]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[14,20],[13,18],[19,21],[17,25],[21,26],[5,11],[21,27],[15,25],[13,14],[2,12],[16,20]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-324718-Chongqing.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,7,4,1,3,3,2,1,4,2,1,4,2,0,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,7,4,1,3,3,2,1,4,2,1,4,2,0,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-512878-TheBlackHand.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[24,26],[18,21],[2,10],[7,11],[9,13],[16,23]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[24,26],[18,21],[2,10],[7,11],[9,13],[16,23]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-349696-BladeIndustries.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[2,9,4,0,1,4,0,2,0,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,9,4,0,1,4,0,2,0,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-43533-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"()(a))((()(()))))))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ()(a))((()(()))))))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-177119-Chongqing.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,3,2,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,2,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-72852.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":95,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 95 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-743761-TheBlackHand.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":9273759208585,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 9273759208585 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-210549-TianDiHui.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((()a((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((()a((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-16187.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":61,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 61 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-53046.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"oMMMhd3xnWCxnWCxnWWCxnWzc13m3m3m0Q7lb7m3Uh3Uh3eeeeeeeeemcKeeemcKL6KeeXMe7e6IEqemumum\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; oMMMhd3xnWCxnWCxnWWCxnWzc13m3m3m0Q7lb7m3Uh3Uh3eeeeeeeeemcKeeemcKL6KeeXMe7e6IEqemumum\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-712707.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[11,3],\\\"description\\\":\\\"You are in a grid with 11 rows and 3 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [11, 3]\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-684196-TianDiHui.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[8],[1,5],[5,6,3],[5,7,4,9],[4,8,7,6,9],[8,4,1,9,9,6],[2,7,2,8,1,1,1],[7,8,8,5,5,1,8,7],[4,2,4,2,1,2,9,2,3],[1,4,7,4,4,4,4,4,1,9]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,6,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,4,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,8,7,6,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,4,1,9,9,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,2,8,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,8,8,5,5,1,8,7],\\\\n&nbsp;&nbsp;&nbsp;[4,2,4,2,1,2,9,2,3],\\\\n&nbsp;&nbsp;[1,4,7,4,4,4,4,4,1,9]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-449584.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,9,8,9,0,6,2,1,10,0,6,6,5,9,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,9,8,9,0,6,2,1,10,0,6,6,5,9,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-100448.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[152,38,124,112,58,135,150,20,97,44,5],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 152,38,124,112,58,135,150,20,97,44,5\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-438064.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11011101010011011011100011010111\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11011101010011011011100011010111' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-511574-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11101010000000000000100100011110\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11101010000000000000100100011110' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-819392.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"BaJqIBE7eIBE7eIBE70170QgZ8QG0UH1VE1uX0UH1VE1uXFKHB67cR67cR67cR6cwwwwwR6\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; BaJqIBE7eIBE7eIBE70170QgZ8QG0UH1VE1uX0UH1VE1uXFKHB67cR67cR67cR6cwwwwwR6\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-204399.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":17,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 17 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-748358-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":359879067,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 359879067?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-482287.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,-7,-4,10,-8,6,-9,-2,0,6],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,-7,-4,10,-8,6,-9,-2,0,6\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-268040.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,1,1,2,2,5,1,0,4,1,1,2,4,2,2,4,4,0,6,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,1,1,2,2,5,1,0,4,1,1,2,4,2,2,4,4,0,6,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-386141-CyberSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":1726876013836,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 1726876013836 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-558415-NiteSec.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"6RjtC6RjtC6RjtZC6OpbtZC6OpNbtZC6OpNeqBqpCpONeqBqpDVjpD2vwWh7FwWh7FwWh7h7FwWh7h\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 6RjtC6RjtC6RjtZC6OpbtZC6OpNbtZC6OpNeqBqpCpONeqBqpDVjpD2vwWh7FwWh7FwWh7h7FwWh7h\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"}]\"}}],[\"contracts/2023-07-15T15:33:56.046Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-15T15:33:56.046Z.txt\",\"text\":\"[{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-342582.cct\\\",\\\"type\\\":\\\"Encryption I: Caesar Cipher\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"CLOUD MEDIA MACRO LOGIN LINUX\\\",14],\\\"description\\\":\\\"Caesar cipher is one of the simplest encryption technique. It is a type of substitution cipher in which each letter in the plaintext  is replaced by a letter some fixed number of positions down the alphabet. For example, with a left shift of 3, D would be replaced by A,  E would become B, and A would become X (because of rotation).\\\\n\\\\n You are given an array with two elements:\\\\n &nbsp;&nbsp;[\\\\\\\"CLOUD MEDIA MACRO LOGIN LINUX\\\\\\\", 14]\\\\n The first element is the plaintext, the second element is the left shift value.\\\\n\\\\n Return the ciphertext as uppercase string. Spaces remains the same.\\\"}]\"}}],[\"contracts/2023-07-15T15:58:32.433Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-15T15:58:32.433Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-913737-TianDiHui.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"166255161155\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 166255161155\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-350855-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-4,1,-9,-10,-8,1,-10,7,-8,5,10,7,-3,5,1,-10,9,-9,-5,2,0,-1,5,5,0,-5,-6,10],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -4,1,-9,-10,-8,1,-10,7,-8,5,10,7,-3,5,1,-10,9,-9,-5,2,0,-1,5,5,0,-5,-6,10\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-293360.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[9,6],[7,5,3],[5,3,4,2],[8,4,8,9,1],[9,6,1,5,7,3],[4,2,4,1,4,1,3],[8,1,3,4,8,8,2,7],[4,7,2,2,8,8,7,4,4],[1,4,3,6,6,1,4,1,5,8],[3,9,7,6,9,1,5,3,8,5,7],[6,6,6,9,4,6,5,6,1,2,5,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,3,4,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,4,8,9,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,6,1,5,7,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,2,4,1,4,1,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,1,3,4,8,8,2,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,7,2,2,8,8,7,4,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,4,3,6,6,1,4,1,5,8],\\\\n&nbsp;&nbsp;&nbsp;[3,9,7,6,9,1,5,3,8,5,7],\\\\n&nbsp;&nbsp;[6,6,6,9,4,6,5,6,1,2,5,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-781131.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0],[0,1,0,0,0,1,1,1,0,1],[0,0,0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,1],[0,1,0,0,1,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,1,0,0,0,0,0,\\\\n0,1,0,0,0,1,1,1,0,1,\\\\n0,0,0,0,0,0,1,1,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,1,1,\\\\n0,1,0,0,1,0,0,0,0,0,\\\\n0,0,0,1,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-915824.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[10,16],[1,9],[7,13],[5,12],[7,10],[1,7],[11,14],[23,31],[16,24]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[10,16],[1,9],[7,13],[5,12],[7,10],[1,7],[11,14],[23,31],[16,24]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-925739.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[3,10],[6,16],[21,26],[23,25],[12,17],[9,14],[3,8],[18,22],[13,22],[20,22],[12,19],[12,21]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[3,10],[6,16],[21,26],[23,25],[12,17],[9,14],[3,8],[18,22],[13,22],[20,22],[12,19],[12,21]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"}]\"}}],[\"contracts/failure/catalyst-contract-299807-TianDiHui.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/catalyst-contract-299807-TianDiHui.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-299807-TianDiHui.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[27,101,17,115,9,135,64,195,189,196],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 27,70,101,47,17,115,9,135,64,195,189,196,174,11,8\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":258}\"}}],[\"contracts/failure/syscore-contract-62815-OmniTekIncorporated.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/syscore-contract-62815-OmniTekIncorporated.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-62815-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[17,186,44,129,73,176,46,194,37,196,97,174,102,159,143,193,92,172,75,165,10,108],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 17,186,55,44,51,129,73,176,46,194,91,37,48,157,196,133,113,97,150,174,163,102,159,143,172,193,92,124,170,172,165,149,75,99,165,10,108,49\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":328}\"}}],[\"contracts/2023-07-16T00:10:02.517Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-16T00:10:02.517Z.txt\",\"text\":\"[{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-497299-Sector12.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"aA64ZN0A64az0A64az0A62w0A62w0eYC62wYCNMY3666666sX0d5tttttttKdputtYgaputtYgaoSuty\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; aA64ZN0A64az0A64az0A62w0A62w0eYC62wYCNMY3666666sX0d5tttttttKdputtYgaputtYgaoSuty\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-62815-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[17,186,55,44,51,129,73,176,46,194,91,37,48,157,196,133,113,97,150,174,163,102,159,143,172,193,92,124,170,172,165,149,75,99,165,10,108,49],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 17,186,55,44,51,129,73,176,46,194,91,37,48,157,196,133,113,97,150,174,163,102,159,143,172,193,92,124,170,172,165,149,75,99,165,10,108,49\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-744706.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[168,[1,3,4,6,7,8,9,10,13,14,15,19]],\\\"description\\\":\\\"How many different distinct ways can the number 168 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,6,7,8,9,10,13,14,15,19]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-343293-Aevum.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,0,8,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,0,8,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-928249-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"21246484\\\",37],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 21246484\\\\n\\\\n You are also given a target number of 37. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"21246484\\\\\\\", 37]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-882299.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[8],[1,4],[4,4,9]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[8],\\\\n&nbsp;&nbsp;&nbsp;[1,4],\\\\n&nbsp;&nbsp;[4,4,9]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-751483-NWO.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"LgzLzLzLzLzLBOyzLB8OvisLB8O8O8O8O8Oq7dC48jNxpxpxpxpxpxpxxpxpXxpXxpXxpXHZXxpXxpX\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; LgzLzLzLzLzLBOyzLB8OvisLB8O8O8O8O8Oq7dC48jNxpxpxpxpxpxpxxpxpXxpXxpXxpXHZXxpXxpX\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-327756.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"ggggggggjjjjjjjjjCCCCCCCCCC7IIiiVVVVVttttttttttttuXXjjjjddyyyyyyyyQQQQ\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; ggggggggjjjjjjjjjCCCCCCCCCC7IIiiVVVVVttttttttttttuXXjjjjddyyyyyyyyQQQQ\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-297619.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[33,[1,3,4,6,7,8,12,14,15,19]],\\\"description\\\":\\\"How many different distinct ways can the number 33 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,6,7,8,12,14,15,19]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-500495.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,7],[5,7,4],[2,2,8,1],[5,2,5,1,1],[5,4,1,2,2,6],[1,4,5,7,6,1,6],[7,8,3,7,9,3,6,7],[7,2,6,4,4,1,4,6,7],[4,1,8,4,4,9,1,6,4,2],[9,5,2,3,8,7,4,4,4,2,9],[1,1,1,8,8,7,6,1,2,5,3,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,2,8,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,2,5,1,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,1,2,2,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,4,5,7,6,1,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,8,3,7,9,3,6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,2,6,4,4,1,4,6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,1,8,4,4,9,1,6,4,2],\\\\n&nbsp;&nbsp;&nbsp;[9,5,2,3,8,7,4,4,4,2,9],\\\\n&nbsp;&nbsp;[1,1,1,8,8,7,6,1,2,5,3,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-563784-BitRunners.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a))())a((a)a()a(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a))())a((a)a()a(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-975255.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"6683199557\\\",38],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 6683199557\\\\n\\\\n You are also given a target number of 38. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"6683199557\\\\\\\", 38]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-445487-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"ZZZZZmllllll88jjJwggggggdddMxc0111111111AAAA22222222227SSvp66qqqqqggnnDiiVVI\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; ZZZZZmllllll88jjJwggggggdddMxc0111111111AAAA22222222227SSvp66qqqqqggnnDiiVVI\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-96034.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":45,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 45 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-979969-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"39738\\\",64],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 39738\\\\n\\\\n You are also given a target number of 64. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"39738\\\\\\\", 64]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-299807-TianDiHui.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[27,70,101,47,17,115,9,135,64,195,189,196,174,11,8],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 27,70,101,47,17,115,9,135,64,195,189,196,174,11,8\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"}]\"}}],[\"analytics/2023-07-16-07-01-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-16-07-01-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-14T18:42:29.092Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-14T18:42:29.092Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Chongqing\\\",\\\"firstTime\\\":\\\"2023-07-14T18:42:29.093Z\\\"},{\\\"factionToMax\\\":\\\"NiteSec\\\",\\\"firstTime\\\":\\\"2023-07-14T19:25:47.953Z\\\"},{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-16T00:08:31.564Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":37500,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-14T18:42:29.093Z\\\"},\\\"augsBought\\\":[\\\"BitRunners Neurolink\\\",\\\"Artificial Bio-neural Network Implant\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"PCMatrix\\\",\\\"Neural Accelerator\\\",\\\"Neuroreceptor Management Implant\\\",\\\"CashRoot Starter Kit\\\",\\\"Nanofiber Weave\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Nuoptimal Nootropic Injector Implant\\\"],\\\"moneySpent\\\":{\\\"augments\\\":216402166430.733,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":695822032676.5732,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":124475476249.71924,\\\"lastSaved\\\":\\\"2023-07-16T12:01:43.917Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":112500.98808245687,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-15T07:50:20.980Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$4,889,904,294.25\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$21,378,646,141.86\\\",\\\"time\\\":\\\"2023-07-15T07:50:20.981Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$1,036,699,675,357.03\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$216,402,166,430.73\\\",\\\"time\\\":\\\"2023-07-16T12:01:43.912Z\\\"}}\"}}],[\"contracts/2023-07-16T12:01:46.791Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-16T12:01:46.791Z.txt\",\"text\":\"[{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-247364-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[144,20,5,28,21,119,82,182,65,121,95,5,138,140,90,143,191,73,181,131,13,136,2,145,160,65,99,117,98,187,164,135,2,98,188,25,15,142,107,84,119,127],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 144,20,5,28,21,119,82,182,65,121,95,5,138,140,90,143,191,73,181,131,13,136,2,145,160,65,99,117,98,187,164,135,2,98,188,25,15,142,107,84,119,127\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"}]\"}}],[\"contracts/2023-07-16T13:38:32.194Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-16T13:38:32.194Z.txt\",\"text\":\"[{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-47298.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,-8,-10,2,-7,6,-10,3,4,5,-1,2,-9,6,-7,-6,-6,8,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 4,-8,-10,2,-7,6,-10,3,4,5,-1,2,-9,6,-7,-6,-6,8,-7\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-118250.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010000000000000000000000001001111100111011001111010010000101011\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010000000000000000000000001001111100111011001111010010000101011' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-837393-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[5,0,0,5,0,6,4,0,2,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 5,0,0,5,0,6,4,0,2,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-313690.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[1,3,3,3,5,5,2,3,2,1,0,1,4,1,5,0,3,1,1,2,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,3,3,3,5,5,2,3,2,1,0,1,4,1,5,0,3,1,1,2,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-676548-CyberSec.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")(())()aa))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )(())()aa))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-116290.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,4,6,-6,0,6,-8,-7,-1,7,8,-4,-9,9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,4,6,-6,0,6,-8,-7,-1,7,8,-4,-9,9\\\"}]\"}}],[\"contracts/failure/aevum-police-contract-796033-BladeIndustries.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/aevum-police-contract-796033-BladeIndustries.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-796033-BladeIndustries.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[168,20,198,32,156,13,106,17,148,85,196,76,152,109,190,78,182,11,96,65,148,73,192,44,197,3,147,115,130],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":359}\"}}],[\"contracts/failure/phantasy-contract-768611.cct-AlgorithmicStockTraderI.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/phantasy-contract-768611.cct-AlgorithmicStockTraderI.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-768611.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader I\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[44,148,32,191,62,135,29,79,33,122,36,122,7,116,4,128,28,123,6,163,138,154,34,174,151,157],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89\\\\n\\\\n Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\\"},\\\"wrongResult\\\":159}\"}}],[\"contracts/2023-07-16T20:19:53.413Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-16T20:19:53.413Z.txt\",\"text\":\"[{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-768611.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader I\\\",\\\"attemptsLeft\\\":4,\\\"input\\\":[44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89\\\\n\\\\n Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\\"},{\\\"server\\\":\\\"crush-fitness\\\",\\\"name\\\":\\\"contract-687545.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,1,0,0,0,0,1,1,1,0],[0,0,0,1,1,0,0,1,1,0,0],[0,0,0,1,0,0,1,0,1,1,0],[0,1,0,0,0,1,0,1,0,0,1],[1,1,0,1,0,0,0,0,1,1,0],[0,0,0,1,0,1,0,1,0,1,1],[0,0,1,1,1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1],[1,1,0,1,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,1,0,0,0,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,1,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,1,0,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,1,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-939391.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"62285191\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 62285191\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-972324.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"NNNNNNNNNNNNNNPYYYYYYYY2nnnggw4WWWWWWW66666666666666eeQQKKEEERRP535tt\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; NNNNNNNNNNNNNNPYYYYYYYY2nnnggw4WWWWWWW66666666666666eeQQKKEEERRP535tt\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-697251.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[7,2,8,5,4,3,0,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 7,2,8,5,4,3,0,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-202226.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":637990270,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 637990270?\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-558172.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)a)(()()()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)a)(()()()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-218953-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((((a))a()))()((((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((((a))a()))()((((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-796033-BladeIndustries.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-845127-BachmanAssociates.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":1625456266023211,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 1625456266023211 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"contracts/failure/run4theh111z-contract-988917.cct-AlgorithmicStockTraderIV.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/run4theh111z-contract-988917.cct-AlgorithmicStockTraderIV.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-988917.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,[71,149,42,177,70,119,53,125,21,101,37,117,81,133,83,128,84,105]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [3, [71,129,131,149,117,42,177,72,70,119,80,53,113,125,21,101,61,37,40,117,81,106,133,83,128,84,105]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},\\\"wrongResult\\\":295}\"}}],[\"contracts/2023-07-17T04:41:28.605Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-17T04:41:28.605Z.txt\",\"text\":\"[{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-43393.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,1,0,0,0,0,0],[0,0,1,0,1,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,1,0,0,0,0,0,\\\\n0,0,1,0,1,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-768611.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader I\\\",\\\"attemptsLeft\\\":4,\\\"input\\\":[44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89\\\\n\\\\n Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\\"},{\\\"server\\\":\\\"crush-fitness\\\",\\\"name\\\":\\\"contract-687545.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,1,0,0,0,0,1,1,1,0],[0,0,0,1,1,0,0,1,1,0,0],[0,0,0,1,0,0,1,0,1,1,0],[0,1,0,0,0,1,0,1,0,0,1],[1,1,0,1,0,0,0,0,1,1,0],[0,0,0,1,0,1,0,1,0,1,1],[0,0,1,1,1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1],[1,1,0,1,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,1,0,0,0,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,1,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,1,0,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,1,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-939391.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"62285191\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 62285191\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-972324.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"NNNNNNNNNNNNNNPYYYYYYYY2nnnggw4WWWWWWW66666666666666eeQQKKEEERRP535tt\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; NNNNNNNNNNNNNNPYYYYYYYY2nnnggw4WWWWWWW66666666666666eeQQKKEEERRP535tt\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-697251.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[7,2,8,5,4,3,0,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 7,2,8,5,4,3,0,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-202226.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":637990270,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 637990270?\\\"},{\\\"server\\\":\\\"max-hardware\\\",\\\"name\\\":\\\"contract-129622.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"71934678\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 71934678\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-558172.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)a)(()()()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)a)(()()()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-218953-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((((a))a()))()((((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((((a))a()))()((((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-157685-CyberSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11100110000001001111011110000011\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11100110000001001111011110000011' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-796033-BladeIndustries.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-274937-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":675368096,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 675368096?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-21596.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[13,[[6,9],[3,12],[0,8],[2,9],[10,12],[1,3],[4,11],[0,10],[7,9],[2,7],[7,11],[5,9],[4,5],[10,11],[8,11],[2,3],[9,12],[6,8],[1,7],[3,11],[1,4],[0,3],[3,5]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [13,[[6,9],[3,12],[0,8],[2,9],[10,12],[1,3],[4,11],[0,10],[7,9],[2,7],[7,11],[5,9],[4,5],[10,11],[8,11],[2,3],[9,12],[6,8],[1,7],[3,11],[1,4],[0,3],[3,5]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 12. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-659175-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,1,1,0,0],[0,0,0,0,0,0,1,0,0],[0,1,0,0,0,1,0,0,0],[1,0,1,0,0,0,0,0,0],[1,0,1,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-988917.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[3,[71,129,131,149,117,42,177,72,70,119,80,53,113,125,21,101,61,37,40,117,81,106,133,83,128,84,105]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [3, [71,129,131,149,117,42,177,72,70,119,80,53,113,125,21,101,61,37,40,117,81,106,133,83,128,84,105]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-960938-NWO.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-8,-4,10,-10,-7,5,1,1,0],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -8,-4,10,-10,-7,5,1,1,0\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-845127-BachmanAssociates.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":1625456266023211,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 1625456266023211 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"analytics/2023-07-17-06-06-Daedalus-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-17-06-06-Daedalus-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-16T15:53:06.295Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-16T15:53:06.295Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Bachman & Associates\\\",\\\"firstTime\\\":\\\"2023-07-16T15:53:06.295Z\\\"},{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-17T01:31:18.498Z\\\"},{\\\"factionToMax\\\":\\\"Daedalus\\\",\\\"firstTime\\\":\\\"2023-07-17T04:41:47.261Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":0.46197959594147,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-16T15:53:06.295Z\\\"},\\\"augsBought\\\":[\\\"Hydroflame Left Arm\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Xanipher\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\",\\\"The Red Pill\\\"],\\\"moneySpent\\\":{\\\"augments\\\":3024870935197.57,\\\"homeCores\\\":3164062500000,\\\"homeRam\\\":9996095182970.555,\\\"fluxGovernors\\\":712114491862.0477,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":164737053720.6671,\\\"lastSaved\\\":\\\"2023-07-17T11:06:19.607Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":2500000,\\\"currentFactionRep\\\":2500111.4825186455,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-17T11:06:15.484Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$9,434,446,404,033.54\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$3,024,870,935,197.57\\\",\\\"time\\\":\\\"2023-07-17T11:06:15.484Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$17,061,880,163,750.84\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$3,024,870,935,197.57\\\",\\\"time\\\":\\\"2023-07-17T11:06:19.605Z\\\"},\\\"amountOfRamIncrease\\\":null,\\\"amountOfCoresIncrease\\\":null}\"}}],[\"contracts/2023-07-17T11:06:22.474Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-17T11:06:22.474Z.txt\",\"text\":\"[]\"}}],[\"contracts/failure/zer0-contract-752976-Chongqing.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/zer0-contract-752976-Chongqing.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-752976-Chongqing.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[79,180,45,175,10,141,24,186,19,194,44,191,25,190,33,200,11,91,37,176,31,50,35,191],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 79,180,111,45,175,35,10,141,104,80,64,24,72,186,19,94,118,138,194,44,191,25,190,33,200,11,91,37,176,176,31,50,35,191,114,95\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":357}\"}}],[\"contracts/failure/icarus-contract-151400.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/icarus-contract-151400.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-151400.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,169,49,195,51,185,20,161,31,159,45,191,44,165,7,158,16,199,3,162,70,139,1,185],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 8,39,169,89,49,95,195,51,55,185,183,20,117,161,31,144,159,45,170,191,44,165,156,101,7,103,158,106,105,26,16,143,199,118,71,5,3,73,92,162,70,139,1,15,185\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":376}\"}}],[\"contracts/2023-07-17T11:37:10.279Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-17T11:37:10.279Z.txt\",\"text\":\"[{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-466235-CyberSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":12,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 12 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-114396-BladeIndustries.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-10,-4,-5,-4,-8,9,0,1,1,-2,3,6,7,3,-4,-7,5,-8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -10,-4,-5,-4,-8,9,0,1,1,-2,3,6,7,3,-4,-7,5,-8\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-170562.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":203303262363,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 203303262363 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-617759.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,3],\\\"description\\\":\\\"You are in a grid with 4 rows and 3 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [4, 3]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-668090.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[2,11],[21,28],[3,7],[3,5]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[2,11],[21,28],[3,7],[3,5]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-752976-Chongqing.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[79,180,111,45,175,35,10,141,104,80,64,24,72,186,19,94,118,138,194,44,191,25,190,33,200,11,91,37,176,176,31,50,35,191,114,95],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 79,180,111,45,175,35,10,141,104,80,64,24,72,186,19,94,118,138,194,44,191,25,190,33,200,11,91,37,176,176,31,50,35,191,114,95\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-982890-CyberSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[13,11],\\\"description\\\":\\\"You are in a grid with 13 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [13, 11]\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-700283-TianDiHui.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":65,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 65 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-879575-NWO.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[24,30],[4,13],[3,7],[3,13],[15,22],[7,16]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[24,30],[4,13],[3,7],[3,13],[15,22],[7,16]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-139555.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"X2yt0amgB78Y78Y78kY78kY78kY00000RaRuvrbbbbbbbbrbiiiiiiiiiiDirdp\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; X2yt0amgB78Y78Y78kY78kY78kY00000RaRuvrbbbbbbbbrbiiiiiiiiiiDirdp\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-507336.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":177120045,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 177120045 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-284449.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"2715148182\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 2715148182\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"nwo\\\",\\\"name\\\":\\\"contract-853005-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[10,0,5,8,0,0,8,5,0,0,7,9,0,8,10,7,10,9,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 10,0,5,8,0,0,8,5,0,0,7,9,0,8,10,7,10,9,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"nwo\\\",\\\"name\\\":\\\"contract-945507-BladeIndustries.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,4,0,2,10,0,10,6,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,4,0,2,10,0,10,6,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-78126.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[11,18],[12,21],[4,13],[2,6],[22,26],[10,19],[3,11],[17,23],[4,6],[10,12],[17,22],[15,23],[24,27],[21,30],[15,17],[6,11],[15,21]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[11,18],[12,21],[4,13],[2,6],[22,26],[10,19],[3,11],[17,23],[4,6],[10,12],[17,22],[15,23],[24,27],[21,30],[15,17],[6,11],[15,21]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-180242.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[9,18],[25,27],[24,30],[16,17],[25,31],[4,14],[13,17],[25,27],[25,29],[16,21],[14,19],[24,34],[21,30],[18,22]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[9,18],[25,27],[24,30],[16,17],[25,31],[4,14],[13,17],[25,27],[25,29],[16,21],[14,19],[24,34],[21,30],[18,22]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-129080.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[7,10,0,10,10,10,7,0,5,0,10,6,7,0,5,8,9,6,0,1,7,5,5,0,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 7,10,0,10,10,10,7,0,5,0,10,6,7,0,5,8,9,6,0,1,7,5,5,0,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"the-hub\\\",\\\"name\\\":\\\"contract-183995.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"59391098\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 59391098\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-151400.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[8,39,169,89,49,95,195,51,55,185,183,20,117,161,31,144,159,45,170,191,44,165,156,101,7,103,158,106,105,26,16,143,199,118,71,5,3,73,92,162,70,139,1,15,185],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 8,39,169,89,49,95,195,51,55,185,183,20,117,161,31,144,159,45,170,191,44,165,156,101,7,103,158,106,105,26,16,143,199,118,71,5,3,73,92,162,70,139,1,15,185\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"}]\"}}],[\"analytics/2023-07-18-19-23-CyberSec-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-18-19-23-CyberSec-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-17T15:01:59.454Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-17T15:01:59.454Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"CyberSec\\\",\\\"firstTime\\\":\\\"2023-07-17T15:01:59.454Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":56250,\\\"currentFactionRep\\\":9575.57211897485,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-17T15:01:59.454Z\\\"},\\\"augsBought\\\":[\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"BitWire\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neurotrainer I\\\",\\\"Wired Reflexes\\\"],\\\"moneySpent\\\":{\\\"augments\\\":1527220125,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":105853232.25,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":180990271.22235352,\\\"lastSaved\\\":\\\"2023-07-18T00:23:57.041Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":56250,\\\"currentFactionRep\\\":56366.304164084075,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-18T00:17:40.293Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$417,766,412.90\\\",\\\"moneyRightNow\\\":\\\"$15,180.11\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,527,220,125.00\\\",\\\"time\\\":\\\"2023-07-18T00:17:40.297Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$427,568,338.06\\\",\\\"moneyRightNow\\\":\\\"$1,814,063,628.47\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,527,220,125.00\\\",\\\"time\\\":\\\"2023-07-18T00:23:57.034Z\\\"}}\"}}],[\"contracts/2023-07-18T00:23:59.915Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-18T00:23:59.915Z.txt\",\"text\":\"[]\"}}],[\"contracts/failure/joesguns-contract-665303-BachmanAssociates.cct-AlgorithmicStockTraderIV.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/joesguns-contract-665303-BachmanAssociates.cct-AlgorithmicStockTraderIV.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-665303-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,[27,130,53,133,11,164,19,177,78,176,28,137,108,178,11,165,55,138,84,100,14,124,6,159,46,161,2,122]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [9, [27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},\\\"wrongResult\\\":1216}\"}}],[\"contracts/2023-07-18T11:38:52.713Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-18T11:38:52.713Z.txt\",\"text\":\"[{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-665303-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[9,[27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [9, [27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-351757-TianDiHui.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[153,[2,5,6,9,10,11,14,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 153 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,14,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-839291-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":78,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 78 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-872421.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"9909267137\\\",40],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 9909267137\\\\n\\\\n You are also given a target number of 40. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"9909267137\\\\\\\", 40]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-984796-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[37,[5,6,8,9,11,12,13,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 37 be written as a sum of integers contained in the set:\\\\n\\\\n [5,6,8,9,11,12,13,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"}]\"}}],[\"contracts/2023-07-19T01:25:07.967Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-19T01:25:07.967Z.txt\",\"text\":\"[{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-665303-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[9,[27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [9, [27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-351757-TianDiHui.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[153,[2,5,6,9,10,11,14,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 153 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,14,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-839291-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":78,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 78 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-872421.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"9909267137\\\",40],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 9909267137\\\\n\\\\n You are also given a target number of 40. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"9909267137\\\\\\\", 40]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-984796-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[37,[5,6,8,9,11,12,13,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 37 be written as a sum of integers contained in the set:\\\\n\\\\n [5,6,8,9,11,12,13,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"}]\"}}],[\"contracts/2023-07-19T11:36:24.027Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-19T11:36:24.027Z.txt\",\"text\":\"[{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-281744.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,9,4,10,-4,1,8,3,-5,10,-10,2,-10,-1,10,8,1,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 8,9,4,10,-4,1,8,3,-5,10,-10,2,-10,-1,10,8,1,-5\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-665303-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[9,[27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [9, [27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-351757-TianDiHui.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[153,[2,5,6,9,10,11,14,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 153 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,14,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-800650-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"355877\\\",8],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 355877\\\\n\\\\n You are also given a target number of 8. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"355877\\\\\\\", 8]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-839291-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":78,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 78 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-280659-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"p4zroASVvUEuOp7BC5vrN1rKSMIKSMIKSMWSH7w6RsI5AQXaawRwntUtUtUtUtcJty2dUtcJfty2mtzty\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; p4zroASVvUEuOp7BC5vrN1rKSMIKSMIKSMWSH7w6RsI5AQXaawRwntUtUtUtUtcJty2dUtcJfty2mtzty\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-872421.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"9909267137\\\",40],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 9909267137\\\\n\\\\n You are also given a target number of 40. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"9909267137\\\\\\\", 40]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-984796-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[37,[5,6,8,9,11,12,13,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 37 be written as a sum of integers contained in the set:\\\\n\\\\n [5,6,8,9,11,12,13,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"}]\"}}],[\"analytics/2023-07-19-12-48-Chongqing-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-19-12-48-Chongqing-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-18T12:23:04.481Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-18T12:23:04.481Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Chongqing\\\",\\\"firstTime\\\":\\\"2023-07-18T12:23:04.481Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":0.0538667088,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-18T12:23:04.481Z\\\"},\\\"augsBought\\\":[\\\"Neuralstimulator\\\",\\\"Neuregen Gene Modification\\\",\\\"Speech Processor Implant\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"Speech Enhancement\\\"],\\\"moneySpent\\\":{\\\"augments\\\":13703262375,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":4830547361.117641,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":1096928387.9418674,\\\"lastSaved\\\":\\\"2023-07-19T17:48:45.411Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":206240.08301470877,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-19T11:36:24.281Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$4,160,871,565.61\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$12,090,540,000.00\\\",\\\"time\\\":\\\"2023-07-19T11:36:24.283Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$877,193,741.98\\\",\\\"moneyRightNow\\\":\\\"$19,630,738,124.06\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$13,703,262,375.00\\\",\\\"time\\\":\\\"2023-07-19T17:48:45.405Z\\\"}}\"}}],[\"contracts/2023-07-19T17:48:48.121Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-19T17:48:48.121Z.txt\",\"text\":\"[{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-482557.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0],[0,0,0,0,0,0,1],[0,0,0,1,0,1,0],[0,1,0,1,1,0,0],[0,1,0,1,0,0,0],[0,0,0,0,0,0,0],[1,0,0,0,1,0,0],[1,0,0,0,1,0,0],[1,0,1,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-928339.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[2,7],[1,6,8],[6,6,2,3],[9,3,9,2,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,6,8],\\\\n&nbsp;&nbsp;&nbsp;[6,6,2,3],\\\\n&nbsp;&nbsp;[9,3,9,2,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-683482-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"429563\\\",88],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 429563\\\\n\\\\n You are also given a target number of 88. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"429563\\\\\\\", 88]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-101955-CyberSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[1,0,0,0,0],[0,0,0,1,0],[0,0,0,0,0],[0,0,1,1,0],[1,0,0,0,0],[1,1,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n1,0,0,0,0,\\\\n0,0,0,1,0,\\\\n0,0,0,0,0,\\\\n0,0,1,1,0,\\\\n1,0,0,0,0,\\\\n1,1,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"max-hardware\\\",\\\"name\\\":\\\"contract-363580.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((a(a)aaaa(a()))(a(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((a(a)aaaa(a()))(a(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-686649-ECorp.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,0,0,0],[0,1,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,1,0,0,0,0,\\\\n0,1,0,0,0,0,1,0,0,\\\\n0,0,0,0,0,0,0,1,0,\\\\n0,0,0,0,0,1,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,1,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,1,0,0,0,0,0,0,1,\\\\n0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-580876.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")((((a(())a()))aa\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )((((a(())a()))aa\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-833725-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0],[0,0,1,0,1,1,0],[0,0,0,0,0,1,0],[0,1,1,0,1,0,0],[0,0,0,0,0,1,1],[1,1,1,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-969263-CyberSec.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,0,0,0,0,1],[0,0,0,0,0,1,1,1,0,1,1],[0,0,0,0,0,1,0,0,0,0,0],[0,1,1,0,0,0,0,0,0,0,0],[1,1,1,0,0,1,0,0,0,0,1],[0,0,1,1,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0],[0,1,0,1,0,1,1,0,1,1,0],[1,0,0,0,1,0,0,0,0,0,0],[0,1,0,1,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,0,0,1,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,1,1,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-584719.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[1,0,3,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,0,3,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-860676.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,1],[0,0,0,1,0,1],[0,0,1,0,0,1],[0,0,1,1,0,0],[0,0,1,0,0,1],[0,0,0,0,0,0],[0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-90682-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0110000010010000\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0110000010010000' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-951732.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[1,2],[25,26],[6,7],[18,19],[19,21],[11,18],[17,19],[23,30]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[1,2],[25,26],[6,7],[18,19],[19,21],[11,18],[17,19],[23,30]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-875972.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[27,[1,4,6,7,9,10,11,12,13]],\\\"description\\\":\\\"How many different distinct ways can the number 27 be written as a sum of integers contained in the set:\\\\n\\\\n [1,4,6,7,9,10,11,12,13]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-795055-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[19,28],[20,29],[15,16],[12,14],[3,7],[15,19],[12,16]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[19,28],[20,29],[15,16],[12,14],[3,7],[15,19],[12,16]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"stormtech\\\",\\\"name\\\":\\\"contract-600398-ECorp.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"AqLFevqLFcp7oyIwFcp7oyXpcp7NIBrTH6xlI6xlI6xl5ljxlexxle2zIGbibibibM02Qj4qiwdaMQ6M\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; AqLFevqLFcp7oyIwFcp7oyXpcp7NIBrTH6xlI6xlI6xl5ljxlexxle2zIGbibibibM02Qj4qiwdaMQ6M\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-576645-NiteSec.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[8,[[1,5],[2,5],[5,6],[5,7],[1,3],[0,3],[5,6],[4,7],[2,3],[2,4],[1,4]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [8,[[1,5],[2,5],[5,6],[5,7],[1,3],[0,3],[5,6],[4,7],[2,3],[2,4],[1,4]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 7. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-495044.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[3,9],[3,12],[20,22],[23,25],[23,31],[12,17],[13,16],[4,11],[10,19]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[3,9],[3,12],[20,22],[23,25],[23,31],[12,17],[13,16],[4,11],[10,19]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-15650-CyberSec.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[2,5,9,3,8,7,4,0,10,5,9,5,7,10,5,3,8,2,9,10,7,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,5,9,3,8,7,4,0,10,5,9,5,7,10,5,3,8,2,9,10,7,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-313946-BladeIndustries.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[13,5],\\\"description\\\":\\\"You are in a grid with 13 rows and 5 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [13, 5]\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-523738-TheBlackHand.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"52204140202\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 52204140202\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-202598-CyberSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[175,[3,4,5,6,7,9,10,12,15]],\\\"description\\\":\\\"How many different distinct ways can the number 175 be written as a sum of integers contained in the set:\\\\n\\\\n [3,4,5,6,7,9,10,12,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-39560.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[14,10],\\\"description\\\":\\\"You are in a grid with 14 rows and 10 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [14, 10]\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-808154-CyberSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":31,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 31 be written as a sum of at least two positive integers?\\\"}]\"}}],[\"analytics/2023-07-20-04-20-NiteSec-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-20-04-20-NiteSec-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-19T18:25:41.782Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-19T18:25:41.782Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NiteSec\\\",\\\"firstTime\\\":\\\"2023-07-19T18:25:41.782Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":150000,\\\"currentFactionRep\\\":0.4850529923899739,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-19T18:25:41.782Z\\\"},\\\"augsBought\\\":[\\\"Cranial Signal Processors - Gen III\\\",\\\"Neural-Retention Enhancement\\\",\\\"Embedded Netburner Module\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Neurotrainer II\\\"],\\\"moneySpent\\\":{\\\"augments\\\":16882762650,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":735604102.0243528,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":242492867.6541854,\\\"lastSaved\\\":\\\"2023-07-20T09:20:20.822Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":150000,\\\"currentFactionRep\\\":150002.03570172685,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-20T07:31:58.717Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$493,779,692.90\\\",\\\"moneyRightNow\\\":\\\"$5,517,622,556.06\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$16,882,762,650.00\\\",\\\"time\\\":\\\"2023-07-20T07:31:58.717Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$410,032,490.32\\\",\\\"moneyRightNow\\\":\\\"$17,860,859,619.68\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$16,882,762,650.00\\\",\\\"time\\\":\\\"2023-07-20T09:20:20.814Z\\\"}}\"}}],[\"contracts/2023-07-20T09:20:23.522Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-20T09:20:23.522Z.txt\",\"text\":\"[{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-160196.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[16,19],[4,8],[19,27],[14,20],[9,11],[14,24],[18,22]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[16,19],[4,8],[19,27],[14,20],[9,11],[14,24],[18,22]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-198363.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"EHGiHGSFzoYvTdfvrLZyTdfvrvrvrvrvrvrvrekmvrekmvreowtlrlrlrlrlrlslrlIlslr\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; EHGiHGSFzoYvTdfvrLZyTdfvrvrvrvrvrvrvrekmvrekmvreowtlrlrlrlrlrlslrlIlslr\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-551996.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[7],[7,9],[3,6,2],[5,7,8,1],[8,9,5,6,6],[6,5,6,1,3,9]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,6,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[5,7,8,1],\\\\n&nbsp;&nbsp;&nbsp;[8,9,5,6,6],\\\\n&nbsp;&nbsp;[6,5,6,1,3,9]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-185836-CyberSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,7],\\\"description\\\":\\\"You are in a grid with 9 rows and 7 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [9, 7]\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-203937-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":81,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 81 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-646201-CyberSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[12,4],\\\"description\\\":\\\"You are in a grid with 12 rows and 4 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [12, 4]\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-726800-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[0,7,3,4,3,3,3,4,1,0,3,1,0,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,7,3,4,3,3,3,4,1,0,3,1,0,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-814551.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"wwwwwwwfPPGGGGGGcHHgMMhhooE8IIMmPPPPPPPPPPPPM0kkSSSSSSSSSS7777777777777yyyyyyzzzzzzzzz\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; wwwwwwwfPPGGGGGGcHHgMMhhooE8IIMmPPPPPPPPPPPPM0kkSSSSSSSSSS7777777777777yyyyyyzzzzzzzzz\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-184215.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,1,0,0,0,1,1],[1,0,0,0,0,0,1,1,1,1,0,0],[0,0,0,0,0,1,0,1,1,1,1,1],[0,0,0,0,1,1,0,0,0,1,0,0],[0,0,0,0,1,1,0,1,1,1,0,0],[0,0,1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,1,0,0],[0,1,0,0,0,1,1,1,1,0,1,0],[0,0,0,0,1,0,0,1,0,0,0,0],[0,0,0,1,1,0,0,0,0,0,1,1],[0,1,1,0,0,0,0,0,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,1,0,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,1,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,1,1,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,0,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,1,1,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,1,0,0,0,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-698434-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":470074817,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 470074817?\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-113752.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((()a))(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((()a))(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-509231.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[15,22],[16,21],[21,31],[4,6]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[15,22],[16,21],[21,31],[4,6]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-153104.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[193,[2,3,4,5,7,8,9,10,13]],\\\"description\\\":\\\"How many different distinct ways can the number 193 be written as a sum of integers contained in the set:\\\\n\\\\n [2,3,4,5,7,8,9,10,13]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-283509.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":86,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 86 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-424311-BitRunners.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[11,[[4,7],[0,2],[7,8],[3,6],[0,10],[2,3],[8,9],[5,9],[6,9],[2,7],[6,9],[2,9],[6,7],[1,7],[9,10]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [11,[[4,7],[0,2],[7,8],[3,6],[0,10],[2,3],[8,9],[5,9],[6,9],[2,7],[6,9],[2,9],[6,7],[1,7],[9,10]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 10. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-290448-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"qcgqcYvNfpYUha6ha6ha6hlb42Bee3wiywywyfViywywyfVibuIbP0kVibuIQrVkVibebebebebebveWQeWQeWQeWJeW\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; qcgqcYvNfpYUha6ha6ha6hlb42Bee3wiywywyfViywywyfVibuIbP0kVibuIQrVkVibebebebebebveWQeWQeWQeWJeW\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-758844.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"22832320932\\\",81],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 22832320932\\\\n\\\\n You are also given a target number of 81. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"22832320932\\\\\\\", 81]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"omnia\\\",\\\"name\\\":\\\"contract-180064.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[120,[1,2,4,5,7,8,9,10,11,12]],\\\"description\\\":\\\"How many different distinct ways can the number 120 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,7,8,9,10,11,12]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-775664.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,1,0,0,0,0,0,0,1],[0,1,0,0,0,0,1,0,1,1],[0,0,0,0,1,0,0,1,0,0],[0,1,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,1,1,1],[0,1,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,1],[0,1,0,1,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,1],[0,1,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,1,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,0,0,0,0,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"}]\"}}],[\"analytics/2023-07-21-03-35-TheBlackHand-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-21-03-35-TheBlackHand-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-20T13:19:37.890Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-20T13:19:37.890Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"The Black Hand\\\",\\\"firstTime\\\":\\\"2023-07-20T13:19:37.890Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-20T13:19:37.891Z\\\"},\\\"augsBought\\\":[\\\"Enhanced Myelin Sheathing\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"The Black Hand\\\",\\\"DataJack\\\",\\\"Social Negotiation Assistant (S.N.A)\\\"],\\\"moneySpent\\\":{\\\"augments\\\":26784039000,\\\"homeCores\\\":0,\\\"homeRam\\\":475182451795.6437,\\\"fluxGovernors\\\":670881065159.001,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":159955728162.7616,\\\"lastSaved\\\":\\\"2023-07-21T08:35:25.556Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":375012.4444733313,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-21T08:32:58.201Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$44,332,067,495.85\\\",\\\"moneyRightNow\\\":\\\"$836,033,121.15\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$26,784,039,000.00\\\",\\\"time\\\":\\\"2023-07-21T08:32:58.201Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$49,129,547,840.44\\\",\\\"moneyRightNow\\\":\\\"$1,332,803,284,117.41\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$26,784,039,000.00\\\",\\\"time\\\":\\\"2023-07-21T08:35:25.555Z\\\"},\\\"amountOfRamIncrease\\\":null,\\\"amountOfCoresIncrease\\\":null}\"}}],[\"contracts/failure/nectar-net-contract-394118-BitRunners.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/nectar-net-contract-394118-BitRunners.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-394118-BitRunners.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[83,18,162,4,95,11,195,119,187,88,196,1,159,29,59,17,164,79,89,61,177,49,170],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 83,18,162,4,46,95,11,119,195,120,119,187,88,196,77,1,159,129,29,59,17,164,79,89,61,109,127,177,49,84,170\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":350}\"}}],[\"contracts/2023-07-21T08:35:28.271Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-21T08:35:28.271Z.txt\",\"text\":\"[{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-704097.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,0,5,0,8,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,0,5,0,8,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-999646.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100000011101010100010011011010101001111011100111111100010011110\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100000011101010100010011011010101001111011100111111100010011110' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-797194-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,0,0,1,0],[0,1,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,1,0],[0,1,1,0,1,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,0,\\\\n0,0,0,0,0,0,1,0,1,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n0,1,1,0,1,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-605259.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":66,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 66 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-36453-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2,0,8,-2,-7,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,2,0,8,-2,-7,-7\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-305165.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":72,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 72 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-771627.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":11,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 11 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-678006.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"W0i1EEEEEE6z0z6yCCxz0z6yCCxzN3yCx2Cx2Cx2CsLhx2Cx2CsLhNzigs0777777777SFNUWSFNUWSFNUFNUPW0FNU\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; W0i1EEEEEE6z0z6yCCxz0z6yCCxzN3yCx2Cx2Cx2CsLhx2Cx2CsLhNzigs0777777777SFNUWSFNUWSFNUFNUPW0FNU\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-202243-TheBlackHand.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"663317949728\\\",63],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 663317949728\\\\n\\\\n You are also given a target number of 63. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"663317949728\\\\\\\", 63]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-813507-BitRunners.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"95163141220\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 95163141220\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-314967.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":668710506,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 668710506?\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-620424.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":50,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 50 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-273352.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"469324190930\\\",79],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 469324190930\\\\n\\\\n You are also given a target number of 79. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"469324190930\\\\\\\", 79]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-294288-BitRunners.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0000101001010001\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0000101001010001' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-524316-ECorp.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[7,17],[5,12],[5,14],[4,11],[8,18],[20,27],[19,27],[19,25],[5,9],[13,22],[25,28],[25,31],[9,19],[15,19],[2,9],[22,27]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[7,17],[5,12],[5,14],[4,11],[8,18],[20,27],[19,27],[19,25],[5,9],[13,22],[25,28],[25,31],[9,19],[15,19],[2,9],[22,27]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-57092.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,0,5,1,4,4,3,6,3,1,1,4,4,0,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,0,5,1,4,4,3,6,3,1,1,4,4,0,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-904886.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":28,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 28 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"the-hub\\\",\\\"name\\\":\\\"contract-625337.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[6,4,3,2,4,8,2,6,3,0,4,0,2,2,0,5,6,3,3,7,5,0,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 6,4,3,2,4,8,2,6,3,0,4,0,2,2,0,5,6,3,3,7,5,0,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-394118-BitRunners.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[83,18,162,4,46,95,11,119,195,120,119,187,88,196,77,1,159,129,29,59,17,164,79,89,61,109,127,177,49,84,170],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 83,18,162,4,46,95,11,119,195,120,119,187,88,196,77,1,159,129,29,59,17,164,79,89,61,109,127,177,49,84,170\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"}]\"}}],[\"analytics/2023-07-22-00-43-Bachman&Associates-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-22-00-43-Bachman&Associates-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-21T09:07:14.531Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-21T09:07:14.531Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-21T09:07:14.532Z\\\"},{\\\"factionToMax\\\":\\\"Bachman & Associates\\\",\\\"firstTime\\\":\\\"2023-07-21T15:38:51.410Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-21T09:07:14.532Z\\\"},\\\"augsBought\\\":[\\\"FocusWire\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"CashRoot Starter Kit\\\",\\\"Nanofiber Weave\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\"],\\\"moneySpent\\\":{\\\"augments\\\":13504345725,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":529136852962.8832,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":478094288875.795,\\\"lastSaved\\\":\\\"2023-07-22T05:43:08.455Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1125000,\\\"currentFactionRep\\\":462513.38379352586,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-22T05:43:03.775Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$721,453,082,023.73\\\",\\\"moneyRightNow\\\":\\\"$517,995,312,219.22\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$13,504,345,725.00\\\",\\\"time\\\":\\\"2023-07-22T05:43:03.776Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$721,453,082,023.73\\\",\\\"moneyRightNow\\\":\\\"$1,020,735,487,563.68\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$13,504,345,725.00\\\",\\\"time\\\":\\\"2023-07-22T05:43:08.447Z\\\"}}\"}}],[\"contracts/2023-07-22T05:43:11.146Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T05:43:11.146Z.txt\",\"text\":\"[{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-11351.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[9,1,0,1,4,8,2,9,3,0,0,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 9,1,0,1,4,8,2,9,3,0,0,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-380792-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[8],[6,7],[8,5,3],[1,9,2,9],[7,5,6,6,4],[7,7,7,8,3,3],[1,5,4,5,4,8,9]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,9,2,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,5,6,6,4],\\\\n&nbsp;&nbsp;&nbsp;[7,7,7,8,3,3],\\\\n&nbsp;&nbsp;[1,5,4,5,4,8,9]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-347251-TianDiHui.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"64125109196\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 64125109196\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-489407-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[22,23],[14,20],[7,12],[21,25],[2,7],[5,7],[6,16],[5,10],[7,13],[24,34],[11,19],[23,31],[15,19],[17,19],[16,21],[25,32],[5,11],[2,10],[10,18],[22,26]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[22,23],[14,20],[7,12],[21,25],[2,7],[5,7],[6,16],[5,10],[7,13],[24,34],[11,19],[23,31],[15,19],[17,19],[16,21],[25,32],[5,11],[2,10],[10,18],[22,26]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-740419-Sector12.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[12,[[0,10],[5,9],[2,8],[9,10],[1,7],[6,11],[1,4],[0,5],[0,6],[1,5],[0,3],[1,2],[1,10],[8,10],[3,11],[5,11],[7,8],[1,3]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [12,[[0,10],[5,9],[2,8],[9,10],[1,7],[6,11],[1,4],[0,5],[0,6],[1,5],[0,3],[1,2],[1,10],[8,10],[3,11],[5,11],[7,8],[1,3]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 11. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-995428.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":976679328,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 976679328?\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-399060-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[17,26],[24,30],[6,10],[20,25],[24,27]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[17,26],[24,30],[6,10],[20,25],[24,27]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-829895-NWO.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1242558141\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 1242558141\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-881035.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"rmmTTTTTkiiGGGGGGGiiiiiiiwwwwww1T4xxW00000000MPPHHHHWWWWWWW\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; rmmTTTTTkiiGGGGGGGiiiiiiiwwwwww1T4xxW00000000MPPHHHHWWWWWWW\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-611935.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[8,11],[1,5],[7,17]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[8,11],[1,5],[7,17]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-387094-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[20,30],[25,29],[12,16],[21,23],[11,18],[8,16],[15,16],[10,20],[21,29],[20,23],[5,15],[20,30]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[20,30],[25,29],[12,16],[21,23],[11,18],[8,16],[15,16],[10,20],[21,29],[20,23],[5,15],[20,30]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-797670.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,10],[1,3],[3,12],[11,16],[11,19],[24,34],[1,10],[9,19],[7,15],[24,28],[9,19],[6,13],[18,24],[10,20],[2,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,10],[1,3],[3,12],[11,16],[11,19],[24,34],[1,10],[9,19],[7,15],[24,28],[9,19],[6,13],[18,24],[10,20],[2,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-188827.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"16442178219\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 16442178219\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-464359-NiteSec.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"ii44XXTTMM6cdBtttttttttttoooooooooooooo222222233v882222000rrrrrrrjjjjj\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; ii44XXTTMM6cdBtttttttttttoooooooooooooo222222233v882222000rrrrrrrjjjjj\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"}]\"}}],[\"analytics/2023-07-22-09-43-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-22-09-43-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-22T06:02:37.619Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-22T06:02:37.619Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-22T06:02:37.620Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":3.2864092291602076,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-22T06:02:37.620Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core Implant\\\",\\\"Neuroreceptor Management Implant\\\"],\\\"moneySpent\\\":{\\\"augments\\\":10635000000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":544271461926.7823,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":444192826113.2349,\\\"lastSaved\\\":\\\"2023-07-22T14:43:13.384Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":424401.7324430114,\\\"targetRepForGettingToFavor\\\":46.7456,\\\"time\\\":\\\"2023-07-22T12:46:06.443Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$56,130,176,702.47\\\",\\\"moneyRightNow\\\":\\\"$8,419,609.39\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$10,635,000,000.00\\\",\\\"time\\\":\\\"2023-07-22T14:30:11.871Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$78,940,357,809.55\\\",\\\"moneyRightNow\\\":\\\"$999,099,288,040.02\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$10,635,000,000.00\\\",\\\"time\\\":\\\"2023-07-22T14:43:13.379Z\\\"}}\"}}],[\"contracts/2023-07-22T14:43:15.941Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T14:43:15.941Z.txt\",\"text\":\"[{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-753491-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader I\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[55,2,86,172,107,98,152,148,14,103,31,116,22,49],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 55,2,86,172,107,98,152,148,14,103,31,116,22,49\\\\n\\\\n Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\\"}]\"}}],[\"contracts/2023-07-22T14:56:24.747Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T14:56:24.747Z.txt\",\"text\":\"[{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-847565-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"215407675\\\",-39],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 215407675\\\\n\\\\n You are also given a target number of -39. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"215407675\\\\\\\", -39]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-372294-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":193172784,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 193172784?\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-355180.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2619,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2619 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"contracts/2023-07-22T19:15:14.104Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T19:15:14.104Z.txt\",\"text\":\"[{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-847565-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"215407675\\\",-39],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 215407675\\\\n\\\\n You are also given a target number of -39. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"215407675\\\\\\\", -39]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-372294-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":193172784,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 193172784?\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-355180.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2619,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2619 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"analytics/2023-07-22-14-28-NWO-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-22-14-28-NWO-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-22T18:07:08.879Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-22T18:07:08.879Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-22T18:07:08.879Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5250000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-22T18:07:08.880Z\\\"},\\\"augsBought\\\":[\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\"],\\\"moneySpent\\\":{\\\"augments\\\":1281000000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":429379128590.6032,\\\"repPurchased\\\":93720000000},\\\"moneyLeft\\\":275337831020.79755,\\\"lastSaved\\\":\\\"2023-07-22T19:28:26.372Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5250000,\\\"currentFactionRep\\\":85420.86318980539,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-22T19:27:56.980Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$1,379,208,116,078.57\\\",\\\"moneyRightNow\\\":\\\"$592.87\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,281,000,000.00\\\",\\\"time\\\":\\\"2023-07-22T19:27:56.981Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$1,287,219,116,506.24\\\",\\\"moneyRightNow\\\":\\\"$799,717,959,611.40\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,281,000,000.00\\\",\\\"time\\\":\\\"2023-07-22T19:28:26.347Z\\\"}}\"}}],[\"contracts/2023-07-22T19:28:28.997Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T19:28:28.997Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-816744.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[5],[7,3],[2,9,6],[2,7,6,6],[9,1,9,5,9],[8,3,8,4,4,5],[6,2,5,4,4,7,1],[4,6,5,4,2,7,4,7],[8,9,5,6,1,3,5,5,5]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,9,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,6,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,1,9,5,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,3,8,4,4,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[6,2,5,4,4,7,1],\\\\n&nbsp;&nbsp;&nbsp;[4,6,5,4,2,7,4,7],\\\\n&nbsp;&nbsp;[8,9,5,6,1,3,5,5,5]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-751646.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":1771645887127,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 1771645887127 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-825287-BladeIndustries.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[14,10],\\\"description\\\":\\\"You are in a grid with 14 rows and 10 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [14, 10]\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-829370-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,1,1],[0,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,0,0,0,0,0,\\\\n0,0,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n1,1,0,0,0,0,0,1,1,\\\\n0,0,0,0,1,0,0,0,0,\\\\n0,0,1,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,1,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"}]\"}}],[\"analytics/2023-07-22-17-47-OmniTekIncorporated-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-22-17-47-OmniTekIncorporated-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-22T21:38:23.035Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-22T21:38:23.035Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"OmniTek Incorporated\\\",\\\"firstTime\\\":\\\"2023-07-22T21:38:23.035Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-22T21:38:23.035Z\\\"},\\\"augsBought\\\":[\\\"Augmented Targeting III\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\"],\\\"moneySpent\\\":{\\\"augments\\\":1184325000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":492252175215.5397,\\\"repPurchased\\\":273260000000},\\\"moneyLeft\\\":1105056896.8406372,\\\"lastSaved\\\":\\\"2023-07-22T22:47:33.683Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":85407.69418403886,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-22T22:43:45.648Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$668,528,618,551.94\\\",\\\"moneyRightNow\\\":\\\"$36,502,335,303.15\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,184,325,000.00\\\",\\\"time\\\":\\\"2023-07-22T22:43:45.648Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$766,198,261,105.09\\\",\\\"moneyRightNow\\\":\\\"$767,801,557,112.38\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,184,325,000.00\\\",\\\"time\\\":\\\"2023-07-22T22:47:33.635Z\\\"}}\"}}],[\"contracts/2023-07-22T22:47:36.350Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T22:47:36.350Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-582184.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,-8,4,-2,-7,5,5,-7,1,3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,-8,4,-2,-7,5,5,-7,1,3\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-471181.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[9,6,2,1,4,4,0,10],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 9,6,2,1,4,4,0,10\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-690374.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"axRv7rLNcTMzusBusBusBusBusBsBusBusBBsBusBuL4sBusBuL4szlzlzlzlzl4kY0KcHFl4kY0KcHF6OHF6OHF6OHieR\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; axRv7rLNcTMzusBusBusBusBusBsBusBusBBsBusBuL4sBusBuL4szlzlzlzlzl4kY0KcHFl4kY0KcHF6OHF6OHF6OHieR\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-379736-Sector12.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"))))((a((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ))))((a((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-741659.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[3,6],[0,6],[1,2],[0,8],[4,7],[5,6],[1,3],[4,5],[7,8],[3,4],[3,8],[1,6],[5,8],[1,8],[6,7],[2,3]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[3,6],[0,6],[1,2],[0,8],[4,7],[5,6],[1,3],[4,5],[7,8],[3,4],[3,8],[1,6],[5,8],[1,8],[6,7],[2,3]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-274629.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[6,7,6,5,1,-9,-9,6,9,3,-5,1,2,1,10,6,-1,9,6,7,-10,5,8,2,2,-4,-2,-3,-3,-3,-5,7,-5,-10,8,-8,-6,5,10],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 6,7,6,5,1,-9,-9,6,9,3,-5,1,2,1,10,6,-1,9,6,7,-10,5,8,2,2,-4,-2,-3,-3,-3,-5,7,-5,-10,8,-8,-6,5,10\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-575293.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[9,0,5,9,0,0,3,0,3,4,2,5,1,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 9,0,5,9,0,0,3,0,3,4,2,5,1,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-967890.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":312328765,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 312328765?\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-588254.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"5725283224\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 5725283224\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-67120.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"4281543629\\\",58],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 4281543629\\\\n\\\\n You are also given a target number of 58. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"4281543629\\\\\\\", 58]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-5790.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"NMGpXdr41IG3cxkxGj6fNOtOtOtOsssssstssstsssDvP4QsssDvP4Cl3fsDK7yad0dXd\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; NMGpXdr41IG3cxkxGj6fNOtOtOtOsssssstssstsssDvP4QsssDvP4Cl3fsDK7yad0dXd\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-776549-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,1,0,1,0,0,0,1],[0,0,0,1,0,0,0,0],[1,0,0,0,1,1,0,0],[0,1,1,0,0,1,1,0],[0,0,0,0,0,0,0,0],[1,0,0,0,0,1,0,0],[0,0,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,\\\\n0,1,0,1,0,0,0,1,\\\\n0,0,0,1,0,0,0,0,\\\\n1,0,0,0,1,1,0,0,\\\\n0,1,1,0,0,1,1,0,\\\\n0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,1,0,0,\\\\n0,0,0,0,0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-908432-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[1,4,5,5,1,1,3,2,4,3,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,4,5,5,1,1,3,2,4,3,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-618789.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[152,[1,2,3,5,6,7,9,10,12,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 152 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,3,5,6,7,9,10,12,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"}]\"}}],[\"analytics/2023-07-23-11-59-ECorp-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-23-11-59-ECorp-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-23T00:56:11.917Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-23T00:56:11.917Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Blade Industries\\\",\\\"firstTime\\\":\\\"2023-07-23T00:56:11.917Z\\\"},{\\\"factionToMax\\\":\\\"ECorp\\\",\\\"firstTime\\\":\\\"2023-07-23T14:49:04.700Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-23T00:56:11.917Z\\\"},\\\"augsBought\\\":[\\\"Hydroflame Left Arm\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"ECorp HVMind Implant\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"BitRunners Neurolink\\\",\\\"Xanipher\\\",\\\"Artificial Bio-neural Network Implant\\\",\\\"Neotra\\\",\\\"Synthetic Heart\\\",\\\"OmniTek InfoLoad\\\",\\\"SmartJaw\\\",\\\"HyperSight Corneal Implant\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"Neural Accelerator\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"Synfibril Muscle\\\"],\\\"moneySpent\\\":{\\\"augments\\\":3523374747269026.5,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":11334270935597.5,\\\"lastSaved\\\":\\\"2023-07-23T16:59:30.520Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":85453.09018885919,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-23T01:53:57.167Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$2,308,060,639,891.18\\\",\\\"moneyRightNow\\\":\\\"$233,863,763,984.28\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,059,000,000.00\\\",\\\"time\\\":\\\"2023-07-23T02:07:05.581Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$2,308,060,639,891.18\\\",\\\"moneyRightNow\\\":\\\"$1,837,790,952,925.58\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,059,000,000.00\\\",\\\"time\\\":\\\"2023-07-23T02:07:10.071Z\\\"}}\"}}],[\"analytics/2023-07-23-12-00-Daedalus-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-23-12-00-Daedalus-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-23T17:00:28.477Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-23T17:00:28.477Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Daedalus\\\",\\\"firstTime\\\":\\\"2023-07-23T17:00:28.477Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":7500000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-23T17:00:28.477Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"PCMatrix\\\",\\\"The Red Pill\\\"],\\\"moneySpent\\\":{\\\"augments\\\":133051500000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":45584400824051.39,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":40791342748081.83,\\\"lastSaved\\\":\\\"2023-07-23T17:00:34.804Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":7500000,\\\"currentFactionRep\\\":7500126.051371851,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-23T17:00:30.625Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$84,474,904,563,461.88\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$133,051,500,000.00\\\",\\\"time\\\":\\\"2023-07-23T17:00:30.625Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$86,508,795,072,133.22\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$133,051,500,000.00\\\",\\\"time\\\":\\\"2023-07-23T17:00:34.804Z\\\"}}\"}}],[\"analytics/end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-23T17:03:10.432Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-23T17:03:10.432Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Illuminati\\\",\\\"firstTime\\\":\\\"2023-07-23T17:03:10.432Z\\\"},{\\\"factionToMax\\\":\\\"CyberSec\\\",\\\"firstTime\\\":\\\"2023-07-24T11:47:54.128Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5625000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-23T17:03:10.432Z\\\"},\\\"augsBought\\\":[],\\\"moneySpent\\\":{\\\"augments\\\":0,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":0,\\\"lastSaved\\\":\\\"2023-07-24T11:49:16.382Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5625000,\\\"currentFactionRep\\\":5625265.904895162,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-23T17:03:12.454Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$13,900,414,011,565,530.00\\\",\\\"moneyRightNow\\\":\\\"$228,017,966,566,475.30\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$75,000,285,000,000.00\\\",\\\"time\\\":\\\"2023-07-23T17:03:12.454Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$13,900,414,011,565,530.00\\\",\\\"moneyRightNow\\\":\\\"$231,548,724,433,651.28\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$75,000,285,000,000.00\\\",\\\"time\\\":\\\"2023-07-23T17:03:16.593Z\\\"}}\"}}],[\"contracts/2023-07-23T16:59:33.190Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-23T16:59:33.190Z.txt\",\"text\":\"[{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T15:25:43.759Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T15:25:43.759Z.txt\",\"text\":\"[{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T16:11:41.072Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T16:11:41.072Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T16:28:22.611Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T16:28:22.611Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T17:40:18.455Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T17:40:18.455Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T18:07:17.894Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T18:07:17.894Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T18:23:10.151Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T18:23:10.151Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T19:23:40.991Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T19:23:40.991Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T22:15:59.703Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T22:15:59.703Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T23:19:05.118Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T23:19:05.118Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-931933.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-997451-Chongqing.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-25T11:22:07.755Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-25T11:22:07.755Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-727697.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[7,2],[5,4,2],[5,1,6,1],[5,7,2,1,6],[5,5,3,1,7,1],[2,7,9,7,2,8,2],[7,7,8,3,4,8,3,7],[1,7,5,4,2,4,3,6,6],[3,3,5,4,3,4,5,8,7,1]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,1,6,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,2,1,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,5,3,1,7,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,9,7,2,8,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,7,8,3,4,8,3,7],\\\\n&nbsp;&nbsp;&nbsp;[1,7,5,4,2,4,3,6,6],\\\\n&nbsp;&nbsp;[3,3,5,4,3,4,5,8,7,1]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-487301.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-51402-NiteSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[6,9],\\\"description\\\":\\\"You are in a grid with 6 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [6, 9]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-757402-ECorp.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 9. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-988660.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":159120851,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 159120851?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-426113-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-931933.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-10960-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-408932-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-663748.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-7,-5,4,0,-4,3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -7,-5,4,0,-4,3\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-321164.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":94,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 94 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-997451-Chongqing.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9\\\"},{\\\"server\\\":\\\"stormtech\\\",\\\"name\\\":\\\"contract-554970-CyberSec.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-364593-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[15,[1,2,4,5,6,9,10,11,12,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 15 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,6,9,10,11,12,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-990335-NWO.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100100010000000100000001100110001011100011111110100010101110100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100100010000000100000001100110001011100011111110100010101110100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"}]\"}}],[\"contracts/2023-07-25T11:26:58.539Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-25T11:26:58.539Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-727697.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[7,2],[5,4,2],[5,1,6,1],[5,7,2,1,6],[5,5,3,1,7,1],[2,7,9,7,2,8,2],[7,7,8,3,4,8,3,7],[1,7,5,4,2,4,3,6,6],[3,3,5,4,3,4,5,8,7,1]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,1,6,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,2,1,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,5,3,1,7,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,9,7,2,8,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,7,8,3,4,8,3,7],\\\\n&nbsp;&nbsp;&nbsp;[1,7,5,4,2,4,3,6,6],\\\\n&nbsp;&nbsp;[3,3,5,4,3,4,5,8,7,1]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-487301.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-51402-NiteSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[6,9],\\\"description\\\":\\\"You are in a grid with 6 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [6, 9]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-757402-ECorp.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 9. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-988660.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":159120851,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 159120851?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-426113-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-931933.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-10960-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-408932-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-663748.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-7,-5,4,0,-4,3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -7,-5,4,0,-4,3\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-321164.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":94,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 94 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-997451-Chongqing.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9\\\"},{\\\"server\\\":\\\"stormtech\\\",\\\"name\\\":\\\"contract-554970-CyberSec.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-364593-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[15,[1,2,4,5,6,9,10,11,12,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 15 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,6,9,10,11,12,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-990335-NWO.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100100010000000100000001100110001011100011111110100010101110100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100100010000000100000001100110001011100011111110100010101110100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"}]\"}}],[\"contracts/2023-07-25T11:57:10.456Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-25T11:57:10.456Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-727697.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[7,2],[5,4,2],[5,1,6,1],[5,7,2,1,6],[5,5,3,1,7,1],[2,7,9,7,2,8,2],[7,7,8,3,4,8,3,7],[1,7,5,4,2,4,3,6,6],[3,3,5,4,3,4,5,8,7,1]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,1,6,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,2,1,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,5,3,1,7,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,9,7,2,8,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,7,8,3,4,8,3,7],\\\\n&nbsp;&nbsp;&nbsp;[1,7,5,4,2,4,3,6,6],\\\\n&nbsp;&nbsp;[3,3,5,4,3,4,5,8,7,1]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-46182.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":66,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 66 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-487301.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-51402-NiteSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[6,9],\\\"description\\\":\\\"You are in a grid with 6 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [6, 9]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-757402-ECorp.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 9. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-988660.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":159120851,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 159120851?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-426113-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-931933.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-10960-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-408932-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-663748.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-7,-5,4,0,-4,3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -7,-5,4,0,-4,3\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-321164.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":94,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 94 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-997451-Chongqing.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9\\\"},{\\\"server\\\":\\\"stormtech\\\",\\\"name\\\":\\\"contract-554970-CyberSec.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-364593-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[15,[1,2,4,5,6,9,10,11,12,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 15 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,6,9,10,11,12,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-990335-NWO.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100100010000000100000001100110001011100011111110100010101110100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100100010000000100000001100110001011100011111110100010101110100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"}]\"}}],[\"data/memoryStarvedQueue.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/memoryStarvedQueue.txt\",\"text\":\"[]\"}}],[\"data/ramObservations.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/ramObservations.txt\",\"text\":\"[21558.25]\"}}],[\"data/factionToMax.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/factionToMax.txt\",\"text\":\"CyberSec\"}}],[\"data/contracts.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/contracts.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-727697.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[7,2],[5,4,2],[5,1,6,1],[5,7,2,1,6],[5,5,3,1,7,1],[2,7,9,7,2,8,2],[7,7,8,3,4,8,3,7],[1,7,5,4,2,4,3,6,6],[3,3,5,4,3,4,5,8,7,1]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,1,6,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,2,1,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,5,3,1,7,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,9,7,2,8,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,7,8,3,4,8,3,7],\\\\n&nbsp;&nbsp;&nbsp;[1,7,5,4,2,4,3,6,6],\\\\n&nbsp;&nbsp;[3,3,5,4,3,4,5,8,7,1]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-46182.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":66,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 66 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-487301.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-51402-NiteSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[6,9],\\\"description\\\":\\\"You are in a grid with 6 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [6, 9]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-757402-ECorp.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 9. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-988660.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":159120851,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 159120851?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-426113-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-931933.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-10960-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-408932-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-663748.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-7,-5,4,0,-4,3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -7,-5,4,0,-4,3\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-321164.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":94,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 94 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-997451-Chongqing.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9\\\"},{\\\"server\\\":\\\"stormtech\\\",\\\"name\\\":\\\"contract-554970-CyberSec.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-364593-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[15,[1,2,4,5,6,9,10,11,12,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 15 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,6,9,10,11,12,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-990335-NWO.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100100010000000100000001100110001011100011111110100010101110100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100100010000000100000001100110001011100011111110100010101110100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"}]\"}}],[\"contracts/2023-07-25T12:28:00.619Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-25T12:28:00.619Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-727697.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[7,2],[5,4,2],[5,1,6,1],[5,7,2,1,6],[5,5,3,1,7,1],[2,7,9,7,2,8,2],[7,7,8,3,4,8,3,7],[1,7,5,4,2,4,3,6,6],[3,3,5,4,3,4,5,8,7,1]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,1,6,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,2,1,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,5,3,1,7,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,9,7,2,8,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,7,8,3,4,8,3,7],\\\\n&nbsp;&nbsp;&nbsp;[1,7,5,4,2,4,3,6,6],\\\\n&nbsp;&nbsp;[3,3,5,4,3,4,5,8,7,1]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-46182.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":66,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 66 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-487301.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-51402-NiteSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[6,9],\\\"description\\\":\\\"You are in a grid with 6 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [6, 9]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-757402-ECorp.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 9. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-988660.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":159120851,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 159120851?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-426113-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-931933.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-10960-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-408932-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-663748.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-7,-5,4,0,-4,3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -7,-5,4,0,-4,3\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-321164.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":94,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 94 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-997451-Chongqing.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9\\\"},{\\\"server\\\":\\\"stormtech\\\",\\\"name\\\":\\\"contract-554970-CyberSec.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-364593-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[15,[1,2,4,5,6,9,10,11,12,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 15 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,6,9,10,11,12,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-990335-NWO.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100100010000000100000001100110001011100011111110100010101110100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100100010000000100000001100110001011100011111110100010101110100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"}]\"}}],[\"data/factionsWithAugsToBuyAndNotEnoughtFavor.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/factionsWithAugsToBuyAndNotEnoughtFavor.txt\",\"text\":\"[{\\\"faction\\\":\\\"CyberSec\\\",\\\"maximumAugRep\\\":56250},{\\\"faction\\\":\\\"NiteSec\\\",\\\"maximumAugRep\\\":150000},{\\\"faction\\\":\\\"Chongqing\\\",\\\"maximumAugRep\\\":112500}]\"}}],[\"data/organizations.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/organizations.txt\",\"text\":\"{\\\"toJoinInOrderInWhichIWantToComplete\\\":[\\\"CyberSec\\\",\\\"NiteSec\\\",\\\"Chongqing\\\",\\\"The Black Hand\\\",\\\"Bachman & Associates\\\",\\\"BitRunners\\\",\\\"Daedalus\\\",\\\"NWO\\\",\\\"OmniTek Incorporated\\\",\\\"Blade Industries\\\",\\\"ECorp\\\",\\\"Illuminati\\\",\\\"Aevum\\\",\\\"Volhaven\\\",\\\"New Tokyo\\\",\\\"Ishima\\\",\\\"Tian Di Hui\\\",\\\"Netburners\\\"],\\\"companiesWeWantToBecomePartOf\\\":[\\\"Bachman & Associates\\\",\\\"NWO\\\",\\\"OmniTek Incorporated\\\",\\\"Blade Industries\\\",\\\"ECorp\\\"],\\\"doNoWorkFor\\\":[\\\"Aevum\\\",\\\"Volhaven\\\",\\\"New Tokyo\\\",\\\"Ishima\\\",\\\"Tian Di Hui\\\",\\\"Netburners\\\"],\\\"stopAtAugments\\\":[{\\\"final\\\":true,\\\"faction\\\":\\\"Chongqing\\\",\\\"augmentToStopAt\\\":\\\"Neuregen Gene Modification\\\"},{\\\"final\\\":true,\\\"faction\\\":\\\"NiteSec\\\",\\\"augmentToStopAt\\\":\\\"Cranial Signal Processors - Gen III\\\"},{\\\"final\\\":true,\\\"faction\\\":\\\"The Black Hand\\\",\\\"augmentToStopAt\\\":\\\"Cranial Signal Processors - Gen IV\\\"}]}\"}}],[\"data/enviroment.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/enviroment.txt\",\"text\":\"[{\\\"name\\\":\\\"n00dles\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"n00dles\\\",\\\"ip\\\":\\\"42.0.6.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":3.5,\\\"maxRam\\\":4,\\\"organizationName\\\":\\\"Noodle Bar\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":4.002000000000001,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":51513,\\\"moneyMax\\\":70000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":3000}},{\\\"name\\\":\\\"foodnstuff\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"foodnstuff\\\",\\\"ip\\\":\\\"10.5.2.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"FoodNStuff\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":10,\\\"hackDifficulty\\\":35.056000000000004,\\\"minDifficulty\\\":3,\\\"moneyAvailable\\\":172456.88650306631,\\\"moneyMax\\\":2000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":5}},{\\\"name\\\":\\\"sigma-cosmetics\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"sigma-cosmetics\\\",\\\"ip\\\":\\\"0.6.7.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Sigma Cosmetics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":10,\\\"hackDifficulty\\\":3.972,\\\"minDifficulty\\\":3,\\\"moneyAvailable\\\":614428.1638694205,\\\"moneyMax\\\":2300000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":5,\\\"serverGrowth\\\":10}},{\\\"name\\\":\\\"joesguns\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"joesguns\\\",\\\"ip\\\":\\\"13.4.5.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Joe's Guns\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":93.8,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":2500000,\\\"moneyMax\\\":2500000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":10,\\\"serverGrowth\\\":20}},{\\\"name\\\":\\\"hong-fang-tea\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"hong-fang-tea\\\",\\\"ip\\\":\\\"87.8.6.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"HongFang Teahouse\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":100,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":2964371.164055575,\\\"moneyMax\\\":3000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":30,\\\"serverGrowth\\\":20}},{\\\"name\\\":\\\"harakiri-sushi\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"harakiri-sushi\\\",\\\"ip\\\":\\\"94.1.4.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"HaraKiri Sushi Bar Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":61.202,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":4000000,\\\"moneyMax\\\":4000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":40,\\\"serverGrowth\\\":40}},{\\\"name\\\":\\\"iron-gym\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"iron-gym\\\",\\\"ip\\\":\\\"64.9.4.4\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Iron Gym Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":30,\\\"hackDifficulty\\\":10,\\\"minDifficulty\\\":10,\\\"moneyAvailable\\\":11250584.134062514,\\\"moneyMax\\\":20000000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":100,\\\"serverGrowth\\\":20}},{\\\"name\\\":\\\"darkweb\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"darkweb\\\",\\\"ip\\\":\\\"84.2.1.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"darkweb\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"CLOUD-000\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"CLOUD-000\\\",\\\"ip\\\":\\\"0.7.4.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":65535.75,\\\"maxRam\\\":65536,\\\"organizationName\\\":\\\"\\\",\\\"purchasedByPlayer\\\":true,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"zer0\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"zer0\\\",\\\"ip\\\":\\\"45.3.0.8\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"ZER0 Nightclub\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":25,\\\"hackDifficulty\\\":8.968,\\\"minDifficulty\\\":8,\\\"moneyAvailable\\\":4440347.868540766,\\\"moneyMax\\\":7500000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":75,\\\"serverGrowth\\\":40}},{\\\"name\\\":\\\"nectar-net\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"nectar-net\\\",\\\"ip\\\":\\\"83.6.6.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Nectar Nightclub Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":20,\\\"hackDifficulty\\\":72.69600000000003,\\\"minDifficulty\\\":7,\\\"moneyAvailable\\\":2154131.5703422353,\\\"moneyMax\\\":2750000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":20,\\\"serverGrowth\\\":25}},{\\\"name\\\":\\\"silver-helix\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"silver-helix\\\",\\\"ip\\\":\\\"10.5.6.0\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":63,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Silver Helix\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":30,\\\"hackDifficulty\\\":10,\\\"minDifficulty\\\":10,\\\"moneyAvailable\\\":18107737.383234084,\\\"moneyMax\\\":45000000,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":150,\\\"serverGrowth\\\":30}},{\\\"name\\\":\\\"computek\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"computek\\\",\\\"ip\\\":\\\"84.5.9.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"CompuTek\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":63,\\\"hackDifficulty\\\":63,\\\"minDifficulty\\\":21,\\\"moneyAvailable\\\":49156514.800000004,\\\"moneyMax\\\":245782574,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":399,\\\"serverGrowth\\\":52}},{\\\"name\\\":\\\"netlink\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"netlink\\\",\\\"ip\\\":\\\"32.7.0.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"NetLink Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":68,\\\"hackDifficulty\\\":68,\\\"minDifficulty\\\":23,\\\"moneyAvailable\\\":55000000,\\\"moneyMax\\\":275000000,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":418,\\\"serverGrowth\\\":60}},{\\\"name\\\":\\\"johnson-ortho\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"johnson-ortho\\\",\\\"ip\\\":\\\"46.6.3.7\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":true,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Johnson Orthopedics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":49,\\\"hackDifficulty\\\":49,\\\"minDifficulty\\\":16,\\\"moneyAvailable\\\":15938206.8,\\\"moneyMax\\\":79691034,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":3,\\\"requiredHackingSkill\\\":299,\\\"serverGrowth\\\":42}},{\\\"name\\\":\\\"avmnite-02h\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"avmnite-02h\\\",\\\"ip\\\":\\\"98.1.8.4\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":127.75,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"NiteSec\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":216,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"rothman-uni\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"rothman-uni\\\",\\\"ip\\\":\\\"39.8.4.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Rothman University\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":55,\\\"hackDifficulty\\\":55,\\\"minDifficulty\\\":18,\\\"moneyAvailable\\\":35412301.800000004,\\\"moneyMax\\\":177061509,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":413,\\\"serverGrowth\\\":39}},{\\\"name\\\":\\\"alpha-ent\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"alpha-ent\\\",\\\"ip\\\":\\\"0.4.0.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Alpha Enterprises\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":53,\\\"hackDifficulty\\\":53,\\\"minDifficulty\\\":18,\\\"moneyAvailable\\\":137469858.6,\\\"moneyMax\\\":687349293,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":502,\\\"serverGrowth\\\":58}},{\\\"name\\\":\\\"aevum-police\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"aevum-police\\\",\\\"ip\\\":\\\"97.8.4.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Aevum Police Headquarters\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":75,\\\"hackDifficulty\\\":75,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":41959730.6,\\\"moneyMax\\\":209798653,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":427,\\\"serverGrowth\\\":39}},{\\\"name\\\":\\\"galactic-cyber\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"galactic-cyber\\\",\\\"ip\\\":\\\"31.7.7.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Galactic Cybersystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":60,\\\"hackDifficulty\\\":60,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":157845129.8,\\\"moneyMax\\\":789225649,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":837,\\\"serverGrowth\\\":75}},{\\\"name\\\":\\\"unitalife\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"unitalife\\\",\\\"ip\\\":\\\"5.4.0.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"UnitaLife Group\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":79,\\\"hackDifficulty\\\":79,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":208695086.60000002,\\\"moneyMax\\\":1043475433,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":782,\\\"serverGrowth\\\":75}},{\\\"name\\\":\\\"icarus\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"icarus\\\",\\\"ip\\\":\\\"18.5.1.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Icarus Microsystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":87,\\\"hackDifficulty\\\":87,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":180810429.60000002,\\\"moneyMax\\\":904052148,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":859,\\\"serverGrowth\\\":87}},{\\\"name\\\":\\\"univ-energy\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"univ-energy\\\",\\\"ip\\\":\\\"56.1.1.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Universal Energy\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":89,\\\"hackDifficulty\\\":89,\\\"minDifficulty\\\":30,\\\"moneyAvailable\\\":223326967.8,\\\"moneyMax\\\":1116634839,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":831,\\\"serverGrowth\\\":81}},{\\\"name\\\":\\\"solaris\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"solaris\\\",\\\"ip\\\":\\\"72.8.9.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Solaris Space Systems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":70,\\\"hackDifficulty\\\":70,\\\"minDifficulty\\\":23,\\\"moneyAvailable\\\":159280367.6,\\\"moneyMax\\\":796401838,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":839,\\\"serverGrowth\\\":73}},{\\\"name\\\":\\\"taiyang-digital\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"taiyang-digital\\\",\\\"ip\\\":\\\"68.6.2.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Taiyang Digital\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":77,\\\"hackDifficulty\\\":77,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":172440843.4,\\\"moneyMax\\\":862204217,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":875,\\\"serverGrowth\\\":80}},{\\\"name\\\":\\\"titan-labs\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"titan-labs\\\",\\\"ip\\\":\\\"95.6.0.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Titan Laboratories\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":72,\\\"hackDifficulty\\\":72,\\\"minDifficulty\\\":24,\\\"moneyAvailable\\\":154487552.4,\\\"moneyMax\\\":772437762,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":865,\\\"serverGrowth\\\":74}},{\\\"name\\\":\\\"run4theh111z\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"run4theh111z\\\",\\\"ip\\\":\\\"2.4.5.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"The Runners\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":520,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"fulcrumtech\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"fulcrumtech\\\",\\\"ip\\\":\\\"46.2.3.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":1024,\\\"organizationName\\\":\\\"Fulcrum Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":94,\\\"hackDifficulty\\\":94,\\\"minDifficulty\\\":31,\\\"moneyAvailable\\\":340802285.40000004,\\\"moneyMax\\\":1704011427,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1036,\\\"serverGrowth\\\":91}},{\\\"name\\\":\\\"helios\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"helios\\\",\\\"ip\\\":\\\"61.6.9.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Helios Labs\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":94,\\\"hackDifficulty\\\":94,\\\"minDifficulty\\\":31,\\\"moneyAvailable\\\":125210190.60000001,\\\"moneyMax\\\":626050953,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":861,\\\"serverGrowth\\\":73}},{\\\"name\\\":\\\"vitalife\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"vitalife\\\",\\\"ip\\\":\\\"99.7.9.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"VitaLife\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":87,\\\"hackDifficulty\\\":87,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":158737226.8,\\\"moneyMax\\\":793686134,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":784,\\\"serverGrowth\\\":68}},{\\\"name\\\":\\\"kuai-gong\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"vitalife\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"kuai-gong\\\",\\\"ip\\\":\\\"26.1.2.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"KuaiGong International\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":95,\\\"hackDifficulty\\\":95,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":5980051534.400001,\\\"moneyMax\\\":29900257672,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1082,\\\"serverGrowth\\\":93}},{\\\"name\\\":\\\"clarkinc\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"vitalife\\\",\\\"kuai-gong\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"clarkinc\\\",\\\"ip\\\":\\\"25.5.9.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Clarke Incorporated\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":55,\\\"hackDifficulty\\\":55,\\\"minDifficulty\\\":18,\\\"moneyAvailable\\\":4799026376,\\\"moneyMax\\\":23995131880,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1024,\\\"serverGrowth\\\":62}},{\\\"name\\\":\\\"powerhouse-fitness\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"vitalife\\\",\\\"kuai-gong\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"powerhouse-fitness\\\",\\\"ip\\\":\\\"43.4.6.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Powerhouse Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":60,\\\"hackDifficulty\\\":60,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":180000000,\\\"moneyMax\\\":900000000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1012,\\\"serverGrowth\\\":56}},{\\\"name\\\":\\\"4sigma\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"helios\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"4sigma\\\",\\\"ip\\\":\\\"81.0.7.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Four Sigma\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":70,\\\"hackDifficulty\\\":70,\\\"minDifficulty\\\":23,\\\"moneyAvailable\\\":3338986017.4,\\\"moneyMax\\\":16694930087,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1032,\\\"serverGrowth\\\":95}},{\\\"name\\\":\\\"b-and-a\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"helios\\\",\\\"4sigma\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"b-and-a\\\",\\\"ip\\\":\\\"73.2.5.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Bachman & Associates\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":75,\\\"hackDifficulty\\\":75,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":3866198594.6000004,\\\"moneyMax\\\":19330992973,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1090,\\\"serverGrowth\\\":77}},{\\\"name\\\":\\\"megacorp\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"helios\\\",\\\"4sigma\\\",\\\"b-and-a\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"megacorp\\\",\\\"ip\\\":\\\"85.5.4.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"MegaCorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":9031935412.6,\\\"moneyMax\\\":45159677063,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1301,\\\"serverGrowth\\\":99}},{\\\"name\\\":\\\"fulcrumassets\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"helios\\\",\\\"4sigma\\\",\\\"b-and-a\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"fulcrumassets\\\",\\\"ip\\\":\\\"3.7.1.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Fulcrum Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":200000,\\\"moneyMax\\\":1000000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1386,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"omnitek\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"omnitek\\\",\\\"ip\\\":\\\"57.8.8.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":512,\\\"organizationName\\\":\\\"OmniTek Incorporated\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":96,\\\"hackDifficulty\\\":96,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":3965703763,\\\"moneyMax\\\":19828518815,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1022,\\\"serverGrowth\\\":96}},{\\\"name\\\":\\\"blade\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"omnitek\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"blade\\\",\\\"ip\\\":\\\"71.7.6.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Blade Industries\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":96,\\\"hackDifficulty\\\":96,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":5902648362.8,\\\"moneyMax\\\":29513241814,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1189,\\\"serverGrowth\\\":62}},{\\\"name\\\":\\\"ecorp\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"omnitek\\\",\\\"blade\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"ecorp\\\",\\\"ip\\\":\\\"25.6.8.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"ECorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":12580011794.2,\\\"moneyMax\\\":62900058971,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1177,\\\"serverGrowth\\\":99}},{\\\"name\\\":\\\"The-Cave\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"omnitek\\\",\\\"blade\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"The-Cave\\\",\\\"ip\\\":\\\"66.2.3.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Helios\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":925,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"stormtech\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"titan-labs\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"stormtech\\\",\\\"ip\\\":\\\"45.6.9.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Storm Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":87,\\\"hackDifficulty\\\":87,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":207393733.20000002,\\\"moneyMax\\\":1036968666,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":996,\\\"serverGrowth\\\":83}},{\\\"name\\\":\\\".\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"titan-labs\\\",\\\"stormtech\\\"],\\\"server\\\":{\\\"hostname\\\":\\\".\\\",\\\"ip\\\":\\\"21.5.4.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\".\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":515,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"nwo\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"titan-labs\\\",\\\"stormtech\\\",\\\".\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"nwo\\\",\\\"ip\\\":\\\"6.9.4.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"NWO\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":5668064556.6,\\\"moneyMax\\\":28340322783,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1268,\\\"serverGrowth\\\":94}},{\\\"name\\\":\\\"I.I.I.I\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"I.I.I.I\\\",\\\"ip\\\":\\\"3.7.8.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"I.I.I.I\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":342,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"millenium-fitness\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"millenium-fitness\\\",\\\"ip\\\":\\\"19.8.7.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Millenium Fitness Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":55,\\\"hackDifficulty\\\":55,\\\"minDifficulty\\\":18,\\\"moneyAvailable\\\":50000000,\\\"moneyMax\\\":250000000,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":507,\\\"serverGrowth\\\":31}},{\\\"name\\\":\\\"snap-fitness\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"snap-fitness\\\",\\\"ip\\\":\\\"10.7.3.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Snap Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":45,\\\"hackDifficulty\\\":45,\\\"minDifficulty\\\":15,\\\"moneyAvailable\\\":90000000,\\\"moneyMax\\\":450000000,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":769,\\\"serverGrowth\\\":45}},{\\\"name\\\":\\\"omnia\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"omnia\\\",\\\"ip\\\":\\\"51.5.4.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Omnia Cybersystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":95,\\\"hackDifficulty\\\":95,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":186407601.8,\\\"moneyMax\\\":932038009,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":918,\\\"serverGrowth\\\":63}},{\\\"name\\\":\\\"defcomm\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"defcomm\\\",\\\"ip\\\":\\\"11.9.7.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"DefComm\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":86,\\\"hackDifficulty\\\":86,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":184069765.20000002,\\\"moneyMax\\\":920348826,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":893,\\\"serverGrowth\\\":69}},{\\\"name\\\":\\\"zeus-med\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"zeus-med\\\",\\\"ip\\\":\\\"75.9.5.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Zeus Medical\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":87,\\\"hackDifficulty\\\":87,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":289543677,\\\"moneyMax\\\":1447718385,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":817,\\\"serverGrowth\\\":76}},{\\\"name\\\":\\\"infocomm\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"zeus-med\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"infocomm\\\",\\\"ip\\\":\\\"10.3.9.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"InfoComm\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":83,\\\"hackDifficulty\\\":83,\\\"minDifficulty\\\":28,\\\"moneyAvailable\\\":160029464,\\\"moneyMax\\\":800147320,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":926,\\\"serverGrowth\\\":64}},{\\\"name\\\":\\\"nova-med\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"zeus-med\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"nova-med\\\",\\\"ip\\\":\\\"16.3.9.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Nova Medical\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":72,\\\"hackDifficulty\\\":72,\\\"minDifficulty\\\":24,\\\"moneyAvailable\\\":231833219.4,\\\"moneyMax\\\":1159166097,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":804,\\\"serverGrowth\\\":68}},{\\\"name\\\":\\\"microdyne\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"zeus-med\\\",\\\"infocomm\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"microdyne\\\",\\\"ip\\\":\\\"73.9.2.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Microdyne Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":72,\\\"hackDifficulty\\\":72,\\\"minDifficulty\\\":24,\\\"moneyAvailable\\\":107483560.2,\\\"moneyMax\\\":537417801,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":828,\\\"serverGrowth\\\":79}},{\\\"name\\\":\\\"applied-energetics\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"zeus-med\\\",\\\"infocomm\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"applied-energetics\\\",\\\"ip\\\":\\\"43.3.4.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Applied Energetics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":63,\\\"hackDifficulty\\\":63,\\\"minDifficulty\\\":21,\\\"moneyAvailable\\\":170924266.20000002,\\\"moneyMax\\\":854621331,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":791,\\\"serverGrowth\\\":75}},{\\\"name\\\":\\\"zb-def\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"defcomm\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"zb-def\\\",\\\"ip\\\":\\\"60.3.0.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"ZB Defense Industries\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":62,\\\"hackDifficulty\\\":62,\\\"minDifficulty\\\":21,\\\"moneyAvailable\\\":209964880.60000002,\\\"moneyMax\\\":1049824403,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":777,\\\"serverGrowth\\\":68}},{\\\"name\\\":\\\"syscore\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"computek\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"syscore\\\",\\\"ip\\\":\\\"41.2.7.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"SysCore Securities\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":65,\\\"hackDifficulty\\\":65,\\\"minDifficulty\\\":22,\\\"moneyAvailable\\\":117846055.4,\\\"moneyMax\\\":589230277,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":578,\\\"serverGrowth\\\":67}},{\\\"name\\\":\\\"CSEC\\\",\\\"lineage\\\":[\\\"joesguns\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"CSEC\\\",\\\"ip\\\":\\\"88.9.6.0\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":7,\\\"maxRam\\\":8,\\\"organizationName\\\":\\\"CyberSec\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":60,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"neo-net\\\",\\\"lineage\\\":[\\\"joesguns\\\",\\\"CSEC\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"neo-net\\\",\\\"ip\\\":\\\"72.1.9.8\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Neo Nightclub Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":25,\\\"hackDifficulty\\\":52.24400000000002,\\\"minDifficulty\\\":8,\\\"moneyAvailable\\\":48994.90042242674,\\\"moneyMax\\\":5000000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":50,\\\"serverGrowth\\\":25}},{\\\"name\\\":\\\"omega-net\\\",\\\"lineage\\\":[\\\"joesguns\\\",\\\"CSEC\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"omega-net\\\",\\\"ip\\\":\\\"37.8.2.8\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Omega Software\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":28,\\\"hackDifficulty\\\":16.584000000000007,\\\"minDifficulty\\\":9,\\\"moneyAvailable\\\":69977499,\\\"moneyMax\\\":69977499,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":202,\\\"serverGrowth\\\":38}},{\\\"name\\\":\\\"crush-fitness\\\",\\\"lineage\\\":[\\\"joesguns\\\",\\\"CSEC\\\",\\\"neo-net\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"crush-fitness\\\",\\\"ip\\\":\\\"39.2.4.5\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Crush Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":42,\\\"hackDifficulty\\\":16.69199999999999,\\\"minDifficulty\\\":14,\\\"moneyAvailable\\\":17103457.52328664,\\\"moneyMax\\\":49686168,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":225,\\\"serverGrowth\\\":28}},{\\\"name\\\":\\\"catalyst\\\",\\\"lineage\\\":[\\\"joesguns\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"crush-fitness\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"catalyst\\\",\\\"ip\\\":\\\"50.6.8.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Catalyst Ventures\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":66,\\\"hackDifficulty\\\":66,\\\"minDifficulty\\\":22,\\\"moneyAvailable\\\":77010199,\\\"moneyMax\\\":385050995,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":424,\\\"serverGrowth\\\":28}}]\"}}],[\"data/ramNeededToStartBatches.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/ramNeededToStartBatches.txt\",\"text\":\"38457\"}}],[\"data/ramToReserveOnHome.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/ramToReserveOnHome.txt\",\"text\":\"{\\\"ramToReserve\\\":1027.7,\\\"ramToReserveInLimitedEnvironment\\\":16.55,\\\"earlyGameLimiter\\\":\\\"scripts/stock/invest-in-stocks.js\\\"}\"}}],[\"data/ownedAugs.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/ownedAugs.txt\",\"text\":\"[]\"}}],[\"data/scriptsToRun.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/scriptsToRun.txt\",\"text\":\"[\\\"scripts/hacking/hack-all-machines.js\\\",\\\"scripts/precalculate-important-data.js\\\",\\\"scripts/script-registry.js\\\",\\\"scripts/stock/get-stock-quotes.js\\\",\\\"scripts/stock/second-part-of-quotes.js\\\",\\\"scripts/stock/populate-forecast.js\\\",\\\"scripts/stock/invest-in-stocks.js\\\",\\\"scripts/stock/buy-4s.js\\\",\\\"scripts/contracts/get.js\\\",\\\"scripts/contracts/populate-input.js\\\",\\\"scripts/contracts/populate-description.js\\\",\\\"scripts/contracts/do.js\\\",\\\"scripts/contracts/save-contracts-for-thomas.js\\\",\\\"scripts/singularity/apply-to-jobs.js\\\",\\\"scripts/singularity/do-work-get-augments.js\\\",\\\"scripts/singularity/backdoor-all-machines.js\\\",\\\"scripts/singularity/join-organziations.js\\\",\\\"scripts/singularity/do-work.js\\\",\\\"scripts/singularity/finish-round.js\\\",\\\"scripts/singularity/finish-bitnode.js\\\",\\\"scripts/singularity/study-computer-science.js\\\",\\\"scripts/singularity/create-early-programs.js\\\",\\\"scripts/singularity/do-job.js\\\",\\\"scripts/singularity/buy-rep.js\\\",\\\"scripts/singularity/workout.js\\\",\\\"scripts/singularity/upgade-home-machine.js\\\",\\\"scripts/singularity/travel-to-get-augs.js\\\",\\\"scripts/investments/invest-in-nodes.js\\\",\\\"scripts/investments/purchase-server.js\\\",\\\"scripts/investments/invest-in-programs.js\\\",\\\"scripts/corporations/invest.js\\\",\\\"scripts/corporations/start-company.js\\\",\\\"scripts/corporations/get-corporate-info.js\\\",\\\"scripts/corporations/add-supporting-material.js\\\",\\\"scripts/corporations/upgrade-offices.js\\\",\\\"scripts/corporations/upgrade-warehouse.js\\\",\\\"scripts/corporations/expand.js\\\",\\\"scripts/corporations/product-management.js\\\",\\\"scripts/corporations/research.js\\\",\\\"scripts/corporations/tea-party.js\\\",\\\"scripts/corporations/adjust-prices-export.js\\\",\\\"scripts/corporations/get-investments.js\\\",\\\"scripts/corporations/bribe-factions.js\\\",\\\"scripts/corporations/import-export.js\\\"]\"}}],[\"data/latestQuotes.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/latestQuotes.txt\",\"text\":\"[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15529.296548227347,\\\"ask\\\":15560.38623100658,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":15544.841389616964,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3229789098912901,\\\"bias\\\":0.17702109010870992},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27637.27383824237,\\\"ask\\\":27915.035384355357,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":27776.154611298865,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6521015545676575,\\\"bias\\\":0.1521015545676575},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74714.04136326844,\\\"ask\\\":75464.93625134148,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":75089.48880730497,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.369426183835732,\\\"bias\\\":0.130573816164268},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19057.836090317887,\\\"ask\\\":19134.22020290433,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":19096.02814661111,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3412440296415775,\\\"bias\\\":0.15875597035842248},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21009.87555938694,\\\"ask\\\":21263.515908192418,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":21136.69573378968,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3386106558090286,\\\"bias\\\":0.1613893441909714},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":53366.766352028404,\\\"ask\\\":53795.41507774751,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":53581.090714887956,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6216804974531704,\\\"bias\\\":0.12168049745317044},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":269664.8919932343,\\\"ask\\\":272375.09191276424,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":271019.99195299926,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5928210551462532,\\\"bias\\\":0.09282105514625316},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":47585.29687920657,\\\"ask\\\":48449.611050574604,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":48017.45396489059,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2515242107721726,\\\"bias\\\":0.24847578922782743},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":5679.829082784416,\\\"ask\\\":5714.010601838283,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":5696.919842311349,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4876677326084622,\\\"bias\\\":0.01233226739153781},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5497.036858335951,\\\"ask\\\":5563.3994763440305,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":5530.218167339991,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6073475111444817,\\\"bias\\\":0.10734751114448171},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":27374.676035797256,\\\"ask\\\":27816.203068632694,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":27595.439552214975,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6129344109304062,\\\"bias\\\":0.11293441093040624},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3787.48034571824,\\\"ask\\\":3848.568738391115,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":3818.0245420546776,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.556467021308899,\\\"bias\\\":0.056467021308899024},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19354.990284439653,\\\"ask\\\":19471.469664285825,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":19413.22997436274,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5705043300639379,\\\"bias\\\":0.07050433006393786},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":12938.364718922097,\\\"ask\\\":13199.745824354868,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":13069.055271638483,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.3900256223219783,\\\"bias\\\":0.1099743776780217},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17825.69426522237,\\\"ask\\\":17968.87253241291,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":17897.28339881764,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.4353137905390254,\\\"bias\\\":0.06468620946097459},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27698.943286743237,\\\"ask\\\":28089.462124622798,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":27894.20270568302,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4307402509902468,\\\"bias\\\":0.06925974900975318},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":32602.93609515436,\\\"ask\\\":33195.11858729641,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":32899.02734122539,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3787413652689821,\\\"bias\\\":0.12125863473101789},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":29781.065865622404,\\\"ask\\\":30020.271213940658,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":29900.66853978153,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41625550461037675,\\\"bias\\\":0.08374449538962325},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13706.272979130576,\\\"ask\\\":13844.024466358018,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":13775.148722744298,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5539983505935204,\\\"bias\\\":0.05399835059352043},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":50159.79237067343,\\\"ask\\\":51070.86831686124,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":50615.33034376734,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2992807,\\\"averageShortPrice\\\":109908.51066261921,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3413111458204775,\\\"bias\\\":0.1586888541795225},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":11069.240440353062,\\\"ask\\\":11292.861459350095,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":11181.050949851578,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5116488046617124,\\\"bias\\\":0.011648804661712364},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2409.7353757404885,\\\"ask\\\":2429.0906799633035,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":2419.413027851896,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44876872005564716,\\\"bias\\\":0.05123127994435284},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":130182.91033306118,\\\"ask\\\":133879.788111282,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":132031.3492221716,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5802934042574023,\\\"bias\\\":0.08029340425740228},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":181.66617412342853,\\\"ask\\\":184.2274293477266,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":182.94680173557757,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3095739486758449,\\\"bias\\\":0.19042605132415508},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13634.568906803823,\\\"ask\\\":13854.481308526465,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":13744.525107665144,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5574382975011478,\\\"bias\\\":0.05743829750114782},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":27.814735323512693,\\\"ask\\\":28.150526896834776,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":27.982631110173735,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5634337188932823,\\\"bias\\\":0.06343371889328231},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1277.8492065995497,\\\"ask\\\":1306.2745681214808,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":1292.0618873605154,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5684111055946963,\\\"bias\\\":0.06841110559469632},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5551.681342900635,\\\"ask\\\":5652.519147312553,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":5602.100245106594,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5589291708882933,\\\"bias\\\":0.0589291708882933},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":37166.37740671572,\\\"ask\\\":37993.13201030292,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":37579.754708509325,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42212944849236417,\\\"bias\\\":0.07787055150763583},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":33.28422535878425,\\\"ask\\\":33.753489361828535,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":33.51885736030639,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5558743071528658,\\\"bias\\\":0.05587430715286579},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":424.56946059554,\\\"ask\\\":432.28111578294636,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":428.4252881892432,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.637176315669889,\\\"bias\\\":0.13717631566988897},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7092.6182962602115,\\\"ask\\\":7149.58711791692,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":7121.102707088566,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.5783752673691643,\\\"bias\\\":0.07837526736916434},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22046.3731830503,\\\"ask\\\":22179.049450952305,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:10 AM\\\",\\\"price\\\":22112.711317001304,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.40536527942786676,\\\"bias\\\":0.09463472057213324}]\"}}],[\"data/stockHistory.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/stockHistory.txt\",\"text\":\"[[\\\"ECP\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15490.039358136388,\\\"ask\\\":15521.050447942464,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":15505.544903039427,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32342587518075605,\\\"bias\\\":0.17657412481924395},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15463.146190244872,\\\"ask\\\":15494.103439874989,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":15478.624815059931,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3237329690622752,\\\"bias\\\":0.17626703093772478},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15529.296548227347,\\\"ask\\\":15560.38623100658,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":15544.841389616964,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3229789098912901,\\\"bias\\\":0.17702109010870992}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[15505.544903039427,15478.624815059931,15544.841389616964]}],[\\\"MGCP\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27803.776111748455,\\\"ask\\\":28083.21104754492,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":27943.49357964669,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6524898239060825,\\\"bias\\\":0.15248982390608246},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27755.50434163196,\\\"ask\\\":28034.454134010168,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":27894.979237821066,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.652755030894725,\\\"bias\\\":0.15275503089472497},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27637.27383824237,\\\"ask\\\":27915.035384355357,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":27776.154611298865,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6521015545676575,\\\"bias\\\":0.1521015545676575}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[27943.49357964669,27894.979237821066,27776.154611298865]}],[\\\"BLD\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":75461.43729491647,\\\"ask\\\":76219.8436998905,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":75840.64049740348,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3688711797637863,\\\"bias\\\":0.1311288202362137},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":75244.3231966669,\\\"ask\\\":76000.54755040223,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":75622.43537353456,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.36849281347181095,\\\"bias\\\":0.13150718652818905},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74714.04136326844,\\\"ask\\\":75464.93625134148,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":75089.48880730497,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.369426183835732,\\\"bias\\\":0.130573816164268}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[75840.64049740348,75622.43537353456,75089.48880730497]}],[\\\"CLRK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19232.78085376718,\\\"ask\\\":19309.866147770255,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":19271.323500768718,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3397787787779245,\\\"bias\\\":0.1602212212220755},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19181.981324094115,\\\"ask\\\":19258.86301276784,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":19220.422168430978,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3402030917070327,\\\"bias\\\":0.15979690829296728},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19057.836090317887,\\\"ask\\\":19134.22020290433,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":19096.02814661111,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3412440296415775,\\\"bias\\\":0.15875597035842248}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[19271.323500768718,19220.422168430978,19096.02814661111]}],[\\\"OMTK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21093.293292511036,\\\"ask\\\":21347.94069644477,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":21220.616994477903,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.33796258210409746,\\\"bias\\\":0.16203741789590254},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21150.82203844548,\\\"ask\\\":21406.16395440257,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":21278.492996424025,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.33752064971749773,\\\"bias\\\":0.16247935028250227},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21009.87555938694,\\\"ask\\\":21263.515908192418,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":21136.69573378968,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3386106558090286,\\\"bias\\\":0.1613893441909714}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[21220.616994477903,21278.492996424025,21136.69573378968]}],[\\\"FSIG\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":53697.90761909682,\\\"ask\\\":54129.21611402932,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":53913.56186656307,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6234989524386847,\\\"bias\\\":0.1234989524386847},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":53927.13819408593,\\\"ask\\\":54360.287898456096,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":54143.71304627101,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.622971748733116,\\\"bias\\\":0.122971748733116},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":53366.766352028404,\\\"ask\\\":53795.41507774751,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":53581.090714887956,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6216804974531704,\\\"bias\\\":0.12168049745317044}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[53913.56186656307,54143.71304627101,53581.090714887956]}],[\\\"KGI\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":268475.72014598956,\\\"ask\\\":271173.9685896678,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":269824.8443678287,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5918517676727248,\\\"bias\\\":0.09185176767272485},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":267661.07706874143,\\\"ask\\\":270351.13814480917,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":269006.1076067753,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5921313242204569,\\\"bias\\\":0.09213132422045689},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":269664.8919932343,\\\"ask\\\":272375.09191276424,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":271019.99195299926,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5928210551462532,\\\"bias\\\":0.09282105514625316}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[269824.8443678287,269006.1076067753,271019.99195299926]}],[\\\"FLCM\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48368.81984881185,\\\"ask\\\":49247.3655171051,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":48808.09268295848,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2497778539388302,\\\"bias\\\":0.25022214606116977},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48140.47927891201,\\\"ask\\\":49014.877489830695,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":48577.67838437136,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.24859099688445524,\\\"bias\\\":0.25140900311554476},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":47585.29687920657,\\\"ask\\\":48449.611050574604,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":48017.45396489059,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2515242107721726,\\\"bias\\\":0.24847578922782743}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[48808.09268295848,48577.67838437136,48017.45396489059]}],[\\\"STM\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":5742.8875416481815,\\\"ask\\\":5777.448549922894,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":5760.168045785538,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4870288020134366,\\\"bias\\\":0.012971197986563376},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":5724.559396750274,\\\"ask\\\":5759.010105256292,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":5741.784751003283,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4866135071763664,\\\"bias\\\":0.013386492823633578},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":5679.829082784416,\\\"ask\\\":5714.010601838283,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":5696.919842311349,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4876677326084622,\\\"bias\\\":0.01233226739153781}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[5760.168045785538,5741.784751003283,5696.919842311349]}],[\\\"DCOMM\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5477.4899110294655,\\\"ask\\\":5543.6165497944085,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":5510.553230411937,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6077345057456579,\\\"bias\\\":0.1077345057456579},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5464.099259929324,\\\"ask\\\":5530.064240934507,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":5497.081750431916,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6079985264212092,\\\"bias\\\":0.10799852642120922},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5497.036858335951,\\\"ask\\\":5563.3994763440305,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":5530.218167339991,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6073475111444817,\\\"bias\\\":0.10734751114448171}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[5510.553230411937,5497.081750431916,5530.218167339991]}],[\\\"HLS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":27469.221381676598,\\\"ask\\\":27912.273339445575,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":27690.747360561087,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6138671332460442,\\\"bias\\\":0.11386713324604425},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":27534.367572148207,\\\"ask\\\":27978.470274924788,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":27756.418923536497,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6135970851857869,\\\"bias\\\":0.11359708518578693},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":27374.676035797256,\\\"ask\\\":27816.203068632694,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":27595.439552214975,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6129344109304062,\\\"bias\\\":0.11293441093040624}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[27690.747360561087,27756.418923536497,27595.439552214975]}],[\\\"VITA\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3770.9935833564664,\\\"ask\\\":3831.8160605073776,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":3801.404821931922,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5562217298038461,\\\"bias\\\":0.0562217298038461},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3759.6993142772135,\\\"ask\\\":3820.339625797814,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":3790.0194700375137,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5560528377485441,\\\"bias\\\":0.05605283774854408},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3787.48034571824,\\\"ask\\\":3848.568738391115,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":3818.0245420546776,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.556467021308899,\\\"bias\\\":0.056467021308899024}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[3801.404821931922,3790.0194700375137,3818.0245420546776]}],[\\\"ICRS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19432.94810538032,\\\"ask\\\":19549.896639615305,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":19491.422372497815,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5707915856406768,\\\"bias\\\":0.07079158564067678},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19486.716634453598,\\\"ask\\\":19603.988750608783,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":19545.352692531193,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5709874570756245,\\\"bias\\\":0.07098745707562448},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19354.990284439653,\\\"ask\\\":19471.469664285825,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":19413.22997436274,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5705043300639379,\\\"bias\\\":0.07050433006393786}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[19491.422372497815,19545.352692531193,19413.22997436274]}],[\\\"UNV\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13039.379509792956,\\\"ask\\\":13302.801318071603,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":13171.09041393228,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.3896613578416846,\\\"bias\\\":0.1103386421583154},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13010.067484290907,\\\"ask\\\":13272.8971304382,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":13141.482307364553,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.38941276196801133,\\\"bias\\\":0.11058723803198867},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":12938.364718922097,\\\"ask\\\":13199.745824354868,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":13069.055271638483,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.3900256223219783,\\\"bias\\\":0.1099743776780217}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[13171.09041393228,13141.482307364553,13069.055271638483]}],[\\\"AERO\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17673.163073854204,\\\"ask\\\":17815.116190913275,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":17744.13963238374,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.43586729855096423,\\\"bias\\\":0.06413270144903577},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17717.17255608306,\\\"ask\\\":17859.47916295923,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":17788.325859521145,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.43570759612684723,\\\"bias\\\":0.06429240387315277},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17825.69426522237,\\\"ask\\\":17968.87253241291,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":17897.28339881764,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.4353137905390254,\\\"bias\\\":0.06468620946097459}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[17744.13963238374,17788.325859521145,17897.28339881764]}],[\\\"OMN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27968.4209860402,\\\"ask\\\":28362.739106689303,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":28165.580046364754,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4314075735332803,\\\"bias\\\":0.0685924264667197},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27890.150032600326,\\\"ask\\\":28283.36463527545,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":28086.75733393789,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4312150756581512,\\\"bias\\\":0.0687849243418488},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27698.943286743237,\\\"ask\\\":28089.462124622798,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":27894.20270568302,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4307402509902468,\\\"bias\\\":0.06925974900975318}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[28165.580046364754,28086.75733393789,27894.20270568302]}],[\\\"SLRS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":32464.72475808867,\\\"ask\\\":33054.39685258472,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":32759.5608053367,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3792543754410751,\\\"bias\\\":0.1207456245589249},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":32370.04297664669,\\\"ask\\\":32957.99532132847,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":32664.01914898758,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.37960755417620407,\\\"bias\\\":0.12039244582379593},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":32602.93609515436,\\\"ask\\\":33195.11858729641,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":32899.02734122539,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3787413652689821,\\\"bias\\\":0.12125863473101789}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[32759.5608053367,32664.01914898758,32899.02734122539]}],[\\\"GPH\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":29877.080335514656,\\\"ask\\\":30117.05688439429,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":29997.068609954473,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41652422108553516,\\\"bias\\\":0.08347577891446484},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":29943.213241502297,\\\"ask\\\":30183.720978381836,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":30063.467109942067,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41670899469049255,\\\"bias\\\":0.08329100530950745},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":29781.065865622404,\\\"ask\\\":30020.271213940658,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":29900.66853978153,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41625550461037675,\\\"bias\\\":0.08374449538962325}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[29997.068609954473,30063.467109942067,29900.66853978153]}],[\\\"NVMD\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13559.45874715509,\\\"ask\\\":13695.734714463179,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":13627.596730809135,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5545867671110711,\\\"bias\\\":0.05458676711107113},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13601.799723701688,\\\"ask\\\":13738.501228462508,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":13670.150476082099,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5544163136240181,\\\"bias\\\":0.05441631362401811},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13706.272979130576,\\\"ask\\\":13844.024466358018,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":13775.148722744298,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5539983505935204,\\\"bias\\\":0.05399835059352043}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[13627.596730809135,13670.150476082099,13775.148722744298]}],[\\\"WDS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":48522.87010795203,\\\"ask\\\":49404.21386369687,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":48963.54198582445,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2992561,\\\"averageShortPrice\\\":109913.51817042395,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3464898219268819,\\\"bias\\\":0.15351017807311812},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":48992.76853421735,\\\"ask\\\":49882.647276513926,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":49437.70790536564,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2992561,\\\"averageShortPrice\\\":109913.51817042395,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3450032200228357,\\\"bias\\\":0.15499677997716432},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":50159.79237067343,\\\"ask\\\":51070.86831686124,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":50615.33034376734,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2992807,\\\"averageShortPrice\\\":109908.51066261921,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3413111458204775,\\\"bias\\\":0.1586888541795225}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[48963.54198582445,49437.70790536564,50615.33034376734]}],[\\\"LXO\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":11251.502708530485,\\\"ask\\\":11478.805793551304,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":11365.154251040894,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5109511619088416,\\\"bias\\\":0.0109511619088416},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":11198.386371420629,\\\"ask\\\":11424.616399126096,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":11311.501385273363,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.51043172492176,\\\"bias\\\":0.010431724921760033},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":11069.240440353062,\\\"ask\\\":11292.861459350095,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":11181.050949851578,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5116488046617124,\\\"bias\\\":0.011648804661712364}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[11365.154251040894,11311.501385273363,11181.050949851578]}],[\\\"RHOC\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2402.6793514577084,\\\"ask\\\":2421.977980786686,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":2412.3286661221973,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4486170041906318,\\\"bias\\\":0.051382995809368226},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2397.8456166630444,\\\"ask\\\":2417.1054208129485,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":2407.4755187379965,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4485134229704849,\\\"bias\\\":0.05148657702951509},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2409.7353757404885,\\\"ask\\\":2429.0906799633035,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":2419.413027851896,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44876872005564716,\\\"bias\\\":0.05123127994435284}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[2412.3286661221973,2407.4755187379965,2419.413027851896]}],[\\\"APHE\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":131510.6036086699,\\\"ask\\\":135245.1846442102,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":133377.89412644005,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5811365914157642,\\\"bias\\\":0.08113659141576424},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":132435.88152782278,\\\"ask\\\":136196.7382040693,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":134316.30986594604,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5817074495398417,\\\"bias\\\":0.08170744953984166},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":130182.91033306118,\\\"ask\\\":133879.788111282,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":132031.3492221716,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5802934042574023,\\\"bias\\\":0.08029340425740228}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[133377.89412644005,134316.30986594604,132031.3492221716]}],[\\\"SYSC\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":185.85955695408316,\\\"ask\\\":188.479933386467,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":187.1697451702751,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.31387036123174783,\\\"bias\\\":0.18612963876825217},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":184.63349841798203,\\\"ask\\\":187.23658903011872,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":185.9350437240504,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3126343675773536,\\\"bias\\\":0.18736563242264642},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":181.66617412342853,\\\"ask\\\":184.2274293477266,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":182.94680173557757,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3095739486758449,\\\"bias\\\":0.19042605132415508}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[187.1697451702751,185.9350437240504,182.94680173557757]}],[\\\"CTK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13559.743936755765,\\\"ask\\\":13778.449484122795,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":13669.09671043928,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.557123905143161,\\\"bias\\\":0.05712390514316101},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13508.485034187408,\\\"ask\\\":13726.363825061399,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":13617.424429624403,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5569071444419685,\\\"bias\\\":0.05690714444196854},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13634.568906803823,\\\"ask\\\":13854.481308526465,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":13744.525107665144,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5574382975011478,\\\"bias\\\":0.05743829750114782}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[13669.09671043928,13617.424429624403,13744.525107665144]}],[\\\"NTLK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":28.290558152698832,\\\"ask\\\":28.63209406601109,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":28.46132610935496,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5645738074032649,\\\"bias\\\":0.0645738074032649},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":28.626028544151783,\\\"ask\\\":28.97161440182766,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":28.798821472989722,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.565339525786418,\\\"bias\\\":0.065339525786418},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":27.814735323512693,\\\"ask\\\":28.150526896834776,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":27.982631110173735,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5634337188932823,\\\"bias\\\":0.06343371889328231}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[28.46132610935496,28.798821472989722,27.982631110173735]}],[\\\"OMGA\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1261.931496229838,\\\"ask\\\":1290.0027731934947,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":1275.9671347116664,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5687784402447442,\\\"bias\\\":0.06877844024474422},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1266.5204642603576,\\\"ask\\\":1294.6938214026507,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":1280.6071428315042,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.569028550543453,\\\"bias\\\":0.06902855054345303},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1277.8492065995497,\\\"ask\\\":1306.2745681214808,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":1292.0618873605154,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5684111055946963,\\\"bias\\\":0.06841110559469632}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[1275.9671347116664,1280.6071428315042,1292.0618873605154]}],[\\\"FNS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5574.997916493002,\\\"ask\\\":5676.259230818808,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":5625.628573655905,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5583455161878775,\\\"bias\\\":0.05834551618787753},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5591.084321340035,\\\"ask\\\":5692.637820617653,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":5641.8610709788445,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5585138695412718,\\\"bias\\\":0.0585138695412718},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5551.681342900635,\\\"ask\\\":5652.519147312553,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":5602.100245106594,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5589291708882933,\\\"bias\\\":0.0589291708882933}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[5625.628573655905,5641.8610709788445,5602.100245106594]}],[\\\"JGN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":38636.84821356412,\\\"ask\\\":39496.31298676776,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":39066.580600165944,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4189750286438725,\\\"bias\\\":0.08102497135612752},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":38203.461062404764,\\\"ask\\\":39053.28527208414,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":38628.373167244456,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.41989419095357633,\\\"bias\\\":0.08010580904642367},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":37166.37740671572,\\\"ask\\\":37993.13201030292,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":37579.754708509325,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42212944849236417,\\\"bias\\\":0.07787055150763583}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[39066.580600165944,38628.373167244456,37579.754708509325]}],[\\\"SGC\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":32.89637693427932,\\\"ask\\\":33.360172782295336,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":33.12827485828733,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5543347790012858,\\\"bias\\\":0.054334779001285805},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":32.63068107646312,\\\"ask\\\":33.09073096072342,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":32.86070601859327,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5547772008337376,\\\"bias\\\":0.054777200833737605},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":33.28422535878425,\\\"ask\\\":33.753489361828535,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":33.51885736030639,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5558743071528658,\\\"bias\\\":0.05587430715286579}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[33.12827485828733,32.86070601859327,33.51885736030639]}],[\\\"CTYS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":415.88772701245983,\\\"ask\\\":423.44169178160644,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":419.66470939703316,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.6384024290202668,\\\"bias\\\":0.13840242902026678},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":418.38640975434873,\\\"ask\\\":425.98575927561836,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":422.1860845149836,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.6392339605571857,\\\"bias\\\":0.13923396055718573},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":424.56946059554,\\\"ask\\\":432.28111578294636,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":428.4252881892432,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.637176315669889,\\\"bias\\\":0.13717631566988897}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[419.66470939703316,422.1860845149836,428.4252881892432]}],[\\\"MDYN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7168.438984999381,\\\"ask\\\":7226.016808172067,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":7197.227896585724,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.5787314410835233,\\\"bias\\\":0.07873144108352326},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7146.405981064203,\\\"ask\\\":7203.80683231773,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":7175.106406690967,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.5789741771043723,\\\"bias\\\":0.07897417710437227},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7092.6182962602115,\\\"ask\\\":7149.58711791692,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":7121.102707088566,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.5783752673691643,\\\"bias\\\":0.07837526736916434}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[7197.227896585724,7175.106406690967,7121.102707088566]}],[\\\"TITN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22114.91783834496,\\\"ask\\\":22248.00661169508,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:00 AM\\\",\\\"price\\\":22181.462225020023,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.40466231322576385,\\\"bias\\\":0.09533768677423615},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22162.12093765267,\\\"ask\\\":22295.49378181106,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:04 AM\\\",\\\"price\\\":22228.807359731865,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.40486580637592917,\\\"bias\\\":0.09513419362407083},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22046.3731830503,\\\"ask\\\":22179.049450952305,\\\"dateObserved\\\":\\\"7/25/2023, 7:28:08 AM\\\",\\\"price\\\":22112.711317001304,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.40536527942786676,\\\"bias\\\":0.09463472057213324}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[22181.462225020023,22228.807359731865,22112.711317001304]}]]\"}}],[\"data/salesLedger.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/salesLedger.txt\",\"text\":\"[]\"}}],[\"data/stockMarketReserveMoney.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/stockMarketReserveMoney.txt\",\"text\":\"{\\\"stockMarketReserveMoneyLimit\\\":1500000000000,\\\"capitalToReserveForTrading\\\":383498697685.5244,\\\"moneyInvested\\\":506388005181.1836,\\\"moneyRequested\\\":[],\\\"countOfVisitedWithoutFillingRequest\\\":0}\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"scripts/coordinator.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":80236.23300000001,\"onlineExpGained\":0,\"onlineMoneyMade\":459888822283.9802,\"onlineRunningTime\":75996.60999945509,\"ramUsage\":2.7,\"server\":\"home\",\"scriptKey\":\"scripts/coordinator.js*[]\",\"title\":\"scripts/coordinator.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":74052.17399999998,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":780.0100000000405,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"omega-net\\\"]\",\"title\":\"scripts/hacking/weaken.js omega-net\",\"threads\":161,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.55999999998,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":317.6099999999905,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"omega-net\\\"]\",\"title\":\"scripts/hacking/weaken.js omega-net\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":72240.79,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":743.2100000000321,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"scripts/hacking/grow.js crush-fitness\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.564,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":321.8099999999903,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"scripts/hacking/grow.js crush-fitness\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71266.04199999999,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":483.2099999999811,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"iron-gym\\\"]\",\"title\":\"scripts/hacking/grow.js iron-gym\",\"threads\":121,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":67293.48999999999,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":377.20999999998713,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"nectar-net\\\"]\",\"title\":\"scripts/hacking/weaken.js nectar-net\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.564,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":305.00999999999124,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"nectar-net\\\"]\",\"title\":\"scripts/hacking/weaken.js nectar-net\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":67293.48999999999,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":360.6099999999881,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"joesguns\\\"]\",\"title\":\"scripts/hacking/weaken.js joesguns\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.564,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.2099999999911,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"zer0\\\"]\",\"title\":\"scripts/hacking/grow.js zer0\",\"threads\":107,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.564,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":305.00999999999124,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"scripts/hacking/weaken.js harakiri-sushi\",\"threads\":150,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.564,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":305.00999999999124,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"scripts/hacking/weaken.js hong-fang-tea\",\"threads\":4,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"25.6.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":12580011794.2,\"moneyMax\":62900058971,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1177,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-10960-BladeIndustries.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\",\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"85.5.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":9031935412.6,\"moneyMax\":45159677063,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1301,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"73.2.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":3866198594.6000004,\"moneyMax\":19330992973,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1090,\"serverGrowth\":77,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-824470.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":2206660927995210,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-321164.cct\",\"type\":\"Total Ways to Sum\",\"data\":94,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"71.7.6.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":5902648362.8,\"moneyMax\":29513241814,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1189,\"serverGrowth\":62,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"6.9.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":5668064556.6,\"moneyMax\":28340322783,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1268,\"serverGrowth\":94,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"25.5.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":4799026376,\"moneyMax\":23995131880,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1024,\"serverGrowth\":62,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"57.8.8.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":3965703763,\"moneyMax\":19828518815,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1022,\"serverGrowth\":96,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-931933.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"81.0.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":3338986017.4,\"moneyMax\":16694930087,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1032,\"serverGrowth\":95,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-417173-OmniTekIncorporated.cct\",\"type\":\"Total Ways to Sum\",\"data\":99,\"reward\":{\"name\":\"OmniTek Incorporated\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"26.1.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":5980051534.400001,\"moneyMax\":29900257672,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1082,\"serverGrowth\":93,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-551305-NWO.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,2,5,6,7,7,9,7,0,8,5],\"reward\":{\"name\":\"NWO\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"46.2.3.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":340802285.40000004,\"moneyMax\":1704011427,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1036,\"serverGrowth\":91,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-408932-BachmanAssociates.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4],\"reward\":{\"name\":\"Bachman & Associates\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-663748.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-7,-5,4,0,-4,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"3.7.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1386,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-554970-CyberSec.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\",\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"45.6.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":207393733.20000002,\"moneyMax\":1036968666,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":996,\"serverGrowth\":83,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-214124.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)(((()\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"11.9.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":184069765.20000002,\"moneyMax\":920348826,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":893,\"serverGrowth\":69,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-121332.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"10.3.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":160029464,\"moneyMax\":800147320,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":926,\"serverGrowth\":64,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"61.6.9.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":125210190.60000001,\"moneyMax\":626050953,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":861,\"serverGrowth\":73,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"99.7.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":158737226.8,\"moneyMax\":793686134,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":784,\"serverGrowth\":68,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-988660.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":159120851,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"18.5.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":180810429.60000002,\"moneyMax\":904052148,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":859,\"serverGrowth\":87,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-426113-BachmanAssociates.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6],\"reward\":{\"name\":\"Bachman & Associates\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"56.1.1.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":223326967.8,\"moneyMax\":1116634839,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":831,\"serverGrowth\":81,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"95.6.0.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":154487552.4,\"moneyMax\":772437762,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":865,\"serverGrowth\":74,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-909434.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"73.9.2.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":107483560.2,\"moneyMax\":537417801,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":828,\"serverGrowth\":79,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-41190-CyberSec.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[4,8],[3,8,9],[4,4,1,8]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"68.6.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":172440843.4,\"moneyMax\":862204217,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":875,\"serverGrowth\":80,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"31.7.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":157845129.8,\"moneyMax\":789225649,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":837,\"serverGrowth\":75,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"35.7.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":207287338,\"moneyMax\":1036436690,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":865,\"serverGrowth\":60,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"51.5.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":186407601.8,\"moneyMax\":932038009,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":918,\"serverGrowth\":63,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"60.3.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":209964880.60000002,\"moneyMax\":1049824403,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":777,\"serverGrowth\":68,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"43.3.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":170924266.20000002,\"moneyMax\":854621331,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":791,\"serverGrowth\":75,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"72.8.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":159280367.6,\"moneyMax\":796401838,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":839,\"serverGrowth\":73,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"68.1.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":300464910.6,\"moneyMax\":1502324553,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":868,\"serverGrowth\":50,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-320893-NiteSec.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[7,8],[4,7,8],[9,4,3,3],[4,5,7,1,4],[4,3,8,9,8,5],[3,3,6,9,6,9,9],[6,9,6,7,7,7,8,1],[9,4,4,5,8,4,2,7,4],[1,5,5,5,2,6,7,2,7,1],[7,7,5,5,1,2,2,3,3,7,3]],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"41.8.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":302862739.8,\"moneyMax\":1514313699,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":810,\"serverGrowth\":82,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"16.3.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":231833219.4,\"moneyMax\":1159166097,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":68,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"75.9.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":289543677,\"moneyMax\":1447718385,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":76,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"5.4.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":208695086.60000002,\"moneyMax\":1043475433,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":782,\"serverGrowth\":75,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-625266-CyberSec.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":123050623,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-124209-CyberSec.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[67,[5,8,9,13,14,16,18,22,23,25,28,30]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-769821.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"ooobss522YpeLLLLLNNkkIIIIIIIIIIIII44qzwwRR0nbIVVVVVVVVVVVccccccccccccxkkv\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"71.5.0.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":156352466.8,\"moneyMax\":781762334,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":732,\"serverGrowth\":62,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-561853-NiteSec.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"MOUSECLOUDQUEUEEMAILVIRUS\",\"COMMAND\"],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"48.2.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":121177335,\"moneyMax\":605886675,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":491,\"serverGrowth\":42,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"0.4.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":137469858.6,\"moneyMax\":687349293,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":502,\"serverGrowth\":58,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"97.8.4.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":41959730.6,\"moneyMax\":209798653,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":427,\"serverGrowth\":39,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"39.8.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":35412301.800000004,\"moneyMax\":177061509,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":413,\"serverGrowth\":39,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"46.3.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":213291311.8,\"moneyMax\":1066456559,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":772,\"serverGrowth\":78,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-509024.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[123,189,111,22,168,109,185,155,101,119,190,141,25,121,96,126,181,93,16,77,147,28,128,182,30,178,20,159,42,134]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"95.0.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":67751922,\"moneyMax\":338759610,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":455,\"serverGrowth\":52,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"41.2.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":117846055.4,\"moneyMax\":589230277,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":578,\"serverGrowth\":67,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"50.6.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":77010199,\"moneyMax\":385050995,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":424,\"serverGrowth\":28,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-763993.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,0,0,0],[0,1,0,1,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,1,1,0,1],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,1,1],[0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-532420.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"FLASHMACROARRAYLOGINSHIFT\",\"MAINFRAME\"],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"52.7.1.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":37778391,\"moneyMax\":188891955,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":293,\"serverGrowth\":50,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-487301.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"84.5.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":49156514.800000004,\"moneyMax\":245782574,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":399,\"serverGrowth\":52,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"32.7.0.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":55000000,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":418,\"serverGrowth\":60,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-51402-NiteSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,9],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"46.6.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":15938206.8,\"moneyMax\":79691034,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":299,\"serverGrowth\":42,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"42.0.6.0\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"n00dles\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"n00dles\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"n00dles\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  while(true){\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":4.002000000000001,\"minDifficulty\":1,\"moneyAvailable\":51513,\"moneyMax\":70000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.565,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.2099999999911,\"ramUsage\":1.75,\"server\":\"n00dles\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-727697.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[7,2],[5,4,2],[5,1,6,1],[5,7,2,1,6],[5,5,3,1,7,1],[2,7,9,7,2,8,2],[7,7,8,3,4,8,3,7],[1,7,5,4,2,4,3,6,6],[3,3,5,4,3,4,5,8,7,1]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"10.5.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"foodnstuff\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"foodnstuff\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":35.056000000000004,\"minDifficulty\":3,\"moneyAvailable\":172456.88650306631,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.565,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.2099999999911,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":9,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"0.6.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"sigma-cosmetics\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":3.972,\"minDifficulty\":3,\"moneyAvailable\":614428.1638694205,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.567,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.2099999999911,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":9,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"13.4.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"joesguns\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"joesguns\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":93.8,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.567,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.2099999999911,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":9,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"45.3.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"zer0\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"zer0\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":8.968,\"minDifficulty\":8,\"moneyAvailable\":4440347.868540766,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.567,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.2099999999911,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":18,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"83.6.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"nectar-net\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"nectar-net\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":72.69600000000003,\"minDifficulty\":7,\"moneyAvailable\":2154131.5703422353,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.567,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.2099999999911,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":9,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-570067.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,9],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"72.1.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"neo-net\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"neo-net\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":52.24400000000002,\"minDifficulty\":8,\"moneyAvailable\":48994.90042242674,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.567,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.2099999999911,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":18,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-815379.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[3,8],[6,7,6]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"10.5.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"silver-helix\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"silver-helix\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"computek\",\"netlink\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":18107737.383234084,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.567,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.2099999999911,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":36,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-346431.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")))a)a))))()((a())(\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"87.8.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"hong-fang-tea\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"hong-fang-tea\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":100,\"minDifficulty\":5,\"moneyAvailable\":2964371.164055575,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.567,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.2099999999911,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":9,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-46182.cct\",\"type\":\"Total Ways to Sum\",\"data\":66,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"94.1.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"harakiri-sushi\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"harakiri-sushi\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":61.202,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.571,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.2099999999911,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":9,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"46.7.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":4800000,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-327190-TianDiHui.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"ARRAYCACHELINUXPOPUPMOUSE\",\"PROGRAM\"],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"48.7.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"n00dles\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-990335-NWO.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0100100010000000100000001100110001011100011111110100010101110100\",\"reward\":{\"name\":\"NWO\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"37.8.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"omega-net\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"omega-net\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":28,\"hackDifficulty\":16.584000000000007,\"minDifficulty\":9,\"moneyAvailable\":69977499,\"moneyMax\":69977499,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":202,\"serverGrowth\":38,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.572,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.2099999999911,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":18,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"39.2.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":42,\"hackDifficulty\":16.69199999999999,\"minDifficulty\":14,\"moneyAvailable\":17103457.52328664,\"moneyMax\":49686168,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":225,\"serverGrowth\":28,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-983199.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,2],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"64.9.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"iron-gym\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"iron-gym\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":11250584.134062514,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.572,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.2099999999911,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":18,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"19.8.7.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":507,\"serverGrowth\":31,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"43.4.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1012,\"serverGrowth\":56,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"10.7.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":769,\"serverGrowth\":45,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"2.4.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":520,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-364593-ECorp.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[15,[1,2,4,5,6,9,10,11,12,13,14,15]],\"reward\":{\"name\":\"ECorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"3.7.8.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":342,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-757402-ECorp.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]],\"reward\":{\"name\":\"ECorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"98.1.8.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"avmnite-02h\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"avmnite-02h\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":216,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.572,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.2099999999911,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"zer0\\\"]\",\"title\":\"scripts/hacking/grow.js zer0\",\"threads\":57,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.572,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.2099999999911,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":16,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-583952.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-431789-TianDiHui.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":71704917,\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-581142.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"21.5.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":515,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"88.9.6.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"CSEC\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"CSEC\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":60,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.572,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.2099999999911,\"ramUsage\":1.75,\"server\":\"CSEC\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-193424.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,2],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-997451-Chongqing.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9],\"reward\":{\"name\":\"Chongqing\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"66.2.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"80.3.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-813084-CyberSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"84.2.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"CLOUD-000\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CLOUD-000\",\"httpPortOpen\":false,\"ip\":\"0.7.4.3\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"CLOUD-000\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"CLOUD-000\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"CLOUD-000\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71266.05099999999,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":684.8100000000188,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"silver-helix\\\"]\",\"title\":\"scripts/hacking/weaken.js silver-helix\",\"threads\":161,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":74052.19099999999,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":926.8100000000738,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"scripts/hacking/grow.js crush-fitness\",\"threads\":1059,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":72240.80099999999,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":743.2100000000321,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"scripts/hacking/grow.js crush-fitness\",\"threads\":599,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71266.054,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":722.6100000000274,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"scripts/hacking/grow.js crush-fitness\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":67293.50200000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":379.409999999987,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"scripts/hacking/grow.js crush-fitness\",\"threads\":7019,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":72240.804,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":743.2100000000321,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"omega-net\\\"]\",\"title\":\"scripts/hacking/weaken.js omega-net\",\"threads\":161,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71266.054,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":722.6100000000274,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"omega-net\\\"]\",\"title\":\"scripts/hacking/weaken.js omega-net\",\"threads\":161,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":67293.50200000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":379.409999999987,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"omega-net\\\"]\",\"title\":\"scripts/hacking/weaken.js omega-net\",\"threads\":161,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.575,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":317.6099999999905,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"omega-net\\\"]\",\"title\":\"scripts/hacking/weaken.js omega-net\",\"threads\":104,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71266.054,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":657.4100000000126,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/weaken.js johnson-ortho\",\"threads\":681,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":67293.50200000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":379.409999999987,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/weaken.js johnson-ortho\",\"threads\":681,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.575,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":317.6099999999905,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/weaken.js johnson-ortho\",\"threads\":681,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":50902.756,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":228.80999999999554,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/weaken.js johnson-ortho\",\"threads\":135,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71266.054,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":640.6100000000088,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"scripts/hacking/weaken.js hong-fang-tea\",\"threads\":1921,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":67293.50200000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.8099999999899,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"scripts/hacking/weaken.js hong-fang-tea\",\"threads\":1921,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71266.054,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":535.4099999999848,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"scripts/hacking/weaken.js harakiri-sushi\",\"threads\":1141,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":67293.50200000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.8099999999899,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"scripts/hacking/weaken.js harakiri-sushi\",\"threads\":1141,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.575,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":305.00999999999124,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"scripts/hacking/weaken.js harakiri-sushi\",\"threads\":78,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71266.054,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":516.8099999999806,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"nectar-net\\\"]\",\"title\":\"scripts/hacking/weaken.js nectar-net\",\"threads\":1321,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71266.054,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.4099999999849,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"joesguns\\\"]\",\"title\":\"scripts/hacking/weaken.js joesguns\",\"threads\":1781,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71266.054,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":401.60999999998575,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"zer0\\\"]\",\"title\":\"scripts/hacking/grow.js zer0\",\"threads\":121,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":67293.50200000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":379.409999999987,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"zer0\\\"]\",\"title\":\"scripts/hacking/grow.js zer0\",\"threads\":1299,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.575,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.2099999999911,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"zer0\\\"]\",\"title\":\"scripts/hacking/grow.js zer0\",\"threads\":1135,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":67293.50200000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":379.409999999987,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"silver-helix\\\"]\",\"title\":\"scripts/hacking/grow.js silver-helix\",\"threads\":3353,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.575,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.2099999999911,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"silver-helix\\\"]\",\"title\":\"scripts/hacking/grow.js silver-helix\",\"threads\":3353,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":67293.50200000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":379.409999999987,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"iron-gym\\\"]\",\"title\":\"scripts/hacking/grow.js iron-gym\",\"threads\":3178,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65729.575,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.2099999999911,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"iron-gym\\\"]\",\"title\":\"scripts/hacking/grow.js iron-gym\",\"threads\":3178,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":67293.50200000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":326.80999999999,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":901,\"temporary\":false}}]}}}","CompaniesSave":"{\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":8001,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":32001,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":217809.34229304513}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Chongqing\",\"playerReputation\":37816.52043191594}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":17977.19199999725}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":76559.21358484098}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":15544.841389616964,\"lastPrice\":15478.624815059931,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":false,\"otlkMag\":17.70210901087099,\"otlkMagForecast\":32.044539137346746,\"cap\":413709697,\"spreadPerc\":0.1,\"shareTxForMovement\":72921,\"shareTxUntilMovement\":45554,\"totalShares\":114300000,\"maxShares\":22900000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":27776.154611298865,\"lastPrice\":27894.979237821066,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":true,\"otlkMag\":15.210155456765742,\"otlkMagForecast\":66.1123455894407,\"cap\":295767297,\"spreadPerc\":0.5,\"shareTxForMovement\":59520,\"shareTxUntilMovement\":59520,\"totalShares\":96000000,\"maxShares\":19200000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":75089.48880730497,\"lastPrice\":75622.43537353456,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":13.057381616426804,\"otlkMagForecast\":36.01177678293553,\"cap\":407587922,\"spreadPerc\":0.5,\"shareTxForMovement\":38910,\"shareTxUntilMovement\":38910,\"totalShares\":79100000,\"maxShares\":15800000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":19096.02814661111,\"lastPrice\":19220.422168430978,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":15.875597035842244,\"otlkMagForecast\":35.864704580726126,\"cap\":404125219,\"spreadPerc\":0.2,\"shareTxForMovement\":84221,\"shareTxUntilMovement\":42878,\"totalShares\":70000000,\"maxShares\":14000000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":21136.69573378968,\"lastPrice\":21278.492996424025,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":16.138934419097136,\"otlkMagForecast\":34.64954518529819,\"cap\":534599042,\"spreadPerc\":0.6,\"shareTxForMovement\":39503,\"shareTxUntilMovement\":36216,\"totalShares\":53600000,\"maxShares\":10700000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":53581.090714887956,\"lastPrice\":54143.71304627101,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.08,\"b\":true,\"otlkMag\":12.168049745317049,\"otlkMagForecast\":62.39614350706948,\"cap\":1054120782,\"spreadPerc\":0.4,\"shareTxForMovement\":39412,\"shareTxUntilMovement\":39412,\"totalShares\":39200000,\"maxShares\":7800000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":271019.99195299926,\"lastPrice\":269006.1076067753,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":9.282105514625313,\"otlkMagForecast\":60.48395400382955,\"cap\":132154359,\"spreadPerc\":0.5,\"shareTxForMovement\":77014,\"shareTxUntilMovement\":56050,\"totalShares\":78600000,\"maxShares\":15700000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":48017.45396489059,\"lastPrice\":48577.67838437136,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.2,\"b\":false,\"otlkMag\":24.84757892278274,\"otlkMagForecast\":25.9085967702267,\"cap\":437459817,\"spreadPerc\":0.9,\"shareTxForMovement\":59809,\"shareTxUntilMovement\":45496,\"totalShares\":62800000,\"maxShares\":12600000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":5696.919842311349,\"lastPrice\":5741.784751003283,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":false,\"otlkMag\":1.2332267391537786,\"otlkMagForecast\":53.53580562864595,\"cap\":449783964,\"spreadPerc\":0.3,\"shareTxForMovement\":91630,\"shareTxUntilMovement\":31050,\"totalShares\":54900000,\"maxShares\":11000000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":5530.218167339991,\"lastPrice\":5497.081750431916,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":10.734751114448176,\"otlkMagForecast\":62.92312709564377,\"cap\":214327006,\"spreadPerc\":0.6,\"shareTxForMovement\":68680,\"shareTxUntilMovement\":53500,\"totalShares\":76600000,\"maxShares\":15300000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":27595.439552214975,\"lastPrice\":27756.418923536497,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":11.293441093040629,\"otlkMagForecast\":60.947958242654195,\"cap\":228752422,\"spreadPerc\":0.8,\"shareTxForMovement\":74568,\"shareTxUntilMovement\":74568,\"totalShares\":62400000,\"maxShares\":12500000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":3818.0245420546776,\"lastPrice\":3790.0194700375137,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":5.646702130889899,\"otlkMagForecast\":57.39408710175001,\"cap\":249914480,\"spreadPerc\":0.8,\"shareTxForMovement\":83865,\"shareTxUntilMovement\":26660,\"totalShares\":93300000,\"maxShares\":18700000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":19413.22997436274,\"lastPrice\":19545.352692531193,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":7.0504330063937894,\"otlkMagForecast\":58.31329323003909,\"cap\":393424420,\"spreadPerc\":0.3,\"shareTxForMovement\":90137,\"shareTxUntilMovement\":72922,\"totalShares\":49700000,\"maxShares\":9900000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":13069.055271638483,\"lastPrice\":13141.482307364553,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":10.997437767802172,\"otlkMagForecast\":38.447262925566584,\"cap\":363379978,\"spreadPerc\":1,\"shareTxForMovement\":106291,\"shareTxUntilMovement\":87912,\"totalShares\":38500000,\"maxShares\":7700000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":17897.28339881764,\"lastPrice\":17788.325859521145,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":6.468620946097459,\"otlkMagForecast\":44.15589026165856,\"cap\":156324592,\"spreadPerc\":0.4,\"shareTxForMovement\":75689,\"shareTxUntilMovement\":75689,\"totalShares\":64600000,\"maxShares\":12900000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":27894.20270568302,\"lastPrice\":28086.75733393789,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":6.925974900975317,\"otlkMagForecast\":43.05604280914208,\"cap\":219167744,\"spreadPerc\":0.7,\"shareTxForMovement\":51339,\"shareTxUntilMovement\":51339,\"totalShares\":51900000,\"maxShares\":10400000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":32899.02734122539,\"lastPrice\":32664.01914898758,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":12.125863473101786,\"otlkMagForecast\":39.79520413798683,\"cap\":420329629,\"spreadPerc\":0.9,\"shareTxForMovement\":95685,\"shareTxUntilMovement\":76591,\"totalShares\":35600000,\"maxShares\":7100000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":29900.66853978153,\"lastPrice\":30063.467109942067,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":8.374449538962324,\"otlkMagForecast\":39.9208998799686,\"cap\":560845063,\"spreadPerc\":0.4,\"shareTxForMovement\":83889,\"shareTxUntilMovement\":68566,\"totalShares\":26700000,\"maxShares\":5300000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":13775.148722744298,\"lastPrice\":13670.150476082099,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":5.39983505935204,\"otlkMagForecast\":54.01159287966899,\"cap\":192954536,\"spreadPerc\":0.5,\"shareTxForMovement\":63375,\"shareTxUntilMovement\":63375,\"totalShares\":27300000,\"maxShares\":5500000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":50615.33034376734,\"lastPrice\":49437.70790536564,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":2992807,\"playerAvgShortPx\":109908.51066261921,\"mv\":2.45,\"b\":false,\"otlkMag\":15.868885417952251,\"otlkMagForecast\":29.46962573220837,\"cap\":107236568,\"spreadPerc\":0.9,\"shareTxForMovement\":46342,\"shareTxUntilMovement\":16209,\"totalShares\":54400000,\"maxShares\":10900000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":11181.050949851578,\"lastPrice\":11311.501385273363,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.2,\"b\":true,\"otlkMag\":1.1648804661712304,\"otlkMagForecast\":50.94268233313412,\"cap\":61590334,\"spreadPerc\":1,\"shareTxForMovement\":90124,\"shareTxUntilMovement\":20036,\"totalShares\":45500000,\"maxShares\":9100000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2419.413027851896,\"lastPrice\":2407.4755187379965,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.51,\"b\":false,\"otlkMag\":5.123127994435285,\"otlkMagForecast\":45.79905393596611,\"cap\":58031170,\"spreadPerc\":0.4,\"shareTxForMovement\":92355,\"shareTxUntilMovement\":24230,\"totalShares\":42600000,\"maxShares\":8500000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":132031.3492221716,\"lastPrice\":134316.30986594604,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.78,\"b\":true,\"otlkMag\":8.029340425740228,\"otlkMagForecast\":56.85523783408989,\"cap\":53784251,\"spreadPerc\":1.4,\"shareTxForMovement\":71715,\"shareTxUntilMovement\":55164,\"totalShares\":50500000,\"maxShares\":10100000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":182.94680173557757,\"lastPrice\":185.9350437240504,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.68,\"b\":false,\"otlkMag\":19.04260513241551,\"otlkMagForecast\":29.67798458560635,\"cap\":55848920,\"spreadPerc\":0.7,\"shareTxForMovement\":15733,\"shareTxUntilMovement\":15733,\"totalShares\":28000000,\"maxShares\":5600000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":13744.525107665144,\"lastPrice\":13617.424429624403,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.96,\"b\":true,\"otlkMag\":5.743829750114778,\"otlkMagForecast\":54.717350446902806,\"cap\":8612163,\"spreadPerc\":0.8,\"shareTxForMovement\":72534,\"shareTxUntilMovement\":49862,\"totalShares\":34800000,\"maxShares\":7000000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":27.982631110173735,\"lastPrice\":28.798821472989722,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3,\"b\":true,\"otlkMag\":6.343371889328231,\"otlkMagForecast\":58.69848564277041,\"cap\":31761380,\"spreadPerc\":0.6,\"shareTxForMovement\":49946,\"shareTxUntilMovement\":49946,\"totalShares\":45000000,\"maxShares\":9000000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":1292.0618873605154,\"lastPrice\":1280.6071428315042,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.92,\"b\":true,\"otlkMag\":6.841110559469623,\"otlkMagForecast\":54.89062213172283,\"cap\":7856465,\"spreadPerc\":1.1,\"shareTxForMovement\":82245,\"shareTxUntilMovement\":43201,\"totalShares\":15200000,\"maxShares\":3000000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":5602.100245106594,\"lastPrice\":5641.8610709788445,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":5.8929170888293285,\"otlkMagForecast\":54.69809737777635,\"cap\":55066798,\"spreadPerc\":0.9,\"shareTxForMovement\":151480,\"shareTxUntilMovement\":151480,\"totalShares\":10600000,\"maxShares\":2100000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":33.51885736030639,\"lastPrice\":32.86070601859327,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.06,\"b\":true,\"otlkMag\":5.587430715286582,\"otlkMagForecast\":55.83214248349626,\"cap\":26299173,\"spreadPerc\":0.7,\"shareTxForMovement\":64363,\"shareTxUntilMovement\":38418,\"totalShares\":13800000,\"maxShares\":2800000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":37579.754708509325,\"lastPrice\":38628.373167244456,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.87,\"b\":false,\"otlkMag\":7.787055150763588,\"otlkMagForecast\":44.928023068535836,\"cap\":9533340,\"spreadPerc\":1.1,\"shareTxForMovement\":24404,\"shareTxUntilMovement\":24404,\"totalShares\":82500000,\"maxShares\":16500000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":428.4252881892432,\"lastPrice\":422.1860845149836,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.52,\"b\":true,\"otlkMag\":13.717631566988896,\"otlkMagForecast\":65.54692858576124,\"cap\":1655445,\"spreadPerc\":0.9,\"shareTxForMovement\":45284,\"shareTxUntilMovement\":26176,\"totalShares\":87700000,\"maxShares\":17500000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":7121.102707088566,\"lastPrice\":7175.106406690967,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":7.837526736916429,\"otlkMagForecast\":58.42131324710197,\"cap\":98373610,\"spreadPerc\":0.4,\"shareTxForMovement\":183321,\"shareTxUntilMovement\":112348,\"totalShares\":20200000,\"maxShares\":4000000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":22112.711317001304,\"lastPrice\":22228.807359731865,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":false,\"otlkMag\":9.463472057213325,\"otlkMagForecast\":39.618166114925074,\"cap\":251113832,\"spreadPerc\":0.3,\"shareTxForMovement\":147926,\"shareTxUntilMovement\":147926,\"totalShares\":26100000,\"maxShares\":5200000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":397159,\"lastUpdate\":1690288086552,\"ticksUntilCycle\":25}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":5,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"32","AllGangsSave":"","LastExportBonus":"1690237017082","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}