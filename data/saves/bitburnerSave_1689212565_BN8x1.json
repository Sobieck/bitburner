{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":751,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":7836502.993712868,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.5988896000000006,\"hacking_speed\":1.5445672546600313,\"hacking_money\":2.6716800000000003,\"hacking_grow\":1.6,\"hacking\":2.440318839444543,\"strength\":1.472,\"defense\":1.28,\"dexterity\":1.472,\"agility\":1.28,\"charisma\":1.536,\"hacking_exp\":2.9288656320000004,\"strength_exp\":1.472,\"defense_exp\":1.472,\"dexterity_exp\":1.472,\"agility_exp\":1.472,\"charisma_exp\":1.472,\"company_rep\":1.472,\"faction_rep\":1.472,\"crime_money\":1.28,\"crime_success\":1.28,\"hacknet_node_money\":1.28,\"hacknet_node_purchase_cost\":0.78125,\"hacknet_node_ram_cost\":0.78125,\"hacknet_node_core_cost\":0.78125,\"hacknet_node_level_cost\":0.78125,\"work_money\":1.4080000000000001,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"BitWire\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"NeuroFlux Governor\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"},{\"level\":3,\"name\":\"NeuroFlux Governor\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"}],\"city\":\"Sector-12\",\"bitNodeN\":8,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"The Black Hand\",\"NiteSec\",\"Chongqing\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[],\"has4SData\":true,\"has4SDataTixApi\":true,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{\"Bachman & Associates\":\"Software Engineering Intern\",\"OmniTek Incorporated\":\"Junior Software Engineer\",\"Blade Industries\":\"Junior Software Engineer\",\"NWO\":\"Software Engineering Intern\",\"ECorp\":\"Software Engineering Intern\"},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":1273020584.6858425,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":13763858956.404427,\"total\":1023020584.6858431,\"work\":0,\"servers\":-8956094583.67928,\"other\":-1700400000,\"augmentations\":-2084343788.0393052}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":2440630680962.828,\"total\":12982794507.893978,\"work\":0,\"servers\":-8966177482.087523,\"other\":-121700600000,\"augmentations\":-2296981108972.8467}},\"playtimeSinceLastAug\":15734600,\"playtimeSinceLastBitnode\":102420200,\"lastAugReset\":1689196830349,\"lastNodeReset\":1689110144679,\"purchasedServers\":[],\"scriptProdSinceLastAug\":13765858956.404427,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,3],[4,3]]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1686525459069},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1686525759083},{\"ID\":\"WORKOUT\",\"unlockedOn\":1686528279088},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1686532892094},{\"ID\":\"TRAVEL\",\"unlockedOn\":1686563653859},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1686567073861},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1686654552271},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1686667992269},{\"ID\":\"NITESEC\",\"unlockedOn\":1686679931301},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1686687177835},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1686697617844},{\"ID\":\"FROZE\",\"unlockedOn\":1686704316676},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1686746667786},{\"ID\":\"TOR\",\"unlockedOn\":1686746787787},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1686746893212},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1686762613218},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1686764833216},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1686767653216},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1686860173219},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1686862933218},{\"ID\":\"4S\",\"unlockedOn\":1686863833212},{\"ID\":\"DONATION\",\"unlockedOn\":1687005871880},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1687008391895},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1687017151898},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1687131964898},{\"ID\":\"SF1.1\",\"unlockedOn\":1687262446639},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1688063566853},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1688088406853},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1688429201871},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1688468232306},{\"ID\":\"SF4.1\",\"unlockedOn\":1688489952298},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1688562948355},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1688694948374},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1688720088407}],\"terminalCommandHistory\":[\"nano data/latestQuotes.txt \",\"mem scripts/stock/invest-in-stocks.js \",\"kill scripts/coordinator-for-8.js old\",\"run scripts/coordinator-for-8.js old\",\"kill scripts/coordinator-for-8.js old\",\"run scripts/coordinator-for-8.js old\",\"rm scripts/investments/invest-in-stocks.js \",\"run scripts/precalculate-important-data.js \",\"nano data/ramToReserveOnHome.txt \",\"run scripts/tools/manually-end-round.js\",\"nano orderedAugments.txt \",\"run scripts/tools/manually-end-round.js\",\"nano orderedAugments.txt \",\"run scripts/tools/manually-end-round.js\",\"nano orderedAugments.txt \",\"run scripts/tools/manually-end-round.js\",\"nano orderedAugments.txt \",\"run scripts/tools/manually-end-round.js\",\"nano orderedAugments.txt \",\"run scripts/tools/manually-end-round.js\",\"nano orderedAugments.txt \",\"run scripts/tools/manually-end-round.js\",\"nano stopTrading.txt\",\"rm stopTrading.txt\",\"run scripts/tools/manually-end-round.js\",\"nano stopTrading.txt\",\"run scripts/tools/manually-end-round.js\",\"rm stopTrading.txt \",\"nano orderedAugments.txt \",\"nano stopTrading.txt\",\"run scripts/tools/manually-end-round.js finish\",\"run scripts/coordinator-for-8.js \",\"nano data/enviroment.txt \",\"connect hong-fang-tea \",\"connect zer0 \",\"connect si\",\"connect silver-helix \",\"connect avmnite-02h \",\"backdoor\",\"nuke\",\"home\",\"nano stopTrading.txt\",\"rm stopTrading.txt \",\"run scripts/tools/manually-end-round.js \",\"nano stopTrading.txt\",\"rm stopTrading.txt \",\"nano stopTrading.txt\",\"run scripts/tools/manually-end-round.js \",\"nano orderedAugments.txt \",\"run scripts/tools/manually-end-round.js finish\"],\"lastUpdate\":1689212564923,\"lastSave\":1689212542925,\"totalPlaytime\":2691389400,\"currentWork\":{\"ctor\":\"CreateProgramWork\",\"data\":{\"type\":\"CREATE_PROGRAM\",\"singularity\":true,\"cyclesWorked\":1111,\"unitCompleted\":198682.91200000385,\"programName\":\"HTTPWorm.exe\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"40a77882039c0\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"43.3.1.6\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/contracts/coding-contracts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let savedContractsFileNameForHuman;\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const solverRegistry = [\\r\\n        new LzDecompression2Handler(),\\r\\n        new AlgorithmicStockTrading4Handler(),\\r\\n        new AlgorithmicStockTrading3Handler(),\\r\\n        new AlgorithmicStockTrading1Handler(),\\r\\n        new AlgorithmicStockTrading2Handler(),\\r\\n        new SpiralizeMatrixHandler(),\\r\\n        new Encryption1Handler(),\\r\\n    ]\\r\\n\\r\\n    const allContracts = [];\\r\\n\\r\\n    JSON\\r\\n        .parse(ns.read('../../data/enviroment.txt'))\\r\\n        .map(server => {\\r\\n            const hostName = server.name;\\r\\n            ns\\r\\n                .ls(hostName)\\r\\n                .filter(file => file.endsWith('.cct'))\\r\\n                .map(contract => {\\r\\n                    const cont = new Contract(\\r\\n                        hostName,\\r\\n                        contract,\\r\\n                        ns.codingcontract.getContractType(contract, hostName),\\r\\n                        ns.codingcontract.getNumTriesRemaining(contract, hostName),\\r\\n                        // ns.codingcontract.getData(contract, hostName),\\r\\n                        // ns.codingcontract.getDescription(contract, hostName),\\r\\n                    );\\r\\n\\r\\n                    allContracts.push(cont);\\r\\n                });\\r\\n        });\\r\\n    \\r\\n    const thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \\r\\n    ns.rm(thisRoundsContractsFileName);\\r\\n    ns.write(thisRoundsContractsFileName, JSON.stringify(allContracts), \\\"W\\\");\\r\\n\\r\\n    let savedContracts;\\r\\n\\r\\n    if(savedContractsFileNameForHuman){\\r\\n        savedContracts = JSON.parse(ns.read(savedContractsFileNameForHuman));\\r\\n    }\\r\\n\\r\\n    if (!savedContracts || allContracts.length === 0 && savedContracts.length > 0){\\r\\n        const now = new Date();\\r\\n        savedContractsFileNameForHuman = `contracts/${now.toISOString().split('T')[0]}-${String(now.getHours()).padStart(2, 0)}-${String(now.getMinutes()).padStart(2, 0)}.txt`\\r\\n    }\\r\\n\\r\\n    ns.rm(savedContractsFileNameForHuman);\\r\\n    ns.write(savedContractsFileNameForHuman, JSON.stringify(allContracts), \\\"W\\\");\\r\\n\\r\\n    // allContracts\\r\\n    //     .forEach(contract => {\\r\\n    //         if (contract.attemptsLeft === 10 || contract.attemptsLeft === 5) {\\r\\n    //             const solver = solverRegistry.find(x => x.type === contract.type);\\r\\n    //             if (solver) {\\r\\n    //                 const result = solver.solve(contract.input);\\r\\n    //                 const success = ns.codingcontract.attempt(result, contract.name, contract.server);\\r\\n    //                 if (success === \\\"\\\") {\\r\\n    //                     const failuresContractsFileName = `contracts/failure/${contract.server}-${contract.name}-${contract.type.replaceAll(\\\" \\\", \\\"\\\")}.txt`;\\r\\n\\r\\n    //                     const saveThis = {contract, wrongResult: result};\\r\\n                        \\r\\n    //                     ns.rm(failuresContractsFileName);\\r\\n    //                     ns.write(failuresContractsFileName, JSON.stringify(saveThis), \\\"W\\\");\\r\\n\\r\\n\\r\\n    //                     ns.alert(`${contract.name} on ${contract.server} had a problem solving. You need to figure this out. Type: ${contract.type}`);\\r\\n    //                 } else {\\r\\n    //                     ns.toast(`Contract completed: ${success} Type: ${contract.type}`, \\\"success\\\", null);\\r\\n    //                 }\\r\\n    //             }\\r\\n    //         }\\r\\n    //     });\\r\\n\\r\\n}\\r\\n\\r\\nclass Contract {\\r\\n    constructor(server, name, type, attemptsLeft, input, description) {\\r\\n        this.server = server;\\r\\n        this.name = name;\\r\\n        this.type = type;\\r\\n        this.attemptsLeft = attemptsLeft;\\r\\n        this.input = input;\\r\\n        this.description = description;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass LzDecompression2Handler {\\r\\n    type = 'Compression II: LZ Decompression';\\r\\n\\r\\n    solve(input) {\\r\\n        return this.lzDecompression(input);\\r\\n    }\\r\\n\\r\\n    /// all need to be worked on in tests. These are just copies.\\r\\n    lzDecompression(stringToDecode) {\\r\\n        let decompressedString = '';\\r\\n        let startOfNextChunk = 0\\r\\n        let nextSectionCompressed = false;\\r\\n\\r\\n\\r\\n        while (startOfNextChunk < stringToDecode.length) {\\r\\n            const chunkLength = Number(stringToDecode[startOfNextChunk]);\\r\\n\\r\\n\\r\\n            if (chunkLength === 0) {\\r\\n                startOfNextChunk++;\\r\\n                nextSectionCompressed = !nextSectionCompressed;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (nextSectionCompressed) {\\r\\n                const nextCharacterInEncoded = parseInt(stringToDecode[startOfNextChunk + 1]);\\r\\n\\r\\n                const placesBack = nextCharacterInEncoded;\\r\\n                const startText = decompressedString.length - placesBack;\\r\\n                const endOfText = startText + chunkLength;\\r\\n\\r\\n                if (chunkLength <= nextCharacterInEncoded) {\\r\\n                    decompressedString += decompressedString.slice(startText, endOfText);\\r\\n                } else {\\r\\n                    let nextChunk = \\\"\\\";\\r\\n                    const partialChunk = decompressedString.slice(startText, endOfText);\\r\\n\\r\\n                    while (nextChunk.length < chunkLength) {\\r\\n                        if (nextChunk.length + partialChunk.length > chunkLength) {\\r\\n                            const howMuchLeftInChunk = chunkLength - nextChunk.length;\\r\\n                            nextChunk += partialChunk.slice(0, howMuchLeftInChunk)\\r\\n                        } else {\\r\\n                            nextChunk += partialChunk;\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    decompressedString += nextChunk;\\r\\n                }\\r\\n\\r\\n                startOfNextChunk += 2;\\r\\n                nextSectionCompressed = false;\\r\\n            } else {\\r\\n                const startText = startOfNextChunk + 1;\\r\\n                const endOfText = startText + chunkLength;\\r\\n                decompressedString += stringToDecode.slice(startText, endOfText);\\r\\n                startOfNextChunk = endOfText;\\r\\n                nextSectionCompressed = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        return decompressedString;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading1Handler {\\r\\n    type = 'Algorithmic Stock Trader I';\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = 1;\\r\\n        const stockPricesByDay = input;\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return new AlgorithmicStockTrading4Handler().tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading2Handler {\\r\\n    type = 'Algorithmic Stock Trader II';\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = input.length;\\r\\n        const stockPricesByDay = input;\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return new AlgorithmicStockTrading4Handler().tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading3Handler {\\r\\n    type = 'Algorithmic Stock Trader III';\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = 2;\\r\\n        const stockPricesByDay = input;\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return new AlgorithmicStockTrading4Handler().tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading4Handler {\\r\\n    type = 'Algorithmic Stock Trader IV';\\r\\n\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = input[0];\\r\\n        const stockPricesByDay = input[1];\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return this.tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n\\r\\n    tradeStock(maxNumberOfTrades, stockPricesByDay) {\\r\\n        if (maxNumberOfTrades === 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        let profitsPerTransaction = []\\r\\n\\r\\n        for (let i = stockPricesByDay.length - 1; i >= 1; i--) {\\r\\n            const priceToSeeIfHasNoVolitility = stockPricesByDay[i];\\r\\n\\r\\n            const yesterdaysPrice = stockPricesByDay[i - 1]\\r\\n            const tomorrowsPrice = stockPricesByDay[i + 1]\\r\\n\\r\\n            if (\\r\\n                (yesterdaysPrice <= priceToSeeIfHasNoVolitility && priceToSeeIfHasNoVolitility <= tomorrowsPrice) || // rising prices filter\\r\\n                (!tomorrowsPrice && yesterdaysPrice >= priceToSeeIfHasNoVolitility) || // end price\\r\\n                (yesterdaysPrice >= priceToSeeIfHasNoVolitility && priceToSeeIfHasNoVolitility >= tomorrowsPrice)) { // falling price filter\\r\\n                stockPricesByDay.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < stockPricesByDay.length; i++) {\\r\\n            const price = stockPricesByDay[i];\\r\\n            const potentialBuyPrice = stockPricesByDay[i - 1];\\r\\n            let potentialProfit = 0;\\r\\n\\r\\n            if (potentialBuyPrice) {\\r\\n                potentialProfit = price - potentialBuyPrice;\\r\\n            }\\r\\n\\r\\n            if (potentialProfit < 0) {\\r\\n                potentialProfit = 0;\\r\\n            }\\r\\n\\r\\n\\r\\n            profitsPerTransaction.push({ price, potentialProfit });\\r\\n        }\\r\\n\\r\\n        if (maxNumberOfTrades >= profitsPerTransaction.filter(x => x.potentialProfit > 0).length) {\\r\\n            return profitsPerTransaction\\r\\n                .reduce((acc, x) => acc + x.potentialProfit, 0);\\r\\n        }\\r\\n\\r\\n        const minProfit = Math.min(...profitsPerTransaction.filter(x => x.potentialProfit !== 0).map(x => x.potentialProfit));\\r\\n        const countOfMinProfits = profitsPerTransaction.filter(x => x.potentialProfit === minProfit).length;\\r\\n        const maxPrice = Math.max(...stockPricesByDay);\\r\\n        const arraysToWorkWith = [];\\r\\n\\r\\n        for (let i = 0; i < profitsPerTransaction.length; i++) {\\r\\n            const profitPerTranaction = profitsPerTransaction[i];\\r\\n\\r\\n            if (profitPerTranaction.potentialProfit === minProfit) {\\r\\n\\r\\n                const copyOfProfitsPerTransaction = profitsPerTransaction.map(x => x)\\r\\n                if (profitPerTranaction.price === maxPrice) {\\r\\n                    copyOfProfitsPerTransaction.splice(i - 1, 1);\\r\\n                } else {\\r\\n                    copyOfProfitsPerTransaction.splice(i, 1); // if there is a bigger price in the future, splice sell price. \\r\\n                }\\r\\n\\r\\n                arraysToWorkWith.push(copyOfProfitsPerTransaction.map(x => x.price));\\r\\n            }\\r\\n\\r\\n            if (arraysToWorkWith.length === countOfMinProfits) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        const potentialProfitsForAllTrades = []\\r\\n        for (const newArrayOfPrices of arraysToWorkWith) {\\r\\n            potentialProfitsForAllTrades.push(this.tradeStock(maxNumberOfTrades, newArrayOfPrices))\\r\\n        }\\r\\n\\r\\n        return Math.max(...potentialProfitsForAllTrades);\\r\\n\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass SpiralizeMatrixHandler {\\r\\n    type = \\\"Spiralize Matrix\\\";\\r\\n\\r\\n    solve(matrix) {\\r\\n        return this.solveRecursively(matrix);\\r\\n    }\\r\\n\\r\\n    solveRecursively(matrix, spiralOrderResult = []){\\r\\n\\r\\n        if(matrix.length === 0){\\r\\n            return spiralOrderResult;\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < matrix.length; i++) {\\r\\n            if (i === 0 || i === matrix.length - 1) {\\r\\n                let rowToEmpty = matrix[i];\\r\\n\\r\\n                if(i === matrix.length - 1 && i !== 0){\\r\\n                    rowToEmpty.reverse()\\r\\n                }\\r\\n\\r\\n                for (let x = 0; x < rowToEmpty.length; x++) {\\r\\n                    const number = rowToEmpty[x];\\r\\n                    spiralOrderResult.push(number);\\r\\n                }\\r\\n\\r\\n                rowToEmpty.length = 0\\r\\n            } else {\\r\\n                let rowBeingUsed = matrix[i];\\r\\n\\r\\n                spiralOrderResult.push(rowBeingUsed.pop());\\r\\n            }\\r\\n        }      \\r\\n\\r\\n        \\r\\n        for (let i = matrix.length - 1; i > -1; i--) {\\r\\n            if(matrix[i].length === 0){\\r\\n                matrix.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (let i = matrix.length - 1; i > -1; i--) {\\r\\n            const row = matrix[i];\\r\\n            row.reverse();\\r\\n            spiralOrderResult.push(row.pop());\\r\\n            row.reverse();            \\r\\n        }\\r\\n\\r\\n        return this.solveRecursively(matrix, spiralOrderResult)\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Encryption1Handler {\\r\\n    type = 'Encryption I: Caesar Cipher';\\r\\n\\r\\n    solve([string, shift]) {\\r\\n\\r\\n        let returnString = \\\"\\\";\\r\\n\\r\\n        if (string) {\\r\\n            for (const character of string) {\\r\\n                if (character === \\\" \\\") {\\r\\n                    returnString += \\\" \\\";\\r\\n                }\\r\\n                else {\\r\\n                    const charCode = character.charCodeAt(0);\\r\\n\\r\\n                    if (charCode) {\\r\\n                        let newCharCode = charCode - shift;\\r\\n\\r\\n                        if (newCharCode < 65) {\\r\\n                            const amountLessThan65 = 65 - newCharCode;\\r\\n                            newCharCode = 91 - amountLessThan65;\\r\\n                        }\\r\\n\\r\\n                        returnString += String.fromCharCode(newCharCode);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return returnString;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/contracts/coding-contracts.js\",\"server\":\"home\"}}],[\"scripts/hacking/advanced-dispatch.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const nameOfrecordOfWhoIsBeingHacked = 'data/recordOfWhoIsBeingHacked.txt';\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\";\\r\\n\\r\\n    const hackScript = 'scripts/hacking/hack-until-worked.js';\\r\\n    const growScript = 'scripts/hacking/grow.js';\\r\\n    const weakenScript = 'scripts/hacking/weaken.js';\\r\\n\\r\\n    let memoryLimited = false;\\r\\n    if(ns.fileExists('data/ramObservations.txt') || ns.fileExists('buyOrUpgradeServerFlag.txt')){\\r\\n        memoryLimited = true;\\r\\n    }\\r\\n\\r\\n    const homeMemoryLimitations = JSON.parse(ns.read(\\\"data/ramToReserveOnHome.txt\\\"));\\r\\n\\r\\n    let batchTargets = [];\\r\\n\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        const batchQueue = JSON.parse(ns.read(batchQueuesFileName));\\r\\n        batchTargets = batchQueue.map(x => x[0]);\\r\\n    }\\r\\n\\r\\n    let recordOfWhoIsBeingHacked = new Map();\\r\\n\\r\\n    if (ns.fileExists(nameOfrecordOfWhoIsBeingHacked)) {\\r\\n        recordOfWhoIsBeingHacked = new Map(JSON.parse(ns.read(nameOfrecordOfWhoIsBeingHacked)));\\r\\n    }\\r\\n\\r\\n    for (const recordKey of recordOfWhoIsBeingHacked.keys()) {\\r\\n        const record = recordOfWhoIsBeingHacked.get(recordKey);\\r\\n        if (record.pid === 0) {\\r\\n            recordOfWhoIsBeingHacked.delete(recordKey);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n\\r\\n    const allHackedMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    let allMachinesByOrderOfValue = allHackedMachines\\r\\n        .filter(x => !x.server.purchasedByPlayer && !batchTargets.includes(x.name) && x.server.moneyMax > 0)\\r\\n        .sort((a, b) => b.server.moneyMax - a.server.moneyMax)\\r\\n        .map(x => new HackedRecord(\\r\\n            x.name,\\r\\n            x.server.moneyMax,\\r\\n            x.server.minDifficulty,\\r\\n            x.server.hackDifficulty,\\r\\n            x.server.moneyAvailable,\\r\\n        ))\\r\\n\\r\\n    if(memoryLimited){\\r\\n        allMachinesByOrderOfValue = allMachinesByOrderOfValue.slice(0, 15);\\r\\n    }\\r\\n\\r\\n    cleanProcessesAttackingBatchTarget(ns, recordOfWhoIsBeingHacked, batchTargets);\\r\\n    \\r\\n    cleanRecordOfWhoIsBeingHacked(ns, recordOfWhoIsBeingHacked);\\r\\n\\r\\n    const machinesNextInQueueToHack = getMachinesToHack(allMachinesByOrderOfValue, recordOfWhoIsBeingHacked, ns);\\r\\n\\r\\n    const hackQueue = [];\\r\\n    const growAndWeakenQueue = [];\\r\\n\\r\\n    machinesNextInQueueToHack.forEach(machineInQuestion => {\\r\\n        if (machineInQuestion.needsWeakening() || machineInQuestion.needsGrowing()) {\\r\\n            growAndWeakenQueue.push(machineInQuestion);\\r\\n        } else {\\r\\n            hackQueue.push(machineInQuestion);\\r\\n        }\\r\\n    });\\r\\n\\r\\n    const ramNeededForOneHackThread = ns.getScriptRam(hackScript);\\r\\n\\r\\n    hackQueue.forEach(target => {\\r\\n\\r\\n        let numberOfThreads = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable));\\r\\n        const ramNeeded = ramNeededForOneHackThread * numberOfThreads;\\r\\n        let machineToRunOn = getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations);\\r\\n\\r\\n        if (machineToRunOn && numberOfThreads > 0) {\\r\\n            ns.scp(hackScript, machineToRunOn.hostname);\\r\\n            const pid = ns.exec(hackScript, machineToRunOn.hostname, numberOfThreads, target.name);\\r\\n            if (pid !== 0) {\\r\\n                target.hacking();\\r\\n                target.machineRunningOn = machineToRunOn.hostname;\\r\\n                target.pid = pid;\\r\\n                recordOfWhoIsBeingHacked.set(target.name, target);\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n\\r\\n\\r\\n    const ramNeededForWeaken = ns.getScriptRam(weakenScript);\\r\\n    const ramNeededForGrow = ns.getScriptRam(growScript);\\r\\n    growAndWeakenQueue.map(target => {\\r\\n        let machineToRunOn;\\r\\n        let threadsNeeded;\\r\\n        let script;\\r\\n\\r\\n        if (target.needsGrowing()) {\\r\\n            target.growing();\\r\\n\\r\\n            script = growScript;\\r\\n            const serverToHack = getServer(ns, target.name, homeMemoryLimitations);\\r\\n            const player = ns.getPlayer();\\r\\n\\r\\n            if (ns.fileExists('Formulas.exe')) {\\r\\n                threadsNeeded = Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, 1));\\r\\n            } else {\\r\\n                threadsNeeded = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable)) * 5;\\r\\n\\r\\n                if (threadsNeeded === 0) {\\r\\n                    threadsNeeded = 5000;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            machineToRunOn = getMachineWithEnoughRam(ns, threadsNeeded * ramNeededForGrow, enviroment, homeMemoryLimitations);\\r\\n\\r\\n            if (!machineToRunOn) {\\r\\n                [threadsNeeded, machineToRunOn] = getMachineWithNumberOfThreads(ns, enviroment, threadsNeeded, ramNeededForGrow, homeMemoryLimitations);\\r\\n            }\\r\\n\\r\\n            if (machineToRunOn && machineToRunOn.cpuCores > 1 && ns.fileExists('Formulas.exe')) {\\r\\n                threadsNeeded = Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, machineToRunOn.cpuCores));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (target.needsWeakening()) {\\r\\n            target.weakening();\\r\\n\\r\\n            script = weakenScript;\\r\\n            const amountToWeaken = target.hackDifficulty - target.minDifficulty;\\r\\n\\r\\n            threadsNeeded = getNumberOfThreadsToWeaken(ns, 1, amountToWeaken);\\r\\n\\r\\n            machineToRunOn = getMachineWithEnoughRam(ns, threadsNeeded * ramNeededForWeaken, enviroment, homeMemoryLimitations);\\r\\n\\r\\n            if (!machineToRunOn) {\\r\\n                [threadsNeeded, machineToRunOn] = getMachineWithNumberOfThreads(ns, enviroment, threadsNeeded, ramNeededForWeaken, homeMemoryLimitations);\\r\\n            }\\r\\n\\r\\n            if (machineToRunOn && machineToRunOn.cpuCores > 1) {\\r\\n                threadsNeeded = getNumberOfThreadsToWeaken(ns, machineToRunOn.cpuCores, amountToWeaken);\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n\\r\\n        if (machineToRunOn && threadsNeeded > 0) {\\r\\n            ns.scp(script, machineToRunOn.hostname);\\r\\n            const pid = ns.exec(script, machineToRunOn.hostname, threadsNeeded, target.name);\\r\\n\\r\\n            if (pid !== 0) {\\r\\n                target.machineRunningOn = machineToRunOn.hostname;\\r\\n                target.pid = pid;\\r\\n\\r\\n                recordOfWhoIsBeingHacked.set(target.name, target);\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n\\r\\n    ns.rm(nameOfrecordOfWhoIsBeingHacked);\\r\\n    ns.write(nameOfrecordOfWhoIsBeingHacked, JSON.stringify(Array.from(recordOfWhoIsBeingHacked.entries()), \\\"W\\\"));\\r\\n\\r\\n    function cleanProcessesAttackingBatchTarget(ns, recordOfWhoIsBeingHacked, batchTargets) {\\r\\n        for (const machineHackin of recordOfWhoIsBeingHacked) {\\r\\n            const whoTheyHackin = machineHackin[0];\\r\\n\\r\\n            if (batchTargets.includes(whoTheyHackin)) {\\r\\n                ns.kill(recordOfWhoIsBeingHacked.get(whoTheyHackin).pid);\\r\\n                recordOfWhoIsBeingHacked.delete(whoTheyHackin);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getMachineWithNumberOfThreads(ns, enviroment, threads, ramCostPerThread, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n    const buyOrUpgradeServerFlag = 'buyOrUpgradeServerFlag.txt';\\r\\n    let originalAmountNeeded = ramCostPerThread * threads;\\r\\n\\r\\n    let globalMaxAmountNeeded = 0;\\r\\n\\r\\n    if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n        globalMaxAmountNeeded = JSON.parse(ns.read(buyOrUpgradeServerFlag));\\r\\n    }\\r\\n\\r\\n    if (originalAmountNeeded > globalMaxAmountNeeded) {\\r\\n        globalMaxAmountNeeded = originalAmountNeeded;\\r\\n        ns.rm(buyOrUpgradeServerFlag);\\r\\n        ns.write(buyOrUpgradeServerFlag, globalMaxAmountNeeded, \\\"W\\\");\\r\\n    }\\r\\n\\r\\n    while (threads > 0 && !machineToRunOn) {\\r\\n        threads--;\\r\\n\\r\\n        machineToRunOn = getMachineWithEnoughRam(ns, threads * ramCostPerThread, enviroment, homeMemoryLimitations)\\r\\n    }\\r\\n\\r\\n    return [threads, machineToRunOn];\\r\\n}\\r\\n\\r\\nfunction getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n\\r\\n    const allHackableMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    allHackableMachines.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const machinesWithRamAvailable = allHackableMachines\\r\\n        .filter(x => x.server.ramUsed < x.server.maxRam && x.server.maxRam !== 0);\\r\\n\\r\\n    const serversWithEnoughRam = machinesWithRamAvailable\\r\\n        .filter(x => (x.server.maxRam - x.server.ramUsed) > ramNeeded)\\r\\n        .sort((b, a) => b.server.maxRam - a.server.maxRam);\\r\\n\\r\\n    for (const potentialServerToRun of serversWithEnoughRam) {\\r\\n        const server = getServer(ns, potentialServerToRun.name, homeMemoryLimitations);\\r\\n        const freeRam = server.maxRam - server.ramUsed;\\r\\n        if (freeRam > ramNeeded) {\\r\\n            machineToRunOn = server;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machineToRunOn;\\r\\n}\\r\\n\\r\\n\\r\\nfunction getServer(ns, serverName, homeMemoryLimitations) {\\r\\n    const server = ns.getServer(serverName);\\r\\n\\r\\n    if (serverName === \\\"home\\\") {\\r\\n\\r\\n        let ramToReserve = homeMemoryLimitations.ramToReserve;\\r\\n\\r\\n        if(server.maxRam < ramToReserve){\\r\\n            ramToReserve = homeMemoryLimitations.ramToReserveInLimitedEnvironment;\\r\\n        }\\r\\n\\r\\n        server.maxRam -= ramToReserve;\\r\\n        server.ramUsed -= ramToReserve;\\r\\n\\r\\n        if (server.ramUsed < 0) {\\r\\n            server.ramUsed = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return server;\\r\\n}\\r\\n\\r\\nfunction getMachinesToHack(hackableMachinesInTheEnvironment, recordOfWhoIsBeingHacked, ns) {\\r\\n    const machinesNextInQueueToHack = [];\\r\\n    const namesOfMachinesBeingHacked = Array.from(recordOfWhoIsBeingHacked.keys());\\r\\n\\r\\n    for (const hackableMachine of hackableMachinesInTheEnvironment) {\\r\\n        if (!namesOfMachinesBeingHacked.includes(hackableMachine.name)) {\\r\\n            machinesNextInQueueToHack.push(hackableMachine);\\r\\n        } else {\\r\\n            const recordOfHackin = recordOfWhoIsBeingHacked.get(hackableMachine.name);\\r\\n            const moneyChange = recordOfHackin.moneyAvailable - hackableMachine.moneyAvailable;\\r\\n            const difficultyChange = recordOfHackin.hackDifficulty - hackableMachine.hackDifficulty;\\r\\n\\r\\n            if (moneyChange !== 0 || difficultyChange !== 0) {\\r\\n                machinesNextInQueueToHack.push(hackableMachine);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machinesNextInQueueToHack;\\r\\n}\\r\\n\\r\\nexport class HackedRecord {\\r\\n    constructor(name, maxMoney, minDifficulty, hackDifficulty, moneyAvailable) {\\r\\n        this.name = name;\\r\\n        this.moneyThreshhold = maxMoney * 0.75;\\r\\n        this.securityThreshholdTarget = minDifficulty + 5;\\r\\n        this.hackDifficulty = hackDifficulty;\\r\\n        this.moneyAvailable = moneyAvailable;\\r\\n        this.minDifficulty = minDifficulty;\\r\\n        this.machineRunningOn;\\r\\n        this.pid;\\r\\n\\r\\n        this.isWeakening = false;\\r\\n        this.isGrowing = false;\\r\\n        this.isHacking = false;\\r\\n    }\\r\\n\\r\\n    needsWeakening() {\\r\\n        return this.hackDifficulty > this.securityThreshholdTarget;\\r\\n    }\\r\\n\\r\\n    needsGrowing() {\\r\\n        return this.moneyAvailable < this.moneyThreshhold;\\r\\n    }\\r\\n\\r\\n    weakening() {\\r\\n        this.isWeakening = true;\\r\\n        this.isGrowing = false;\\r\\n        this.isHacking = false;\\r\\n    }\\r\\n\\r\\n    growing() {\\r\\n        this.isWeakening = false;\\r\\n        this.isGrowing = true;\\r\\n        this.isHacking = false;\\r\\n    }\\r\\n\\r\\n    hacking() {\\r\\n        this.isWeakening = false;\\r\\n        this.isGrowing = false;\\r\\n        this.isHacking = true;\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getNumberOfThreadsToWeaken(ns, cpuCores, amountToWeaken) {\\r\\n    let numberOfThreadsToWeaken = 0;\\r\\n    let foundNumberOfThreads = false;\\r\\n    while (!foundNumberOfThreads) {\\r\\n        numberOfThreadsToWeaken++;\\r\\n\\r\\n        const amountNumberOfThreadsWillWeaken = Math.ceil(ns.weakenAnalyze(numberOfThreadsToWeaken, cpuCores));\\r\\n        if (amountNumberOfThreadsWillWeaken > amountToWeaken) {\\r\\n            foundNumberOfThreads = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //add a small margin\\r\\n    numberOfThreadsToWeaken += 20;\\r\\n    return numberOfThreadsToWeaken;\\r\\n}\\r\\n\\r\\nfunction cleanRecordOfWhoIsBeingHacked(ns, recordOfWhoIsBeingHacked) {\\r\\n    for (const key of recordOfWhoIsBeingHacked.keys()) {\\r\\n        const record = recordOfWhoIsBeingHacked.get(key);\\r\\n        \\r\\n        if(!ns.isRunning(record.pid)){\\r\\n            recordOfWhoIsBeingHacked.delete(key);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/advanced-dispatch.js\",\"server\":\"home\"}}],[\"scripts/hacking/batch-dispatch.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let failuresThisRun = 0;\\r\\nlet successesThisRun = 0;\\r\\n\\r\\nlet lastTimeVisited = new Date();\\r\\nlet secondsBetweenVisits = [];\\r\\nlet lastRecordedToConsole = new Date();\\r\\n\\r\\nlet visitsToFunction = 0;\\r\\n\\r\\nlet countOfSuccesses = [];\\r\\nlet countOfFailures = [];\\r\\nlet averageErrorRateOver10Minutes = 1;\\r\\nlet errorRateAtWhichWeAllowNewThings = 0.1;\\r\\n\\r\\nexport async function main(ns) {\\r\\n    visitsToFunction++;\\r\\n\\r\\n    const buyOrUpgradeServerFlagFile = 'buyOrUpgradeServerFlag.txt';\\r\\n    const memoryConstrained = ns.fileExists('data/ramObservations.txt') || ns.fileExists(buyOrUpgradeServerFlagFile);\\r\\n\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\"\\r\\n\\r\\n    let batchQueueForDifferentTargets = new Map();\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        batchQueueForDifferentTargets = new Map(JSON.parse(ns.read(batchQueuesFileName)));\\r\\n    }\\r\\n\\r\\n    const homeMemoryLimitations = JSON.parse(ns.read(\\\"data/ramToReserveOnHome.txt\\\"));\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n\\r\\n    const playerServers = enviroment\\r\\n        .filter(x => x.server.purchasedByPlayer);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    playerServers.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const totalBoughtMemory = playerServers.reduce((acc, x) => acc + x.server.maxRam, 0);\\r\\n\\r\\n    const ramNeededForBatchesFile = \\\"data/ramNeededToStartBatches.txt\\\";\\r\\n    const memoryNeededForBatches = 105_000;\\r\\n\\r\\n    if (totalBoughtMemory < memoryNeededForBatches) {\\r\\n        const ramNeededToStartBatches = Math.round(memoryNeededForBatches - totalBoughtMemory);\\r\\n        ns.rm(ramNeededForBatchesFile);\\r\\n        ns.write(ramNeededForBatchesFile, ramNeededToStartBatches, \\\"W\\\");\\r\\n\\r\\n        if (visitsToFunction > 100) {\\r\\n            visitsToFunction = 0;\\r\\n            ns.toast(`Ram Needed to Start Batches: ${ramNeededToStartBatches}`, \\\"warning\\\", 180000)\\r\\n        }\\r\\n\\r\\n        ns.run('scripts/hacking/memory-starved-dispatch.js');\\r\\n        return;\\r\\n    } else {\\r\\n        ns.rm(ramNeededForBatchesFile);\\r\\n    }\\r\\n\\r\\n    const targetNames = Array.from(batchQueueForDifferentTargets.keys());\\r\\n    const player = ns.getPlayer();\\r\\n\\r\\n    giveBatchQueueStructure(targetNames, batchQueueForDifferentTargets);\\r\\n    cleanFinishedAndPoisonedJobsFromQueue(targetNames, batchQueueForDifferentTargets, ns);\\r\\n\\r\\n    const noMoreInvestingForEndGame = ns.fileExists(\\\"stopInvesting.txt\\\");\\r\\n\\r\\n    const anyBatchNotPrepping = targetNames\\r\\n        .map(x => batchQueueForDifferentTargets.get(x))\\r\\n        .filter(x => !x.prepStage)\\r\\n        .length > 0;\\r\\n\\r\\n\\r\\n    for (const nameOfTarget of targetNames) {\\r\\n        const targetServer = ns.getServer(nameOfTarget);\\r\\n        const batchForTarget = batchQueueForDifferentTargets.get(nameOfTarget);\\r\\n\\r\\n        if (!noMoreInvestingForEndGame) {\\r\\n            prepServerForBatching(targetServer, batchForTarget, ns, player, nameOfTarget, anyBatchNotPrepping);\\r\\n        }\\r\\n\\r\\n        createBatchesOfJobs(batchForTarget, ns, targetServer, player);\\r\\n    }\\r\\n\\r\\n    await executeJobs(ns, targetNames, batchQueueForDifferentTargets, player, enviroment, homeMemoryLimitations);\\r\\n    addNewTargetsToQueueIfNeeded(batchQueueForDifferentTargets, targetNames, ns, enviroment, player, noMoreInvestingForEndGame, homeMemoryLimitations);\\r\\n    adjustTimingsOrOutrightDeleteDependingOnReliability(ns, batchQueueForDifferentTargets, targetNames);\\r\\n\\r\\n    ns.rm(batchQueuesFileName);\\r\\n    ns.write(batchQueuesFileName, JSON.stringify(Array.from(batchQueueForDifferentTargets.entries()), \\\"W\\\"));\\r\\n\\r\\n    const total = failuresThisRun + successesThisRun;\\r\\n    const now = new Date();\\r\\n    const secondsSinceLastVisit = Math.abs(now.getTime() - lastTimeVisited.getTime()) / 1000;\\r\\n    lastTimeVisited = now;\\r\\n    if (secondsSinceLastVisit !== 0) {\\r\\n        secondsBetweenVisits.push(secondsSinceLastVisit);\\r\\n    }\\r\\n\\r\\n\\r\\n    const moneyWeHaveNow = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (now.getMinutes() !== lastRecordedToConsole.getMinutes() && total > 0) {\\r\\n        const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n\\r\\n        const errorRate = 1 - (successesThisRun / total);\\r\\n\\r\\n        if (errorRate > 0.03) {\\r\\n            ns.toast(`${timeStamp} Error Rate in batches ${errorRate.toLocaleString(undefined, { style: 'percent', minimumFractionDigits: 2 })}`, \\\"error\\\", 60000);\\r\\n        }\\r\\n\\r\\n        const averageTimeBetweenVisits = secondsBetweenVisits.reduce((acc, b) => acc + b, 0) / secondsBetweenVisits.length;\\r\\n\\r\\n        if (averageTimeBetweenVisits > 2.1) {\\r\\n            ns.toast(`${timeStamp} Average of ${averageTimeBetweenVisits.toFixed(2)} seconds between visits`, \\\"warning\\\", null)\\r\\n        }\\r\\n\\r\\n        const formatter = new Intl.NumberFormat('en-US', {\\r\\n            style: 'currency',\\r\\n            currency: 'USD',\\r\\n        });\\r\\n\\r\\n        const moneyFormatted = formatter.format(moneyWeHaveNow);\\r\\n\\r\\n        let consoleUpdate = `${timeStamp} Money we have now: ${moneyFormatted} | Number of targeted server: ${String(targetNames.length).padStart(2, 0)}`;\\r\\n\\r\\n        if (memoryConstrained) {\\r\\n            consoleUpdate += \\\" | Memory Constrained\\\";\\r\\n        }\\r\\n\\r\\n        ns.tprint(consoleUpdate);\\r\\n\\r\\n        const reliabilityForBatchFile = 'data/reliabilityForEvery100Batches.txt';\\r\\n        let batchReliability = [];\\r\\n\\r\\n        if (ns.fileExists(reliabilityForBatchFile)) {\\r\\n            batchReliability = JSON.parse(ns.read(reliabilityForBatchFile));\\r\\n        }\\r\\n\\r\\n        batchReliability.push({ errorRate, averageTimeBetweenVisits, now, moneyWeHaveNow, numberOfTargetedServers: targetNames.length });\\r\\n\\r\\n\\r\\n        ns.rm(reliabilityForBatchFile);\\r\\n        ns.write(reliabilityForBatchFile, JSON.stringify(batchReliability), \\\"W\\\");\\r\\n\\r\\n\\r\\n        countOfFailures.push(failuresThisRun);\\r\\n        countOfSuccesses.push(successesThisRun);\\r\\n\\r\\n        if (countOfFailures.length > 10) {\\r\\n            countOfFailures.shift();\\r\\n        }\\r\\n\\r\\n        if (countOfSuccesses.length > 10) {\\r\\n            countOfSuccesses.shift();\\r\\n        }\\r\\n\\r\\n        const successesIn10Minutes = countOfSuccesses.reduce((acc, b) => acc + b, 0);\\r\\n        const failuresIn10Minutes = countOfFailures.reduce((acc, b) => acc + b, 0);\\r\\n        const totalIn10Minutes = successesIn10Minutes + failuresIn10Minutes;\\r\\n\\r\\n        averageErrorRateOver10Minutes = 1 - (successesIn10Minutes / totalIn10Minutes);\\r\\n\\r\\n        if (averageErrorRateOver10Minutes > errorRateAtWhichWeAllowNewThings) {\\r\\n            ns.toast(`${timeStamp} Error Rate over 10 minutes is: ${averageErrorRateOver10Minutes.toLocaleString(undefined, { style: 'percent', minimumFractionDigits: 2 })}`, \\\"error\\\", 15000);\\r\\n        }\\r\\n\\r\\n\\r\\n        failuresThisRun = 0;\\r\\n        successesThisRun = 0;\\r\\n        secondsBetweenVisits.length = 0;\\r\\n        lastRecordedToConsole = now;\\r\\n    }\\r\\n\\r\\n    if (moneyWeHaveNow > 1_000_000_000_000 ||\\r\\n        homeServer.maxRam - homeServer.ramUsed > 300000 ||\\r\\n        targetNames\\r\\n            .map(x => batchQueueForDifferentTargets.get(x))\\r\\n            .every(x => !x.targetMachineSaturatedWithAttacks)) {\\r\\n        if (!memoryConstrained) {\\r\\n            ns.run('scripts/hacking/advanced-dispatch.js');\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nclass BatchQueueForTarget {\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    targetMachineSaturatedWithAttacks = false;\\r\\n\\r\\n    prepStage = true;\\r\\n    weakeningDoneAfter;\\r\\n    successfulWeakening = false;\\r\\n    growDoneAfter;\\r\\n    successfulGrowing = false;\\r\\n    hackDoneAfter;\\r\\n    successfulHacking = false;\\r\\n\\r\\n    securityWeNeedToReduceAfterFullHack;\\r\\n    securityWeNeedToReduceAfterFullGrowth;\\r\\n    originalNumberOfThreadsForFullMoney;\\r\\n\\r\\n    successes = 0;\\r\\n    failures = 0;\\r\\n    successesInTheLastHour = 0;\\r\\n    failuresInTheLastHour = 0;\\r\\n    lastResetHour = 0\\r\\n\\r\\n    executionWindowSizeInSeconds = 4;\\r\\n\\r\\n    batchesQueue = [];\\r\\n\\r\\n    lastFailure;\\r\\n\\r\\n    getAllocatedMemory(machineRunningOn) {\\r\\n        return this.batchesQueue\\r\\n            .reduce((acc, x) => acc.concat(x.jobs), [])\\r\\n            .filter(x => x.machineRunningOn === machineRunningOn)\\r\\n            .reduce((acc, x) => acc + x, 0);\\r\\n    }\\r\\n\\r\\n    thereAreNoJobsRunningAfter() {\\r\\n        return Math.max(...this.batchesQueue.map(x => x.wholeBatchFinishsBefore()));\\r\\n    }\\r\\n}\\r\\n\\r\\nclass BatchOfJobs {\\r\\n    jobs = [];\\r\\n    //6 second window? 2 cycles seems like enough for each step.\\r\\n\\r\\n    startTime;\\r\\n    poisonedBatch = false;\\r\\n\\r\\n    wholeBatchFinishsBefore() {\\r\\n        return Math.max(...this.jobs.map(x => new Date(x.endBefore)))\\r\\n    }\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n}\\r\\n\\r\\nclass JobHasTo {\\r\\n    executing = false;\\r\\n    ramCost = 0;\\r\\n    machineRunningOn;\\r\\n    pid;\\r\\n    executedAt;\\r\\n    expectedEndTime;\\r\\n\\r\\n    firstLookStartedNowEndAt;\\r\\n\\r\\n    lastMissForDoneBeforeWindow;\\r\\n    firstMissForAfterWindow;\\r\\n\\r\\n    constructor(endAfter, endBefore, type) {\\r\\n        this.endAfter = endAfter;\\r\\n        this.endBefore = endBefore;\\r\\n        this.type = type;\\r\\n        // this.types = [\\\"grow\\\", \\\"hack\\\", \\\"weaken-after-hack\\\", \\\"weaken-after-grow\\\",\\r\\n        //     \\\"weaken-dynamic\\\", \\\"grow-dynamic\\\", \\\"hack-dynamic\\\"]\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction adjustTimingsOrOutrightDeleteDependingOnReliability(ns, batchQueueForDifferentTargets, targetNames) {\\r\\n    const currentTime = new Date();\\r\\n    let countOfDeleted = 0;\\r\\n\\r\\n    for (const nameOfTarget of targetNames) {\\r\\n        const queueOfBatches = batchQueueForDifferentTargets.get(nameOfTarget);\\r\\n        const currentHour = currentTime.getHours()\\r\\n\\r\\n        if (currentHour !== queueOfBatches.lastResetHour) {\\r\\n            if (queueOfBatches.failuresInTheLastHour === 0 && queueOfBatches.successesInTheLastHour > 0 && queueOfBatches.executionWindowSizeInSeconds > 2) {\\r\\n                queueOfBatches.executionWindowSizeInSeconds--;\\r\\n            }\\r\\n\\r\\n            const totalRunsThisHour = queueOfBatches.successesInTheLastHour + queueOfBatches.failuresInTheLastHour;\\r\\n            const ratioOfFailuresThisHour = 1 - (queueOfBatches.successesInTheLastHour / totalRunsThisHour);\\r\\n\\r\\n            if (ratioOfFailuresThisHour > 0.1) {\\r\\n                queueOfBatches.executionWindowSizeInSeconds++;\\r\\n            }\\r\\n\\r\\n\\r\\n            queueOfBatches.lastResetHour = currentHour;\\r\\n            queueOfBatches.successesInTheLastHour = 0;\\r\\n            queueOfBatches.failuresInTheLastHour = 0;\\r\\n\\r\\n            if (ratioOfFailuresThisHour > 0.9 && totalRunsThisHour > 10 && countOfDeleted < 2 && targetNames.length > 2) {\\r\\n                for (const batch of queueOfBatches.batchesQueue) {\\r\\n                    batch.jobs.map(x => {\\r\\n                        if (x.pid) {\\r\\n                            ns.kill(x.pid);\\r\\n                        }\\r\\n                    });\\r\\n\\r\\n                }\\r\\n\\r\\n                batchQueueForDifferentTargets.delete(nameOfTarget);\\r\\n                ns.tprint(`Deleted ${nameOfTarget} from batchQueue for failing too often. Ratio of Failure: ${ratioOfFailuresThisHour}. Total Runs: ${totalRunsThisHour}`);\\r\\n                countOfDeleted++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction createBatchesOfJobs(batchForTarget, ns, targetServer, player) {\\r\\n    if (batchForTarget.prepStage === false) {\\r\\n\\r\\n        if (batchForTarget.batchesQueue.length === 0 || batchForTarget.batchesQueue.every(x => new Date() > new Date(x.startTime))) {\\r\\n            const batch = new BatchOfJobs();\\r\\n\\r\\n            const secondsToPadEndTime = batchForTarget.executionWindowSizeInSeconds;\\r\\n            const msToPadStartTime = 1;\\r\\n\\r\\n            const noJobsRunningAfter = batchForTarget.thereAreNoJobsRunningAfter();\\r\\n\\r\\n            let noMoreJobsAfter = new Date(noJobsRunningAfter);\\r\\n\\r\\n            const defaultStartTime = getWeakenEndDate(ns, targetServer, player, batchForTarget.securityWeNeedToReduceAfterFullGrowth);\\r\\n\\r\\n            if (noJobsRunningAfter < 0 || defaultStartTime > noMoreJobsAfter) {\\r\\n\\r\\n                addSecondsToDate(defaultStartTime, secondsToPadEndTime);\\r\\n                const defaultEndTime = new Date(defaultStartTime);\\r\\n\\r\\n                noMoreJobsAfter = defaultEndTime;\\r\\n            }\\r\\n\\r\\n            const hackStart = createNewDataFromOldDateAndAddMilliseconds(noMoreJobsAfter, msToPadStartTime);\\r\\n            const hackEnd = createNewDataFromOldDateAndAddSeconds(hackStart, secondsToPadEndTime);\\r\\n\\r\\n            const weakenAfterhackStart = createNewDataFromOldDateAndAddMilliseconds(hackEnd, msToPadStartTime);\\r\\n            const weakenAfterHackEnd = createNewDataFromOldDateAndAddSeconds(weakenAfterhackStart, secondsToPadEndTime);\\r\\n\\r\\n            const growStart = createNewDataFromOldDateAndAddMilliseconds(weakenAfterHackEnd, msToPadStartTime);\\r\\n            const growEnd = createNewDataFromOldDateAndAddSeconds(growStart, secondsToPadEndTime);\\r\\n\\r\\n            const weakenAfterGrowStart = createNewDataFromOldDateAndAddMilliseconds(growEnd, msToPadStartTime);\\r\\n            const weakenAfterGrowEnd = createNewDataFromOldDateAndAddSeconds(weakenAfterGrowStart, secondsToPadEndTime);\\r\\n\\r\\n            // get them in the order they are executed. \\r\\n            batch.jobs.push(new JobHasTo(weakenAfterGrowStart, weakenAfterGrowEnd, \\\"weaken-after-grow\\\"));\\r\\n            batch.jobs.push(new JobHasTo(weakenAfterhackStart, weakenAfterHackEnd, \\\"weaken-after-hack\\\"));\\r\\n            batch.jobs.push(new JobHasTo(growStart, growEnd, \\\"grow\\\"));\\r\\n            batch.jobs.push(new JobHasTo(hackStart, hackEnd, \\\"hack\\\"));\\r\\n\\r\\n            batchForTarget.batchesQueue.push(batch);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function executeJobs(ns, targetNames, batchQueueForDifferentTargets, player, environment, homeMemoryLimitations) {\\r\\n    const hackScript = 'scripts/hacking/hack.js';\\r\\n    const growScript = 'scripts/hacking/grow.js';\\r\\n    const weakenScript = 'scripts/hacking/weaken.js';\\r\\n\\r\\n    const ramNeededForWeaken = ns.getScriptRam(weakenScript);\\r\\n    const ramNeededForGrow = ns.getScriptRam(growScript);\\r\\n    const ramNeededForHack = ns.getScriptRam(hackScript);\\r\\n\\r\\n    for (const nameOfTarget of targetNames) {\\r\\n        const batchForTarget = batchQueueForDifferentTargets.get(nameOfTarget);\\r\\n\\r\\n        for (let i = 0; i < batchForTarget.batchesQueue.length; i++) {\\r\\n            const batchOfJobs = batchForTarget.batchesQueue[i];\\r\\n\\r\\n            for (let y = 0; y < batchOfJobs.jobs.length; y++) {\\r\\n                const job = batchOfJobs.jobs[y];\\r\\n\\r\\n                if (job.executing === false) {\\r\\n\\r\\n                    const targetServer = ns.getServer(nameOfTarget);\\r\\n\\r\\n                    let machineToRunOn;\\r\\n                    let script;\\r\\n                    let numberOfThreads;\\r\\n                    let ramCost;\\r\\n                    let shouldExecute = false;\\r\\n\\r\\n                    if (job.type.startsWith(\\\"weaken\\\")) {\\r\\n                        let amountToWeaken = targetServer.hackDifficulty - targetServer.minDifficulty;\\r\\n\\r\\n                        if (job.type === \\\"weaken-after-hack\\\") {\\r\\n                            amountToWeaken = batchForTarget.securityWeNeedToReduceAfterFullHack;\\r\\n                        }\\r\\n\\r\\n                        if (job.type === \\\"weaken-after-grow\\\") {\\r\\n                            amountToWeaken = batchForTarget.securityWeNeedToReduceAfterFullGrowth;\\r\\n                        }\\r\\n\\r\\n                        const ifStartedNowWeakenDoneAt = getWeakenEndDate(ns, targetServer, player, amountToWeaken);\\r\\n                        shouldExecute = shouldWeExecute(job, ifStartedNowWeakenDoneAt, batchOfJobs, ns);\\r\\n\\r\\n                        if (shouldExecute === false) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        script = weakenScript;\\r\\n\\r\\n\\r\\n                        numberOfThreads = getNumberOfThreadsToWeaken(ns, 1, amountToWeaken);\\r\\n                        ramCost = ramNeededForWeaken * numberOfThreads;\\r\\n\\r\\n                        machineToRunOn = getMachineWithEnoughRam(ns, ramCost, environment, homeMemoryLimitations);\\r\\n\\r\\n                        if (machineToRunOn && machineToRunOn.cpuCores > 1) {\\r\\n                            numberOfThreads = getNumberOfThreadsToWeaken(ns, machineToRunOn.cpuCores, amountToWeaken);\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    if (job.type.startsWith(\\\"grow\\\")) {\\r\\n                        const ifStartedNowGrowDoneAt = getGrowEndDate(ns, targetServer, player);\\r\\n                        shouldExecute = shouldWeExecute(job, ifStartedNowGrowDoneAt, batchOfJobs, ns);\\r\\n\\r\\n                        if (shouldExecute === false) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        script = growScript;\\r\\n\\r\\n                        if (job.type !== \\\"grow-dynamic\\\") {\\r\\n                            targetServer.moneyAvailable = 0;\\r\\n                        }\\r\\n\\r\\n                        numberOfThreads = getGrowThreads(ns, targetServer, player, 1);\\r\\n                        ramCost = ramNeededForGrow * numberOfThreads;\\r\\n\\r\\n                        machineToRunOn = getMachineWithEnoughRam(ns, ramCost, environment, homeMemoryLimitations);\\r\\n\\r\\n                        if (machineToRunOn && machineToRunOn.cpuCores > 1) {\\r\\n                            numberOfThreads = getGrowThreads(ns, targetServer, player, machineToRunOn.cpuCores);\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    if (job.type.startsWith(\\\"hack\\\")) {\\r\\n                        const ifStartedNowHackDoneAt = getHackEndDate(ns, targetServer, player);\\r\\n                        shouldExecute = shouldWeExecute(job, ifStartedNowHackDoneAt, batchOfJobs, ns);\\r\\n\\r\\n                        if (shouldExecute === false) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        script = hackScript;\\r\\n\\r\\n                        if (job.type === \\\"hack\\\") {\\r\\n                            targetServer.moneyAvailable = targetServer.moneyMax;\\r\\n                        }\\r\\n\\r\\n\\r\\n                        numberOfThreads = getHackThreadsForTotalStealing(ns, nameOfTarget, targetServer);\\r\\n\\r\\n                        if (numberOfThreads === -1) {\\r\\n                            numberOfThreads = batchForTarget.originalNumberOfThreadsForFullMoney;\\r\\n                        }\\r\\n\\r\\n                        ramCost = ramNeededForHack * numberOfThreads;\\r\\n\\r\\n                        machineToRunOn = getMachineWithEnoughRam(ns, ramCost, environment, homeMemoryLimitations);\\r\\n                    }\\r\\n\\r\\n                    if (shouldExecute && machineToRunOn) {\\r\\n                        ns.scp(script, machineToRunOn.hostname);\\r\\n                        const pid = ns.exec(script, machineToRunOn.hostname, numberOfThreads, nameOfTarget);\\r\\n\\r\\n                        if (pid === 0) {\\r\\n                            ns.tprint(\\\"failed exec\\\")\\r\\n                        }\\r\\n\\r\\n                        job.ramCost = ramCost;\\r\\n                        job.executing = true;\\r\\n                        job.machineRunningOn = machineToRunOn.hostname;\\r\\n                        job.pid = pid;\\r\\n                        job.executedAt = new Date();\\r\\n\\r\\n                        if (!batchOfJobs.startTime) {\\r\\n                            batchOfJobs.startTime = new Date();\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction shouldWeExecute(job, ifStartedNowWeWouldBeDoneAtString, batchOfJobs, ns) {\\r\\n\\r\\n    const endBeforeDate = new Date(job.endBefore);\\r\\n    const endAfterDate = new Date(job.endAfter);\\r\\n    const ifStartedNowWeWouldBeDoneAt = new Date(ifStartedNowWeWouldBeDoneAtString)\\r\\n\\r\\n    if (!job.firstLookStartedNowEndAt) {\\r\\n        job.firstLookStartedNowEndAt = ifStartedNowWeWouldBeDoneAt;\\r\\n    }\\r\\n\\r\\n    if (endAfterDate > ifStartedNowWeWouldBeDoneAt) {\\r\\n        job.lastMissForDoneBeforeWindow = ifStartedNowWeWouldBeDoneAt;\\r\\n    }\\r\\n\\r\\n    if (ifStartedNowWeWouldBeDoneAt > endBeforeDate) {\\r\\n        if (!job.firstMissForAfterWindow) {\\r\\n            job.firstMissForAfterWindow = ifStartedNowWeWouldBeDoneAt;\\r\\n            batchOfJobs.poisonedBatch = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (endAfterDate < ifStartedNowWeWouldBeDoneAt && ifStartedNowWeWouldBeDoneAt < endBeforeDate) {\\r\\n        job.expectedEndTime = ifStartedNowWeWouldBeDoneAt;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n}\\r\\n\\r\\nfunction getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n\\r\\n    const allHackedMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    allHackedMachines.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const machinesWithRamAvailable = allHackedMachines\\r\\n        .filter(x => x.server.ramUsed < x.server.maxRam && x.server.maxRam !== 0);\\r\\n\\r\\n    const serversWithEnoughRam = machinesWithRamAvailable\\r\\n        .filter(x => (x.server.maxRam - x.server.ramUsed) > ramNeeded)\\r\\n        .sort((b, a) => b.server.maxRam - a.server.maxRam);\\r\\n\\r\\n    for (const potentialServerToRun of serversWithEnoughRam) {\\r\\n        const server = getServer(ns, potentialServerToRun.name, homeMemoryLimitations);\\r\\n        const freeRam = server.maxRam - server.ramUsed;\\r\\n        if (freeRam > ramNeeded) {\\r\\n            machineToRunOn = server;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (machineToRunOn === undefined) {\\r\\n        const buyOrUpgradeServerFlag = 'buyOrUpgradeServerFlag.txt';\\r\\n\\r\\n        let maxAmountNeeded = 0;\\r\\n        if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n            maxAmountNeeded = ns.read(buyOrUpgradeServerFlag);\\r\\n        }\\r\\n\\r\\n        if (maxAmountNeeded < ramNeeded) {\\r\\n            maxAmountNeeded = ramNeeded;\\r\\n            ns.rm(buyOrUpgradeServerFlag);\\r\\n            ns.write(buyOrUpgradeServerFlag, maxAmountNeeded, \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machineToRunOn;\\r\\n}\\r\\n\\r\\nfunction getServer(ns, serverName, homeMemoryLimitations) {\\r\\n    const server = ns.getServer(serverName);\\r\\n\\r\\n    if (serverName === \\\"home\\\") {\\r\\n\\r\\n        let ramToReserve = homeMemoryLimitations.ramToReserve;\\r\\n\\r\\n        if (server.maxRam < ramToReserve) {\\r\\n            ramToReserve = homeMemoryLimitations.ramToReserveInLimitedEnvironment;\\r\\n        }\\r\\n\\r\\n        server.maxRam -= ramToReserve;\\r\\n\\r\\n        const freeRam = server.maxRam - server.ramUsed\\r\\n\\r\\n        if (freeRam < 0) {\\r\\n            server.ramUsed = server.maxRam;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return server;\\r\\n}\\r\\n\\r\\nfunction prepServerForBatching(targetServer, batchForTarget, ns, player, nameOfTarget, anyBatchNotPrepping) {\\r\\n    const amountToWeaken = targetServer.hackDifficulty - targetServer.minDifficulty;\\r\\n    const serverHasMaxMoney = targetServer.moneyMax === targetServer.moneyAvailable;\\r\\n    const currentTime = new Date();\\r\\n\\r\\n    if (amountToWeaken === 0 && serverHasMaxMoney && batchForTarget.securityWeNeedToReduceAfterFullHack && batchForTarget.securityWeNeedToReduceAfterFullGrowth && batchForTarget.prepStage && batchForTarget.originalNumberOfThreadsForFullMoney) {\\r\\n\\r\\n        if (averageErrorRateOver10Minutes < errorRateAtWhichWeAllowNewThings || !anyBatchNotPrepping) {\\r\\n            batchForTarget.prepStage = false;\\r\\n            batchForTarget.targetMachineSaturatedWithAttacks = false;\\r\\n            ns.toast(`Added ${nameOfTarget} to in process batch attack.`, 'success')\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (batchForTarget.prepStage) {\\r\\n        batchForTarget.targetMachineSaturatedWithAttacks = false;\\r\\n\\r\\n        if (batchForTarget.successfulWeakening === false) {\\r\\n            if (currentTime > new Date(batchForTarget.weakeningDoneAfter) || !batchForTarget.weakeningDoneAfter) {\\r\\n                if (amountToWeaken !== 0) {\\r\\n                    let endDate = new Date();\\r\\n                    endDate = getWeakenEndDate(ns, targetServer, player, targetServer.hackDifficulty - targetServer.minDifficulty);\\r\\n                    addSecondsToDate(endDate, 10);\\r\\n\\r\\n                    const job = new JobHasTo(new Date(), endDate, \\\"weaken-dynamic\\\");\\r\\n                    const batchOfJobs = new BatchOfJobs();\\r\\n                    batchOfJobs.jobs.push(job);\\r\\n\\r\\n                    batchForTarget.batchesQueue.push(batchOfJobs);\\r\\n                    batchForTarget.weakeningDoneAfter = endDate;\\r\\n                } else if (amountToWeaken === 0) {\\r\\n                    batchForTarget.successfulWeakening = true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (batchForTarget.successfulWeakening && batchForTarget.successfulGrowing === false) {\\r\\n            if (currentTime > new Date(batchForTarget.growDoneAfter) || !batchForTarget.growDoneAfter) {\\r\\n\\r\\n                if (serverHasMaxMoney === false) {\\r\\n\\r\\n                    if (targetServer.moneyAvailable === 0) {\\r\\n                        const growThreads = getGrowThreads(ns, targetServer, player, 1);\\r\\n                        batchForTarget.securityWeNeedToReduceAfterFullGrowth = ns.growthAnalyzeSecurity(growThreads, nameOfTarget, 1);\\r\\n                    }\\r\\n\\r\\n                    let endDate = getGrowEndDate(ns, targetServer, player);\\r\\n                    addSecondsToDate(endDate, 10);\\r\\n\\r\\n                    const job = new JobHasTo(new Date(), endDate, \\\"grow-dynamic\\\");\\r\\n                    const batchOfJobs = new BatchOfJobs();\\r\\n                    batchOfJobs.jobs.push(job);\\r\\n\\r\\n                    batchForTarget.batchesQueue.push(batchOfJobs);\\r\\n                    batchForTarget.growDoneAfter = endDate;\\r\\n                }\\r\\n\\r\\n\\r\\n                if (serverHasMaxMoney) {\\r\\n                    batchForTarget.successfulGrowing = true;\\r\\n                    batchForTarget.successfulWeakening = false;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (batchForTarget.successfulGrowing && batchForTarget.successfulHacking === false && batchForTarget.successfulWeakening) {\\r\\n\\r\\n            if (currentTime > new Date(batchForTarget.hackDoneAfter) || !batchForTarget.hackDoneAfter) {\\r\\n                if (serverHasMaxMoney) {\\r\\n                    if (currentTime > new Date(batchForTarget.hackDoneAfter)) {\\r\\n\\r\\n                        batchForTarget.successfulWeakening = false;\\r\\n                        batchForTarget.successfulGrowing = false;\\r\\n                        batchForTarget.successfulHacking = false;\\r\\n                        batchForTarget.hackDoneAfter = undefined;\\r\\n\\r\\n                    } else {\\r\\n                        const hackThreads = getHackThreadsForTotalStealing(ns, nameOfTarget, targetServer);\\r\\n                        batchForTarget.securityWeNeedToReduceAfterFullHack = ns.hackAnalyzeSecurity(hackThreads, nameOfTarget);\\r\\n                        batchForTarget.originalNumberOfThreadsForFullMoney = hackThreads;\\r\\n\\r\\n                        let endDate = getHackEndDate(ns, targetServer, player);\\r\\n                        addSecondsToDate(endDate, 100);\\r\\n\\r\\n                        const job = new JobHasTo(new Date(), endDate, \\\"hack-dynamic\\\");\\r\\n                        const batchOfJobs = new BatchOfJobs();\\r\\n                        batchOfJobs.jobs.push(job);\\r\\n\\r\\n                        batchForTarget.batchesQueue.push(batchOfJobs);\\r\\n                        batchForTarget.hackDoneAfter = endDate;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (targetServer.moneyAvailable === 0) {\\r\\n                    batchForTarget.successfulGrowing = false;\\r\\n                    batchForTarget.successfulWeakening = false;\\r\\n                    batchForTarget.successfulHacking = true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nfunction giveBatchQueueStructure(targetNames, batchQueue) {\\r\\n    for (const target of targetNames) {\\r\\n        let targetObject = batchQueue.get(target);\\r\\n        targetObject = new BatchQueueForTarget(targetObject);\\r\\n\\r\\n        for (let i = 0; i < targetObject.batchesQueue.length; i++) {\\r\\n            targetObject.batchesQueue[i] = new BatchOfJobs(targetObject.batchesQueue[i]);\\r\\n        }\\r\\n\\r\\n        batchQueue.set(target, targetObject);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction cleanFinishedAndPoisonedJobsFromQueue(targetNames, batchQueue, ns) {\\r\\n\\r\\n    for (const target of targetNames) {\\r\\n        const batches = batchQueue.get(target);\\r\\n        const currentTime = new Date();\\r\\n\\r\\n        for (let i = batches.batchesQueue.length - 1; i > -1; i--) {\\r\\n            const batch = batches.batchesQueue[i];\\r\\n            let remove = false;\\r\\n\\r\\n            if (batch.wholeBatchFinishsBefore() < currentTime) {\\r\\n\\r\\n                if (batch.jobs.every(x => x.executing) === false) {\\r\\n                    batches.failures++;\\r\\n                    batches.failuresInTheLastHour++;\\r\\n                    batches.lastFailure = batch;\\r\\n                    failuresThisRun++;\\r\\n                } else {\\r\\n                    batches.successes++;\\r\\n                    batches.successesInTheLastHour++;\\r\\n                    successesThisRun++;\\r\\n                }\\r\\n\\r\\n                remove = true;\\r\\n                batches.targetMachineSaturatedWithAttacks = true;\\r\\n            }\\r\\n\\r\\n            if (batch.poisonedBatch) {\\r\\n                batches.failures++;\\r\\n                batches.failuresInTheLastHour++;\\r\\n                batches.lastFailure = batch;\\r\\n                failuresThisRun++;\\r\\n\\r\\n                remove = true;\\r\\n\\r\\n                batch.jobs.map(x => {\\r\\n                    if (x.pid) {\\r\\n                        ns.kill(x.pid);\\r\\n                    }\\r\\n                });\\r\\n            }\\r\\n\\r\\n            if (remove) {\\r\\n                batches.batchesQueue.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction addNewTargetsToQueueIfNeeded(batchQueue, targetNames, ns, enviroment, player, noMoreInvestingForEndGame, homeMemoryLimitations) {\\r\\n    const batchesAreSaturated = targetNames.map(x => batchQueue.get(x)).every(x => x.targetMachineSaturatedWithAttacks);\\r\\n    const over2andAHalfTrillionDollars = ns.getServerMoneyAvailable(\\\"home\\\") > 2_500_000_000_000;\\r\\n    const massiveRamOnHome = getServer(ns, \\\"home\\\", homeMemoryLimitations).maxRam > 400_000;\\r\\n\\r\\n    let addNewServerToAttack = false;\\r\\n\\r\\n    if (batchQueue.size < 15 && batchesAreSaturated && averageErrorRateOver10Minutes < errorRateAtWhichWeAllowNewThings && !noMoreInvestingForEndGame) {\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if (over2andAHalfTrillionDollars && batchQueue.size < 20) {\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if (over2andAHalfTrillionDollars && batchesAreSaturated && batchQueue.size < 50) {\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if(massiveRamOnHome && batchQueue.size < 50){\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if (batchQueue.size < 2 || addNewServerToAttack) {\\r\\n\\r\\n        const allHackedMachines = enviroment\\r\\n            .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n        const allMachinesByOrderOfValue = allHackedMachines\\r\\n            .filter(x => !x.server.purchasedByPlayer && x.server.moneyMax !== 0 && !targetNames.includes(x.name))\\r\\n            .sort((a, b) => b.server.moneyMax - a.server.moneyMax);\\r\\n\\r\\n        // only add machine if 90%+ chances of successfully hacking at minDifficulty. \\r\\n        let mostValuableMachine;\\r\\n        for (const hackPossibility of allMachinesByOrderOfValue) {\\r\\n            const server = ns.getServer(hackPossibility.name);\\r\\n            server.hackDifficulty = server.minDifficulty;\\r\\n            const chanceOfHackingAtMinDif = ns.formulas.hacking.hackChance(server, player);\\r\\n\\r\\n            if (chanceOfHackingAtMinDif > 0.8) {\\r\\n                mostValuableMachine = hackPossibility;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (mostValuableMachine) {\\r\\n            batchQueue.set(mostValuableMachine.name, new BatchQueueForTarget());\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getHackThreadsForTotalStealing(ns, theTarget, targetServer) {\\r\\n    return Math.ceil(ns.hackAnalyzeThreads(theTarget, targetServer.moneyAvailable));\\r\\n}\\r\\n\\r\\nfunction getGrowThreads(ns, serverToHack, player, cpuCores) {\\r\\n    return Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, cpuCores));\\r\\n}\\r\\n\\r\\nfunction createNewDataFromOldDateAndAddSeconds(date, secondsToAdd) {\\r\\n    const newDate = new Date(date);\\r\\n    addSecondsToDate(newDate, secondsToAdd);\\r\\n    return newDate;\\r\\n}\\r\\n\\r\\nfunction createNewDataFromOldDateAndAddMilliseconds(date, secondsToAdd) {\\r\\n    const newDate = new Date(date);\\r\\n    addMillisecondsToDate(newDate, secondsToAdd);\\r\\n    return newDate;\\r\\n}\\r\\n\\r\\n\\r\\nfunction addSecondsToDate(date, secondsToAdd) {\\r\\n    date.setSeconds(date.getSeconds() + secondsToAdd);\\r\\n}\\r\\n\\r\\nfunction addMillisecondsToDate(date, msToAdd) {\\r\\n    date.setMilliseconds(date.getMilliseconds() + msToAdd);\\r\\n}\\r\\n\\r\\nfunction getWeakenEndDate(ns, targetServer, player, difficultyToWeaken) {\\r\\n    let endDate = new Date();\\r\\n    targetServer.hackDifficulty = targetServer.minDifficulty + difficultyToWeaken;\\r\\n\\r\\n    const howLongToWeaken = ns.formulas.hacking.weakenTime(targetServer, player);\\r\\n\\r\\n    endDate.setMilliseconds(endDate.getMilliseconds() + howLongToWeaken);\\r\\n    return endDate;\\r\\n}\\r\\n\\r\\nfunction getGrowEndDate(ns, targetServer, player) {\\r\\n    let endDate = new Date();\\r\\n    targetServer.moneyAvailable = 0;\\r\\n    targetServer.hackDifficulty = targetServer.minDifficulty;\\r\\n\\r\\n    const howLongToGrow = ns.formulas.hacking.growTime(targetServer, player);\\r\\n\\r\\n    endDate.setMilliseconds(endDate.getMilliseconds() + howLongToGrow);\\r\\n    return endDate;\\r\\n}\\r\\n\\r\\nfunction getHackEndDate(ns, targetServer, player) {\\r\\n    let endDate = new Date();\\r\\n    targetServer.moneyAvailable = targetServer.moneyMax;\\r\\n    targetServer.hackDifficulty = targetServer.minDifficulty;\\r\\n\\r\\n    const howLongToHack = ns.formulas.hacking.hackTime(targetServer, player);\\r\\n\\r\\n    endDate.setMilliseconds(endDate.getMilliseconds() + howLongToHack);\\r\\n    return endDate;\\r\\n}\\r\\n\\r\\nfunction getNumberOfThreadsToWeaken(ns, cpuCores, amountToWeaken) {\\r\\n    let numberOfThreadsToWeaken = 0;\\r\\n    let foundNumberOfThreads = false;\\r\\n    while (!foundNumberOfThreads) {\\r\\n        numberOfThreadsToWeaken++;\\r\\n\\r\\n        const amountNumberOfThreadsWillWeaken = Math.ceil(ns.weakenAnalyze(numberOfThreadsToWeaken, cpuCores));\\r\\n        if (amountNumberOfThreadsWillWeaken > amountToWeaken) {\\r\\n            foundNumberOfThreads = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //add a small margin\\r\\n    numberOfThreadsToWeaken += 20;\\r\\n    return numberOfThreadsToWeaken;\\r\\n}\\r\\n\",\"filename\":\"scripts/hacking/batch-dispatch.js\",\"server\":\"home\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"home\"}}],[\"scripts/hacking/hack-all-machines.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const helpers = new Helpers(ns);\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n\\r\\n    const portsWeCanPop = helpers.numberOfPortsWeCanPop();\\r\\n    const currentHackingLevel = ns.getHackingLevel();\\r\\n\\r\\n    const allHackableMachines = enviroment\\r\\n        .filter(x => x.server.requiredHackingSkill < currentHackingLevel)\\r\\n        .filter(x => x.server.numOpenPortsRequired <= portsWeCanPop || x.server.purchasedByPlayer);\\r\\n\\r\\n    allHackableMachines\\r\\n        .filter(x => !x.server.hasAdminRights)\\r\\n        .map(x => helpers.hackMachine(x.name));\\r\\n}\\r\\n\\r\\nexport class Helpers {\\r\\n    constructor(ns) {\\r\\n        this.ns = ns;\\r\\n    }\\r\\n\\r\\n    hackMachine(hostname) {\\r\\n        if (this.fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n            this.ns.brutessh(hostname);\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"FTPCrack.exe\\\")) {\\r\\n            this.ns.ftpcrack(hostname);\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"relaySMTP.exe\\\")) {\\r\\n            this.ns.relaysmtp(hostname)\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"HTTPWorm.exe\\\")) {\\r\\n            this.ns.httpworm(hostname)\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"SQLInject.exe\\\")) {\\r\\n            this.ns.sqlinject(hostname)\\r\\n        }\\r\\n\\r\\n        this.ns.nuke(hostname);\\r\\n        this.ns.killall(hostname);\\r\\n    }\\r\\n\\r\\n    numberOfPortsWeCanPop() {\\r\\n        let portsWeCanPop = 0;\\r\\n        if (this.fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"FTPCrack.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"relaySMTP.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"HTTPWorm.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"SQLInject.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        return portsWeCanPop;\\r\\n    }\\r\\n\\r\\n    fileExists(fileName) {\\r\\n        return this.ns.fileExists(fileName, \\\"home\\\");\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/hack-all-machines.js\",\"server\":\"home\"}}],[\"scripts/hacking/hack-until-worked.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n    let moneyStolen = 0;\\r\\n\\r\\n    while (moneyStolen === 0) {\\r\\n        moneyStolen = await ns.hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/hack-until-worked.js\",\"server\":\"home\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"home\"}}],[\"scripts/hacking/memory-starved-dispatch.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const hackScript = 'scripts/hacking/hack.js';\\r\\nconst growScript = 'scripts/hacking/grow.js';\\r\\nconst weakenScript = 'scripts/hacking/weaken.js';\\r\\n\\r\\nlet ranOnHomeThisTime = false;\\r\\n\\r\\nexport async function main(ns) {\\r\\n\\r\\n    const memoryStarvedQueueFileName = 'data/memoryStarvedQueue.txt';\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\";\\r\\n    ranOnHomeThisTime = false;\\r\\n\\r\\n\\r\\n    const homeMemoryLimitations = JSON.parse(ns.read(\\\"data/ramToReserveOnHome.txt\\\"));\\r\\n\\r\\n\\r\\n    let batchTargets = [];\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        const batchQueue = JSON.parse(ns.read(batchQueuesFileName));\\r\\n        batchTargets = batchQueue.map(x => x[0]);\\r\\n    }\\r\\n\\r\\n\\r\\n    let memoryStarvedQueue = new Map();\\r\\n    if (ns.fileExists(memoryStarvedQueueFileName)) {\\r\\n        memoryStarvedQueue = new Map(JSON.parse(ns.read(memoryStarvedQueueFileName)));\\r\\n    }\\r\\n\\r\\n    cleanProcessesAttackingBatchTarget(ns, memoryStarvedQueue, batchTargets);\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n    const allHackedMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    let allMachinesByOrderOfValue = allHackedMachines\\r\\n        .filter(x => !x.server.purchasedByPlayer && !batchTargets.includes(x.name) && x.server.moneyMax > 0)\\r\\n        .sort((a, b) => b.server.moneyMax - a.server.moneyMax)\\r\\n        .map(x => new HackedRecord(\\r\\n            x.name,\\r\\n            x.server.moneyMax,\\r\\n            x.server.minDifficulty,\\r\\n            x.server.hackDifficulty,\\r\\n            x.server.moneyAvailable,\\r\\n        ))\\r\\n\\r\\n    seeIfWeNeedToDoNextStep(ns, memoryStarvedQueue);\\r\\n\\r\\n    const machinesNextInQueueToHack = getMachinesToHack(allMachinesByOrderOfValue, memoryStarvedQueue, ns);\\r\\n\\r\\n    const hackQueue = [];\\r\\n    const growAndWeakenQueue = [];\\r\\n\\r\\n    machinesNextInQueueToHack.forEach(machineInQuestion => {\\r\\n        if (machineInQuestion.needsWeakening() || machineInQuestion.needsGrowing()) {\\r\\n            growAndWeakenQueue.push(machineInQuestion);\\r\\n        } else {\\r\\n            hackQueue.push(machineInQuestion);\\r\\n        }\\r\\n    });\\r\\n\\r\\n    for (const target of hackQueue) {\\r\\n        let numberOfThreads = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable));\\r\\n\\r\\n        await executeScriptAcrossFleet(ns, hackScript, enviroment, homeMemoryLimitations, numberOfThreads, target, memoryStarvedQueue);\\r\\n    }\\r\\n\\r\\n    for (const target of growAndWeakenQueue) {\\r\\n        let threadsNeeded;\\r\\n        let script;\\r\\n\\r\\n        if (target.needsGrowing()) {\\r\\n            script = growScript;\\r\\n            const serverToHack = getServer(ns, target.name, homeMemoryLimitations);\\r\\n            const player = ns.getPlayer();\\r\\n\\r\\n            if (ns.fileExists('Formulas.exe')) {\\r\\n                threadsNeeded = Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, 1));\\r\\n            } else {\\r\\n                threadsNeeded = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable)) * 5;\\r\\n            }\\r\\n\\r\\n            // if (machineToRunOn && machineToRunOn.cpuCores > 1 && ns.fileExists('Formulas.exe')) {\\r\\n            //     threadsNeeded = Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, machineToRunOn.cpuCores));\\r\\n            // }\\r\\n        }\\r\\n\\r\\n        if (target.needsWeakening()) {\\r\\n            script = weakenScript;\\r\\n            const amountToWeaken = target.hackDifficulty - target.minDifficulty;\\r\\n\\r\\n            threadsNeeded = getNumberOfThreadsToWeaken(ns, 1, amountToWeaken);\\r\\n\\r\\n\\r\\n\\r\\n            // if (machineToRunOn && machineToRunOn.cpuCores > 1) {\\r\\n            //     threadsNeeded = getNumberOfThreadsToWeaken(ns, machineToRunOn.cpuCores, amountToWeaken);\\r\\n            // }\\r\\n        }\\r\\n\\r\\n        await executeScriptAcrossFleet(ns, script, enviroment, homeMemoryLimitations, threadsNeeded, target, memoryStarvedQueue);\\r\\n    }\\r\\n\\r\\n    ns.rm(memoryStarvedQueueFileName);\\r\\n    ns.write(memoryStarvedQueueFileName, JSON.stringify(Array.from(memoryStarvedQueue.entries()), \\\"W\\\"));\\r\\n}\\r\\n\\r\\nasync function executeScriptAcrossFleet(ns, script, enviroment, homeMemoryLimitations, numberOfThreadsWanted, target, memoryStarvedQueue) {\\r\\n    const ramNeededForOneThread = ns.getScriptRam(script);\\r\\n\\r\\n    let numberOfThreadsLeft = numberOfThreadsWanted;\\r\\n    let serversExausted = false;\\r\\n\\r\\n    while (numberOfThreadsLeft > 0 && serversExausted === false) {\\r\\n        const result = getMachineWithNumberOfThreads(ns, enviroment, numberOfThreadsLeft, ramNeededForOneThread, homeMemoryLimitations);\\r\\n\\r\\n        if (!result.machineToRunOn || result.threads <= 0) {\\r\\n            serversExausted = true;\\r\\n        } else {\\r\\n            const machineToRunOn = result.machineToRunOn.hostname;\\r\\n            const threads = result.threads\\r\\n\\r\\n            ns.scp(script, machineToRunOn);\\r\\n            const pid = ns.exec(script, machineToRunOn, threads, target.name);\\r\\n\\r\\n            if (pid !== 0) {\\r\\n                if (machineToRunOn === \\\"home\\\") {\\r\\n                    ranOnHomeThisTime = true;\\r\\n                }\\r\\n                target.pids.push(pid);\\r\\n                target.runningOn.push({ machineToRunOn, threads })\\r\\n            }\\r\\n\\r\\n            numberOfThreadsLeft -= threads;\\r\\n\\r\\n            memoryStarvedQueue.set(target.name, target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getMachineWithNumberOfThreads(ns, enviroment, threads, ramCostPerThread, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n    const buyOrUpgradeServerFlag = 'buyOrUpgradeServerFlag.txt';\\r\\n    let originalAmountNeeded = ramCostPerThread * threads;\\r\\n\\r\\n    let globalMaxAmountNeeded = 0;\\r\\n\\r\\n    if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n        globalMaxAmountNeeded = JSON.parse(ns.read(buyOrUpgradeServerFlag));\\r\\n    }\\r\\n\\r\\n    if (originalAmountNeeded > globalMaxAmountNeeded) {\\r\\n        globalMaxAmountNeeded = originalAmountNeeded;\\r\\n        ns.rm(buyOrUpgradeServerFlag);\\r\\n        ns.write(buyOrUpgradeServerFlag, globalMaxAmountNeeded, \\\"W\\\");\\r\\n    }\\r\\n\\r\\n    machineToRunOn = getMachineWithEnoughRam(ns, threads * ramCostPerThread, enviroment, homeMemoryLimitations);\\r\\n\\r\\n    while (threads > 0 && !machineToRunOn) {\\r\\n        threads--;\\r\\n\\r\\n        machineToRunOn = getMachineWithEnoughRam(ns, threads * ramCostPerThread, enviroment, homeMemoryLimitations);\\r\\n    }\\r\\n\\r\\n    return { threads, machineToRunOn };\\r\\n}\\r\\n\\r\\nfunction getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n\\r\\n    const allHackableMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    allHackableMachines.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const machinesWithRamAvailable = allHackableMachines\\r\\n        .filter(x => x.server.ramUsed < x.server.maxRam && x.server.maxRam !== 0);\\r\\n\\r\\n    const serversWithEnoughRam = machinesWithRamAvailable\\r\\n        .filter(x => (x.server.maxRam - x.server.ramUsed) > ramNeeded)\\r\\n        .sort((b, a) => b.server.maxRam - a.server.maxRam);\\r\\n\\r\\n    for (const potentialServerToRun of serversWithEnoughRam) {\\r\\n        const server = getServer(ns, potentialServerToRun.name, homeMemoryLimitations);\\r\\n        const freeRam = server.maxRam - server.ramUsed;\\r\\n        if (freeRam > ramNeeded) {\\r\\n            machineToRunOn = server;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machineToRunOn;\\r\\n}\\r\\n\\r\\n\\r\\nfunction getServer(ns, serverName, homeMemoryLimitations) {\\r\\n    const server = ns.getServer(serverName);\\r\\n\\r\\n    if (serverName === \\\"home\\\") {\\r\\n\\r\\n        let ramToReserve = homeMemoryLimitations.ramToReserve;\\r\\n\\r\\n        if (server.maxRam < ramToReserve) {\\r\\n            ramToReserve = homeMemoryLimitations.ramToReserveInLimitedEnvironment;\\r\\n        }\\r\\n\\r\\n        server.maxRam -= ramToReserve;\\r\\n\\r\\n        const freeRam = server.maxRam - server.ramUsed\\r\\n\\r\\n        if (freeRam < 0) {\\r\\n            server.ramUsed = server.maxRam;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return server;\\r\\n}\\r\\n\\r\\nfunction cleanProcessesAttackingBatchTarget(ns, memoryStarvedQueue, batchTargets) {\\r\\n    for (const machineBeingHacked of memoryStarvedQueue) {\\r\\n        const whoTheyHackin = machineBeingHacked[0];\\r\\n\\r\\n        if (batchTargets.includes(whoTheyHackin)) {\\r\\n            const hackinRecord = memoryStarvedQueue.get(whoTheyHackin);\\r\\n            for (const pid of hackinRecord.pids) {\\r\\n                ns.kill(pid);\\r\\n            }\\r\\n\\r\\n            memoryStarvedQueue.delete(whoTheyHackin);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nfunction getMachinesToHack(hackableMachinesInTheEnvironment, memoryStarvedQueue, ns) {\\r\\n    const machinesNextInQueueToHack = [];\\r\\n    const doNotAdd = [];\\r\\n\\r\\n    for (const hackableMachine of hackableMachinesInTheEnvironment) {\\r\\n        if (memoryStarvedQueue.has(hackableMachine.name)) {\\r\\n            const record = memoryStarvedQueue.get(hackableMachine.name);\\r\\n            if (record.readyForNextProcess) {\\r\\n                machinesNextInQueueToHack.push(hackableMachine);\\r\\n            }\\r\\n\\r\\n            doNotAdd.push(hackableMachine);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const hackableMachine of hackableMachinesInTheEnvironment) {\\r\\n        if (!doNotAdd.find(x => x.name === hackableMachine.name)) {\\r\\n            machinesNextInQueueToHack.push(hackableMachine);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machinesNextInQueueToHack;\\r\\n}\\r\\n\\r\\nexport class HackedRecord {\\r\\n    constructor(name, maxMoney, minDifficulty, hackDifficulty, moneyAvailable) {\\r\\n        this.name = name;\\r\\n        this.moneyThreshhold = maxMoney * 0.75;\\r\\n        this.securityThreshholdTarget = minDifficulty + 5;\\r\\n        this.hackDifficulty = hackDifficulty;\\r\\n        this.moneyAvailable = moneyAvailable;\\r\\n        this.minDifficulty = minDifficulty;\\r\\n        this.pids = [];\\r\\n\\r\\n        this.runningOn = [];\\r\\n\\r\\n        this.isHacking = false;\\r\\n        this.readyForNextProcess = false;\\r\\n    }\\r\\n\\r\\n    needsWeakening() {\\r\\n        return this.hackDifficulty > this.securityThreshholdTarget;\\r\\n    }\\r\\n\\r\\n    needsGrowing() {\\r\\n        return this.moneyAvailable < this.moneyThreshhold;\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getNumberOfThreadsToWeaken(ns, cpuCores, amountToWeaken) {\\r\\n    let numberOfThreadsToWeaken = 0;\\r\\n    let foundNumberOfThreads = false;\\r\\n    while (!foundNumberOfThreads) {\\r\\n        numberOfThreadsToWeaken++;\\r\\n\\r\\n        const amountNumberOfThreadsWillWeaken = Math.ceil(ns.weakenAnalyze(numberOfThreadsToWeaken, cpuCores));\\r\\n        if (amountNumberOfThreadsWillWeaken > amountToWeaken) {\\r\\n            foundNumberOfThreads = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //add a small margin\\r\\n    numberOfThreadsToWeaken += 20;\\r\\n    return numberOfThreadsToWeaken;\\r\\n}\\r\\n\\r\\nfunction seeIfWeNeedToDoNextStep(ns, recordOfWhoIsBeingHacked) {\\r\\n    for (const companyBeingHacked of recordOfWhoIsBeingHacked.keys()) {\\r\\n        const record = recordOfWhoIsBeingHacked.get(companyBeingHacked);\\r\\n\\r\\n        if (record.pids.every(x => !ns.isRunning(x))) {\\r\\n            if (record.isHacking) {\\r\\n                recordOfWhoIsBeingHacked.delete(companyBeingHacked)\\r\\n            } else {\\r\\n                record.readyForNextProcess = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/memory-starved-dispatch.js\",\"server\":\"home\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"home\"}}],[\"scripts/investments/invest-in-nodes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"//take an hours until payoff numberz\\r\\n\\r\\n//hacknet\\r\\n\\r\\n/** @param {NS} ns */\\r\\n//run scripts/invest-in-nodes.js endDate\\r\\nexport async function main(ns) {\\r\\n    const endDate = ns.args[0];\\r\\n\\r\\n    if (endDate === undefined){\\r\\n        ns.tprint(\\\"need inputs\\\");\\r\\n    } else {\\r\\n        const timeLeftInSeconds = (new Date(endDate) - new Date()) / 1000;\\r\\n        const conservativeTimeLeft = timeLeftInSeconds / 2;\\r\\n    \\r\\n        let numberPurchased = 0\\r\\n    \\r\\n        while(buyHacknetNodeIfAboveBreakeven(ns, conservativeTimeLeft)){\\r\\n            numberPurchased++;\\r\\n        }\\r\\n\\r\\n        if(numberPurchased != 0){\\r\\n            ns.tprint(\\\"Total nodes purchase: \\\", numberPurchased);\\r\\n        }        \\r\\n    }\\r\\n}\\r\\n\\r\\nfunction buyHacknetNodeIfAboveBreakeven(ns, secondsLeft) {\\r\\n    const productionMultiplier = 2.8991;\\r\\n    const upgradeCostMultiplier = 0.8700;\\r\\n\\r\\n    const fixedCostOfFullyUpgradedNode = 409_194_200 * upgradeCostMultiplier;\\r\\n    const variableCost = ns.hacknet.getPurchaseNodeCost();\\r\\n    const totalCost = variableCost + fixedCostOfFullyUpgradedNode;\\r\\n\\r\\n    const moneyToInvest = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (totalCost > moneyToInvest) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    const revPerSecond = 9172 * productionMultiplier;\\r\\n    const expectedValue = secondsLeft * revPerSecond;\\r\\n\\r\\n    if (expectedValue < totalCost) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    const indexOfNode = ns.hacknet.purchaseNode();\\r\\n    ns.hacknet.upgradeLevel(indexOfNode, 199);\\r\\n    ns.hacknet.upgradeRam(indexOfNode, 6);\\r\\n    ns.hacknet.upgradeCore(indexOfNode, 15);\\r\\n\\r\\n    return true;\\r\\n}\\r\\n\\r\\n\",\"filename\":\"scripts/investments/invest-in-nodes.js\",\"server\":\"home\"}}],[\"scripts/investments/investments-coordinator.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const ramObservationsTextFile = '../../data/ramObservations.txt';\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    \\r\\n    const stopInvestingFileName = \\\"stopInvesting.txt\\\";\\r\\n    if (ns.fileExists(stopInvestingFileName)) {\\r\\n        if (ns.fileExists(ramObservationsTextFile)) {\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n    let stockMarketReserveMoney = new ReserveForTrading();\\r\\n    if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n        stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n    }\\r\\n    \\r\\n    if (stockMarketReserveMoney.moneyInvested > 7_000_000_000) {\\r\\n        if (!ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n            checkTor(ns);\\r\\n            const formulasCost = ns.singularity.getDarkwebProgramCost(\\\"Formulas.exe\\\")\\r\\n            if(stockMarketReserveMoney.canSpend(ns, formulasCost)){\\r\\n                ns.singularity.purchaseProgram(\\\"Formulas.exe\\\");\\r\\n                ns.rm(ramObservationsTextFile);\\r\\n                ns.rm('../../buyOrUpgradeServerFlag.txt');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.run('scripts/investments/purchase-server.js');\\r\\n    \\r\\n    purchaseProgram(ns, 50, \\\"BruteSSH.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 100, \\\"FTPCrack.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 250, \\\"relaySMTP.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 500, \\\"HTTPWorm.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 750, \\\"SQLInject.exe\\\", stockMarketReserveMoney);\\r\\n\\r\\n\\r\\n    if (moneyAvailable > 1_000_000_000_000) {\\r\\n        const endDate = new Date();\\r\\n        endDate.setHours(endDate.getHours() + 6);\\r\\n        ns.run('scripts/investments/invest-in-nodes.js', 1, endDate.toISOString())\\r\\n    }\\r\\n  \\r\\n}\\r\\n\\r\\nfunction purchaseProgram(ns, atWhatHackingLevelToBuy, programToBuy, stockMarketReserveMoney) {\\r\\n    const playerHackingLevel = ns.getHackingLevel();\\r\\n    if (!ns.fileExists(programToBuy) && playerHackingLevel > atWhatHackingLevelToBuy) {\\r\\n\\r\\n        const cost = ns.singularity.getDarkwebProgramCost(programToBuy)\\r\\n        \\r\\n        if(stockMarketReserveMoney.canSpend(ns, cost)){\\r\\n            checkTor(ns);\\r\\n            ns.singularity.purchaseProgram(programToBuy);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction checkTor(ns) {\\r\\n    if (!ns.hasTorRouter()) {\\r\\n        ns.singularity.purchaseTor()\\r\\n    }\\r\\n}\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 2_000_000_000_000;\\r\\n    capitalToReserveForTrading = 0;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns){\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = moneyInvested / 2;\\r\\n        \\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if(this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit){\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded){\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if(moneyToSaveForTrading < 0){\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if(moneyToSaveForTrading > this.stockMarketReserveMoneyLimit){\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if(canSpend === false){\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"investments-coordinator\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount){\\r\\n        const nameOfRequest = \\\"investments-coordinator\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if(moneyRequestedPreviously){\\r\\n            if(moneyRequestedPreviously < amount){\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/investments/investments-coordinator.js\",\"server\":\"home\"}}],[\"scripts/investments/purchase-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let countOfTriesToBuyServers = 0;\\r\\nlet countOfVisitsWithoutTryingToBuy = 0;\\r\\nconst beforeFormulasServerSpendFile = \\\"data/beforeFormulasServerSpend.txt\\\";\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const buyOrUpgradeServerFlag = \\\"../../buyOrUpgradeServerFlag.txt\\\";\\r\\n    const ramObservationsTextFile = '../../data/ramObservations.txt';\\r\\n    const typeRecord = \\\"../../data/typeOfServerPurchase.txt\\\";\\r\\n\\r\\n    let additionalRamNeeded = 0;\\r\\n    let ramObservations = [];\\r\\n    let type = new TypeOfPurchase();\\r\\n\\r\\n    if (ns.fileExists(ramObservationsTextFile)) {\\r\\n        countOfVisitsWithoutTryingToBuy++;\\r\\n    } else {\\r\\n        countOfVisitsWithoutTryingToBuy = 0;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n        countOfVisitsWithoutTryingToBuy = 0;\\r\\n    }\\r\\n\\r\\n    let tryToBuy = ns.fileExists(buyOrUpgradeServerFlag);\\r\\n\\r\\n    if (tryToBuy === false && countOfVisitsWithoutTryingToBuy < 300) {\\r\\n        tryToBuy = true;\\r\\n    }\\r\\n\\r\\n    if (tryToBuy === false) {\\r\\n        return;\\r\\n    } else {\\r\\n        countOfTriesToBuyServers++;\\r\\n\\r\\n        if (ns.fileExists(typeRecord)) {\\r\\n            const tempType = JSON.parse(ns.read(typeRecord));\\r\\n            type = new TypeOfPurchase(tempType);\\r\\n        }\\r\\n\\r\\n        if (!type.lastPurchaseDate) {\\r\\n            type.lastPurchaseDate = new Date();\\r\\n        }\\r\\n\\r\\n        if (ns.fileExists(ramObservationsTextFile)) {\\r\\n            ramObservations = JSON.parse(ns.read(ramObservationsTextFile));\\r\\n\\r\\n        }\\r\\n\\r\\n        if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n            const latestRamNeeded = JSON.parse(ns.read(buyOrUpgradeServerFlag));\\r\\n\\r\\n            ramObservations.push(latestRamNeeded);\\r\\n\\r\\n            ns.rm(buyOrUpgradeServerFlag);\\r\\n\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n            ns.write(ramObservationsTextFile, JSON.stringify(ramObservations), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        if (ramObservations.length === 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (ramObservations.length > 10 || countOfTriesToBuyServers > 300) {\\r\\n\\r\\n            additionalRamNeeded = Math.min(...ramObservations);\\r\\n\\r\\n            if (type.average) {\\r\\n                additionalRamNeeded = ramObservations.reduce((a, b) => a + b) / ramObservations.length;\\r\\n            }\\r\\n\\r\\n            if (ns.fileExists('Formulas.exe')) {\\r\\n                if (type.max) {\\r\\n                    additionalRamNeeded = Math.max(...ramObservations);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            const ramNeededForBatchesFile = \\\"data/ramNeededToStartBatches.txt\\\";\\r\\n            if (ns.fileExists(ramNeededForBatchesFile)) {\\r\\n                const ramNeededToStartBatches = Number(ns.read(ramNeededForBatchesFile));\\r\\n\\r\\n                if (ramNeededToStartBatches < additionalRamNeeded) {\\r\\n                    additionalRamNeeded = ramNeededToStartBatches;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (additionalRamNeeded === 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        let maxRam = 1048576;\\r\\n\\r\\n        const enviroment = JSON.parse(ns.read('../../data/enviroment.txt'));\\r\\n\\r\\n        const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n        let stockMarketReserveMoney = new ReserveForTrading();\\r\\n        if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n            stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n        }\\r\\n\\r\\n\\r\\n        const playerPurchasedServers = enviroment\\r\\n            .filter(x => x.server.purchasedByPlayer && x.server.maxRam < maxRam)\\r\\n            .sort((b, a) => a.server.maxRam - b.server.maxRam)\\r\\n\\r\\n        let upgradedOrPurchased = false;\\r\\n        if (playerPurchasedServers.length === 0) {\\r\\n            upgradedOrPurchased = purchaseServer(ns, maxRam, additionalRamNeeded, stockMarketReserveMoney);\\r\\n        } else {\\r\\n            const smallestPlayerPurchasedServer = playerPurchasedServers.pop();\\r\\n            upgradedOrPurchased = upgradeSmallMachine(ns, smallestPlayerPurchasedServer, maxRam, additionalRamNeeded, stockMarketReserveMoney);\\r\\n        }\\r\\n\\r\\n        if (upgradedOrPurchased) {\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n            type.changeType();\\r\\n            const now = new Date();\\r\\n            const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n            ns.toast(`${timeStamp} More than ${Math.round(additionalRamNeeded)} GB bought for server`, \\\"success\\\", 300000);\\r\\n        }\\r\\n\\r\\n        ns.rm(typeRecord);\\r\\n        ns.write(typeRecord, JSON.stringify(type), \\\"W\\\");\\r\\n        if (countOfTriesToBuyServers > 100) {\\r\\n            countOfTriesToBuyServers = 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction purchaseServer(ns, maxRam, additionalRamNeeded, stockMarketReserveMoney) {\\r\\n    let currentNumberOfPurchasedServers = ns.getPurchasedServers().length;\\r\\n    let ramToBuy = 64;\\r\\n\\r\\n    if (currentNumberOfPurchasedServers < ns.getPurchasedServerLimit()) {\\r\\n\\r\\n        let purchaseCost = ns.getPurchasedServerCost(ramToBuy);\\r\\n        let moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        if (moneyAvailable > purchaseCost) {\\r\\n\\r\\n            while (moneyAvailable > purchaseCost && ramToBuy < additionalRamNeeded) {\\r\\n\\r\\n                ramToBuy = ramToBuy * 2;\\r\\n\\r\\n                purchaseCost = ns.getPurchasedServerCost(ramToBuy);\\r\\n            }\\r\\n\\r\\n            if (ramToBuy > maxRam) {\\r\\n                ramToBuy = maxRam;\\r\\n            }\\r\\n\\r\\n            const canBuy = canSpendThatMoney(ns, stockMarketReserveMoney, purchaseCost);\\r\\n\\r\\n            if (canBuy && ramToBuy > additionalRamNeeded) {\\r\\n                const hostname = \\\"CLOUD-\\\" + String(currentNumberOfPurchasedServers).padStart(3, '0')\\r\\n                ns.purchaseServer(hostname, ramToBuy);\\r\\n                updateMoneySpent(ns, purchaseCost);\\r\\n\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            if (countOfTriesToBuyServers > 100) {\\r\\n                ns.toast(\\\"Not enough money to buy new server\\\", \\\"warning\\\", 3000)\\r\\n                countOfTriesToBuyServers = 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n}\\r\\n\\r\\nfunction upgradeSmallMachine(ns, smallestPlayerPurchasedServer, maxRam, additionalRamNeeded, stockMarketReserveMoney) {\\r\\n\\r\\n    let ramToBuy = smallestPlayerPurchasedServer.server.maxRam * 2;\\r\\n\\r\\n    while (!(ramToBuy - smallestPlayerPurchasedServer.server.maxRam > additionalRamNeeded)) {\\r\\n        ramToBuy = ramToBuy * 2;\\r\\n    }\\r\\n\\r\\n    if (ramToBuy >= maxRam) {\\r\\n        ramToBuy = maxRam;\\r\\n    }\\r\\n\\r\\n    const costOfRamToBuy = ns.getPurchasedServerUpgradeCost(smallestPlayerPurchasedServer.name, ramToBuy);\\r\\n    const canSpendMoney = canSpendThatMoney(ns, stockMarketReserveMoney, costOfRamToBuy);\\r\\n\\r\\n    if (canSpendMoney) {\\r\\n        ns.upgradePurchasedServer(smallestPlayerPurchasedServer.name, ramToBuy);\\r\\n        updateMoneySpent(ns, costOfRamToBuy);\\r\\n        return true;\\r\\n    } else {\\r\\n        if (countOfTriesToBuyServers > 100) {\\r\\n            const now = new Date();\\r\\n            const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n            ns.toast(`${timeStamp} Too expensive to buy ${ramToBuy} $${Number((costOfRamToBuy).toFixed(2)).toLocaleString()}`, \\\"warning\\\", 300000);\\r\\n            countOfTriesToBuyServers = 0;\\r\\n        }\\r\\n\\r\\n        return purchaseServer(ns, maxRam, additionalRamNeeded, stockMarketReserveMoney);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction updateMoneySpent(ns, moneySpent) {\\r\\n    if (!ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n        let moneyLeftToSpendOnServers = 2_000_000_000;\\r\\n\\r\\n        if (ns.fileExists(beforeFormulasServerSpendFile)) {\\r\\n            moneyLeftToSpendOnServers = ns.read(beforeFormulasServerSpendFile);\\r\\n        }\\r\\n\\r\\n        moneyLeftToSpendOnServers -= moneySpent;\\r\\n\\r\\n        ns.rm(beforeFormulasServerSpendFile);\\r\\n        ns.write(beforeFormulasServerSpendFile, JSON.stringify(moneyLeftToSpendOnServers), \\\"W\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction canSpendThatMoney(ns, stockMarketReserveMoney, costOfRamToBuy) {\\r\\n    let moneyToSpend = costOfRamToBuy;\\r\\n\\r\\n    if (!ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n        let moneyLeftToSpendOnServers = 2_000_000_000;\\r\\n\\r\\n        if (ns.fileExists(beforeFormulasServerSpendFile)) {\\r\\n            moneyLeftToSpendOnServers = JSON.parse(ns.read(beforeFormulasServerSpendFile));\\r\\n        }\\r\\n\\r\\n        if (moneyToSpend > moneyLeftToSpendOnServers) {\\r\\n            moneyToSpend = moneyLeftToSpendOnServers;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (moneyToSpend !== costOfRamToBuy) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    return stockMarketReserveMoney.canSpend(ns, costOfRamToBuy);\\r\\n}\\r\\n\\r\\n\\r\\nclass TypeOfPurchase {\\r\\n\\r\\n    max = false;\\r\\n    min = true;\\r\\n    average = false;\\r\\n    lastPurchaseDate = new Date();\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n\\r\\n    changeType() {\\r\\n\\r\\n        if (this.min) {\\r\\n            this.min = false;\\r\\n            this.average = true;\\r\\n            this.max = false;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (this.average) {\\r\\n            this.min = false;\\r\\n            this.average = false;\\r\\n            this.max = true;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (this.max) {\\r\\n            this.min = true;\\r\\n            this.average = false;\\r\\n            this.max = false;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        this.lastPurchaseDate = new Date();\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 2_000_000_000_000;\\r\\n    capitalToReserveForTrading = 0;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = moneyInvested / 2;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"purchase-server\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"purchase-server\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/investments/purchase-server.js\",\"server\":\"home\"}}],[\"scripts/singularity/backdoor-all-machines.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\nlet backdooring = false;\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n    if(backdooring){\\r\\n        return;\\r\\n    }\\r\\n    \\r\\n    const machinesToBackdoorFirst = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I.\\\", \\\"run4theh111z\\\"]\\r\\n\\r\\n    for(const machineName of machinesToBackdoorFirst){\\r\\n        if(await backdoorMachine(machineName, enviroment, ns)){\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const machineName of enviroment.map(x => x.name)) {\\r\\n        if(await backdoorMachine(machineName, enviroment, ns)){\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function backdoorMachine (machineName, enviroment, ns){\\r\\n    const serverWithLineage = enviroment.find(x => x.name === machineName)\\r\\n\\r\\n    if (serverWithLineage && !serverWithLineage.server.backdoorInstalled && serverWithLineage.server.hasAdminRights && !serverWithLineage.server.purchasedByPlayer) {\\r\\n        backdooring = true;\\r\\n        for (const server of serverWithLineage.lineage) {\\r\\n            await ns.singularity.connect(server);\\r\\n        }\\r\\n\\r\\n        await ns.singularity.connect(serverWithLineage.name);\\r\\n        await ns.singularity.installBackdoor();\\r\\n        await ns.singularity.connect(\\\"home\\\");\\r\\n\\r\\n        backdooring = false;\\r\\n        return true;\\r\\n    } \\r\\n\\r\\n    return false;\\r\\n\\r\\n}\",\"filename\":\"scripts/singularity/backdoor-all-machines.js\",\"server\":\"home\"}}],[\"scripts/singularity/buy-rep.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (moneyAvailable > 10_000_000_000_000){\\r\\n        const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n        const player = ns.getPlayer();\\r\\n\\r\\n        const mostRepExpensiveForEachFaction = [];\\r\\n\\r\\n        for (const faction of player.factions) {\\r\\n            const maximumAugRep = Math.max(...ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction)\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .filter(x => {\\r\\n                    const prereqs = ns.singularity.getAugmentationPrereq(x);\\r\\n                    return prereqs.every(y => ownedAugmentations.includes(y));\\r\\n                })\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n    \\r\\n            const favor = ns.singularity.getFactionFavor(faction);\\r\\n    \\r\\n            if (maximumAugRep > 0 && favor > 150) {\\r\\n                mostRepExpensiveForEachFaction.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(mostRepExpensiveForEachFaction.length > 0){\\r\\n            for (const factionWithRep of mostRepExpensiveForEachFaction) {\\r\\n                \\r\\n                const currentFactionRep = ns.singularity.getFactionRep(factionWithRep.faction);\\r\\n                const repNeeded = factionWithRep.maximumAugRep - currentFactionRep;\\r\\n\\r\\n                if(repNeeded < 0){\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                let purchasedRep = 0;\\r\\n                let dollarsDonated = 0;\\r\\n\\r\\n                while(repNeeded > purchasedRep){\\r\\n                    dollarsDonated += 10_000_000;\\r\\n                    purchasedRep = ns.formulas.reputation.repFromDonation(dollarsDonated, player);\\r\\n                }\\r\\n\\r\\n                ns.singularity.donateToFaction(factionWithRep.faction, dollarsDonated);\\r\\n                \\r\\n                const fileToIndicateWeDonatedToFaction = \\\"data/factionDonatation.txt\\\";\\r\\n                ns.rm(fileToIndicateWeDonatedToFaction);\\r\\n                ns.write(fileToIndicateWeDonatedToFaction, factionWithRep.faction, \\\"W\\\");\\r\\n            }\\r\\n        }\\r\\n    }   \\r\\n}\",\"filename\":\"scripts/singularity/buy-rep.js\",\"server\":\"home\"}}],[\"scripts/singularity/create-early-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (!currentWork || currentWork.type !== \\\"CREATE_PROGRAM\\\") {\\r\\n        if (!ns.fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n           ns.singularity.createProgram(\\\"BruteSSH.exe\\\", true);\\r\\n\\r\\n        }\\r\\n\\r\\n        if (!ns.fileExists(\\\"FTPCrack.exe\\\")) {\\r\\n           ns.singularity.createProgram(\\\"FTPCrack.exe\\\", true);\\r\\n        }\\r\\n\\r\\n        if (!ns.fileExists(\\\"relaySMTP.exe\\\")) {\\r\\n            ns.singularity.createProgram(\\\"relaySMTP.exe\\\", true);\\r\\n \\r\\n         }\\r\\n \\r\\n         if (!ns.fileExists(\\\"SQLInject.exe\\\")) {\\r\\n            ns.singularity.createProgram(\\\"SQLInject.exe\\\", true);\\r\\n         }\\r\\n\\r\\n         if (!ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\r\\n            ns.singularity.createProgram(\\\"HTTPWorm.exe\\\", true);\\r\\n \\r\\n         }\\r\\n \\r\\n         if (!ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n            ns.singularity.createProgram(\\\"Formulas.exe\\\", true);\\r\\n         }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/singularity/create-early-programs.js\",\"server\":\"home\"}}],[\"scripts/singularity/do-job.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const companiesWeWantToBecomePartOf = organizations.companiesWeWantToBecomePartOf;\\r\\n    const orderedFactions = organizations.toJoinInOrderInWhichIWantToComplete;\\r\\n\\r\\n    for (const companyName of companiesWeWantToBecomePartOf) {\\r\\n        ns.singularity.applyToCompany(companyName, \\\"software\\\");\\r\\n    }\\r\\n\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (currentWork && currentWork.type === \\\"CREATE_PROGRAM\\\") {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let factionWeAreWorkingAtNow;\\r\\n    if (currentWork && currentWork.type === \\\"FACTION\\\") {\\r\\n        factionWeAreWorkingAtNow = currentWork.factionName;\\r\\n    }\\r\\n\\r\\n    if (currentWork && currentWork.type === \\\"COMPANY\\\") {\\r\\n        factionWeAreWorkingAtNow = currentWork.companyName;\\r\\n    }\\r\\n\\r\\n    const player = ns.getPlayer();\\r\\n    let company;\\r\\n\\r\\n    for (const potentialCompany of companiesWeWantToBecomePartOf) {\\r\\n        if (!player.factions.includes(potentialCompany)) {\\r\\n\\r\\n            if (!factionWeAreWorkingAtNow) {\\r\\n                company = potentialCompany;\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            for (const faction of orderedFactions) {\\r\\n                if (faction === potentialCompany) {\\r\\n                    company = potentialCompany;\\r\\n                    break;\\r\\n                }\\r\\n\\r\\n                if (faction === factionWeAreWorkingAtNow) {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (!company) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n\\r\\n    const positionInCompany = player.jobs[company];\\r\\n\\r\\n    if(!positionInCompany){\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const currentPositionInfo = ns.singularity.getCompanyPositionInfo(company, positionInCompany);\\r\\n    const nextPositionInfo = ns.singularity.getCompanyPositionInfo(company, currentPositionInfo.nextPosition);\\r\\n    const companyRep = ns.singularity.getCompanyRep(company);\\r\\n\\r\\n    if (nextPositionInfo.requiredReputation < companyRep && nextPositionInfo.requiredSkills.charisma > player.skills.charisma) {\\r\\n        if (!currentWork || currentWork.type !== \\\"CLASS\\\") {\\r\\n            ns.singularity.travelToCity(\\\"Sector-12\\\");\\r\\n            ns.singularity.universityCourse(\\\"Rothman University\\\", \\\"Leadership\\\", true);\\r\\n            return;\\r\\n        }\\r\\n    } else {\\r\\n        if (!currentWork || currentWork.type !== \\\"COMPANY\\\") {\\r\\n            ns.singularity.workForCompany(company, true);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/do-job.js\",\"server\":\"home\"}}],[\"scripts/singularity/do-work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n\\r\\n    const factionToMaxFile = \\\"data/factionToMax.txt\\\";\\r\\n\\r\\n    let factionToMax;\\r\\n\\r\\n    if (ns.fileExists(factionToMaxFile)) {\\r\\n        factionToMax = ns.read(factionToMaxFile);\\r\\n    }\\r\\n\\r\\n    const ownedAugmentations = JSON.parse(ns.read(\\\"data/ownedAugs.txt\\\"));\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const organizationsToJoinInTheOrderWeWantToComplete = organizations.toJoinInOrderInWhichIWantToComplete;\\r\\n    const doNoWorkFor = organizations.doNoWorkFor;\\r\\n    const stopAtAugments = organizations.stopAtAugments;\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavor = [];\\r\\n\\r\\n    for (const faction of organizationsToJoinInTheOrderWeWantToComplete) {\\r\\n        if (player.factions.includes(faction) && !doNoWorkFor.includes(faction)) {\\r\\n\\r\\n            let augmentsForFaction = ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction);\\r\\n\\r\\n            let stopAtAugmentForFaction = stopAtAugments\\r\\n                .find(x => x.faction === faction);\\r\\n\\r\\n            if (stopAtAugmentForFaction) {\\r\\n                if (ownedAugmentations.includes(stopAtAugmentForFaction.augmentToStopAt) && stopAtAugmentForFaction.final) {\\r\\n                    augmentsForFaction = [];\\r\\n                } else if (ownedAugmentations.includes(stopAtAugmentForFaction.augmentToStopAt) && !stopAtAugmentForFaction.final) {\\r\\n                    augmentsForFaction = augmentsForFaction;\\r\\n                } else {\\r\\n                    augmentsForFaction = augmentsForFaction.filter(x => x === stopAtAugmentForFaction.augmentToStopAt);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            const maximumAugRep = Math.max(...augmentsForFaction\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n            const favor = ns.singularity.getFactionFavor(faction);\\r\\n\\r\\n            if (maximumAugRep > 0 && favor < 150) {\\r\\n                factionsWithAugsToBuyAndNotEnoughtFavor.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const faction of organizationsToJoinInTheOrderWeWantToComplete) {\\r\\n        const factionInAugsMix = factionsWithAugsToBuyAndNotEnoughtFavor.find(x => x.faction === faction);\\r\\n\\r\\n        if (factionInAugsMix) {\\r\\n\\r\\n            const newFactionToMax = factionInAugsMix.faction;\\r\\n\\r\\n            if (factionToMax !== newFactionToMax) {\\r\\n                factionToMax = newFactionToMax;\\r\\n                ns.rm(factionToMaxFile);\\r\\n                ns.write(factionToMaxFile, factionToMax, \\\"W\\\");\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (currentWork && currentWork.type === \\\"CREATE_PROGRAM\\\") {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    for (const faction of organizationsToJoinInTheOrderWeWantToComplete) {\\r\\n\\r\\n        if (currentWork &&\\r\\n            currentWork.type === \\\"COMPANY\\\" &&\\r\\n            currentWork.companyName === faction &&\\r\\n            !player.factions.includes(faction)) {\\r\\n\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        if (currentWork &&\\r\\n            currentWork.type === \\\"CLASS\\\" &&\\r\\n            currentWork.classType === \\\"Leadership\\\") {\\r\\n\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        const factionsAugs = factionsWithAugsToBuyAndNotEnoughtFavor.find(x => x.faction === faction);\\r\\n\\r\\n        if (!factionsAugs) {\\r\\n            continue;\\r\\n        }\\r\\n\\r\\n        const maxRepNeeded = factionsAugs.maximumAugRep;\\r\\n        const factionRep = ns.singularity.getFactionRep(faction);\\r\\n\\r\\n        if (maxRepNeeded > factionRep) {\\r\\n\\r\\n            if (!currentWork || currentWork.factionName !== faction) {\\r\\n                await ns.singularity.workForFaction(faction, \\\"hacking\\\", true);\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/do-work.js\",\"server\":\"home\"}}],[\"scripts/singularity/finish-bitnode.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(false);\\r\\n    const includesRedPill = ownedAugmentations.includes(\\\"The Red Pill\\\");\\r\\n    const currentHackingLevel = ns.getHackingLevel();\\r\\n    const orgServerName = \\\"w0r1d_d43m0n\\\";\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n    const serverWithLineage = enviroment.find(x => x.name === orgServerName);\\r\\n\\r\\n    if (includesRedPill && currentHackingLevel > serverWithLineage.server.requiredHackingSkill) {\\r\\n        if (serverWithLineage && serverWithLineage.server.hasAdminRights) {\\r\\n            for (const server of serverWithLineage.lineage) {\\r\\n                await ns.singularity.connect(server);\\r\\n            }\\r\\n\\r\\n            await ns.singularity.connect(orgServerName);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n\\r\\n\\r\\n        ns.singularity.destroyW0r1dD43m0n(8, 'scripts/coordinator-for-8.js'); // 3 (corps) - 5.1 (formula.exe + int passive) - 10 (new) \\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/finish-bitnode.js\",\"server\":\"home\"}}],[\"scripts/singularity/finish-round.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let incomePerHourEstimate;\\r\\nlet updatedMoneyEstimate = false;\\r\\n\\r\\nexport async function main(ns) {\\r\\n\\r\\n    const factionToMaxFile = \\\"data/factionToMax.txt\\\";\\r\\n    const factionDonationFile = 'data/factionDonatation.txt'\\r\\n    const incomeEveryMinuteObservationsFile = 'data/incomeEveryMinuteForTheLast30Minutes.txt'\\r\\n\\r\\n    let factionToMax;\\r\\n\\r\\n    let incomeObservations = [];\\r\\n    const lastObservation = new Date();\\r\\n    let lastObservationRecordedMoney = new Date();\\r\\n\\r\\n    const formatter = new Intl.NumberFormat('en-US', {\\r\\n        style: 'currency',\\r\\n        currency: 'USD',\\r\\n    });\\r\\n\\r\\n    if (ns.fileExists(incomeEveryMinuteObservationsFile)) {\\r\\n        const incomePlusDateFromFile = JSON.parse(ns.read(incomeEveryMinuteObservationsFile));\\r\\n        incomeObservations = incomePlusDateFromFile.incomeObservations;\\r\\n        lastObservationRecordedMoney = new Date(incomePlusDateFromFile.lastObservation);\\r\\n    } else {\\r\\n        ns.write(incomeEveryMinuteObservationsFile, JSON.stringify({ incomeObservations, lastObservation }), \\\"W\\\");\\r\\n    }\\r\\n\\r\\n    if (lastObservationRecordedMoney.getMinutes() !== lastObservation.getMinutes()) {\\r\\n        let totalIncomeSinceAugInstall = 0\\r\\n\\r\\n        const moneySources = ns.getMoneySources();\\r\\n\\r\\n        for (let [key, value] of Object.entries(moneySources.sinceInstall)) {\\r\\n            if (key !== \\\"total\\\" && value > 0 && key !== \\\"stock\\\") {\\r\\n                totalIncomeSinceAugInstall += value;\\r\\n            }\\r\\n        }\\r\\n        incomeObservations.push(totalIncomeSinceAugInstall);\\r\\n\\r\\n        const totalIncome30MinutesAgo = incomeObservations[0];\\r\\n\\r\\n        const incomePerMinute = (totalIncomeSinceAugInstall - totalIncome30MinutesAgo) / incomeObservations.length;\\r\\n        incomePerHourEstimate = incomePerMinute * 60;\\r\\n        updatedMoneyEstimate = true;\\r\\n\\r\\n        if (incomeObservations.length > 30) {\\r\\n            incomeObservations.shift();\\r\\n        }\\r\\n\\r\\n        ns.rm(incomeEveryMinuteObservationsFile);\\r\\n        ns.write(incomeEveryMinuteObservationsFile, JSON.stringify({ incomeObservations, lastObservation }), \\\"W\\\");\\r\\n    } else {\\r\\n        updatedMoneyEstimate = false;\\r\\n    }\\r\\n\\r\\n    let analytics = new EndOfRoundAnalytics();\\r\\n    const endOfRoundAnalyticsFile = \\\"analytics/end-round.txt\\\";\\r\\n    if (ns.fileExists(endOfRoundAnalyticsFile)) {\\r\\n        analytics = JSON.parse(ns.read(endOfRoundAnalyticsFile));\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(factionToMaxFile) || ns.fileExists(factionDonationFile)) {\\r\\n        if (ns.fileExists(factionToMaxFile)) {\\r\\n            factionToMax = ns.read(factionToMaxFile);\\r\\n\\r\\n            if (!analytics.firstAssignFactionToMax) {\\r\\n                analytics.firstAssignFactionToMax = new Date();\\r\\n            }\\r\\n        } else {\\r\\n            factionToMax = ns.read(factionDonationFile);\\r\\n\\r\\n            if (!analytics.firstAssignFactionToMaxViaDonation) {\\r\\n                analytics.firstAssignFactionToMaxViaDonation = new Date();\\r\\n            }\\r\\n        }\\r\\n    } else {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (!analytics.factionsToMax.find(x => x.factionToMax === factionToMax)) {\\r\\n        const firstTime = new Date();\\r\\n        analytics.factionsToMax.push({ factionToMax, firstTime });\\r\\n    }\\r\\n\\r\\n    saveAnalytics(ns, analytics);\\r\\n\\r\\n    const player = ns.getPlayer();\\r\\n\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n\\r\\n    const mostRepExpensiveForEachFaction = [];\\r\\n    for (const faction of player.factions) {\\r\\n        const maximumAugRep = Math.max(...ns\\r\\n            .singularity\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n            .filter(x => !ownedAugmentations.includes(x))\\r\\n            .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n        if (maximumAugRep > 0) {\\r\\n            mostRepExpensiveForEachFaction.push({ faction, maximumAugRep });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const targetFaction = mostRepExpensiveForEachFaction\\r\\n        .filter(x => x.faction === factionToMax)\\r\\n        .pop();\\r\\n\\r\\n    setGoalAugment(ownedAugmentations, factionToMax, targetFaction, ns);\\r\\n\\r\\n    const currentFactionRep = ns.singularity.getFactionRep(targetFaction.faction);\\r\\n    const currentFactionFavor = ns.singularity.getFactionFavor(targetFaction.faction);\\r\\n\\r\\n    let targetRepForGettingToFavor = 700_000;\\r\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n        const favorGain = ns.singularity.getFactionFavorGain(targetFaction.faction);\\r\\n        if (favorGain + currentFactionFavor > 150) {\\r\\n            targetRepForGettingToFavor = currentFactionFavor;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (!analytics.firstEncounterOfRepTrigger) {\\r\\n        const repTrigger = populateRepTrigger(targetFaction, currentFactionRep, targetRepForGettingToFavor, ns, factionDonationFile, factionToMaxFile);\\r\\n        analytics.firstEncounterOfRepTrigger = repTrigger;\\r\\n        saveAnalytics(ns, analytics);\\r\\n    }\\r\\n\\r\\n    if (targetFaction.maximumAugRep < currentFactionRep || targetRepForGettingToFavor < currentFactionRep || (ns.fileExists(factionDonationFile) && !ns.fileExists(factionToMaxFile))) {\\r\\n\\r\\n        if (!analytics.repTrigger) {\\r\\n            const repTrigger = populateRepTrigger(targetFaction, currentFactionRep, targetRepForGettingToFavor, ns, factionDonationFile, factionToMaxFile);\\r\\n            analytics.repTrigger = repTrigger;\\r\\n            saveAnalytics(ns, analytics);\\r\\n        }\\r\\n\\r\\n        const factionsWithAugmentsToBuy =\\r\\n            mostRepExpensiveForEachFaction\\r\\n                .map(x => {\\r\\n                    {\\r\\n                        const faction = x.faction;\\r\\n                        const factionRep = ns.singularity.getFactionRep(faction);\\r\\n                        const factionAugmentsThatIDontOwnAndCanAfford = ns\\r\\n                            .singularity\\r\\n                            .getAugmentationsFromFaction(faction)\\r\\n                            .filter(y => y !== \\\"NeuroFlux Governor\\\")\\r\\n                            .filter(y => !ownedAugmentations.includes(y))\\r\\n                            .map(y => {\\r\\n                                return {\\r\\n                                    augmentName: y,\\r\\n                                    augmentationRepCost: ns.singularity.getAugmentationRepReq(y),\\r\\n                                    price: ns.singularity.getAugmentationPrice(y),\\r\\n                                    prereqs: ns.singularity.getAugmentationPrereq(y)\\r\\n                                }\\r\\n                            })\\r\\n                            .filter(y => y.augmentationRepCost < factionRep)\\r\\n                            .sort((a, b) => b.price - a.price);\\r\\n\\r\\n                        return {\\r\\n                            faction,\\r\\n                            factionRep,\\r\\n                            factionAugmentsThatIDontOwnAndCanAfford\\r\\n                        }\\r\\n                    }\\r\\n                });\\r\\n\\r\\n        const priceOfMostExpensiveAugment = Math.max(...factionsWithAugmentsToBuy.find(x => x.faction === targetFaction.faction).factionAugmentsThatIDontOwnAndCanAfford.map(x => x.price));\\r\\n\\r\\n\\r\\n        if (priceOfMostExpensiveAugment < 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // --------\\r\\n        // My augment script ranks every augment that hasn't been purchased by price, and then calculates how many of them I can buy (taking into account the 1.9x price increase per augment, and the additional 1.14x increase per NeuroFlux Governor level). \\r\\n\\r\\n        const purchasableAugments = new Map();\\r\\n\\r\\n        for (const factionWithAugments of factionsWithAugmentsToBuy) {\\r\\n            for (const augment of factionWithAugments.factionAugmentsThatIDontOwnAndCanAfford) {\\r\\n                if (purchasableAugments.has(augment.augmentName) === false) {\\r\\n                    const item = {\\r\\n                        augmentationRepCost: augment.augmentationRepCost,\\r\\n                        price: augment.price,\\r\\n                        prereqs: augment.prereqs,\\r\\n                        faction: factionWithAugments.faction\\r\\n                    }\\r\\n                    purchasableAugments.set(augment.augmentName, item)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        const augmentsLeft = Array.from(purchasableAugments.entries()).sort((a, b) => b[1].price - a[1].price);\\r\\n\\r\\n        const orderedAugments = []; // { factionName, augmentName, basePrice, multipledPrice}\\r\\n\\r\\n        function addPrereqs(prereqName) {\\r\\n            const augment = purchasableAugments.get(prereqName);\\r\\n    \\r\\n            if (augment && !ownedAugmentations.find(x => x.augmentName === prereqName)) {\\r\\n    \\r\\n                if (augment.prereqs.length > 0) {//it has prereqs, pass it into this. \\r\\n                    for (const prereq of augment.prereqs) {\\r\\n                        addPrereqs(prereq)\\r\\n                    }\\r\\n                }\\r\\n    \\r\\n                if (!orderedAugments.find(x => x.augmentName === prereqName)) {\\r\\n                    orderedAugments.push({ faction: augment.faction, augmentName: prereqName, basePrice: augment.price });\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    \\r\\n        for (const augmentData of augmentsLeft) {\\r\\n            const augmentName = augmentData[0];\\r\\n            const augment = augmentData[1];\\r\\n    \\r\\n            if (augment.prereqs.length > 0) {\\r\\n                for (const prereqName of augment.prereqs) {\\r\\n                    addPrereqs(prereqName);\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            if (!orderedAugments.find(x => x.augmentName === augmentName)) {\\r\\n                orderedAugments.push({ faction: augment.faction, augmentName: augmentName, basePrice: augment.price, multipledPrice: 0 })\\r\\n            }\\r\\n    \\r\\n        }\\r\\n    \\r\\n        let priceMultipler = 1;\\r\\n    \\r\\n        for (const augment of orderedAugments) {\\r\\n            augment.multipledPrice = augment.basePrice * priceMultipler;\\r\\n            priceMultipler *= 1.9;\\r\\n        }\\r\\n        \\r\\n        const moneyNeededForAugments = orderedAugments.reduce((acc, x) => acc + x.multipledPrice, 0);\\r\\n\\r\\n        // make a pass for multiplied price\\r\\n\\r\\n        // (faction, augmentName)\\r\\n        // arrange with prereqs in mind\\r\\n        // then 1.9X the cost every purchase\\r\\n        // then figure out how many NeuroFlux governors we can buy with the rep, and then figure out how much that would cost. \\r\\n\\r\\n        // new order ->\\r\\n        // augments\\r\\n        // neuroflux\\r\\n        // computer\\r\\n        // if we have extra money, then we buy more neuroflux with purchased rep\\r\\n\\r\\n\\r\\n\\r\\n        /// ------\\r\\n\\r\\n        \\r\\n        let buyAugmentsWhenWeHaveMoreThanThisMuchMoney = moneyNeededForAugments;\\r\\n\\r\\n        const estimatedIncomeForTheNextFourHours = incomePerHourEstimate * 4;\\r\\n\\r\\n        const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        const moneyFormatted = formatter.format(incomePerHourEstimate);\\r\\n\\r\\n        if (moneyFormatted !== \\\"$NaN\\\") {\\r\\n            const hoursTillInstall = Math.floor(buyAugmentsWhenWeHaveMoreThanThisMuchMoney / incomePerHourEstimate);\\r\\n            if (updatedMoneyEstimate) {\\r\\n                const now = new Date();\\r\\n                const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n\\r\\n                ns.toast(`${timeStamp} Income Per Hour Estimate: ${moneyFormatted}. ~Hours to install: ${hoursTillInstall}`, \\\"success\\\", 60000)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!analytics.firstEncoundedMoneyTrigger) {\\r\\n            const moneyTrigger = createMoneyTrigger(estimatedIncomeForTheNextFourHours, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, moneyAvailable, formatter);\\r\\n\\r\\n            analytics.firstEncoundedMoneyTrigger = moneyTrigger;\\r\\n            saveAnalytics(ns, analytics);\\r\\n        }\\r\\n\\r\\n        if (estimatedIncomeForTheNextFourHours > buyAugmentsWhenWeHaveMoreThanThisMuchMoney || moneyAvailable > buyAugmentsWhenWeHaveMoreThanThisMuchMoney) {\\r\\n\\r\\n            const stopInvestingFileName = \\\"stopInvesting.txt\\\";\\r\\n            if (!ns.fileExists(stopInvestingFileName)) {\\r\\n                ns.write(stopInvestingFileName, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, \\\"W\\\")\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            if (moneyAvailable > buyAugmentsWhenWeHaveMoreThanThisMuchMoney) {\\r\\n                const stopStockTradingFileName = \\\"stopTrading.txt\\\";\\r\\n                if (!ns.fileExists(stopStockTradingFileName)) {\\r\\n                    ns.write(stopStockTradingFileName, \\\"\\\", \\\"W\\\")\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                if (!analytics.moneyTrigger) {\\r\\n                    const moneyTrigger = createMoneyTrigger(estimatedIncomeForTheNextFourHours, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, moneyAvailable, formatter);\\r\\n\\r\\n                    analytics.moneyTrigger = moneyTrigger;\\r\\n                    saveAnalytics(ns, analytics);\\r\\n                }\\r\\n\\r\\n                for (const augment of orderedAugments) {\\r\\n                    purchaseAug(ns, augment, analytics);\\r\\n                }\\r\\n\\r\\n                upgradeHomeMachine(ns, analytics);\\r\\n\\r\\n                const factionsByRating = factionsWithAugmentsToBuy.sort((a, b) => b.factionRep - a.factionRep);\\r\\n\\r\\n                purchaseNeuroFluxGovernors(ns, factionsByRating[0].faction, analytics);\\r\\n\\r\\n                analytics.moneyLeft = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n                saveAnalytics(ns, analytics, true);\\r\\n\\r\\n                ns.singularity.installAugmentations('scripts/coordinator.js')\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    saveAnalytics(ns, analytics);\\r\\n}\\r\\n\\r\\nfunction createMoneyTrigger(estimatedIncomeForTheNextFourHours, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, moneyAvailable, formatter) {\\r\\n    const moneyTrigger = new MoneyTrigger();\\r\\n    moneyTrigger.estimatedIncomeTriggered = estimatedIncomeForTheNextFourHours > buyAugmentsWhenWeHaveMoreThanThisMuchMoney;\\r\\n    moneyTrigger.moneyIsGreaterThanTriggered = moneyAvailable > buyAugmentsWhenWeHaveMoreThanThisMuchMoney;\\r\\n\\r\\n    moneyTrigger.estimatedIncomeForTheNextFourHours = formatter.format(estimatedIncomeForTheNextFourHours);\\r\\n    moneyTrigger.moneyRightNow = formatter.format(moneyAvailable);\\r\\n    moneyTrigger.buyArgumentsWhenWeHave = formatter.format(buyAugmentsWhenWeHaveMoreThanThisMuchMoney);\\r\\n    return moneyTrigger;\\r\\n}\\r\\n\\r\\nfunction populateRepTrigger(targetFaction, currentFactionRep, targetRepForGettingToFavor, ns, factionDonationFile, factionToMaxFile) {\\r\\n    const repTrigger = new RepTrigger();\\r\\n    repTrigger.factionRepGreaterThanMaximumAug = targetFaction.maximumAugRep < currentFactionRep;\\r\\n    repTrigger.factionRepGreaterThanTargetToGetToFavorNeeded = targetRepForGettingToFavor < currentFactionRep;\\r\\n    repTrigger.factionDonationTrigger = ns.fileExists(factionDonationFile) && !ns.fileExists(factionToMaxFile);\\r\\n\\r\\n    repTrigger.maximumAugRepNeeded = targetFaction.maximumAugRep;\\r\\n    repTrigger.currentFactionRep = currentFactionRep;\\r\\n    repTrigger.targetRepForGettingToFavor = targetRepForGettingToFavor;\\r\\n    return repTrigger;\\r\\n}\\r\\n\\r\\nfunction saveAnalytics(ns, analytics, final = false) {\\r\\n    let endOfRoundAnalyticsFile = \\\"analytics/end-round.txt\\\";\\r\\n    ns.rm(endOfRoundAnalyticsFile);\\r\\n\\r\\n    if (final) {\\r\\n        const now = new Date()\\r\\n        const factionToMax = analytics.factionsToMax[analytics.factionsToMax.length - 1].factionToMax.replaceAll(' ', '');\\r\\n        endOfRoundAnalyticsFile = `analytics/${now.toISOString().split('T')[0]}-${String(now.getHours()).padStart(2, 0)}-${String(now.getMinutes()).padStart(2, 0)}-${factionToMax}-end-round.txt`;\\r\\n    }\\r\\n\\r\\n    analytics.lastSaved = new Date();\\r\\n    ns.write(endOfRoundAnalyticsFile, JSON.stringify(analytics), \\\"W\\\");\\r\\n}\\r\\n\\r\\nfunction setGoalAugment(ownedAugmentations, factionToMax, targetFaction, ns) {\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n\\r\\n    for (const stopAtAugment of organizations.stopAtAugments) {\\r\\n        const goalAugment = stopAtAugment.augmentToStopAt;\\r\\n        const goalFaction = stopAtAugment.faction;\\r\\n\\r\\n        if (!ownedAugmentations.includes(goalAugment) && factionToMax === goalFaction) {\\r\\n            targetFaction.maximumAugRep = ns.singularity.getAugmentationRepReq(goalAugment);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction purchaseNeuroFluxGovernors(ns, faction, analytics) {\\r\\n    const augmentName = \\\"NeuroFlux Governor\\\"\\r\\n    const price = ns.singularity.getAugmentationPrice(augmentName);\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    const augmentRepPrice = ns.singularity.getAugmentationRepReq(augmentName);\\r\\n    let factionRep = ns.singularity.getFactionRep(faction);\\r\\n\\r\\n    if (moneyAvailable > price) {\\r\\n        if (factionRep < augmentRepPrice && ns.singularity.getFactionFavor(faction) > 150) {\\r\\n            if (ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n                const repNeeded = augmentRepPrice - factionRep;\\r\\n                let dollarsDonated = 0;\\r\\n                let purchasedRep = 0;\\r\\n                const player = ns.getPlayer();\\r\\n                while (repNeeded > purchasedRep) {\\r\\n                    dollarsDonated += 1_000_000;\\r\\n                    purchasedRep = ns.formulas.reputation.repFromDonation(dollarsDonated, player);\\r\\n                }\\r\\n\\r\\n                analytics.moneySpent.repPurchased += dollarsDonated;\\r\\n                ns.singularity.donateToFaction(faction, dollarsDonated);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        factionRep = ns.singularity.getFactionRep(faction);\\r\\n\\r\\n        if (factionRep > augmentRepPrice) {\\r\\n            analytics.moneySpent.fluxGovernors += price;\\r\\n            ns.singularity.purchaseAugmentation(faction, augmentName);\\r\\n        }\\r\\n    } else {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    purchaseNeuroFluxGovernors(ns, faction, analytics);\\r\\n}\\r\\n\\r\\nfunction upgradeHomeMachine(ns, analytics) {\\r\\n    const home = \\\"home\\\";\\r\\n    const ramCost = ns.singularity.getUpgradeHomeRamCost();\\r\\n    const coreCost = ns.singularity.getUpgradeHomeCoresCost();\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(home);\\r\\n    const orginalSpecs = ns.getServer(home);\\r\\n\\r\\n    if (ramCost > moneyAvailable && coreCost > moneyAvailable) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (ramCost > coreCost) {\\r\\n        analytics.moneySpent.homeCores += coreCost;\\r\\n        ns.singularity.upgradeHomeCores();\\r\\n    } else {\\r\\n        analytics.moneySpent.homeRam += ramCost;\\r\\n        ns.singularity.upgradeHomeRam();\\r\\n    }\\r\\n\\r\\n    const upgradedServer = ns.getServer(home);\\r\\n\\r\\n    analytics.amountOfRamIncrease += upgradedServer.maxRam - orginalSpecs.maxRam;\\r\\n    analytics.amountOfCoresIncrease += upgradedServer.cpuCores - orginalSpecs.cpuCores;\\r\\n\\r\\n    return upgradeHomeMachine(ns, analytics);\\r\\n}\\r\\n\\r\\nfunction purchaseAug(ns, augment, analytics) {\\r\\n    const ownedAugments = ns.singularity.getOwnedAugmentations(true);\\r\\n    const augmentName = augment.augmentName;\\r\\n\\r\\n    if (ownedAugments.includes(augmentName) === false) {\\r\\n        const augmentPrice = ns.singularity.getAugmentationPrice(augmentName);\\r\\n        const amountOfMoneyWeHave = ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n\\r\\n        if (augmentPrice < amountOfMoneyWeHave) {\\r\\n            analytics.moneySpent.augments += augmentPrice;\\r\\n            if (!analytics.augsBought) {\\r\\n                analytics.augsBought = [];\\r\\n            }\\r\\n            analytics.augsBought.push(augmentName)\\r\\n\\r\\n            ns.singularity.purchaseAugmentation(augment.faction, augmentName);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass EndOfRoundAnalytics {\\r\\n    firstStarted = new Date();\\r\\n\\r\\n\\r\\n    firstAssignFactionToMax;\\r\\n    firstAssignFactionToMaxViaDonation;\\r\\n\\r\\n    factionsToMax = [];\\r\\n\\r\\n    firstEncounterOfRepTrigger;\\r\\n    repTrigger;\\r\\n\\r\\n\\r\\n    firstEncoundedMoneyTrigger;\\r\\n    moneyTrigger;\\r\\n\\r\\n    augsBought = [];\\r\\n\\r\\n    amountOfRamIncrease\\r\\n    amountOfCoresIncrease\\r\\n\\r\\n    moneySpent = new MoneySpent();\\r\\n\\r\\n    moneyLeft = 0;\\r\\n    lastSaved;\\r\\n}\\r\\n\\r\\nclass MoneyTrigger {\\r\\n    estimatedIncomeTriggered;\\r\\n    moneyIsGreaterThanTriggered;\\r\\n\\r\\n    estimatedIncomeForTheNextFourHours;\\r\\n    moneyRightNow;\\r\\n    buyArgumentsWhenWeHave;\\r\\n\\r\\n    time = new Date();\\r\\n}\\r\\n\\r\\nclass MoneySpent {\\r\\n\\r\\n    augments = 0;\\r\\n    homeCores = 0;\\r\\n    homeRam = 0;\\r\\n    fluxGovernors = 0;\\r\\n    repPurchased = 0;\\r\\n}\\r\\n\\r\\nclass RepTrigger {\\r\\n\\r\\n    factionRepGreaterThanMaximumAug;\\r\\n    factionRepGreaterThanTargetToGetToFavorNeeded;\\r\\n    factionDonationTrigger;\\r\\n\\r\\n\\r\\n    maximumAugRepNeeded;\\r\\n    currentFactionRep;\\r\\n    targetRepForGettingToFavor;\\r\\n\\r\\n    time = new Date();\\r\\n}\",\"filename\":\"scripts/singularity/finish-round.js\",\"server\":\"home\"}}],[\"scripts/singularity/join-organziations.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const toJoinInOrderInWhichIWantToComplete = [\\r\\n        \\\"CyberSec\\\",\\r\\n        \\\"NiteSec\\\",\\r\\n        \\\"Chongqing\\\",\\r\\n        \\\"The Black Hand\\\",\\r\\n        \\\"Bachman & Associates\\\",\\r\\n        \\\"BitRunners\\\",\\r\\n        \\\"Daedalus\\\",\\r\\n        \\\"NWO\\\",\\r\\n        \\\"OmniTek Incorporated\\\",\\r\\n        \\\"Blade Industries\\\",\\r\\n        \\\"ECorp\\\",\\r\\n    // \\\"The Covenant\\\",\\r\\n        \\\"Illuminati\\\",\\r\\n        \\\"Aevum\\\",\\r\\n        \\\"Volhaven\\\",\\r\\n        \\\"New Tokyo\\\",\\r\\n        \\\"Ishima\\\",\\r\\n        \\\"Tian Di Hui\\\",\\r\\n        \\\"Netburners\\\",\\r\\n    ];\\r\\n\\r\\n    const companiesWeWantToBecomePartOf = [\\r\\n        \\\"Bachman & Associates\\\", \\r\\n        \\\"NWO\\\", \\r\\n        \\\"OmniTek Incorporated\\\", \\r\\n        \\\"Blade Industries\\\", \\r\\n        \\\"ECorp\\\"\\r\\n    ]; \\r\\n\\r\\n    const doNoWorkFor = [\\r\\n        \\\"Aevum\\\",\\r\\n        \\\"Volhaven\\\",\\r\\n        \\\"New Tokyo\\\",\\r\\n        \\\"Ishima\\\",\\r\\n        \\\"Tian Di Hui\\\",\\r\\n        \\\"Netburners\\\"\\r\\n    ];\\r\\n\\r\\n    const stopAtAugments = [\\r\\n        { final: true, faction: \\\"Chongqing\\\", augmentToStopAt: \\\"Neuregen Gene Modification\\\" }\\r\\n    ]\\r\\n\\r\\n    // const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    // if (moneyAvailable > 150_000_000) {\\r\\n    //     toJoinInOrderInWhichIWantToComplete.push(\\\"Sector-12\\\");\\r\\n    //     doNoWorkFor.push(\\\"Sector-12\\\");\\r\\n    // }\\r\\n\\r\\n    const factionInvitations = ns.singularity.checkFactionInvitations();\\r\\n\\r\\n    const organzations = { toJoinInOrderInWhichIWantToComplete, companiesWeWantToBecomePartOf, doNoWorkFor, stopAtAugments };\\r\\n\\r\\n    const organizationTextFileName = \\\"data/organizations.txt\\\";\\r\\n    ns.rm(organizationTextFileName);\\r\\n    ns.write(organizationTextFileName, JSON.stringify(organzations), \\\"W\\\");\\r\\n\\r\\n    for (const name of toJoinInOrderInWhichIWantToComplete) {\\r\\n        if (factionInvitations.includes(name)) {\\r\\n            await ns.singularity.joinFaction(name);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/singularity/join-organziations.js\",\"server\":\"home\"}}],[\"scripts/singularity/study-computer-science.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (player.factions.length === 0 && !currentWork) {\\r\\n        ns.singularity.universityCourse(\\\"Rothman University\\\", \\\"Computer Science\\\", true);\\r\\n        return;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/singularity/study-computer-science.js\",\"server\":\"home\"}}],[\"scripts/singularity/travel-to-get-augs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const ownedAugmentations = JSON.parse(ns.read(\\\"data/ownedAugs.txt\\\"));\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (moneyAvailable > 10_000_000 && notInAnyCityFaction(ns)) {\\r\\n\\r\\n        if (travelToGetUniqueAugments(ns, \\\"Neuregen Gene Modification\\\", \\\"Chongqing\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, 'PCMatrix', \\\"Aevum\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, 'CashRoot Starter Kit', \\\"Sector-12\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, \\\"DermaForce Particle Barrier\\\", \\\"Volhaven\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, \\\"NutriGen Implant\\\", \\\"New Tokyo\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, \\\"INFRARET Enhancement\\\", \\\"Ishima\\\", ownedAugmentations)) { return; }\\r\\n    }\\r\\n\\r\\n    const playersLocation = ns.getPlayer().city\\r\\n    if (moneyAvailable > 250_000_000) {\\r\\n        if (ns.singularity.getFactionRep(\\\"Tian Di Hui\\\") === 0 && playersLocation !== \\\"Chongqing\\\") {\\r\\n            ns.singularity.travelToCity(\\\"Chongqing\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction notInAnyCityFaction(ns){\\r\\n    const cityFactions = [\\\"Chongqing\\\", \\\"Aevum\\\", \\\"Sector-12\\\", \\\"Volhaven\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"];\\r\\n\\r\\n    for (const city of cityFactions) {\\r\\n        if(ns.singularity.getFactionRep(city)){\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n}\\r\\n\\r\\nfunction travelToGetUniqueAugments(ns, augmentWanted, city, ownedAugmentations) {\\r\\n    if (!ownedAugmentations.includes(augmentWanted)) {\\r\\n\\r\\n        const playersLocation = ns.getPlayer().city\\r\\n        if (ns.singularity.getFactionRep(city) === 0 && playersLocation !== city) {\\r\\n            ns.singularity.travelToCity(city);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\n\\r\\n\",\"filename\":\"scripts/singularity/travel-to-get-augs.js\",\"server\":\"home\"}}],[\"scripts/singularity/upgade-home-machine.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let visitedBefore = false;\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const ramObservationsTextFile = '../../data/ramObservations.txt';\\r\\n    const stopInvestingFileName = \\\"stopInvesting.txt\\\";\\r\\n    if (ns.fileExists(stopInvestingFileName)) {\\r\\n        if (ns.fileExists(ramObservationsTextFile)) {\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    visitedBefore = false;\\r\\n\\r\\n    await upgradeHomeRamOrCpu(ns, 11_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 100_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 30_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 100_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 1_000_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 10_000_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 100_000_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 1_000_000_000_000_000);\\r\\n}\\r\\n\\r\\nasync function upgradeHomeRamOrCpu(ns, moneyLimit) {\\r\\n    if (visitedBefore) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const ramUpgradeCost = ns.singularity.getUpgradeHomeRamCost();\\r\\n    const coreUpgradeCost = ns.singularity.getUpgradeHomeCoresCost();\\r\\n\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (moneyLimit < coreUpgradeCost && moneyLimit < ramUpgradeCost) {\\r\\n        return;\\r\\n    } else {\\r\\n        visitedBefore = true;\\r\\n    }\\r\\n\\r\\n    const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n    let stockMarketReserveMoney = new ReserveForTrading();\\r\\n    if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n        stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n    }\\r\\n\\r\\n    if (ramUpgradeCost < coreUpgradeCost) {\\r\\n\\r\\n        const moneyLeftOverForRam = moneyAvailable - ramUpgradeCost;\\r\\n\\r\\n        if (moneyLeftOverForRam > moneyLimit) {\\r\\n            if (stockMarketReserveMoney.canSpend(ns, ramUpgradeCost)) {\\r\\n                ns.singularity.upgradeHomeRam();\\r\\n                ns.toast(`Upgraded home ram`, \\\"success\\\", null);\\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n        }\\r\\n\\r\\n    } else {\\r\\n\\r\\n        const moneyLeftOverForCores = moneyAvailable - coreUpgradeCost;\\r\\n\\r\\n        if (moneyLeftOverForCores > moneyLimit) {\\r\\n            if (stockMarketReserveMoney.canSpend(ns, coreUpgradeCost)) {\\r\\n                ns.singularity.upgradeHomeCores()\\r\\n                ns.toast(`Upgraded home core`, \\\"success\\\", null);\\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 2_000_000_000_000;\\r\\n    capitalToReserveForTrading = 0;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = moneyInvested / 2;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"upgrade-home-machine\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"upgrade-home-machine\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/upgade-home-machine.js\",\"server\":\"home\"}}],[\"scripts/singularity/workout.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(false);\\r\\n    const includesHVMind = ownedAugmentations.includes(\\\"ECorp HVMind Implant\\\");\\r\\n\\r\\n    if (!includesHVMind) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    // if(getBuffForFaction(ns, \\\"The Covenant\\\", 850)){\\r\\n    //     return;\\r\\n    // } \\r\\n\\r\\n    if(getBuffForFaction(ns, \\\"Illuminati\\\", 1200)){\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n    if(currentWork && currentWork.type === \\\"CLASS\\\"){\\r\\n        ns.singularity.stopAction();\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\nfunction getBuffForFaction(ns, faction, targetForAttributes){\\r\\n    const player = ns.getPlayer();\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (!player.factions.includes(faction) && (!currentWork || currentWork.type === \\\"CLASS\\\")) {\\r\\n        \\r\\n        if(doExersizeIfAppropriate(player.skills.agility, currentWork, ns, 'agi', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        if(doExersizeIfAppropriate(player.skills.defense, currentWork, ns, 'def', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        if(doExersizeIfAppropriate(player.skills.strength, currentWork, ns, 'str', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        if(doExersizeIfAppropriate(player.skills.dexterity, currentWork, ns, 'dex', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction doExersizeIfAppropriate(skill, currentWork, ns, type, targetForAttributes) {\\r\\n    if (skill < targetForAttributes) {\\r\\n        if (!currentWork || currentWork.classType !== type) {\\r\\n            ns.singularity.travelToCity(\\\"Sector-12\\\");\\r\\n            ns.singularity.gymWorkout(\\\"powerhouse gym\\\", type, true);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/workout.js\",\"server\":\"home\"}}],[\"scripts/tools/delete-all-js.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    \\r\\n    const doNoDeleteFolders = [];\\r\\n\\r\\n    for (const textFile of ns.ls(\\\"home\\\", \\\".js\\\")) {\\r\\n        if(!doNoDeleteFolders.find(x => textFile.startsWith(x))){\\r\\n            ns.rm(textFile);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"scripts/tools/delete-all-js.js\",\"server\":\"home\"}}],[\"scripts/tools/delete-job-from-batch-queue.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n    const targetName = ns.args[0];\\r\\n\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\"\\r\\n\\r\\n    let batchQueueForDifferentTargets = new Map();\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        batchQueueForDifferentTargets = new Map(JSON.parse(ns.read(batchQueuesFileName)));\\r\\n    }\\r\\n\\r\\n    const target = batchQueueForDifferentTargets.get(targetName);\\r\\n\\r\\n    for (const batch of target.batchesQueue) {\\r\\n        batch.jobs.map(x => {\\r\\n            if (x.pid) {\\r\\n                ns.kill(x.pid);\\r\\n            }\\r\\n        });\\r\\n    };\\r\\n\\r\\n    batchQueueForDifferentTargets.delete(targetName);\\r\\n\\r\\n    ns.rm(batchQueuesFileName);\\r\\n    ns.write(batchQueuesFileName, JSON.stringify(Array.from(batchQueueForDifferentTargets.entries()), \\\"W\\\"));\\r\\n\\r\\n}\\r\\n\",\"filename\":\"scripts/tools/delete-job-from-batch-queue.js\",\"server\":\"home\"}}],[\"scripts/clean.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"//run scripts/clean.js \\r\\nexport async function main(ns) {\\r\\n    let newMachine = false;\\r\\n\\r\\n    if (ns.args[0] === \\\"new\\\") {\\r\\n        newMachine = true;\\r\\n    }\\r\\n\\r\\n    \\r\\n    if (!newMachine) {\\r\\n        ns.killall(\\\"home\\\", true);\\r\\n\\r\\n        const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n        enviroment\\r\\n            .filter(x => x.server.hasAdminRights)\\r\\n            .map(target => {\\r\\n                ns.killall(target.name);\\r\\n            })\\r\\n    }\\r\\n\\r\\n    const doNoDeleteFolders = [\\\"analytics\\\", \\\"contracts\\\"]\\r\\n\\r\\n\\r\\n    for (const textFile of ns.ls(\\\"home\\\", \\\".txt\\\")) {\\r\\n        if(!doNoDeleteFolders.find(x => textFile.startsWith(x))){\\r\\n            ns.rm(textFile);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/clean.js\",\"server\":\"home\"}}],[\"scripts/coordinator.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const loopEveryXSeconds = 2;\\r\\n    const sleepTotalOfXMS = loopEveryXSeconds * 1000;\\r\\n    const numberOfDifferentSleeps = 6;\\r\\n    const individualSleepAmount = sleepTotalOfXMS / numberOfDifferentSleeps;\\r\\n    let dispatchScript = 'scripts/hacking/memory-starved-dispatch.js';\\r\\n\\r\\n    let runClean = true;\\r\\n    if (ns.args[0] === 'old') {\\r\\n        runClean = false;\\r\\n    }\\r\\n\\r\\n    if (runClean) {\\r\\n        ns.run('scripts/clean.js', 1, \\\"new\\\");\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n\\r\\n    ns.run('scripts/precalculate-important-data.js')\\r\\n\\r\\n    await ns.sleep(200);\\r\\n\\r\\n    while (true) {\\r\\n\\r\\n        if (ns.fileExists('Formulas.exe')) {\\r\\n            dispatchScript = 'scripts/hacking/batch-dispatch.js'\\r\\n        }\\r\\n\\r\\n        ns.run(\\\"scripts/scan.js\\\", 1, dispatchScript);\\r\\n        await ns.sleep(individualSleepAmount);\\r\\n\\r\\n\\r\\n        ns.run('scripts/hacking/hack-all-machines.js');\\r\\n        await ns.sleep(individualSleepAmount);\\r\\n\\r\\n\\r\\n        ns.run('scripts/contracts/contract-coordinator.js');\\r\\n        await ns.sleep(individualSleepAmount);\\r\\n\\r\\n\\r\\n        ns.run('scripts/stock/get-stock-quotes.js');\\r\\n        await ns.sleep(individualSleepAmount);\\r\\n\\r\\n\\r\\n\\r\\n        ns.run('scripts/investments/investments-coordinator.js');\\r\\n        await ns.sleep(individualSleepAmount);\\r\\n\\r\\n\\r\\n\\r\\n        await singularityStuff(ns);\\r\\n    }\\r\\n\\r\\n\\r\\n    async function singularityStuff(ns) {\\r\\n        await doSingularityWork(ns, 'backdoor-all-machines')\\r\\n        await doSingularityWork(ns, 'join-organziations');\\r\\n        await doSingularityWork(ns, 'do-work');\\r\\n        await doSingularityWork(ns, 'finish-round');\\r\\n        await doSingularityWork(ns, 'finish-bitnode');\\r\\n        await doSingularityWork(ns, 'study-computer-science');\\r\\n        await doSingularityWork(ns, 'create-early-programs');\\r\\n        await doSingularityWork(ns, 'do-job');\\r\\n        await doSingularityWork(ns, 'buy-rep');\\r\\n        await doSingularityWork(ns, 'workout');\\r\\n        await doSingularityWork(ns, 'upgade-home-machine');\\r\\n        await doSingularityWork(ns, 'travel-to-get-augs');\\r\\n    }\\r\\n\\r\\n    async function doSingularityWork(ns, script) {\\r\\n        ns.run(`scripts/singularity/${script}.js`);\\r\\n\\r\\n        await ns.sleep(individualSleepAmount / 12);\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"filename\":\"scripts/coordinator.js\",\"server\":\"home\"}}],[\"scripts/precalculate-important-data.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n  const notImportantScriptsForEarlyGame = [\\r\\n    \\\"scripts/singularity/finish-bitnode.js\\\", \\r\\n    \\\"scripts/singularity/finish-round.js\\\", \\r\\n    \\\"scripts/singularity/buy-rep.js\\\",\\r\\n    \\\"scripts/hacking/batch-dispatch.js\\\",\\r\\n  ];\\r\\n\\r\\n  const orderedScriptsByRamUsage = ns.ls(\\\"home\\\")\\r\\n    .filter(x => x.endsWith(\\\".js\\\"))\\r\\n    .map(x => new ScriptRam(ns.getScriptRam(x), x))\\r\\n    .sort((a, b) => b.ram - a.ram);\\r\\n\\r\\n  const mostExpensiveScript = orderedScriptsByRamUsage[0];\\r\\n  const coordinator = orderedScriptsByRamUsage.find(x => x.name === \\\"scripts/coordinator.js\\\")\\r\\n  const contractCoordinator = orderedScriptsByRamUsage.find(x => x.name === \\\"scripts/contracts/contract-coordinator.js\\\")\\r\\n  const ramToReserve = coordinator.ram + mostExpensiveScript.ram + contractCoordinator.ram;\\r\\n\\r\\n  const earlyGameScriptsUsage = orderedScriptsByRamUsage\\r\\n    .filter(x => !notImportantScriptsForEarlyGame.includes(x.name));\\r\\n\\r\\n  const mostExpensiveEarlyGame = earlyGameScriptsUsage[0];\\r\\n  const ramToReserveInLimitedEnvironment = coordinator.ram + mostExpensiveEarlyGame.ram;\\r\\n  const earlyGameLimiter = mostExpensiveEarlyGame.name;\\r\\n\\r\\n  const ramReserveFile = 'data/ramToReserveOnHome.txt';\\r\\n\\r\\n\\r\\n  ns.rm(ramReserveFile);\\r\\n  ns.write(ramReserveFile, JSON.stringify({ramToReserve, ramToReserveInLimitedEnvironment, earlyGameLimiter}), \\\"W\\\");\\r\\n\\r\\n  const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n\\r\\n  const ownedAugsTextFileName = \\\"data/ownedAugs.txt\\\";\\r\\n  ns.rm(ownedAugsTextFileName);\\r\\n  ns.write(ownedAugsTextFileName, JSON.stringify(ownedAugmentations), \\\"W\\\");\\r\\n  \\r\\n}\\r\\n\\r\\nclass ScriptRam {\\r\\n  constructor(ram, name) {\\r\\n    this.ram = ram;\\r\\n    this.name = name;\\r\\n  }\\r\\n}\",\"filename\":\"scripts/precalculate-important-data.js\",\"server\":\"home\"}}],[\"scripts/scan.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n/// run scripts/scan.js dispatchScript\\r\\nexport async function main(ns) {\\r\\n    const dispatchScript = ns.args[0];\\r\\n\\r\\n    if (dispatchScript === undefined){\\r\\n        ns.tprint(\\\"Must define dispatch script for scan.\\\")\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const result = new dataMonger(ns).scanEnvironment();\\r\\n\\r\\n    ns.rm('data/enviroment.txt')\\r\\n    ns.write('data/enviroment.txt', JSON.stringify(result), \\\"W\\\")\\r\\n\\r\\n    ns.run(dispatchScript)\\r\\n}\\r\\n\\r\\nexport class dataMonger {\\r\\n    constructor(ns) {\\r\\n        this.ns = ns;\\r\\n    }\\r\\n\\r\\n    scanEnvironment(machineToScan = \\\"home\\\", serversToScan = [], scannedServers = [], result = []) {\\r\\n        if (serversToScan.length === 0 && machineToScan !== \\\"home\\\") {\\r\\n            return result;\\r\\n        }\\r\\n\\r\\n        let lineage = result\\r\\n            .find(x => x.name === machineToScan)\\r\\n            ?.lineage\\r\\n            .map(x => x); // so we aren't using a reference\\r\\n\\r\\n        const scan = this.ns\\r\\n            .scan(machineToScan)\\r\\n            .map(x => new ServerNode(\\r\\n                machineToScan,\\r\\n                this.ns.getServer(x),\\r\\n                lineage\\r\\n            ));\\r\\n\\r\\n        scan.forEach(x => {\\r\\n            if (!scannedServers.includes(x.name) && !serversToScan.includes(x.name)) {\\r\\n                serversToScan.push(x.name);\\r\\n                result.push(x);\\r\\n            }\\r\\n        });\\r\\n\\r\\n        scannedServers.push(machineToScan);\\r\\n        machineToScan = serversToScan.pop();\\r\\n        return this.scanEnvironment(machineToScan, serversToScan, scannedServers, result);\\r\\n    }\\r\\n}\\r\\n\\r\\nclass ServerNode {\\r\\n    constructor(parentsName, server, lineage = []) {\\r\\n        this.name = server.hostname;\\r\\n        this.lineage = lineage\\r\\n        if (parentsName !== \\\"home\\\" && this.lineage !== undefined) {\\r\\n            if (!this.lineage.includes(parentsName)) {\\r\\n                this.lineage.push(parentsName)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.server = server;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/scan.js\",\"server\":\"home\"}}],[\"scripts/contracts/get.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// let savedContractsFileNameForHuman;\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \\r\\n\\r\\nexport async function main(ns) {\\r\\n    const allContracts = [];\\r\\n\\r\\n    JSON\\r\\n        .parse(ns.read('../../data/enviroment.txt'))\\r\\n        .map(server => {\\r\\n            const hostName = server.name;\\r\\n            ns\\r\\n                .ls(hostName)\\r\\n                .filter(file => file.endsWith('.cct'))\\r\\n                .map(contract => {\\r\\n                    const cont = new Contract(\\r\\n                        hostName,\\r\\n                        contract,\\r\\n                        ns.codingcontract.getContractType(contract, hostName),\\r\\n                        ns.codingcontract.getNumTriesRemaining(contract, hostName)\\r\\n                    );\\r\\n\\r\\n                    allContracts.push(cont);\\r\\n                });\\r\\n        });\\r\\n    \\r\\n\\r\\n    ns.rm(thisRoundsContractsFileName);\\r\\n    ns.write(thisRoundsContractsFileName, JSON.stringify(allContracts), \\\"W\\\");\\r\\n}\\r\\n\\r\\nclass Contract {\\r\\n    constructor(server, name, type, attemptsLeft, input, description) {\\r\\n        this.server = server;\\r\\n        this.name = name;\\r\\n        this.type = type;\\r\\n        this.attemptsLeft = attemptsLeft;\\r\\n        this.input = input;\\r\\n        this.description = description;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/contracts/get.js\",\"server\":\"home\"}}],[\"scripts/contracts/do.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const solverRegistry = [\\r\\n        new LzDecompression2Handler(),\\r\\n        new AlgorithmicStockTrading4Handler(),\\r\\n        new AlgorithmicStockTrading3Handler(),\\r\\n        new AlgorithmicStockTrading1Handler(),\\r\\n        new AlgorithmicStockTrading2Handler(),\\r\\n        new SpiralizeMatrixHandler(),\\r\\n        new Encryption1Handler(),\\r\\n        new Encryption2Handler(),\\r\\n    ]\\r\\n\\r\\n    const contracts = JSON.parse(ns.read(thisRoundsContractsFileName));\\r\\n    contracts\\r\\n        .forEach(contract => {\\r\\n            if (contract.attemptsLeft === 10 || contract.attemptsLeft === 5) {\\r\\n                const solver = solverRegistry.find(x => x.type === contract.type);\\r\\n                if (solver) {\\r\\n                    const result = solver.solve(contract.input);\\r\\n                    const success = ns.codingcontract.attempt(result, contract.name, contract.server);\\r\\n                    if (success === \\\"\\\") {\\r\\n                        const failuresContractsFileName = `contracts/failure/${contract.server}-${contract.name}-${contract.type.replaceAll(\\\" \\\", \\\"\\\")}.txt`;\\r\\n\\r\\n                        const saveThis = { contract, wrongResult: result };\\r\\n\\r\\n                        ns.write(failuresContractsFileName, JSON.stringify(saveThis), \\\"W\\\");\\r\\n\\r\\n                        ns.alert(`${contract.name} on ${contract.server} had a problem solving. You need to figure this out. Type: ${contract.type}`);\\r\\n                    } else {\\r\\n                        ns.toast(`Contract completed: ${success} Type: ${contract.type}`, \\\"success\\\", null);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        });\\r\\n}\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\";\\r\\n\\r\\nclass LzDecompression2Handler {\\r\\n    type = 'Compression II: LZ Decompression';\\r\\n\\r\\n    solve(input) {\\r\\n        return this.lzDecompression(input);\\r\\n    }\\r\\n\\r\\n    /// all need to be worked on in tests. These are just copies.\\r\\n    lzDecompression(stringToDecode) {\\r\\n        let decompressedString = '';\\r\\n        let startOfNextChunk = 0\\r\\n        let nextSectionCompressed = false;\\r\\n\\r\\n\\r\\n        while (startOfNextChunk < stringToDecode.length) {\\r\\n            const chunkLength = Number(stringToDecode[startOfNextChunk]);\\r\\n\\r\\n\\r\\n            if (chunkLength === 0) {\\r\\n                startOfNextChunk++;\\r\\n                nextSectionCompressed = !nextSectionCompressed;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (nextSectionCompressed) {\\r\\n                const nextCharacterInEncoded = parseInt(stringToDecode[startOfNextChunk + 1]);\\r\\n\\r\\n                const placesBack = nextCharacterInEncoded;\\r\\n                const startText = decompressedString.length - placesBack;\\r\\n                const endOfText = startText + chunkLength;\\r\\n\\r\\n                if (chunkLength <= nextCharacterInEncoded) {\\r\\n                    decompressedString += decompressedString.slice(startText, endOfText);\\r\\n                } else {\\r\\n                    let nextChunk = \\\"\\\";\\r\\n                    const partialChunk = decompressedString.slice(startText, endOfText);\\r\\n\\r\\n                    while (nextChunk.length < chunkLength) {\\r\\n                        if (nextChunk.length + partialChunk.length > chunkLength) {\\r\\n                            const howMuchLeftInChunk = chunkLength - nextChunk.length;\\r\\n                            nextChunk += partialChunk.slice(0, howMuchLeftInChunk)\\r\\n                        } else {\\r\\n                            nextChunk += partialChunk;\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    decompressedString += nextChunk;\\r\\n                }\\r\\n\\r\\n                startOfNextChunk += 2;\\r\\n                nextSectionCompressed = false;\\r\\n            } else {\\r\\n                const startText = startOfNextChunk + 1;\\r\\n                const endOfText = startText + chunkLength;\\r\\n                decompressedString += stringToDecode.slice(startText, endOfText);\\r\\n                startOfNextChunk = endOfText;\\r\\n                nextSectionCompressed = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        return decompressedString;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading1Handler {\\r\\n    type = 'Algorithmic Stock Trader I';\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = 1;\\r\\n        const stockPricesByDay = input;\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return new AlgorithmicStockTrading4Handler().tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading2Handler {\\r\\n    type = 'Algorithmic Stock Trader II';\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = input.length;\\r\\n        const stockPricesByDay = input;\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return new AlgorithmicStockTrading4Handler().tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading3Handler {\\r\\n    type = 'Algorithmic Stock Trader III';\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = 2;\\r\\n        const stockPricesByDay = input;\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return new AlgorithmicStockTrading4Handler().tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading4Handler {\\r\\n    type = 'Algorithmic Stock Trader IV';\\r\\n\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = input[0];\\r\\n        const stockPricesByDay = input[1];\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return this.tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n\\r\\n    tradeStock(maxNumberOfTrades, stockPricesByDay) {\\r\\n        if (maxNumberOfTrades === 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        let profitsPerTransaction = []\\r\\n\\r\\n        for (let i = stockPricesByDay.length - 1; i >= 1; i--) {\\r\\n            const priceToSeeIfHasNoVolitility = stockPricesByDay[i];\\r\\n\\r\\n            const yesterdaysPrice = stockPricesByDay[i - 1]\\r\\n            const tomorrowsPrice = stockPricesByDay[i + 1]\\r\\n\\r\\n            if (\\r\\n                (yesterdaysPrice <= priceToSeeIfHasNoVolitility && priceToSeeIfHasNoVolitility <= tomorrowsPrice) || // rising prices filter\\r\\n                (!tomorrowsPrice && yesterdaysPrice >= priceToSeeIfHasNoVolitility) || // end price\\r\\n                (yesterdaysPrice >= priceToSeeIfHasNoVolitility && priceToSeeIfHasNoVolitility >= tomorrowsPrice)) { // falling price filter\\r\\n                stockPricesByDay.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < stockPricesByDay.length; i++) {\\r\\n            const price = stockPricesByDay[i];\\r\\n            const potentialBuyPrice = stockPricesByDay[i - 1];\\r\\n            let potentialProfit = 0;\\r\\n\\r\\n            if (potentialBuyPrice) {\\r\\n                potentialProfit = price - potentialBuyPrice;\\r\\n            }\\r\\n\\r\\n            if (potentialProfit < 0) {\\r\\n                potentialProfit = 0;\\r\\n            }\\r\\n\\r\\n\\r\\n            profitsPerTransaction.push({ price, potentialProfit });\\r\\n        }\\r\\n\\r\\n        if (maxNumberOfTrades >= profitsPerTransaction.filter(x => x.potentialProfit > 0).length) {\\r\\n            return profitsPerTransaction\\r\\n                .reduce((acc, x) => acc + x.potentialProfit, 0);\\r\\n        }\\r\\n\\r\\n        const minProfit = Math.min(...profitsPerTransaction.filter(x => x.potentialProfit !== 0).map(x => x.potentialProfit));\\r\\n        const countOfMinProfits = profitsPerTransaction.filter(x => x.potentialProfit === minProfit).length;\\r\\n        const maxPrice = Math.max(...stockPricesByDay);\\r\\n        const arraysToWorkWith = [];\\r\\n\\r\\n        for (let i = 0; i < profitsPerTransaction.length; i++) {\\r\\n            const profitPerTranaction = profitsPerTransaction[i];\\r\\n\\r\\n            if (profitPerTranaction.potentialProfit === minProfit) {\\r\\n\\r\\n                const copyOfProfitsPerTransaction = profitsPerTransaction.map(x => x)\\r\\n                if (profitPerTranaction.price === maxPrice) {\\r\\n                    copyOfProfitsPerTransaction.splice(i - 1, 1);\\r\\n                } else {\\r\\n                    copyOfProfitsPerTransaction.splice(i, 1); // if there is a bigger price in the future, splice sell price. \\r\\n                }\\r\\n\\r\\n                arraysToWorkWith.push(copyOfProfitsPerTransaction.map(x => x.price));\\r\\n            }\\r\\n\\r\\n            if (arraysToWorkWith.length === countOfMinProfits) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        const potentialProfitsForAllTrades = []\\r\\n        for (const newArrayOfPrices of arraysToWorkWith) {\\r\\n            potentialProfitsForAllTrades.push(this.tradeStock(maxNumberOfTrades, newArrayOfPrices))\\r\\n        }\\r\\n\\r\\n        return Math.max(...potentialProfitsForAllTrades);\\r\\n\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass SpiralizeMatrixHandler {\\r\\n    type = \\\"Spiralize Matrix\\\";\\r\\n\\r\\n    solve(matrix) {\\r\\n        return this.solveRecursively(JSON.parse(JSON.stringify(matrix)));\\r\\n    }\\r\\n\\r\\n    solveRecursively(matrix, spiralOrderResult = []) {\\r\\n\\r\\n        if (matrix.length === 0) {\\r\\n            return spiralOrderResult;\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < matrix.length; i++) {\\r\\n            if (i === 0 || i === matrix.length - 1) {\\r\\n                let rowToEmpty = matrix[i];\\r\\n\\r\\n                if (i === matrix.length - 1 && i !== 0) {\\r\\n                    rowToEmpty.reverse()\\r\\n                }\\r\\n\\r\\n                for (let x = 0; x < rowToEmpty.length; x++) {\\r\\n                    const number = rowToEmpty[x];\\r\\n                    \\r\\n                    spiralOrderResult.push(number);\\r\\n                }\\r\\n\\r\\n                rowToEmpty.length = 0\\r\\n            } else {\\r\\n                let rowBeingUsed = matrix[i];\\r\\n                const number = rowBeingUsed.pop()\\r\\n\\r\\n                if(number){\\r\\n                    spiralOrderResult.push(number);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        for (let i = matrix.length - 1; i > -1; i--) {\\r\\n            if (matrix[i].length === 0) {\\r\\n                matrix.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (let i = matrix.length - 1; i > -1; i--) {\\r\\n            const row = matrix[i];\\r\\n            row.reverse();\\r\\n            spiralOrderResult.push(row.pop());\\r\\n            row.reverse();\\r\\n        }\\r\\n\\r\\n        return this.solveRecursively(matrix, spiralOrderResult)\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Encryption1Handler {\\r\\n    type = 'Encryption I: Caesar Cipher';\\r\\n\\r\\n    solve([string, shift]) {\\r\\n\\r\\n        let returnString = \\\"\\\";\\r\\n\\r\\n        if (string) {\\r\\n            for (const character of string) {\\r\\n                if (character === \\\" \\\") {\\r\\n                    returnString += \\\" \\\";\\r\\n                }\\r\\n                else {\\r\\n                    const charCode = character.charCodeAt(0);\\r\\n\\r\\n                    if (charCode) {\\r\\n                        let newCharCode = charCode - shift;\\r\\n\\r\\n                        if (newCharCode < 65) {\\r\\n                            const amountLessThan65 = 65 - newCharCode;\\r\\n                            newCharCode = 91 - amountLessThan65;\\r\\n                        }\\r\\n\\r\\n                        returnString += String.fromCharCode(newCharCode);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return returnString;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass Encryption2Handler {\\r\\n    type = 'Encryption II: Vigenère Cipher';\\r\\n\\r\\n    solve([plainText, key]) {\\r\\n\\r\\n        let encryptedText = \\\"\\\";\\r\\n\\r\\n        if(plainText){\\r\\n            let keyIndex = 0;\\r\\n\\r\\n            for (let i = 0; i < plainText.length; i++) {\\r\\n                const plainTextCharacter = plainText[i];\\r\\n\\r\\n                if(plainTextCharacter === \\\" \\\"){\\r\\n                    encryptedText += \\\" \\\";\\r\\n                } else {\\r\\n                    const keyCharCode = key[keyIndex].charCodeAt(0);\\r\\n                    const shift = keyCharCode - 65;\\r\\n\\r\\n                    const plainTextCode = plainTextCharacter.charCodeAt(0);\\r\\n                    let encryptedCharacterCode = plainTextCode + shift;\\r\\n\\r\\n                    if (encryptedCharacterCode > 90) {\\r\\n                        const amountMoreThan91 = encryptedCharacterCode - 91;\\r\\n                        encryptedCharacterCode = amountMoreThan91 + 65;\\r\\n                    }\\r\\n\\r\\n                    encryptedText += String.fromCharCode(encryptedCharacterCode);\\r\\n                }\\r\\n\\r\\n                \\r\\n                keyIndex++;\\r\\n                if(keyIndex >= key.length){\\r\\n                    keyIndex = 0;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return encryptedText;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/contracts/do.js\",\"server\":\"home\"}}],[\"scripts/contracts/save-contracts-for-thomas.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \\r\\nlet savedContractsFileNameForHuman;\\r\\n\\r\\nexport async function main(ns) {\\r\\n\\r\\n    let savedContracts;\\r\\n\\r\\n    const contractsFromThisRound = JSON.parse(ns.read(thisRoundsContractsFileName));\\r\\n\\r\\n    if(savedContractsFileNameForHuman){\\r\\n        savedContracts = JSON.parse(ns.read(savedContractsFileNameForHuman));\\r\\n    }\\r\\n\\r\\n    if (!savedContracts || contractsFromThisRound.length === 0 && savedContracts.length > 0){\\r\\n        const now = new Date();\\r\\n        savedContractsFileNameForHuman = `contracts/${now.toISOString()}.txt`\\r\\n    }\\r\\n\\r\\n    ns.rm(savedContractsFileNameForHuman);\\r\\n    ns.write(savedContractsFileNameForHuman, JSON.stringify(contractsFromThisRound), \\\"W\\\");\\r\\n\\r\\n}\",\"filename\":\"scripts/contracts/save-contracts-for-thomas.js\",\"server\":\"home\"}}],[\"scripts/contracts/populate-input.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const contracts = JSON.parse(ns.read(thisRoundsContractsFileName))\\r\\n\\r\\n    for (const contract of contracts) {\\r\\n        const hostName = contract.server;\\r\\n        const contractName = contract.name;\\r\\n        contract.input = ns.codingcontract.getData(contractName, hostName);\\r\\n    }\\r\\n\\r\\n    ns.rm(thisRoundsContractsFileName);\\r\\n    ns.write(thisRoundsContractsFileName, JSON.stringify(contracts), \\\"W\\\");\\r\\n}\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \",\"filename\":\"scripts/contracts/populate-input.js\",\"server\":\"home\"}}],[\"scripts/contracts/populate-description.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const contracts = JSON.parse(ns.read(thisRoundsContractsFileName))\\r\\n\\r\\n    for (const contract of contracts) {\\r\\n        const hostName = contract.server;\\r\\n        const contractName = contract.name;\\r\\n        contract.description = ns.codingcontract.getDescription(contractName, hostName);\\r\\n    }\\r\\n\\r\\n    ns.rm(thisRoundsContractsFileName);\\r\\n    ns.write(thisRoundsContractsFileName, JSON.stringify(contracts), \\\"W\\\");\\r\\n}\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \",\"filename\":\"scripts/contracts/populate-description.js\",\"server\":\"home\"}}],[\"scripts/contracts/contract-coordinator.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    ns.run('scripts/contracts/get.js');\\r\\n    await ns.sleep(200);\\r\\n\\r\\n    ns.run('scripts/contracts/populate-input.js')\\r\\n    await ns.sleep(200);\\r\\n\\r\\n    ns.run('scripts/contracts/populate-description.js')\\r\\n    await ns.sleep(200);\\r\\n\\r\\n    ns.run('scripts/contracts/do.js')\\r\\n    await ns.sleep(200);\\r\\n\\r\\n    ns.run('scripts/contracts/save-contracts-for-thomas.js')\\r\\n}\",\"filename\":\"scripts/contracts/contract-coordinator.js\",\"server\":\"home\"}}],[\"scripts/test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n  ns.stock.sellShort(\\\"sym\\\", \\\"shares\\\");\\n\\n  ns.stock.buyShort(\\\"sym\\\", \\\"shares\\\");\\n\\n}\",\"filename\":\"scripts/test.js\",\"server\":\"home\"}}],[\"scripts/coordinator-for-8.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"//run scripts/coordinator.js 1000 564 5.629 BitRunners\\r\\nexport async function main(ns) {\\r\\n    const loopEveryXSeconds = 2;\\r\\n    const sleepTotalOfXMS = loopEveryXSeconds * 1000;\\r\\n    const numberOfDifferentSleeps = 5;\\r\\n    const individualSleepAmount = sleepTotalOfXMS / numberOfDifferentSleeps;\\r\\n    let dispatchScript = 'scripts/hacking/memory-starved-dispatch.js';\\r\\n\\r\\n    let runClean = true;\\r\\n    if (ns.args[0] === 'old') {\\r\\n        runClean = false;\\r\\n    }\\r\\n\\r\\n    if (runClean) {\\r\\n        ns.run('scripts/clean.js', 1, \\\"new\\\");\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n\\r\\n    ns.run('scripts/precalculate-important-data.js')\\r\\n\\r\\n    await ns.sleep(200);\\r\\n\\r\\n    while (true) {\\r\\n\\r\\n        if (ns.fileExists('Formulas.exe')) {\\r\\n            dispatchScript = 'scripts/hacking/batch-dispatch.js'\\r\\n        }\\r\\n\\r\\n        ns.run(\\\"scripts/scan.js\\\", 1, dispatchScript);\\r\\n        await ns.sleep(individualSleepAmount);\\r\\n\\r\\n\\r\\n        ns.run('scripts/hacking/hack-all-machines.js');\\r\\n        await ns.sleep(individualSleepAmount);\\r\\n\\r\\n\\r\\n        ns.run('scripts/contracts/contract-coordinator.js');\\r\\n        await ns.sleep(individualSleepAmount);\\r\\n\\r\\n\\r\\n        ns.run('scripts/stock/get-stock-quotes.js');\\r\\n        await ns.sleep(individualSleepAmount);\\r\\n\\r\\n        await singularityStuff(ns);\\r\\n    }\\r\\n\\r\\n\\r\\n    async function singularityStuff(ns) {\\r\\n        await doSingularityWork(ns, 'backdoor-all-machines')\\r\\n        await doSingularityWork(ns, 'join-organziations');\\r\\n        await doSingularityWork(ns, 'do-work');\\r\\n        // await doSingularityWork(ns, 'finish-round');\\r\\n        await doSingularityWork(ns, 'finish-bitnode');\\r\\n        await doSingularityWork(ns, 'study-computer-science');\\r\\n        await doSingularityWork(ns, 'create-early-programs');\\r\\n        await doSingularityWork(ns, 'do-job');\\r\\n        await doSingularityWork(ns, 'buy-rep');\\r\\n        await doSingularityWork(ns, 'workout');\\r\\n        // await doSingularityWork(ns, 'upgade-home-machine');\\r\\n        await doSingularityWork(ns, 'travel-to-get-augs');\\r\\n    }\\r\\n\\r\\n    async function doSingularityWork(ns, script) {\\r\\n        ns.run(`scripts/singularity/${script}.js`);\\r\\n\\r\\n        await ns.sleep(individualSleepAmount / 12);\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"filename\":\"scripts/coordinator-for-8.js\",\"server\":\"home\"}}],[\"scripts/stock/get-stock-quotes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const stockRecords = ns.stock\\r\\n        .getSymbols()\\r\\n        .map(x => new Stock(\\r\\n            x,\\r\\n            ns.stock.getBidPrice(x),\\r\\n            ns.stock.getAskPrice(x),\\r\\n            ns.stock.getPrice(x),\\r\\n            ns.stock.getMaxShares(x),\\r\\n            ns.stock.getPosition(x)\\r\\n        ));\\r\\n\\r\\n    const latestStockQuotesFile = \\\"data/latestQuotes.txt\\\";\\r\\n    ns.rm(latestStockQuotesFile);\\r\\n    ns.write(latestStockQuotesFile, JSON.stringify(stockRecords), \\\"W\\\")\\r\\n\\r\\n    ns.run(\\\"scripts/stock/populate-forecast.js\\\")\\r\\n}\\r\\n\\r\\n\\r\\nclass Stock {\\r\\n    constructor(symbol, bid, ask, price, maxShares, position = {}, dateObserved = new Date()) {\\r\\n        this.symbol = symbol;\\r\\n        this.bid = bid;\\r\\n        this.ask = ask;\\r\\n        this.price = price;\\r\\n        this.maxShares = maxShares;\\r\\n        this.investedShares = position[0];\\r\\n        this.averagePrice = position[1];\\r\\n        this.sharesShort = position[2];\\r\\n        this.averageShortPrice = position[3];\\r\\n        this.dateObserved = dateObserved.toLocaleString();\\r\\n    }\\r\\n\\r\\n    volatility;\\r\\n    forecast;\\r\\n\\r\\n    buyTrend = false;\\r\\n    sellTrend = false;\\r\\n    sellShortTrend = false;\\r\\n    coverShortTrend = false;\\r\\n\\r\\n}\",\"filename\":\"scripts/stock/get-stock-quotes.js\",\"server\":\"home\"}}],[\"scripts/stock/populate-forecast.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const latestStockQuotesFile = \\\"data/latestQuotes.txt\\\";\\r\\n    const stockRecords = JSON.parse(ns.read(latestStockQuotesFile));\\r\\n\\r\\n    const hasS4DataTIXAPI = ns.stock.has4SDataTIXAPI();\\r\\n\\r\\n    if (hasS4DataTIXAPI) {\\r\\n        for (const stockRecord of stockRecords) {\\r\\n            stockRecord.volatility = ns.stock.getVolatility(stockRecord.symbol);\\r\\n            stockRecord.forecast = ns.stock.getForecast(stockRecord.symbol);\\r\\n            stockRecord.bias = Math.abs(stockRecord.forecast - .5);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.rm(latestStockQuotesFile);\\r\\n    ns.write(latestStockQuotesFile, JSON.stringify(stockRecords), \\\"W\\\")\\r\\n\\r\\n    ns.run(\\\"scripts/stock/buy-4s.js\\\")\\r\\n}\",\"filename\":\"scripts/stock/populate-forecast.js\",\"server\":\"home\"}}],[\"scripts/stock/invest-in-stocks.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let lastRecordedToConsole = new Date();\\r\\n\\r\\nexport async function main(ns) {\\r\\n\\r\\n    let historicalData = new Map();\\r\\n\\r\\n    const nameOfStockHistoricalData = \\\"../../data/stockHistory.txt\\\";\\r\\n    if (ns.fileExists(nameOfStockHistoricalData)) {\\r\\n        historicalData = new Map(JSON.parse(ns.read(nameOfStockHistoricalData)));\\r\\n    }\\r\\n\\r\\n    const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n    let stockMarketReserveMoney = new ReserveForTrading();\\r\\n    if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n        stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n    }\\r\\n\\r\\n    const latestStockQuotesFile = \\\"data/latestQuotes.txt\\\";\\r\\n    const stockRecords = JSON.parse(ns.read(latestStockQuotesFile));\\r\\n\\r\\n    SaveHistoricData(stockRecords, historicalData, ns, nameOfStockHistoricalData);\\r\\n\\r\\n    let moneyInvested = 0;\\r\\n    moneyInvested += stockRecords.reduce((sum, record) => sum += record.price * record.investedShares, 0);\\r\\n    moneyInvested += stockRecords.reduce((sum, record) => sum += (record.averageShortPrice * record.sharesShort) + ((record.averageShortPrice - record.price) * record.sharesShort), 0);\\r\\n\\r\\n    stockMarketReserveMoney.setMoneyInvested(moneyInvested, ns);\\r\\n\\r\\n    // ns.tprint(stockRecords.filter(x => (x.sharesShort > 0) || x.investedShares > 0))\\r\\n\\r\\n    const nameOfLedger = \\\"../../data/salesLedger.txt\\\"\\r\\n    let ledger = [];\\r\\n\\r\\n    if (ns.fileExists(nameOfLedger)) {\\r\\n        ledger = JSON.parse(ns.read(nameOfLedger));\\r\\n    }\\r\\n\\r\\n    stockMarketReserveMoney.moneyRequested = new Map(Array.from(stockMarketReserveMoney.moneyRequested));\\r\\n    const reserveMoneyKeys = stockMarketReserveMoney.moneyRequested.keys();\\r\\n    let moneyRequested = 0;\\r\\n\\r\\n    for (const requestKey of reserveMoneyKeys) {\\r\\n        moneyRequested += stockMarketReserveMoney.moneyRequested.get(requestKey);\\r\\n    }\\r\\n\\r\\n    if (moneyRequested === 0) {\\r\\n        stockMarketReserveMoney.countOfVisitedWithoutFillingRequest = 0;\\r\\n    }\\r\\n\\r\\n    let sellSharesToSatisfyMoneyDemands = false;\\r\\n    if (stockMarketReserveMoney.countOfVisitedWithoutFillingRequest > 90) {\\r\\n        sellSharesToSatisfyMoneyDemands = true;\\r\\n    }\\r\\n\\r\\n    const commission = 100_001;\\r\\n\\r\\n    const stopTradingExists = ns.fileExists(\\\"../../stopTrading.txt\\\");\\r\\n    stockRecords.map(stock => {\\r\\n        let sharesToSell = 0;\\r\\n        let type = \\\"Short-Term Long Sale\\\";\\r\\n        let averagePrice = 0;\\r\\n        let coverShort = false;\\r\\n\\r\\n        if (stock.investedShares > 0) {\\r\\n            sharesToSell = stock.investedShares;\\r\\n            type = \\\"Short-Term Long Sale\\\";\\r\\n            averagePrice = stock.averagePrice;\\r\\n            coverShort = false;\\r\\n        }\\r\\n\\r\\n        if (stock.sharesShort > 0) {\\r\\n            sharesToSell = stock.sharesShort;\\r\\n            type = \\\"Short-Term Cover Short\\\";\\r\\n            averagePrice = stock.averageShortPrice;\\r\\n            coverShort = true;\\r\\n        }\\r\\n\\r\\n        if (sellSharesToSatisfyMoneyDemands) {\\r\\n            if (stockMarketReserveMoney.canSellAmountAndStillHaveReserve(moneyRequested)) {\\r\\n                sharesToSell = Math.ceil(moneyRequested / stock.bid)\\r\\n\\r\\n                if (sharesToSell > stock.investedShares) {\\r\\n                    sharesToSell = stock.investedShares;\\r\\n                }\\r\\n\\r\\n                if (sharesToSell > stock.sharesShort) {\\r\\n                    sharesToSell = stock.sharesShort;\\r\\n                }\\r\\n            } else {\\r\\n                sellSharesToSatisfyMoneyDemands = false;\\r\\n                stockMarketReserveMoney.countOfVisitedWithoutFillingRequest = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        if (sharesToSell > 0) {\\r\\n            if ((stock.sellTrend && coverShort === false) || stopTradingExists || sellSharesToSatisfyMoneyDemands || (stock.coverShortTrend && coverShort)) {\\r\\n                let salePrice;\\r\\n                if (coverShort) {\\r\\n                    salePrice = ns.stock.sellShort(stock.symbol, sharesToSell);\\r\\n                } else {\\r\\n                    salePrice = ns.stock.sellStock(stock.symbol, sharesToSell);\\r\\n                }\\r\\n\\r\\n                ledger.push(new LedgerItem(\\r\\n                    stock.symbol,\\r\\n                    salePrice,\\r\\n                    averagePrice,\\r\\n                    sharesToSell,\\r\\n                    type,\\r\\n                    stock.forecast\\r\\n                ))\\r\\n\\r\\n                if (sellSharesToSatisfyMoneyDemands) {\\r\\n                    sellSharesToSatisfyMoneyDemands = false;\\r\\n                    ns.toast(`Sold $${moneyRequested} for money request.`, \\\"success\\\", null)\\r\\n                }\\r\\n\\r\\n                if (stopTradingExists) {\\r\\n                    ns.toast(\\\"Stopped trading\\\", \\\"success\\\", null)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n\\r\\n    const moneyWeHaveNow = ns.getServerMoneyAvailable(\\\"home\\\") + stockMarketReserveMoney.moneyInvested;\\r\\n\\r\\n    const now = new Date();\\r\\n    if (now.getMinutes() !== lastRecordedToConsole.getMinutes()) {\\r\\n        const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n\\r\\n        const formatter = new Intl.NumberFormat('en-US', {\\r\\n            style: 'currency',\\r\\n            currency: 'USD',\\r\\n        });\\r\\n\\r\\n        const moneyFormatted = formatter.format(moneyWeHaveNow);\\r\\n\\r\\n        let consoleUpdate = `${timeStamp} Money we have now: ${moneyFormatted}`;\\r\\n\\r\\n        ns.tprint(consoleUpdate);\\r\\n\\r\\n        lastRecordedToConsole = now;\\r\\n    }\\r\\n\\r\\n\\r\\n    ns.rm(nameOfLedger);\\r\\n    ns.write(nameOfLedger, JSON.stringify(ledger), \\\"W\\\");\\r\\n\\r\\n\\r\\n    let moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\") - commission - moneyRequested;\\r\\n\\r\\n    if (moneyAvailable > 5_000_000_000 && !ns.stock.has4SDataTIXAPI()) {\\r\\n        moneyAvailable = 5_000_000_000;\\r\\n    }\\r\\n\\r\\n    let onlyInvestIfWeHaveMoreThan = 30_000_000;\\r\\n    if (ns.fileExists('../../stopInvesting.txt')) {\\r\\n        onlyInvestIfWeHaveMoreThan = 30_000_000;\\r\\n    }\\r\\n\\r\\n    if (moneyAvailable > onlyInvestIfWeHaveMoreThan && !stopTradingExists) {\\r\\n        let stocksToTrade = stockRecords\\r\\n            .filter(stock => \\r\\n                (stock.buyTrend && stock.investedShares !== stock.maxShares) || \\r\\n                (stock.sellShortTrend && stock.maxShares !== stock.sharesShort))\\r\\n            .sort((a, b) => b.volatility - a.volatility);\\r\\n\\r\\n        if (!ns.stock.has4SDataTIXAPI()) {\\r\\n            stocksToTrade = stockRecords\\r\\n                .filter(stock => \\r\\n                    (stock.buyTrend && stock.investedShares === 0) || \\r\\n                    (stock.sellShortTrend && stock.sharesShort === 0))\\r\\n        }\\r\\n\\r\\n        if (stocksToTrade.length > 0) {\\r\\n            const stockToLookAt = stocksToTrade[0];\\r\\n\\r\\n            let sharesToBuy = 0;\\r\\n            const ticker = stockToLookAt.symbol;\\r\\n\\r\\n            if (stockToLookAt.buyTrend){\\r\\n                sharesToBuy = Math.round(moneyAvailable / stockToLookAt.ask);\\r\\n\\r\\n                const totalSharesAfterBuy = sharesToBuy + stockToLookAt.investedShares;\\r\\n\\r\\n                if (stockToLookAt.maxShares < totalSharesAfterBuy) {\\r\\n                    sharesToBuy = stockToLookAt.maxShares - stockToLookAt.investedShares;\\r\\n                }\\r\\n\\r\\n                ns.stock.buyStock(ticker, sharesToBuy);\\r\\n            }             \\r\\n\\r\\n            if (stockToLookAt.sellShortTrend){\\r\\n                sharesToBuy = Math.round(moneyAvailable / stockToLookAt.bid);\\r\\n\\r\\n                const totalSharesAfterBuy = sharesToBuy + stockToLookAt.sharesShort;\\r\\n\\r\\n                if (stockToLookAt.maxShares < totalSharesAfterBuy) {\\r\\n                    sharesToBuy = stockToLookAt.maxShares - stockToLookAt.sharesShort;\\r\\n                }\\r\\n\\r\\n                ns.stock.buyShort(ticker, sharesToBuy);\\r\\n            }         \\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.rm(stockMarketReserveMoneyFile);\\r\\n    ns.write(stockMarketReserveMoneyFile, JSON.stringify(stockMarketReserveMoney), \\\"W\\\");\\r\\n}\\r\\n\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 2_000_000_000_000;\\r\\n    capitalToReserveForTrading = 0;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    canSellAmountAndStillHaveReserve(amountToSell) {\\r\\n        return (this.moneyInvested - amountToSell) > this.capitalToReserveForTrading;\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = moneyInvested / 2;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"purchase-server\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"purchase-server\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nclass LedgerItem {\\r\\n\\r\\n    constructor(symbol, price, averagePurchasePrice, shares, type, forecastAtSale) {\\r\\n        const formatter = new Intl.NumberFormat('en-US', {\\r\\n            style: 'currency',\\r\\n            currency: 'USD',\\r\\n        });\\r\\n\\r\\n        let numberProfit = (price - averagePurchasePrice) * shares;\\r\\n\\r\\n        if(type === \\\"Short-Term Cover Short\\\"){\\r\\n            numberProfit = (averagePurchasePrice - price) * shares;\\r\\n        }\\r\\n\\r\\n        this.date = new Date().toLocaleString();\\r\\n        this.symbol = symbol;\\r\\n        this.price = price;\\r\\n        this.averagePurchasePrice = averagePurchasePrice;\\r\\n        this.profit = formatter.format(numberProfit);\\r\\n        this.profitPercent = (numberProfit / (shares * averagePurchasePrice)).toLocaleString(undefined, { style: 'percent', minimumFractionDigits: 2 });\\r\\n        this.shares = shares;\\r\\n        this.type = type;\\r\\n        this.forecastAtSale = forecastAtSale;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass StockHistoricData {\\r\\n    shortTermRecords = [];\\r\\n    longTermRecords = [];\\r\\n    recentTicksOfPrices = [];\\r\\n\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    addRecord(record, ns) {\\r\\n        this.shortTermRecords.push(record);\\r\\n        this.recentTicksOfPrices.push(record.price);\\r\\n\\r\\n        if (this.recentTicksOfPrices.length === 21) {\\r\\n            record.countOfNegative = 0;\\r\\n            record.countOfPositive = 0;\\r\\n\\r\\n            let lastPrice;\\r\\n            for (const price of this.recentTicksOfPrices) {\\r\\n                if (lastPrice) {\\r\\n                    if (lastPrice < price) {\\r\\n                        record.countOfPositive++;\\r\\n                    }\\r\\n\\r\\n                    if (lastPrice > price) {\\r\\n                        record.countOfNegative++;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                lastPrice = price;\\r\\n            }\\r\\n\\r\\n            this.recentTicksOfPrices.shift();\\r\\n        }\\r\\n\\r\\n        const hasOracle = ns.stock.has4SDataTIXAPI();\\r\\n\\r\\n\\r\\n        if (!hasOracle) {\\r\\n            if (record.countOfPositive >= 16) {\\r\\n                record.buyTrend = true;\\r\\n            }\\r\\n\\r\\n            if (record.countOfPositive <= 12 && record.investedShares > 0) {\\r\\n                record.sellTrend = true;\\r\\n            }\\r\\n\\r\\n            if (record.countOfNegative >= 16) {\\r\\n                record.sellShortTrend = true;\\r\\n            }\\r\\n\\r\\n            if (record.countOfNegative <= 12 && record.sharesShort > 0) {\\r\\n                record.coverShortTrend = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (hasOracle) {\\r\\n            if (record.forecast > 0.6) {\\r\\n                record.buyTrend = true;\\r\\n            }\\r\\n\\r\\n            if (record.forecast < .5 && record.investedShares > 0) {\\r\\n                record.sellTrend = true;\\r\\n            }\\r\\n\\r\\n            if (0.4 > record.forecast) {\\r\\n                record.sellShortTrend = true;\\r\\n            }\\r\\n\\r\\n            if (0.5 < record.forecast && record.sharesShort > 0) {\\r\\n                record.coverShortTrend = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    storeLongTerm() {\\r\\n        const newLongTermStock = new Stock(\\r\\n            this.shortTermRecords[0].symbol,\\r\\n            this.shortTermRecords.map(x => x.bid).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            this.shortTermRecords.map(x => x.ask).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            this.shortTermRecords.map(x => x.price).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            this.shortTermRecords[0].maxShares,\\r\\n            [\\r\\n                this.shortTermRecords.map(x => x.investedShares).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n                this.shortTermRecords.map(x => x.averagePrice).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n                this.shortTermRecords.map(x => x.sharesShort).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n                this.shortTermRecords.map(x => x.averageShortPrice).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            ]\\r\\n        );\\r\\n\\r\\n        newLongTermStock.volatility = this.shortTermRecords[0].volatility;\\r\\n        newLongTermStock.forecast = this.shortTermRecords.map(x => x.forecast).reduce((a, b) => a + b) / this.shortTermRecords.length;\\r\\n\\r\\n        newLongTermStock.bias = Math.max(...this.shortTermRecords.map(x => x.bias));\\r\\n\\r\\n        this.longTermRecords.push(newLongTermStock);\\r\\n\\r\\n        this.shortTermRecords.length = 0;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Stock {\\r\\n    constructor(symbol, bid, ask, price, maxShares, position = {}, dateObserved = new Date()) {\\r\\n        this.symbol = symbol;\\r\\n        this.bid = bid;\\r\\n        this.ask = ask;\\r\\n        this.price = price;\\r\\n        this.maxShares = maxShares;\\r\\n        this.investedShares = position[0];\\r\\n        this.averagePrice = position[1];\\r\\n        this.sharesShort = position[2];\\r\\n        this.averageShortPrice = position[3];\\r\\n        this.dateObserved = dateObserved.toLocaleString();\\r\\n    }\\r\\n\\r\\n    volatility;\\r\\n    forecast;\\r\\n\\r\\n    buyTrend = false;\\r\\n    sellTrend = false;\\r\\n    sellShortTrend = false;\\r\\n    coverShortTrend = false;\\r\\n\\r\\n}\\r\\n\\r\\nfunction SaveHistoricData(stockRecords, historicalData, ns, nameOfStockHistoricalData) {\\r\\n    stockRecords.map(x => {\\r\\n        if (historicalData.has(x.symbol)) {\\r\\n            const data = historicalData.get(x.symbol);\\r\\n\\r\\n            if (data.shortTermRecords[data.shortTermRecords.length - 1]?.price !== x.price) {\\r\\n                const record = new StockHistoricData(data);\\r\\n                record.addRecord(x, ns);\\r\\n\\r\\n                if (record.shortTermRecords.length >= 100) {\\r\\n                    record.storeLongTerm();\\r\\n                }\\r\\n\\r\\n                historicalData.set(x.symbol, record);\\r\\n            }\\r\\n\\r\\n        } else {\\r\\n            const stockHistoryData = new StockHistoricData();\\r\\n            stockHistoryData.addRecord(x, ns);\\r\\n            historicalData.set(x.symbol, stockHistoryData);\\r\\n        }\\r\\n    });\\r\\n\\r\\n    ns.rm(nameOfStockHistoricalData);\\r\\n    ns.write(nameOfStockHistoricalData, JSON.stringify(Array.from(historicalData.entries()), \\\"W\\\"));\\r\\n}\\r\\n\",\"filename\":\"scripts/stock/invest-in-stocks.js\",\"server\":\"home\"}}],[\"scripts/stock/buy-4s.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\") \\r\\n\\r\\n    if (moneyAvailable > 27_000_000_000 && !ns.stock.has4SDataTIXAPI()) {\\r\\n        ns.stock.purchase4SMarketData();\\r\\n        ns.stock.purchase4SMarketDataTixApi();\\r\\n    }\\r\\n\\r\\n    ns.run(\\\"scripts/stock/invest-in-stocks.js\\\")\\r\\n}\",\"filename\":\"scripts/stock/buy-4s.js\",\"server\":\"home\"}}],[\"scripts/tools/manually-end-round.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const player = ns.getPlayer();\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n\\r\\n    const formatter = new Intl.NumberFormat('en-US', {\\r\\n        style: 'currency',\\r\\n        currency: 'USD',\\r\\n    });\\r\\n\\r\\n\\r\\n    const mostRepExpensiveForEachFaction = [];\\r\\n    for (const faction of player.factions) {\\r\\n        const maximumAugRep = Math.max(...ns\\r\\n            .singularity\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n            .filter(x => !ownedAugmentations.includes(x))\\r\\n            .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n        if (maximumAugRep > 0) {\\r\\n            mostRepExpensiveForEachFaction.push({ faction, maximumAugRep });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const factionsWithAugmentsToBuy =\\r\\n        mostRepExpensiveForEachFaction\\r\\n            .map(x => {\\r\\n                {\\r\\n                    const faction = x.faction;\\r\\n                    const factionRep = ns.singularity.getFactionRep(faction);\\r\\n                    const factionAugmentsThatIDontOwnAndCanAfford = ns\\r\\n                        .singularity\\r\\n                        .getAugmentationsFromFaction(faction)\\r\\n                        .filter(y => y !== \\\"NeuroFlux Governor\\\")\\r\\n                        .filter(y => !ownedAugmentations.includes(y))\\r\\n                        .map(y => {\\r\\n                            return {\\r\\n                                augmentName: y,\\r\\n                                augmentationRepCost: ns.singularity.getAugmentationRepReq(y),\\r\\n                                price: ns.singularity.getAugmentationPrice(y),\\r\\n                                prereqs: ns.singularity.getAugmentationPrereq(y)\\r\\n                            }\\r\\n                        })\\r\\n                        .filter(y => y.augmentationRepCost < factionRep)\\r\\n                        .sort((a, b) => b.price - a.price);\\r\\n\\r\\n                    return {\\r\\n                        faction,\\r\\n                        factionRep,\\r\\n                        factionAugmentsThatIDontOwnAndCanAfford\\r\\n                    }\\r\\n                }\\r\\n            });\\r\\n\\r\\n\\r\\n\\r\\n    const purchasableAugments = new Map();\\r\\n\\r\\n    for (const factionWithAugments of factionsWithAugmentsToBuy) {\\r\\n        for (const augment of factionWithAugments.factionAugmentsThatIDontOwnAndCanAfford) {\\r\\n            if (purchasableAugments.has(augment.augmentName) === false) {\\r\\n                const item = {\\r\\n                    augmentationRepCost: augment.augmentationRepCost,\\r\\n                    price: augment.price,\\r\\n                    prereqs: augment.prereqs,\\r\\n                    faction: factionWithAugments.faction\\r\\n                }\\r\\n                purchasableAugments.set(augment.augmentName, item)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const augmentsLeft = Array.from(purchasableAugments.entries()).sort((a, b) => b[1].price - a[1].price);\\r\\n\\r\\n    const orderedAugments = []; // { factionName, augmentName, basePrice, multipledPrice}\\r\\n\\r\\n    function addPrereqs(prereqName) {\\r\\n        const augment = purchasableAugments.get(prereqName);\\r\\n\\r\\n        if (augment && !ownedAugmentations.find(x => x.augmentName === prereqName)) {\\r\\n\\r\\n            if (augment.prereqs.length > 0) {//it has prereqs, pass it into this. \\r\\n                for (const prereq of augment.prereqs) {\\r\\n                    addPrereqs(prereq)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (!orderedAugments.find(x => x.augmentName === prereqName)) {\\r\\n                orderedAugments.push({ faction: augment.faction, augmentName: prereqName, basePrice: augment.price });\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const augmentData of augmentsLeft) {\\r\\n        const augmentName = augmentData[0];\\r\\n        const augment = augmentData[1];\\r\\n\\r\\n        if (augment.prereqs.length > 0) {\\r\\n            for (const prereqName of augment.prereqs) {\\r\\n                addPrereqs(prereqName);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (!orderedAugments.find(x => x.augmentName === augmentName)) {\\r\\n            orderedAugments.push({ faction: augment.faction, augmentName: augmentName, basePrice: augment.price, multipledPrice: 0 })\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    let priceMultipler = 1;\\r\\n\\r\\n    for (const augment of orderedAugments) {\\r\\n        augment.multipledPrice = augment.basePrice * priceMultipler;\\r\\n        priceMultipler *= 1.9;\\r\\n    }\\r\\n\\r\\n    const moneyNeededForAugments = orderedAugments.reduce((acc, x) => acc + x.multipledPrice, 0);\\r\\n\\r\\n    const moneyFormatted = formatter.format(moneyNeededForAugments);\\r\\n\\r\\n    if(ns.args[0] === \\\"finish\\\"){\\r\\n        for (const augment of orderedAugments) {\\r\\n            purchaseAug(ns, augment);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.toast(`Money needed for augs: ${moneyFormatted}`)\\r\\n\\r\\n    ns.rm('orderedAugments.txt')\\r\\n    ns.write(\\\"orderedAugments.txt\\\", JSON.stringify(orderedAugments), \\\"W\\\")\\r\\n\\r\\n}\\r\\n\\r\\nfunction purchaseAug(ns, augment) {\\r\\n    const ownedAugments = ns.singularity.getOwnedAugmentations(true);\\r\\n    const augmentName = augment.augmentName;\\r\\n\\r\\n    if (ownedAugments.includes(augmentName) === false) {\\r\\n        const augmentPrice = ns.singularity.getAugmentationPrice(augmentName);\\r\\n        const amountOfMoneyWeHave = ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n\\r\\n        if (augmentPrice < amountOfMoneyWeHave) {\\r\\n            ns.singularity.purchaseAugmentation(augment.faction, augmentName);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/tools/manually-end-round.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"analytics/2023-07-07-11-15-Bachman&Associates-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-07-11-15-Bachman&Associates-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-07T15:01:39.037Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-07T15:01:39.037Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Bachman & Associates\\\",\\\"firstTime\\\":\\\"2023-07-07T15:01:39.037Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":333650.9080521832,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-07T15:01:39.037Z\\\"},\\\"moneySpent\\\":{\\\"augments\\\":0,\\\"homeCores\\\":23730468750000,\\\"homeRam\\\":31587660778186.953,\\\"fluxGovernors\\\":0,\\\"augment\\\":null},\\\"lastSaved\\\":\\\"2023-07-07T16:15:57.700Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":375000.40990502154,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-07T16:10:26.619Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$108,452,850,558,874.11\\\",\\\"moneyRightNow\\\":\\\"$103,101,209,025,358.40\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T16:10:26.620Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$108,452,850,558,874.11\\\",\\\"moneyRightNow\\\":\\\"$103,681,640,147,085.58\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T16:10:30.684Z\\\"},\\\"augsBought\\\":[\\\"SmartJaw\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"FocusWire\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"CashRoot Starter Kit\\\",\\\"Nanofiber Weave\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\"]}\"}}],[\"analytics/2023-07-07-14-03-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-07-14-03-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-07T16:19:40.262Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-07T16:19:40.262Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-07T16:19:40.262Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-07T16:19:40.262Z\\\"},\\\"augsBought\\\":[\\\"Neural Accelerator\\\"],\\\"moneySpent\\\":{\\\"augments\\\":0,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0,\\\"augment\\\":null},\\\"lastSaved\\\":\\\"2023-07-07T19:03:34.187Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":207528.18490936968,\\\"targetRepForGettingToFavor\\\":207510.3723,\\\"time\\\":\\\"2023-07-07T19:03:30.139Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$11,781,091,031,741.60\\\",\\\"moneyRightNow\\\":\\\"$1,303,091,345,518.27\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T19:03:30.139Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$11,781,091,031,741.60\\\",\\\"moneyRightNow\\\":\\\"$2,544,403,997,543.49\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T19:03:34.186Z\\\"}}\"}}],[\"analytics/2023-07-08-19-48-Daedalus-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-19-48-Daedalus-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-07T19:06:59.469Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-07T19:06:59.469Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-07T19:06:59.470Z\\\"},{\\\"factionToMax\\\":\\\"Daedalus\\\",\\\"firstTime\\\":\\\"2023-07-07T21:55:21.354Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-07T19:06:59.470Z\\\"},\\\"augsBought\\\":[\\\"PCMatrix\\\",\\\"Synfibril Muscle\\\"],\\\"moneySpent\\\":{\\\"augments\\\":4137500000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0},\\\"lastSaved\\\":\\\"2023-07-08T00:48:28.885Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":32865.1277346334,\\\"targetRepForGettingToFavor\\\":21865.9969,\\\"time\\\":\\\"2023-07-07T19:21:42.026Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$20,200,143,877,934.50\\\",\\\"moneyRightNow\\\":\\\"$3,911,461,428,002.28\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$225,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T20:39:02.138Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$20,200,143,877,934.50\\\",\\\"moneyRightNow\\\":\\\"$4,117,056,489,229.67\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$225,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T20:39:06.169Z\\\"},\\\"moneyLeft\\\":7852910581520.66}\"}}],[\"analytics/2023-07-08-22-54-NWO-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-22-54-NWO-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T01:27:34.503Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T01:27:34.503Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-08T01:27:34.503Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T01:27:34.503Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"BitRunners Neurolink\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Synthetic Heart\\\",\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"DermaForce Particle Barrier\\\",\\\"The Red Pill\\\"],\\\"moneySpent\\\":{\\\"augments\\\":501848779077.36707,\\\"homeCores\\\":0,\\\"homeRam\\\":99817008059070.77,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":75733371162620.36,\\\"lastSaved\\\":\\\"2023-07-08T03:54:59.353Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":462501.05086586776,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T03:54:55.304Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$526,824,656,393,874.44\\\",\\\"moneyRightNow\\\":\\\"$251,999,971,224,510.60\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$18,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T03:54:55.304Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$526,824,656,393,874.44\\\",\\\"moneyRightNow\\\":\\\"$253,602,470,575,079.72\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$18,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T03:54:59.351Z\\\"}}\"}}],[\"analytics/2023-07-08-00-56-OmniTekIncorporated-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-00-56-OmniTekIncorporated-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T04:26:57.384Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T04:26:57.384Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"OmniTek Incorporated\\\",\\\"firstTime\\\":\\\"2023-07-08T04:26:57.384Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":15.124617264295333,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T04:26:57.384Z\\\"},\\\"augsBought\\\":[\\\"Hydroflame Left Arm\\\",\\\"Xanipher\\\",\\\"PC Direct-Neural Interface\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"Combat Rib III\\\",\\\"Augmented Targeting III\\\",\\\"NutriGen Implant\\\"],\\\"moneySpent\\\":{\\\"augments\\\":2534418700549.75,\\\"homeCores\\\":177978515625000,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":280042565488.5333,\\\"lastSaved\\\":\\\"2023-07-08T05:56:46.954Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":462548.0785199993,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T05:56:42.882Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$505,066,407,135,123.06\\\",\\\"moneyRightNow\\\":\\\"$180,386,298,617,236.44\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$375,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T05:56:42.883Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$505,066,407,135,123.06\\\",\\\"moneyRightNow\\\":\\\"$181,269,916,019,448.78\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$375,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T05:56:46.945Z\\\"}}\"}}],[\"analytics/2023-07-08-02-29-BladeIndustries-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-02-29-BladeIndustries-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T06:21:45.808Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T06:21:45.808Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Blade Industries\\\",\\\"firstTime\\\":\\\"2023-07-08T06:21:45.808Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T06:21:45.809Z\\\"},\\\"augsBought\\\":[\\\"OmniTek InfoLoad\\\",\\\"HyperSight Corneal Implant\\\",\\\"INFRARET Enhancement\\\"],\\\"moneySpent\\\":{\\\"augments\\\":8208300000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":70843557655495.1,\\\"lastSaved\\\":\\\"2023-07-08T07:29:39.410Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":462652.03280345845,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T07:29:35.219Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$572,996,898,778,520.20\\\",\\\"moneyRightNow\\\":\\\"$140,624,600,817,489.31\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T07:29:35.219Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$572,996,898,778,520.20\\\",\\\"moneyRightNow\\\":\\\"$143,621,626,658,752.25\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T07:29:39.320Z\\\"}}\"}}],[\"contracts/2023-07-08T15:46:33.989Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-08T15:46:33.989Z.txt\",\"text\":\"[{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-301865-NiteSec.cct\\\",\\\"type\\\":\\\"Spiralize Matrix\\\",\\\"attemptsLeft\\\":9},{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-605082-ECorp.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-715836-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-574766-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-546533.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-207182.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-562846-Chongqing.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-147112-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10}]\"}}],[\"analytics/2023-07-08-10-55-CyberSec-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-10-55-CyberSec-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T07:45:28.397Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T07:45:28.397Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"ECorp\\\",\\\"firstTime\\\":\\\"2023-07-08T07:45:28.397Z\\\"},{\\\"factionToMax\\\":\\\"CyberSec\\\",\\\"firstTime\\\":\\\"2023-07-08T15:55:34.597Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1625000,\\\"currentFactionRep\\\":7.83489646900019,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T07:45:28.397Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Neurotrainer II\\\",\\\"BitWire\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neurotrainer I\\\"],\\\"moneySpent\\\":{\\\"augments\\\":2927417203.1,\\\"homeCores\\\":0,\\\"homeRam\\\":132545749.31540185,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":76065861.37635517,\\\"lastSaved\\\":\\\"2023-07-08T15:55:38.636Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":18750,\\\"currentFactionRep\\\":19144.520172309567,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-08T15:55:34.597Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$3,136,028,813.79\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,250,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T15:55:34.597Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$3,136,028,813.79\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,250,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T15:55:38.627Z\\\"}}\"}}],[\"contracts/failure/unitalife-contract-457057-BachmanAssociates.cct-AlgorithmicStockTraderIV.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/unitalife-contract-457057-BachmanAssociates.cct-AlgorithmicStockTraderIV.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-457057-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[2,[104,1,164,22,87,58,184,182,187,31,33,15,132,75,200,78,154]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [2, [104,67,1,164,22,87,58,118,184,182,187,31,33,15,132,75,200,78,154,61]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},\\\"wrongResult\\\":348}\"}}],[\"contracts/2023-07-08T16:02:50.327Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-08T16:02:50.327Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-287914-ECorp.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,3,2,4,0,0,3,2,4,3,2,1,4,3,3,1,2,1,5,6,2,4,2,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,2,4,0,0,3,2,4,3,2,1,4,3,3,1,2,1,5,6,2,4,2,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"max-hardware\\\",\\\"name\\\":\\\"contract-489132.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"5ddddddddM0C1ag3juL3juL3jQaVwdNEQdNGShqNEQdNGSrBfBf2rBfBr1OvIK6r1OvIa\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 5ddddddddM0C1ag3juL3juL3jQaVwdNEQdNGShqNEQdNGSrBfBf2rBfBr1OvIK6r1OvIa\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-522441-TianDiHui.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,7],\\\"description\\\":\\\"You are in a grid with 8 rows and 7 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 7]\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-895014-CyberSec.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[2,7,-9,5,4,-8,-10,-5,4,-6,-4,0,6,10,-3,6,2,-8,-1,6,-3,-10,-3,8,6,-2,-8,2,3,-4,0,0,9,-9,-8,5,4,4],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 2,7,-9,5,4,-8,-10,-5,4,-6,-4,0,6,10,-3,6,2,-8,-1,6,-3,-10,-3,8,6,-2,-8,2,3,-4,0,0,9,-9,-8,5,4,4\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-875528.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[11,9],\\\"description\\\":\\\"You are in a grid with 11 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [11, 9]\\\"},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-125441.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[147,[1,2,4,5,7,8,10,11,12]],\\\"description\\\":\\\"How many different distinct ways can the number 147 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,7,8,10,11,12]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-338676.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[149,[2,3,4,6,9,11,12,13,14]],\\\"description\\\":\\\"How many different distinct ways can the number 149 be written as a sum of integers contained in the set:\\\\n\\\\n [2,3,4,6,9,11,12,13,14]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-265891-TheBlackHand.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0],[1,0,0,0],[0,0,0,0],[1,0,1,0],[0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,\\\\n1,0,0,0,\\\\n0,0,0,0,\\\\n1,0,1,0,\\\\n0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-457057-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[2,[104,67,1,164,22,87,58,118,184,182,187,31,33,15,132,75,200,78,154,61]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [2, [104,67,1,164,22,87,58,118,184,182,187,31,33,15,132,75,200,78,154,61]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-98816-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[8,[[1,3],[3,5],[6,7],[4,5],[1,7],[4,7],[2,7],[2,5]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [8,[[1,3],[3,5],[6,7],[4,5],[1,7],[4,7],[2,7],[2,5]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 7. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-852569.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0],[1,0,0,0,0,0],[0,1,0,0,0,0],[0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,\\\\n1,0,0,0,0,0,\\\\n0,1,0,0,0,0,\\\\n0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-193066-Chongqing.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[3],[4,8],[1,6,7],[3,8,3,9],[1,3,6,1,2],[4,4,7,8,8,1],[1,4,3,6,1,4,6],[1,9,8,7,9,9,4,3],[3,2,1,2,1,8,4,2,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,8,3,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,3,6,1,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,4,7,8,8,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,4,3,6,1,4,6],\\\\n&nbsp;&nbsp;&nbsp;[1,9,8,7,9,9,4,3],\\\\n&nbsp;&nbsp;[3,2,1,2,1,8,4,2,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-774587-TianDiHui.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[8,0,1,5,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 8,0,1,5,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-321076.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[12,[[7,11],[1,8],[2,9],[2,8],[1,2],[0,4],[0,3],[2,3],[5,8],[3,5],[4,7],[1,6],[9,10],[4,10],[6,8],[3,10],[0,1],[7,8]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [12,[[7,11],[1,8],[2,9],[2,8],[1,2],[0,4],[0,3],[2,3],[5,8],[3,5],[4,7],[1,6],[9,10],[4,10],[6,8],[3,10],[0,1],[7,8]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 11. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-885023.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,1,0,1,0,1,1,1,0],[0,0,1,1,1,1,0,0,1],[0,1,0,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-450371-NWO.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"zzzzzzzzzzVVVVVVVVVff66666dddddd3Dxjjjjjjjjjjjll3nMIEooooooooooIrrQQ3333333333GGGGG220\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; zzzzzzzzzzVVVVVVVVVff66666dddddd3Dxjjjjjjjjjjjll3nMIEooooooooooIrrQQ3333333333GGGGG220\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-409303-CyberSec.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"koU6koU6koU8koU6ko66SU6ko66Sko66SkoSkoSkoSkXSkoSkoSkXSkoSXSkoSXSuKvMuK5CCCCCCZA\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; koU6koU6koU8koU6ko66SU6ko66Sko66SkoSkoSkoSkXSkoSkoSkXSkoSXSkoSXSuKvMuK5CCCCCCZA\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-741436-TianDiHui.cct\\\",\\\"type\\\":\\\"Spiralize Matrix\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[[41,7],[46,49],[18,23],[1,16],[46,1],[49,27]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a 2D matrix, return the elements of the matrix as an array in spiral order:\\\\n\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[41, 7]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[46,49]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[18,23]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 1,16]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[46, 1]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[49,27]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;]\\\\n\\\\nHere is an example of what spiral order should be:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1, 2, 3]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4, 5, 6]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7, 8, 9]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;]\\\\n\\\\n Answer: [1, 2, 3, 6, 9, 8 ,7, 4, 5]\\\\n\\\\n Note that the matrix will not always be square:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,&nbsp;&nbsp;2,&nbsp;&nbsp;3,&nbsp;&nbsp;4]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,&nbsp;&nbsp;6,&nbsp;&nbsp;7,&nbsp;&nbsp;8]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,&nbsp;10,&nbsp;11,&nbsp;12]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;]\\\\n\\\\n Answer: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-481575.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[10,10,2,4,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 10,10,2,4,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-926552.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"ppppppppD6ggxxxxxxxxWk88uVVqdddddddHHH811EEE00WWyy333NvvvvvvvWWWWWWWWWA88iii\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; ppppppppD6ggxxxxxxxxWk88uVVqdddddddHHH811EEE00WWyy333NvvvvvvvWWWWWWWWWA88iii\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-550315.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":59,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 59 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-895133.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,2,3,1,0,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,2,3,1,0,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-858682.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[197,[1,2,4,5,6,10,12,13]],\\\"description\\\":\\\"How many different distinct ways can the number 197 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,6,10,12,13]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-938387.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":8,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 8 be written as a sum of at least two positive integers?\\\"}]\"}}],[\"analytics/2023-07-09-05-42-NiteSec-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-09-05-42-NiteSec-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T16:31:11.237Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T16:31:11.237Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NiteSec\\\",\\\"firstTime\\\":\\\"2023-07-08T16:31:11.237Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-08T16:31:11.237Z\\\"},\\\"augsBought\\\":[\\\"Cranial Signal Processors - Gen III\\\",\\\"DataJack\\\",\\\"Neuregen Gene Modification\\\",\\\"Neural-Retention Enhancement\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Speech Processor Implant\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"Speech Enhancement\\\",\\\"Wired Reflexes\\\"],\\\"moneySpent\\\":{\\\"augments\\\":20381378226.862747,\\\"homeCores\\\":7500000000,\\\"homeRam\\\":14539978074.787807,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":12810898749.805788,\\\"lastSaved\\\":\\\"2023-07-09T10:42:24.377Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":112505.95319020352,\\\"targetRepForGettingToFavor\\\":274320.6381,\\\"time\\\":\\\"2023-07-09T04:32:21.711Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$25,622,206,359.90\\\",\\\"moneyRightNow\\\":\\\"$5,243,979,923.03\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$55,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-09T04:32:21.712Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$37,197,430,004.03\\\",\\\"moneyRightNow\\\":\\\"$55,232,255,051.46\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$55,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-09T10:42:24.369Z\\\"}}\"}}],[\"contracts/failure/blade-contract-989459-Sector12.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/blade-contract-989459-Sector12.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-989459-Sector12.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[179,52,138,20,181,47,87,38,133,124,174,123,169,54,138],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":256}\"}}],[\"contracts/2023-07-09T10:42:27.655Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-09T10:42:27.655Z.txt\",\"text\":\"[{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-306430.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,3,0,2,0,0,4,0,5,0,7,9,4,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,3,0,2,0,0,4,0,5,0,7,9,4,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-93220.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":596871453,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 596871453?\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-688654.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-610288.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 12. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-908915-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,0,1,0,0],[1,0,0,0,1],[0,0,0,1,1],[0,0,1,0,0],[0,1,0,1,0],[0,0,0,1,0],[1,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,1,0,0,\\\\n1,0,0,0,1,\\\\n0,0,0,1,1,\\\\n0,0,1,0,0,\\\\n0,1,0,1,0,\\\\n0,0,0,1,0,\\\\n1,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-225615.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-876968-BitRunners.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"251150140129\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 251150140129\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-793514-NWO.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-308718.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-726515.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-206621.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(((())(aa\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (((())(aa\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-517629.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,1,0,1],[0,0,0,0,1,1,1,1],[1,0,0,0,0,1,1,0],[0,0,0,0,0,0,0,0],[0,1,0,1,1,1,0,0],[0,1,1,0,1,0,0,0],[0,1,0,0,1,0,0,0],[1,0,0,1,0,0,1,0],[1,1,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,0,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-989459-Sector12.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-248819.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[7],[3,4],[1,2,9],[1,8,8,1],[4,7,4,6,4],[9,3,4,6,9,3]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,2,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,8,8,1],\\\\n&nbsp;&nbsp;&nbsp;[4,7,4,6,4],\\\\n&nbsp;&nbsp;[9,3,4,6,9,3]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-759274-BladeIndustries.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[197,[1,3,4,6,7,8,9,10,13,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 197 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,6,7,8,9,10,13,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-755946-Aevum.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-239892.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1110100011010100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1110100011010100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-650735.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-923111.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,0,1,1,1,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,0,1,0,0,\\\\n0,0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,1,0,1,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,\\\\n0,0,1,1,1,0,0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-140416.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-149794.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[17,[4,5,6,7,8,10,11,12,13,14]],\\\"description\\\":\\\"How many different distinct ways can the number 17 be written as a sum of integers contained in the set:\\\\n\\\\n [4,5,6,7,8,10,11,12,13,14]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-95536.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":21,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 21 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-389211.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-80334.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-204128.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[3,3,10,0,0,0,4,0,6,0,4,10],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,10,0,0,0,4,0,6,0,4,10\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-90930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[7,11],\\\"description\\\":\\\"You are in a grid with 7 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [7, 11]\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-693793.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-188719-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[84,[2,5,6,7,8,9,10,12,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 84 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,7,8,9,10,12,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-889582.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":42771,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 42771 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-18930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[5,14],\\\"description\\\":\\\"You are in a grid with 5 rows and 14 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [5, 14]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-53463.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"12010722233\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 12010722233\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"}]\"}}],[\"contracts/2023-07-10T11:30:35.720Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T11:30:35.720Z.txt\",\"text\":\"[{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-306430.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,3,0,2,0,0,4,0,5,0,7,9,4,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,3,0,2,0,0,4,0,5,0,7,9,4,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-93220.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":596871453,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 596871453?\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-688654.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-610288.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 12. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-908915-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,0,1,0,0],[1,0,0,0,1],[0,0,0,1,1],[0,0,1,0,0],[0,1,0,1,0],[0,0,0,1,0],[1,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,1,0,0,\\\\n1,0,0,0,1,\\\\n0,0,0,1,1,\\\\n0,0,1,0,0,\\\\n0,1,0,1,0,\\\\n0,0,0,1,0,\\\\n1,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-225615.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-876968-BitRunners.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"251150140129\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 251150140129\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-793514-NWO.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-308718.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-726515.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-206621.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(((())(aa\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (((())(aa\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-517629.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,1,0,1],[0,0,0,0,1,1,1,1],[1,0,0,0,0,1,1,0],[0,0,0,0,0,0,0,0],[0,1,0,1,1,1,0,0],[0,1,1,0,1,0,0,0],[0,1,0,0,1,0,0,0],[1,0,0,1,0,0,1,0],[1,1,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,0,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-989459-Sector12.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-248819.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[7],[3,4],[1,2,9],[1,8,8,1],[4,7,4,6,4],[9,3,4,6,9,3]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,2,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,8,8,1],\\\\n&nbsp;&nbsp;&nbsp;[4,7,4,6,4],\\\\n&nbsp;&nbsp;[9,3,4,6,9,3]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-759274-BladeIndustries.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[197,[1,3,4,6,7,8,9,10,13,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 197 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,6,7,8,9,10,13,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-755946-Aevum.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-239892.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1110100011010100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1110100011010100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-650735.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-923111.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,0,1,1,1,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,0,1,0,0,\\\\n0,0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,1,0,1,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,\\\\n0,0,1,1,1,0,0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-140416.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-149794.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[17,[4,5,6,7,8,10,11,12,13,14]],\\\"description\\\":\\\"How many different distinct ways can the number 17 be written as a sum of integers contained in the set:\\\\n\\\\n [4,5,6,7,8,10,11,12,13,14]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-95536.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":21,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 21 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-389211.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-80334.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-204128.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[3,3,10,0,0,0,4,0,6,0,4,10],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,10,0,0,0,4,0,6,0,4,10\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-90930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[7,11],\\\"description\\\":\\\"You are in a grid with 7 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [7, 11]\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-693793.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-188719-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[84,[2,5,6,7,8,9,10,12,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 84 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,7,8,9,10,12,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-889582.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":42771,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 42771 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-18930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[5,14],\\\"description\\\":\\\"You are in a grid with 5 rows and 14 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [5, 14]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-53463.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"12010722233\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 12010722233\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"}]\"}}],[\"contracts/2023-07-10T11:32:16.363Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T11:32:16.363Z.txt\",\"text\":\"[{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-977017-BitRunners.cct\\\",\\\"type\\\":\\\"Encryption II: Vigenère Cipher\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"FLASHMEDIAMOUSELOGINDEBUG\\\",\\\"MACINTOSH\\\"],\\\"description\\\":\\\"Vigenère cipher is a type of polyalphabetic substitution. It uses  the Vigenère square to encrypt and decrypt plaintext with a keyword.\\\\n\\\\n &nbsp;&nbsp;Vigenère square:\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----------------------------------------------------\\\\n &nbsp;&nbsp;&nbsp;&nbsp; A | A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \\\\n &nbsp;&nbsp;&nbsp;&nbsp; B | B C D E F G H I J K L M N O P Q R S T U V W X Y Z A \\\\n &nbsp;&nbsp;&nbsp;&nbsp; C | C D E F G H I J K L M N O P Q R S T U V W X Y Z A B\\\\n &nbsp;&nbsp;&nbsp;&nbsp; D | D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\\\\n &nbsp;&nbsp;&nbsp;&nbsp; E | E F G H I J K L M N O P Q R S T U V W X Y Z A B C D\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...\\\\n &nbsp;&nbsp;&nbsp;&nbsp; Y | Y Z A B C D E F G H I J K L M N O P Q R S T U V W X\\\\n &nbsp;&nbsp;&nbsp;&nbsp; Z | Z A B C D E F G H I J K L M N O P Q R S T U V W X Y\\\\n\\\\n For encryption each letter of the plaintext is paired with the corresponding letter of a repeating keyword. For example, the plaintext DASHBOARD is encrypted with the keyword LINUX:\\\\n &nbsp;&nbsp; Plaintext: DASHBOARD\\\\n &nbsp;&nbsp; Keyword:&nbsp;&nbsp;&nbsp;LINUXLINU\\\\n So, the first letter D is paired with the first letter of the key L. Therefore, row D and column L of the  Vigenère square are used to get the first cipher letter O. This must be repeated for the whole ciphertext.\\\\n\\\\n You are given an array with two elements:\\\\n &nbsp;&nbsp;[\\\\\\\"FLASHMEDIAMOUSELOGINDEBUG\\\\\\\", \\\\\\\"MACINTOSH\\\\\\\"]\\\\n The first element is the plaintext, the second element is the keyword.\\\\n\\\\n Return the ciphertext as uppercase string.\\\"}]\"}}],[\"contracts/2023-07-10T12:00:27.917Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T12:00:27.917Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-872924-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11000000100000010111100101110010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11000000100000010111100101110010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-358562-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[124,[2,5,6,9,10,11,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 124 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-373303.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,1],[6,1,7],[2,7,1,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[3,1],\\\\n&nbsp;&nbsp;&nbsp;[6,1,7],\\\\n&nbsp;&nbsp;[2,7,1,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-959133.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0],[0,0,1,0,0,1,0,0],[0,0,0,0,1,1,1,0],[0,0,1,0,1,0,1,0],[1,0,0,1,0,0,0,0],[0,0,0,1,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,1],[1,0,1,0,0,0,0,0],[1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-769367.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,8],\\\"description\\\":\\\"You are in a grid with 9 rows and 8 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [9, 8]\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-633776.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":915078480,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 915078480?\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-310837.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-806259.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010100000000000100000100000111101001011001001110100101110000010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010100000000000100000100000111101001011001001110100101110000010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-545916-BitRunners.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,1,1,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-691109-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"}]\"}}],[\"contracts/failure/fulcrumtech-contract-772507-NiteSec.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/fulcrumtech-contract-772507-NiteSec.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-772507-NiteSec.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[129,63,116,46,105,9,146,49,190,102,143,96,122,89,173,62,178],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 129,121,121,63,116,108,46,105,9,146,49,190,102,115,143,116,96,122,95,89,173,62,178\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":278}\"}}],[\"contracts/2023-07-10T22:53:06.799Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T22:53:06.799Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-872924-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11000000100000010111100101110010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11000000100000010111100101110010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-310546-NiteSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0110000000010000\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0110000000010000' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-358562-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[124,[2,5,6,9,10,11,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 124 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-373303.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,1],[6,1,7],[2,7,1,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[3,1],\\\\n&nbsp;&nbsp;&nbsp;[6,1,7],\\\\n&nbsp;&nbsp;[2,7,1,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-959133.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0],[0,0,1,0,0,1,0,0],[0,0,0,0,1,1,1,0],[0,0,1,0,1,0,1,0],[1,0,0,1,0,0,0,0],[0,0,0,1,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,1],[1,0,1,0,0,0,0,0],[1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-373990-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100000000000000100000000000000000111011110101110011000111010001\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100000000000000100000000000000000111011110101110011000111010001' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-772507-NiteSec.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[129,121,121,63,116,108,46,105,9,146,49,190,102,115,143,116,96,122,95,89,173,62,178],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 129,121,121,63,116,108,46,105,9,146,49,190,102,115,143,116,96,122,95,89,173,62,178\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-769367.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,8],\\\"description\\\":\\\"You are in a grid with 9 rows and 8 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [9, 8]\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-633776.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":915078480,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 915078480?\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-310837.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-719753-Sector12.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"2515122107\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 2515122107\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-806259.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010100000000000100000100000111101001011001001110100101110000010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010100000000000100000100000111101001011001001110100101110000010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-387600-BladeIndustries.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[51,[1,3,4,5,6,7,8,9]],\\\"description\\\":\\\"How many different distinct ways can the number 51 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,5,6,7,8,9]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-545916-BitRunners.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,1,1,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-691109-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"}]\"}}],[\"analytics/2023-07-11-02-27-Bachman&Associates-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-02-27-Bachman&Associates-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-09T10:51:29.538Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-09T10:51:29.538Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"The Black Hand\\\",\\\"firstTime\\\":\\\"2023-07-09T10:51:29.539Z\\\"},{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-10T11:30:36.002Z\\\"},{\\\"factionToMax\\\":\\\"Bachman & Associates\\\",\\\"firstTime\\\":\\\"2023-07-10T20:03:02.082Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":175000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-09T10:51:29.539Z\\\"},\\\"augsBought\\\":[\\\"SmartJaw\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"FocusWire\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"Neuroreceptor Management Implant\\\",\\\"Nanofiber Weave\\\"],\\\"moneySpent\\\":{\\\"augments\\\":22646728750,\\\"homeCores\\\":23730468750000,\\\"homeRam\\\":31587660778186.953,\\\"fluxGovernors\\\":57032927790864.44},\\\"moneyLeft\\\":12203039917625.707,\\\"lastSaved\\\":\\\"2023-07-11T07:27:30.663Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":175000,\\\"currentFactionRep\\\":162129.75593228705,\\\"targetRepForGettingToFavor\\\":162120.6286,\\\"time\\\":\\\"2023-07-09T18:56:46.726Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$56,926,395,005.04\\\",\\\"moneyRightNow\\\":\\\"$6,976,811,949.53\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-09T18:56:46.726Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$286,650,154,139.07\\\",\\\"moneyRightNow\\\":\\\"$300,169,387,386.01\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-10T08:59:23.830Z\\\"},\\\"amountOfRamIncrease\\\":null,\\\"amountOfCoresIncrease\\\":null}\"}}],[\"contracts/2023-07-11T07:27:33.925Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T07:27:33.925Z.txt\",\"text\":\"[{\\\"server\\\":\\\"crush-fitness\\\",\\\"name\\\":\\\"contract-703070-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a))()aa)))())))a))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a))()aa)))())))a))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-760582-NWO.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[19,26],[5,11],[23,33],[18,24],[16,24],[4,6],[19,23],[19,20],[15,22],[17,24],[23,26],[18,28],[11,14],[3,5],[14,17],[23,24]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[19,26],[5,11],[23,33],[18,24],[16,24],[4,6],[19,23],[19,20],[15,22],[17,24],[23,26],[18,28],[11,14],[3,5],[14,17],[23,24]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-660870-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,-5,1,9,9,0,5,-3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,-5,1,9,9,0,5,-3\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-657153-CyberSec.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")())()()(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )())()()(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"}]\"}}],[\"analytics/2023-07-11-07-24-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-07-24-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T10:42:16.637Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T10:42:16.638Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-11T10:42:16.638Z\\\"},{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-11T10:46:46.120Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-11T10:42:16.638Z\\\"},\\\"augsBought\\\":[\\\"Neural Accelerator\\\"],\\\"moneySpent\\\":{\\\"augments\\\":1750000000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":4554283656849.052,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":1755961103764.4956,\\\"lastSaved\\\":\\\"2023-07-11T12:24:47.532Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1000000,\\\"currentFactionRep\\\":78668.58510156769,\\\"targetRepForGettingToFavor\\\":78604.3905,\\\"time\\\":\\\"2023-07-11T11:26:08.909Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$74,796,262,687,719.81\\\",\\\"moneyRightNow\\\":\\\"$5,775,539,522,926.99\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T12:24:43.465Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$74,796,262,687,719.81\\\",\\\"moneyRightNow\\\":\\\"$6,311,994,760,613.55\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T12:24:47.531Z\\\"}}\"}}],[\"contracts/2023-07-11T12:24:50.788Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T12:24:50.788Z.txt\",\"text\":\"[{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-294274.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"27278324\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 27278324\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-34323.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,1,0,6,4,3,2,1,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,1,0,6,4,3,2,1,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-156862.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[3,3,8,10,9,5,2,0,9,0,5,10,10,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,8,10,9,5,2,0,9,0,5,10,10,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-330757.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010100001111101\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010100001111101' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"}]\"}}],[\"analytics/2023-07-11-12-29-Daedalus-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-12-29-Daedalus-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T12:24:51.094Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T12:24:51.094Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-11T12:24:51.094Z\\\"},{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-11T12:29:47.178Z\\\"},{\\\"factionToMax\\\":\\\"Daedalus\\\",\\\"firstTime\\\":\\\"2023-07-11T15:04:35.038Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T12:24:51.094Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"BitRunners Neurolink\\\",\\\"Synfibril Muscle\\\",\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"DermaForce Particle Barrier\\\"],\\\"moneySpent\\\":{\\\"augments\\\":27917957472.5,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":91422048319347.48,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":41005533440689.86,\\\"lastSaved\\\":\\\"2023-07-11T17:29:31.733Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1000000,\\\"currentFactionRep\\\":45618.14880600499,\\\"targetRepForGettingToFavor\\\":13348.8089,\\\"time\\\":\\\"2023-07-11T12:48:04.959Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$12,712,609,677,232.98\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T14:27:37.793Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$13,879,516,076,246.31\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T14:27:41.820Z\\\"}}\"}}],[\"contracts/2023-07-11T17:29:34.923Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T17:29:34.923Z.txt\",\"text\":\"[{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-978804-BladeIndustries.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":36677,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 36677 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"analytics/2023-07-11-13-33-NWO-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-13-33-NWO-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T17:29:35.209Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T17:29:35.209Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-11T17:29:35.209Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T17:29:35.209Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Synthetic Heart\\\",\\\"NutriGen Implant\\\",\\\"The Red Pill\\\"],\\\"moneySpent\\\":{\\\"augments\\\":102280939975,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":33234729138126.324,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":27397945380899.656,\\\"lastSaved\\\":\\\"2023-07-11T18:33:24.220Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":188501.26059445622,\\\"targetRepForGettingToFavor\\\":125.34820000000002,\\\"time\\\":\\\"2023-07-11T17:53:45.496Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$438,057,836,945,340.10\\\",\\\"moneyRightNow\\\":\\\"$58,736,735,518,839.44\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$102,280,939,975.00\\\",\\\"time\\\":\\\"2023-07-11T18:33:20.148Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$438,057,836,945,340.10\\\",\\\"moneyRightNow\\\":\\\"$60,734,955,459,000.98\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$102,280,939,975.00\\\",\\\"time\\\":\\\"2023-07-11T18:33:24.219Z\\\"}}\"}}],[\"analytics/2023-07-11-15-02-OmniTekIncorporated-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-15-02-OmniTekIncorporated-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T18:52:58.390Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T18:52:58.390Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"OmniTek Incorporated\\\",\\\"firstTime\\\":\\\"2023-07-11T18:52:58.390Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T18:52:58.391Z\\\"},\\\"augsBought\\\":[\\\"Hydroflame Left Arm\\\",\\\"Xanipher\\\",\\\"PC Direct-Neural Interface\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"Combat Rib III\\\",\\\"Augmented Targeting III\\\",\\\"INFRARET Enhancement\\\"],\\\"moneySpent\\\":{\\\"augments\\\":2536876847832,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":158008228467501.8,\\\"repPurchased\\\":1011071000000},\\\"moneyLeft\\\":3118364148690.9688,\\\"lastSaved\\\":\\\"2023-07-11T20:02:57.795Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":462635.4572515714,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-11T20:02:53.557Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$569,163,675,385,318.20\\\",\\\"moneyRightNow\\\":\\\"$163,160,637,846,968.20\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$2,536,876,847,832.00\\\",\\\"time\\\":\\\"2023-07-11T20:02:53.557Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$569,163,675,385,318.20\\\",\\\"moneyRightNow\\\":\\\"$164,674,540,464,024.78\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$2,536,876,847,832.00\\\",\\\"time\\\":\\\"2023-07-11T20:02:57.609Z\\\"}}\"}}],[\"contracts/2023-07-11T18:33:27.509Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T18:33:27.509Z.txt\",\"text\":\"[{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-315110.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"640193486\\\",65],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 640193486\\\\n\\\\n You are also given a target number of 65. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"640193486\\\\\\\", 65]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"}]\"}}],[\"analytics/2023-07-11-16-04-BladeIndustries-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-16-04-BladeIndustries-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T20:16:37.898Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T20:16:37.898Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Blade Industries\\\",\\\"firstTime\\\":\\\"2023-07-11T20:16:37.898Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T20:16:37.899Z\\\"},\\\"augsBought\\\":[\\\"OmniTek InfoLoad\\\",\\\"HyperSight Corneal Implant\\\"],\\\"moneySpent\\\":{\\\"augments\\\":8100000000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":85747668719937.4,\\\"repPurchased\\\":4751786000000},\\\"moneyLeft\\\":13842981133569.93,\\\"lastSaved\\\":\\\"2023-07-11T21:04:19.385Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":462578.8960435048,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-11T21:04:14.492Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$530,007,418,535,109.50\\\",\\\"moneyRightNow\\\":\\\"$102,174,957,837,653.20\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$8,100,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T21:04:14.492Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$530,007,418,535,109.50\\\",\\\"moneyRightNow\\\":\\\"$104,350,535,853,507.34\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$8,100,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T21:04:18.527Z\\\"}}\"}}],[\"contracts/2023-07-11T21:04:22.607Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T21:04:22.607Z.txt\",\"text\":\"[{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-461331.cct\\\",\\\"type\\\":\\\"Compression II: LZ Decompression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"5QFg8D941R640269V6p8o0r4N989p8ok5ZyGC04NHYU621B92079\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following LZ-encoded string:\\\\n &nbsp; &nbsp; 5QFg8D941R640269V6p8o0r4N989p8ok5ZyGC04NHYU621B92079\\\\n Decode it and output the original string.\\\\n\\\\n Example: decoding '5aaabb450723abb' chunk-by-chunk\\\\n &nbsp; &nbsp; 5aaabb &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;aaabb\\\\n &nbsp; &nbsp; 5aaabb45 &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;aaabbaaab\\\\n &nbsp; &nbsp; 5aaabb450 &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;aaabbaaab\\\\n &nbsp; &nbsp; 5aaabb45072 &nbsp; &nbsp; &nbsp;-> &nbsp;aaabbaaababababa\\\\n &nbsp; &nbsp; 5aaabb450723abb &nbsp;-> &nbsp;aaabbaaababababaabb\\\"}]\"}}],[\"analytics/end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T21:37:36.719Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T21:37:36.719Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"CyberSec\\\",\\\"firstTime\\\":\\\"2023-07-11T21:37:36.719Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":18750,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T21:37:36.720Z\\\"},\\\"augsBought\\\":[],\\\"moneySpent\\\":{\\\"augments\\\":0,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":0,\\\"lastSaved\\\":\\\"2023-07-11T22:34:01.158Z\\\"}\"}}],[\"contracts/2023-07-11T22:03:07.982Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T22:03:07.982Z.txt\",\"text\":\"[{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-708430-Sector12.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-444562.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,1,0],[0,1,1,0,0,0,0,1,0,1,0,1],[0,0,1,1,0,0,0,1,0,1,0,0],[0,0,1,0,1,0,0,0,0,1,0,0],[0,0,0,0,0,1,1,1,0,0,1,1],[0,0,1,1,1,1,1,1,0,0,0,0],[0,1,0,0,1,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0,0,1,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1,1,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,1,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"}]\"}}],[\"contracts/2023-07-12T00:04:23.916Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-12T00:04:23.916Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-729164-TianDiHui.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[2],[7,6],[8,8,1],[2,7,3,5],[6,7,2,3,2],[1,5,3,1,3,1],[7,3,6,1,2,5,5],[2,4,9,7,5,9,9,9],[6,4,4,5,1,7,5,7,3],[6,4,8,1,7,8,7,6,7,5],[2,8,2,9,2,4,6,1,4,7,5]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,8,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,3,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,7,2,3,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,5,3,1,3,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,3,6,1,2,5,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,4,9,7,5,9,9,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[6,4,4,5,1,7,5,7,3],\\\\n&nbsp;&nbsp;&nbsp;[6,4,8,1,7,8,7,6,7,5],\\\\n&nbsp;&nbsp;[2,8,2,9,2,4,6,1,4,7,5]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-336770-NWO.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[3],[6,7],[8,1,4],[6,9,3,1],[8,4,5,6,3]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[8,1,4],\\\\n&nbsp;&nbsp;&nbsp;[6,9,3,1],\\\\n&nbsp;&nbsp;[8,4,5,6,3]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-723216-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,5,1,4,7,8,3,0,9,0,3,9,1,10,0,1,5,0,0,0,8,6,10,3,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,5,1,4,7,8,3,0,9,0,3,9,1,10,0,1,5,0,0,0,8,6,10,3,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-176172-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"88599944\\\",-84],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 88599944\\\\n\\\\n You are also given a target number of -84. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"88599944\\\\\\\", -84]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"the-hub\\\",\\\"name\\\":\\\"contract-271928.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"884220150\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 884220150\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"the-hub\\\",\\\"name\\\":\\\"contract-512438-Sector12.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1100101010011111\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1100101010011111' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-627073-TheBlackHand.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"280206263\\\",22],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 280206263\\\\n\\\\n You are also given a target number of 22. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"280206263\\\\\\\", 22]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-804374.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[1,10,3,0,1,6,0,10,0,10,9,1,6,3,1,0,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,10,3,0,1,6,0,10,0,10,9,1,6,3,1,0,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-713319-ECorp.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0],[0,1],[1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,\\\\n0,1,\\\\n1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"omnia\\\",\\\"name\\\":\\\"contract-939274.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":75,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 75 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"omnia\\\",\\\"name\\\":\\\"contract-95916.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[6,0,9,7,8,8,4,3,4,7,0,6,10,3,6,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 6,0,9,7,8,8,4,3,4,7,0,6,10,3,6,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-512616.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((a(a))()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((a(a))()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-142431-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,10],[11,16],[21,23],[24,29]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,10],[11,16],[21,23],[24,29]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-8446-NiteSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100000010000100111011101110101110011110111001110111000110011101\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100000010000100111011101110101110011110111001110111000110011101' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"global-pharm\\\",\\\"name\\\":\\\"contract-202045.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[2,5],[6,13],[15,22],[7,9],[15,16],[25,29]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[2,5],[6,13],[15,22],[7,9],[15,16],[25,29]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-778253.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,3,0,3,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,0,3,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-708430-Sector12.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-868385-ECorp.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"4811648251\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 4811648251\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-941799-NiteSec.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,6,1,9,5,2,10,5,6,3,7,2,3,7,7,3,1,6,1,5,9,0,4,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,6,1,9,5,2,10,5,6,3,7,2,3,7,7,3,1,6,1,5,9,0,4,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-670821.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[9,8],[5,3,1],[6,3,2,3],[8,3,8,4,7],[6,8,6,3,5,9],[1,6,2,8,3,1,3],[1,5,8,2,6,5,8,4],[6,1,4,2,4,7,1,6,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,3,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,3,2,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,3,8,4,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,8,6,3,5,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,6,2,8,3,1,3],\\\\n&nbsp;&nbsp;&nbsp;[1,5,8,2,6,5,8,4],\\\\n&nbsp;&nbsp;[6,1,4,2,4,7,1,6,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-348053-NWO.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,1,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,0,1,0,\\\\n0,0,0,0,1,0,0,\\\\n0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-585222-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1100101000010101\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1100101000010101' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-101786-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1110000010001011011111101001000001101110001101010000110101011100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1110000010001011011111101001000001101110001101010000110101011100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-111223.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[0,2,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,2,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-288053-BladeIndustries.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,2,1,2,3,0,5,4,1,1,2,3,1,0,0,1,4,3,3,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,2,1,2,3,0,5,4,1,1,2,3,1,0,0,1,4,3,3,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-367042.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"()(a))(a)aaa)((a(((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ()(a))(a)aaa)((a(((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-867548-ECorp.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[12,[[6,10],[0,6],[8,11],[6,8],[0,2],[4,11],[0,1],[1,5],[7,11],[0,9],[8,9],[2,7],[6,7],[4,9],[3,9]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [12,[[6,10],[0,6],[8,11],[6,8],[0,2],[4,11],[0,1],[1,5],[7,11],[0,9],[8,9],[2,7],[6,7],[4,9],[3,9]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 11. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-275073.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":155085324086,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 155085324086 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-444562.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,1,0],[0,1,1,0,0,0,0,1,0,1,0,1],[0,0,1,1,0,0,0,1,0,1,0,0],[0,0,1,0,1,0,0,0,0,1,0,0],[0,0,0,0,0,1,1,1,0,0,1,1],[0,0,1,1,1,1,1,1,0,0,0,0],[0,1,0,0,1,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0,0,1,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1,1,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,1,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"}]\"}}],[\"data/ramToReserveOnHome.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/ramToReserveOnHome.txt\",\"text\":\"{\\\"ramToReserve\\\":58.4,\\\"ramToReserveInLimitedEnvironment\\\":31.95,\\\"earlyGameLimiter\\\":\\\"scripts/tools/manually-end-round.js\\\"}\"}}],[\"data/ownedAugs.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/ownedAugs.txt\",\"text\":\"[\\\"Neuralstimulator\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"The Black Hand\\\",\\\"DataJack\\\",\\\"Neural-Retention Enhancement\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Speech Processor Implant\\\",\\\"Neurotrainer II\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"BitWire\\\"]\"}}],[\"data/factionToMax.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/factionToMax.txt\",\"text\":\"CyberSec\"}}],[\"buyOrUpgradeServerFlag.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"buyOrUpgradeServerFlag.txt\",\"text\":\"3430\"}}],[\"stopTrading.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"stopTrading.txt\",\"text\":\"\"}}],[\"orderedAugments.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"orderedAugments.txt\",\"text\":\"[{\\\"faction\\\":\\\"Chongqing\\\",\\\"augmentName\\\":\\\"Neuregen Gene Modification\\\",\\\"basePrice\\\":375000000,\\\"multipledPrice\\\":375000000},{\\\"faction\\\":\\\"Chongqing\\\",\\\"augmentName\\\":\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"basePrice\\\":20000000,\\\"multipledPrice\\\":38000000},{\\\"faction\\\":\\\"Tian Di Hui\\\",\\\"augmentName\\\":\\\"ADR-V1 Pheromone Gene\\\",\\\"basePrice\\\":17500000,\\\"multipledPrice\\\":63175000},{\\\"faction\\\":\\\"Tian Di Hui\\\",\\\"augmentName\\\":\\\"Speech Enhancement\\\",\\\"basePrice\\\":12500000,\\\"multipledPrice\\\":85737499.99999999},{\\\"faction\\\":\\\"CyberSec\\\",\\\"augmentName\\\":\\\"Synaptic Enhancement Implant\\\",\\\"basePrice\\\":7500000,\\\"multipledPrice\\\":97740749.99999999},{\\\"faction\\\":\\\"CyberSec\\\",\\\"augmentName\\\":\\\"Neurotrainer I\\\",\\\"basePrice\\\":4000000,\\\"multipledPrice\\\":99043959.99999999},{\\\"faction\\\":\\\"Tian Di Hui\\\",\\\"augmentName\\\":\\\"Wired Reflexes\\\",\\\"basePrice\\\":2500000,\\\"multipledPrice\\\":117614702.49999997}]\"}}],[\"data/latestQuotes.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/latestQuotes.txt\",\"text\":\"[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12292.171997787193,\\\"ask\\\":12390.904302990302,\\\"price\\\":12341.538150388747,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31603267978908833,\\\"bias\\\":0.18396732021091167},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":41785.78848257547,\\\"ask\\\":41869.44371477282,\\\"price\\\":41827.616098674145,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30345350929926734,\\\"bias\\\":0.19654649070073266},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":26028.586947313575,\\\"ask\\\":26237.651902713682,\\\"price\\\":26133.11942501363,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6449285620760243,\\\"bias\\\":0.14492856207602434},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":20312.058989900474,\\\"ask\\\":20434.298061053334,\\\"price\\\":20373.178525476906,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6106898796488265,\\\"bias\\\":0.11068987964882648},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18780.208989371946,\\\"ask\\\":18968.954808360606,\\\"price\\\":18874.581898866276,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6201320039564127,\\\"bias\\\":0.12013200395641266},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":60888.080204996055,\\\"ask\\\":61254.50796951959,\\\"price\\\":61071.294087257826,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3352523491452537,\\\"bias\\\":0.1647476508547463},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":28134.618402463326,\\\"ask\\\":28474.271743338133,\\\"price\\\":28304.44507290073,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5749431382802581,\\\"bias\\\":0.07494313828025811},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":68602.72681519696,\\\"ask\\\":69709.22240899045,\\\"price\\\":69155.9746120937,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.36258390131739177,\\\"bias\\\":0.13741609868260823},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27466.204683367258,\\\"ask\\\":27631.497790789723,\\\"price\\\":27548.851237078492,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5749241225066817,\\\"bias\\\":0.07492412250668168},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9711.943681871808,\\\"ask\\\":9848.869373257714,\\\"price\\\":9780.40652756476,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5819971839503808,\\\"bias\\\":0.0819971839503808},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11950.2198935898,\\\"ask\\\":12046.205595546346,\\\"price\\\":11998.212744568073,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.58959560869574,\\\"bias\\\":0.08959560869574001},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11830.337793607685,\\\"ask\\\":11973.158773007375,\\\"price\\\":11901.74828330753,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43434189271532647,\\\"bias\\\":0.06565810728467353},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9496.689955038251,\\\"ask\\\":9688.542277362256,\\\"price\\\":9592.616116200254,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4154345471162223,\\\"bias\\\":0.0845654528837777},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33829.414802228195,\\\"ask\\\":34169.40892084355,\\\"price\\\":33999.411861535875,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4014374479265099,\\\"bias\\\":0.09856255207349007},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16829.038355382312,\\\"ask\\\":16998.174419255498,\\\"price\\\":16913.606387318905,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5722876490357011,\\\"bias\\\":0.07228764903570106},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11917.332406813799,\\\"ask\\\":12061.203622992638,\\\"price\\\":11989.268014903218,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5508686942923103,\\\"bias\\\":0.050868694292310335},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20286.962000312047,\\\"ask\\\":20449.909486258326,\\\"price\\\":20368.435743285187,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5822952004099613,\\\"bias\\\":0.0822952004099613},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16305.120428672664,\\\"ask\\\":16634.516800969082,\\\"price\\\":16469.818614820873,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.408483998058148,\\\"bias\\\":0.091516001941852},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26407.52107750172,\\\"ask\\\":26672.923299386155,\\\"price\\\":26540.22218844394,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5250064056607955,\\\"bias\\\":0.025006405660795483},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3390.734981155993,\\\"ask\\\":3473.1010130869076,\\\"price\\\":3431.9179971214503,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4300260092178687,\\\"bias\\\":0.06997399078213129},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6209.374737595856,\\\"ask\\\":6284.33700806985,\\\"price\\\":6246.855872832853,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43403324515285063,\\\"bias\\\":0.06596675484714937},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4264.844798499482,\\\"ask\\\":4351.003279277249,\\\"price\\\":4307.924038888365,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4768817304434299,\\\"bias\\\":0.023118269556570092},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2684.494007836522,\\\"ask\\\":2766.2552466538777,\\\"price\\\":2725.3746272452,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5768470360355121,\\\"bias\\\":0.07684703603551213},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10319.252780669241,\\\"ask\\\":10422.963863892046,\\\"price\\\":10371.108322280645,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.569562932437172,\\\"bias\\\":0.06956293243717204},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4941.576471168423,\\\"ask\\\":5051.500315825355,\\\"price\\\":4996.5383934968895,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5189115095142762,\\\"bias\\\":0.018911509514276226},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":854.2466107596546,\\\"ask\\\":878.5051352031336,\\\"price\\\":866.3758729813941,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4072211406058884,\\\"bias\\\":0.09277885939411162},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6715.767357115789,\\\"ask\\\":6810.450884809265,\\\"price\\\":6763.109120962527,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44285264931857826,\\\"bias\\\":0.05714735068142174},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2976.769816377777,\\\"ask\\\":3012.7066753280114,\\\"price\\\":2994.738245852894,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5522777657376728,\\\"bias\\\":0.05227776573767284},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":269.2146227274907,\\\"ask\\\":274.104494785104,\\\"price\\\":271.6595587562974,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.43816906325102806,\\\"bias\\\":0.06183093674897194},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2363.987019413195,\\\"ask\\\":2406.9252296548066,\\\"price\\\":2385.456124534001,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5600250955775443,\\\"bias\\\":0.06002509557754432},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1366.9331921633272,\\\"ask\\\":1386.2051606329007,\\\"price\\\":1376.569176398114,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3719062194187358,\\\"bias\\\":0.1280937805812642},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24226.204349686544,\\\"ask\\\":24666.236315674792,\\\"price\\\":24446.22033268067,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5754292651696522,\\\"bias\\\":0.0754292651696522},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32960.83613742541,\\\"ask\\\":33159.196234541305,\\\"price\\\":33060.01618598336,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.596857937132398,\\\"bias\\\":0.09685793713239799}]\"}}],[\"data/stockHistory.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/stockHistory.txt\",\"text\":\"[[\\\"ECP\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12650.843620216572,\\\"ask\\\":12752.456821985379,\\\"price\\\":12701.650221100976,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3106071636400637,\\\"bias\\\":0.1893928363599363,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12619.112467799165,\\\"ask\\\":12720.470800873856,\\\"price\\\":12669.79163433651,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3101309294379645,\\\"bias\\\":0.1898690705620355,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12593.364246511812,\\\"ask\\\":12694.515766564115,\\\"price\\\":12643.940006537963,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.30974272571823097,\\\"bias\\\":0.19025727428176903,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12636.906172168732,\\\"ask\\\":12738.407426563663,\\\"price\\\":12687.656799366197,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.30908490562105084,\\\"bias\\\":0.19091509437894916,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12612.051067824483,\\\"ask\\\":12713.352682827088,\\\"price\\\":12662.701875325785,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.30946115010072844,\\\"bias\\\":0.19053884989927156,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12606.028278628952,\\\"ask\\\":12707.281517814727,\\\"price\\\":12656.65489822184,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.30937011624762756,\\\"bias\\\":0.19062988375237244,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12582.793837263454,\\\"ask\\\":12683.86045443023,\\\"price\\\":12633.327145846843,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.30901811343220836,\\\"bias\\\":0.19098188656779164,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12597.651853288855,\\\"ask\\\":12698.837811949808,\\\"price\\\":12648.244832619332,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.309243628684853,\\\"bias\\\":0.190756371315147,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12569.550082574593,\\\"ask\\\":12670.510324201698,\\\"price\\\":12620.030203388145,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3096701031229806,\\\"bias\\\":0.1903298968770194,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12540.225265710971,\\\"ask\\\":12640.949966640375,\\\"price\\\":12590.587616175673,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31011518199926297,\\\"bias\\\":0.18988481800073703,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12564.302058341544,\\\"ask\\\":12665.220147163565,\\\"price\\\":12614.761102752555,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.30975060980938385,\\\"bias\\\":0.19024939019061615,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12540.164698336272,\\\"ask\\\":12640.88891278074,\\\"price\\\":12590.526805558506,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3101168026092618,\\\"bias\\\":0.18988319739073822,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12502.863729955947,\\\"ask\\\":12603.288338228684,\\\"price\\\":12553.076034092315,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31068329899719394,\\\"bias\\\":0.18931670100280606,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12499.646576466623,\\\"ask\\\":12600.045344149084,\\\"price\\\":12549.845960307854,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3107320252456916,\\\"bias\\\":0.1892679747543084,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12506.17304213662,\\\"ask\\\":12606.624231230086,\\\"price\\\":12556.398636683352,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3106332023764123,\\\"bias\\\":0.1893667976235877,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12516.236164224603,\\\"ask\\\":12616.768181607935,\\\"price\\\":12566.502172916269,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3107855768236134,\\\"bias\\\":0.1892144231763866,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12534.674580528897,\\\"ask\\\":12635.35469764158,\\\"price\\\":12585.014639085239,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31050683373667204,\\\"bias\\\":0.18949316626332796,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12514.060215198715,\\\"ask\\\":12614.57475507983,\\\"price\\\":12564.317485139272,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31081898513196266,\\\"bias\\\":0.18918101486803734,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12563.126663845702,\\\"ask\\\":12664.035311748077,\\\"price\\\":12613.58098779689,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3115607460306144,\\\"bias\\\":0.1884392539693856,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12606.52778323956,\\\"ask\\\":12707.78503451056,\\\"price\\\":12657.15640887506,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31221173640736116,\\\"bias\\\":0.18778826359263884,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12586.74478093886,\\\"ask\\\":12687.843132592987,\\\"price\\\":12637.293956765923,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31191658339398454,\\\"bias\\\":0.18808341660601546,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12567.112911633025,\\\"ask\\\":12668.053577589917,\\\"price\\\":12617.583244611471,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31221040020611696,\\\"bias\\\":0.18778959979388304,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12520.626418619315,\\\"ask\\\":12621.193699090152,\\\"price\\\":12570.910058854734,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3129076241010719,\\\"bias\\\":0.18709237589892808,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12529.754822344497,\\\"ask\\\":12630.395423327183,\\\"price\\\":12580.07512283584,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.313044027399438,\\\"bias\\\":0.18695597260056201,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12532.803391242145,\\\"ask\\\":12633.468478722003,\\\"price\\\":12583.135934982074,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3129985398243513,\\\"bias\\\":0.18700146017564873,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12521.588827932686,\\\"ask\\\":12622.163838598812,\\\"price\\\":12571.876333265749,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31283105790628807,\\\"bias\\\":0.18716894209371193,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12494.062314281588,\\\"ask\\\":12594.416228452525,\\\"price\\\":12544.239271367056,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3132434224607465,\\\"bias\\\":0.1867565775392535,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12528.644740259846,\\\"ask\\\":12629.276424920568,\\\"price\\\":12578.960582590207,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31272649727210533,\\\"bias\\\":0.18727350272789467,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12574.003958369141,\\\"ask\\\":12674.999974099015,\\\"price\\\":12624.501966234078,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3134045099249048,\\\"bias\\\":0.18659549007509518,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12531.418131948012,\\\"ask\\\":12632.072092847193,\\\"price\\\":12581.745112397602,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31403862196774257,\\\"bias\\\":0.18596137803225743,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12518.878807914285,\\\"ask\\\":12619.432051351347,\\\"price\\\":12569.155429632816,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3138523568866052,\\\"bias\\\":0.18614764311339482,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12490.099256246216,\\\"ask\\\":12590.421338625703,\\\"price\\\":12540.26029743596,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31428127627331,\\\"bias\\\":0.18571872372669002,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12463.376707646554,\\\"ask\\\":12563.484151081468,\\\"price\\\":12513.43042936401,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3146794731453991,\\\"bias\\\":0.18532052685460088,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12451.223922151219,\\\"ask\\\":12551.23375285123,\\\"price\\\":12501.228837501225,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3148603517983595,\\\"bias\\\":0.18513964820164053,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12435.923105200603,\\\"ask\\\":12535.810037772495,\\\"price\\\":12485.86657148655,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3146325610792089,\\\"bias\\\":0.1853674389207911,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12432.699063371627,\\\"ask\\\":12532.560100025214,\\\"price\\\":12482.62958169842,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31468063047860195,\\\"bias\\\":0.18531936952139805,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12408.859072847388,\\\"ask\\\":12508.52862363331,\\\"price\\\":12458.69384824035,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31432459355470654,\\\"bias\\\":0.18567540644529346,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12400.197728926687,\\\"ask\\\":12499.797710685136,\\\"price\\\":12449.997719805911,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3141949021910691,\\\"bias\\\":0.1858050978089309,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12377.099804147425,\\\"ask\\\":12476.514260405636,\\\"price\\\":12426.80703227653,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3138481560032945,\\\"bias\\\":0.18615184399670548,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12367.811842085872,\\\"ask\\\":12467.15169623917,\\\"price\\\":12417.481769162521,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3139879520550784,\\\"bias\\\":0.1860120479449216,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12419.329466397097,\\\"ask\\\":12519.083116729604,\\\"price\\\":12469.20629156335,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3147627777821952,\\\"bias\\\":0.1852372222178048,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12376.499625885448,\\\"ask\\\":12475.909261434728,\\\"price\\\":12426.204443660088,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3141217499533076,\\\"bias\\\":0.1858782500466924,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12395.637714191163,\\\"ask\\\":12495.201069325229,\\\"price\\\":12445.419391758196,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31440917810109065,\\\"bias\\\":0.18559082189890935,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12388.525126152663,\\\"ask\\\":12488.031352065535,\\\"price\\\":12438.278239109099,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3145157308219716,\\\"bias\\\":0.1854842691780284,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12338.770695002555,\\\"ask\\\":12437.877286930287,\\\"price\\\":12388.32399096642,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3152636711580364,\\\"bias\\\":0.18473632884196362,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12289.887022373283,\\\"ask\\\":12388.600974360217,\\\"price\\\":12339.24399836675,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31599846963139944,\\\"bias\\\":0.18400153036860056,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":12292.171997787193,\\\"ask\\\":12390.904302990302,\\\"price\\\":12341.538150388747,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31603267978908833,\\\"bias\\\":0.18396732021091167,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.5883708925826463,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":22148.023021349272,\\\"ask\\\":22325.918788589035,\\\"price\\\":22236.97090496915,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.1937526056804808},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3134720588628041,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":21565.329294939023,\\\"ask\\\":21738.54479128391,\\\"price\\\":21651.93704311145,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.19030274597696484},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31494580512021775,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":20068.891826504765,\\\"ask\\\":20230.087744789944,\\\"price\\\":20149.489785647347,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.18760473563726426},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.5933366164581821,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":19801.820667213888,\\\"ask\\\":19960.871435625242,\\\"price\\\":19881.34605141955,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.19007020881268955},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3220497646017868,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":19177.596899804033,\\\"ask\\\":19331.63382269402,\\\"price\\\":19254.615361249034,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.18639168057302924},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.5767563664011474,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":18438.56851810586,\\\"ask\\\":18586.669470058518,\\\"price\\\":18512.618994082186,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.17607180417753232},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.6748433414953741,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":19715.621753312316,\\\"ask\\\":19873.980160969444,\\\"price\\\":19794.800957140884,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.17823987494583582},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.678866018320608,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":21172.7751136889,\\\"ask\\\":21342.837564401274,\\\"price\\\":21257.806339045088,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.18140861350388893},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.4321681385250125,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":21662.00684093486,\\\"ask\\\":21835.99886375361,\\\"price\\\":21749.002852344234,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.18128276481709},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.6538107948803329,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":21906.515964004946,\\\"ask\\\":22082.471915523067,\\\"price\\\":21994.493939764,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.18245105511530968},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.528031991068606,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23353.611172197318,\\\"ask\\\":23541.190378399715,\\\"price\\\":23447.400775298527,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.17798948403405102},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.5582010942223846,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":22827.597194935697,\\\"ask\\\":23010.95138927252,\\\"price\\\":22919.274292104106,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.18077709187643876},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3575996477146582,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":22628.930172384054,\\\"ask\\\":22810.688647664254,\\\"price\\\":22719.809410024154,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.18009030253269875},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.32368774414877427,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":21067.5294997342,\\\"ask\\\":21236.74660414974,\\\"price\\\":21152.13805194197,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.17804913291435343},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.32409723399375423,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":19499.756684007225,\\\"ask\\\":19656.381235686,\\\"price\\\":19578.068959846612,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.17804434410935605},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31976412688957395,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":18103.913737818944,\\\"ask\\\":18249.326699568493,\\\"price\\\":18176.62021869372,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.18398556230165397},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3171485791468998,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":17087.8969633434,\\\"ask\\\":17225.149147787924,\\\"price\\\":17156.523055565664,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.18433550367383728},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31665426540601943,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15876.489637647604,\\\"ask\\\":16004.011642769265,\\\"price\\\":15940.250640208444,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.18622040976216792},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.5959169680366666,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15329.877982597905,\\\"ask\\\":15453.009532658923,\\\"price\\\":15391.443757628413,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.19837830053233418},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3067030115917358,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15352.227818995798,\\\"ask\\\":15475.538885815033,\\\"price\\\":15413.883352405419,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.19736026814240554},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.5266718559864333,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14728.660783528192,\\\"ask\\\":14846.96327978144,\\\"price\\\":14787.812031654808,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.19370176509035164},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.6653454378080697,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15498.420317634589,\\\"ask\\\":15622.905621390688,\\\"price\\\":15560.662969512634,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.19191025201241219},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.4239998092833822,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15293.77707676692,\\\"ask\\\":15416.618659712838,\\\"price\\\":15355.197868239875,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.19218485638923988},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.4850418496050923,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15316.553796508948,\\\"ask\\\":15439.578324994967,\\\"price\\\":15378.066060751966,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.19108080508631753},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.31353226043472754,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14664.85499213829,\\\"ask\\\":14782.644992075147,\\\"price\\\":14723.749992106726,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.18960217569299065},{\\\"volatility\\\":0.0043,\\\"forecast\\\":0.3124703253292897,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":13198.846953127988,\\\"ask\\\":13304.861788092872,\\\"price\\\":13251.85437061043,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.18976247549760122}],\\\"recentTicksOfPrices\\\":[12578.960582590207,12624.501966234078,12581.745112397602,12569.155429632816,12540.26029743596,12513.43042936401,12501.228837501225,12485.86657148655,12482.62958169842,12458.69384824035,12449.997719805911,12426.80703227653,12417.481769162521,12469.20629156335,12426.204443660088,12445.419391758196,12438.278239109099,12388.32399096642,12339.24399836675,12341.538150388747]}],[\\\"MGCP\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42450.28037189279,\\\"ask\\\":42535.26591818286,\\\"price\\\":42492.77314503783,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3007770669008885,\\\"bias\\\":0.1992229330991115,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42571.91723779554,\\\"ask\\\":42657.146301334666,\\\"price\\\":42614.5317695651,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30134791950741624,\\\"bias\\\":0.19865208049258376,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42472.960441745585,\\\"ask\\\":42557.99139358091,\\\"price\\\":42515.47591766325,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3018107545255019,\\\"bias\\\":0.19818924547449812,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42640.30285382011,\\\"ask\\\":42725.66882549942,\\\"price\\\":42682.98583965977,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3025916152434737,\\\"bias\\\":0.19740838475652628,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42544.75882272856,\\\"ask\\\":42629.93351506635,\\\"price\\\":42587.34616889746,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30303494112832596,\\\"bias\\\":0.19696505887167404,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42521.60851891694,\\\"ask\\\":42606.736864300154,\\\"price\\\":42564.172691608546,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3029277062161959,\\\"bias\\\":0.1970722937838041,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42611.08161449967,\\\"ask\\\":42696.389085199364,\\\"price\\\":42653.73534984952,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3025130307419466,\\\"bias\\\":0.19748696925805342,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42553.82180003198,\\\"ask\\\":42639.01463646848,\\\"price\\\":42596.41821825023,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3027787663854486,\\\"bias\\\":0.1972212336145514,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42445.684599986926,\\\"ask\\\":42530.66094553244,\\\"price\\\":42488.17277275969,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3032812191599414,\\\"bias\\\":0.19671878084005862,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42332.87777194697,\\\"ask\\\":42417.62827799691,\\\"price\\\":42375.25302497194,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30380542688808126,\\\"bias\\\":0.19619457311191874,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42240.46126049083,\\\"ask\\\":42325.02674849982,\\\"price\\\":42282.744004495325,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3033761792550638,\\\"bias\\\":0.19662382074493617,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42333.11070161959,\\\"ask\\\":42417.8616739952,\\\"price\\\":42375.48618780739,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30294490822816195,\\\"bias\\\":0.19705509177183805,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42189.679229159934,\\\"ask\\\":42274.14305144053,\\\"price\\\":42231.91114030023,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3022749836758802,\\\"bias\\\":0.19772501632411982,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42177.30892042352,\\\"ask\\\":42261.74797732126,\\\"price\\\":42219.52844887239,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3023329750356764,\\\"bias\\\":0.1976670249643236,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42202.40389819296,\\\"ask\\\":42286.89319528644,\\\"price\\\":42244.6485467397,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30221536559770606,\\\"bias\\\":0.19778463440229394,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42163.7427197957,\\\"ask\\\":42248.154617132626,\\\"price\\\":42205.94866846417,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30239672015832186,\\\"bias\\\":0.19760327984167814,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42093.08034971097,\\\"ask\\\":42177.350780841516,\\\"price\\\":42135.215565276245,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3027284401458857,\\\"bias\\\":0.19727155985411432,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42014.21330117056,\\\"ask\\\":42098.325840312034,\\\"price\\\":42056.2695707413,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3030987487739476,\\\"bias\\\":0.1969012512260524,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42201.93317152144,\\\"ask\\\":42286.42152621918,\\\"price\\\":42244.17734887031,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30397850527651793,\\\"bias\\\":0.19602149472348207,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42368.06894675875,\\\"ask\\\":42452.88990561112,\\\"price\\\":42410.47942618494,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3047501804236422,\\\"bias\\\":0.19524981957635779,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42443.95204770645,\\\"ask\\\":42528.92492467883,\\\"price\\\":42486.438486192645,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30509988155794576,\\\"bias\\\":0.19490011844205424,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42368.53020137224,\\\"ask\\\":42453.352083657264,\\\"price\\\":42410.941142514755,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30544683073729634,\\\"bias\\\":0.19455316926270366,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42190.03021507778,\\\"ask\\\":42274.49474003288,\\\"price\\\":42232.262477555334,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3046237040917381,\\\"bias\\\":0.1953762959082619,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42155.00784113227,\\\"ask\\\":42239.40225122462,\\\"price\\\":42197.205046178446,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30446138549554247,\\\"bias\\\":0.19553861450445753,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42143.32334884247,\\\"ask\\\":42227.69436655786,\\\"price\\\":42185.508857700166,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3044071712273742,\\\"bias\\\":0.1955928287726258,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42100.35622107966,\\\"ask\\\":42184.64121851925,\\\"price\\\":42142.498719799456,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30460679096501325,\\\"bias\\\":0.19539320903498675,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42206.05280151467,\\\"ask\\\":42290.5494037199,\\\"price\\\":42248.30110261729,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30509734249210185,\\\"bias\\\":0.19490265750789815,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42339.176124783284,\\\"ask\\\":42423.93924014821,\\\"price\\\":42381.55768246575,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3057120905616111,\\\"bias\\\":0.19428790943838892,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42165.218509773964,\\\"ask\\\":42249.63336164538,\\\"price\\\":42207.425935709674,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3049105327244753,\\\"bias\\\":0.19508946727552468,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42002.56318817356,\\\"ask\\\":42086.652403765496,\\\"price\\\":42044.60779596953,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30415504692475426,\\\"bias\\\":0.19584495307524574,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":41954.67629196176,\\\"ask\\\":42038.66963789161,\\\"price\\\":41996.672964926685,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30393151029498133,\\\"bias\\\":0.19606848970501867,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":41844.80422385369,\\\"ask\\\":41928.57760568322,\\\"price\\\":41886.69091476846,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3034166924853562,\\\"bias\\\":0.1965833075146438,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":41742.81565019584,\\\"ask\\\":41826.384850696726,\\\"price\\\":41784.60025044628,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3038969967203741,\\\"bias\\\":0.19610300327962588,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":41696.43995960732,\\\"ask\\\":41779.91631588281,\\\"price\\\":41738.17813774507,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30411510676076087,\\\"bias\\\":0.19588489323923913,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":41754.900549397214,\\\"ask\\\":41838.4939438905,\\\"price\\\":41796.69724664386,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30384046589451935,\\\"bias\\\":0.19615953410548065,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":41767.23927551316,\\\"ask\\\":41850.857372160826,\\\"price\\\":41809.04832383699,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30389843175564013,\\\"bias\\\":0.19610156824435987,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":41675.998731360174,\\\"ask\\\":41759.434164255785,\\\"price\\\":41717.71644780798,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30346910997954535,\\\"bias\\\":0.19653089002045465,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":41642.85321600188,\\\"ask\\\":41726.22229150939,\\\"price\\\":41684.537753755634,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3036255382050505,\\\"bias\\\":0.1963744617949495,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":41554.48428709823,\\\"ask\\\":41637.67644783316,\\\"price\\\":41596.0803674657,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30404314417828204,\\\"bias\\\":0.19595685582171796,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":41518.95376502168,\\\"ask\\\":41602.07479358028,\\\"price\\\":41560.51427930098,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3038754509018274,\\\"bias\\\":0.19612454909817262,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":41716.031237538366,\\\"ask\\\":41799.54681559149,\\\"price\\\":41757.78902656493,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30294450908056914,\\\"bias\\\":0.19705549091943086,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":41880.53628680341,\\\"ask\\\":41964.38120429451,\\\"price\\\":41922.45874554896,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30216743076607033,\\\"bias\\\":0.19783256923392967,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":41806.86877746497,\\\"ask\\\":41890.56621245489,\\\"price\\\":41848.717494959936,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30181883176624896,\\\"bias\\\":0.19818116823375104,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":41779.53502382416,\\\"ask\\\":41863.17773658456,\\\"price\\\":41821.356380204365,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3016891741425904,\\\"bias\\\":0.1983108258574096,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":41588.43529212815,\\\"ask\\\":41671.69542284312,\\\"price\\\":41630.06535748564,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3026004165432137,\\\"bias\\\":0.19739958345678632,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":41776.93737000101,\\\"ask\\\":41860.57488225326,\\\"price\\\":41818.75612612714,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30349514199733246,\\\"bias\\\":0.19650485800266754,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":41785.78848257547,\\\"ask\\\":41869.44371477282,\\\"price\\\":41827.616098674145,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0049,\\\"forecast\\\":0.30345350929926734,\\\"bias\\\":0.19654649070073266,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.688559633118677,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":33474.70925909785,\\\"ask\\\":33541.725694051,\\\"price\\\":33508.2174765744,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.19118591053101508},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.49817842027481585,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":34909.15301819734,\\\"ask\\\":34979.04121242798,\\\"price\\\":34944.097115312645,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.19363818509266562},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.5978300738185174,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":34007.61433735083,\\\"ask\\\":34075.6976493375,\\\"price\\\":34041.65599334416,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.1956703641360087},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3075426457548556,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":32779.925746223045,\\\"ask\\\":32845.55122319245,\\\"price\\\":32812.73848470777,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.19907082817650834},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.29721533846612347,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":29367.27078192921,\\\"ask\\\":29426.064116827965,\\\"price\\\":29396.66744937859,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.20695443420648824},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.5879839912104701,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27593.0836884525,\\\"ask\\\":27648.325097238176,\\\"price\\\":27620.704392845324,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.2039751349678765},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3995294838273003,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27955.444274250065,\\\"ask\\\":28011.411129653963,\\\"price\\\":27983.42770195201,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.20326191451605802},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.6971039647950127,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":29636.123809674038,\\\"ask\\\":29695.455388872582,\\\"price\\\":29665.78959927331,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.20001363898973368},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.6992144268488992,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":32728.607096998672,\\\"ask\\\":32794.12983392959,\\\"price\\\":32761.368465464147,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.20139123392933822},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.6987694353835637,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":34965.38965715875,\\\"ask\\\":35035.390437253154,\\\"price\\\":35000.390047205954,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.20191008525906629},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.529595645261911,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":37966.4012124178,\\\"ask\\\":38042.41002365387,\\\"price\\\":38004.40561803583,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.21132271995950502},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.5695728118427638,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":38914.70991131582,\\\"ask\\\":38992.617238465595,\\\"price\\\":38953.6635748907,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.2214319764129956},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.720221801633153,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42187.259722346185,\\\"ask\\\":42271.71870076929,\\\"price\\\":42229.48921155776,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.22501159303316032},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.7112633745980801,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":48337.32490314647,\\\"ask\\\":48434.09632437399,\\\"price\\\":48385.710613760224,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.21398900363363904},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.7133880747712635,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":54512.949833856226,\\\"ask\\\":54622.08486855864,\\\"price\\\":54567.51735120743,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.217476298633963},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3440749041864048,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":56921.53274718969,\\\"ask\\\":57035.489769706575,\\\"price\\\":56978.511258448154,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.21201889972328242},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.29668536900245185,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":52207.95753142149,\\\"ask\\\":52312.47796691985,\\\"price\\\":52260.217749170704,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.21153703025882092},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.29706548817555917,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":47572.98598314157,\\\"ask\\\":47668.22719632103,\\\"price\\\":47620.606589731295,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.20596817472774576},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.6007843336409036,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":46300.29424104501,\\\"ask\\\":46392.98752280887,\\\"price\\\":46346.64088192694,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.20512241357439143},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.43172658058597535,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":45180.996344792155,\\\"ask\\\":45271.44878992688,\\\"price\\\":45226.22256735951,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.20284488341627438},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.4753715872532818,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":45894.662411375735,\\\"ask\\\":45986.54361740455,\\\"price\\\":45940.60301439019,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.19783159775922088},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.33178602305356597,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":41633.65128410415,\\\"ask\\\":41717.00193732556,\\\"price\\\":41675.32661071486,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.19696868410943036},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.6961523489128225,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":40697.54843093308,\\\"ask\\\":40779.02500436837,\\\"price\\\":40738.28671765071,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.2000798932639981},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.4868545993535785,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42326.413787204714,\\\"ask\\\":42411.15135234428,\\\"price\\\":42368.7825697745,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.1986685321772177},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.5973953960429649,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":42783.38483574284,\\\"ask\\\":42869.0372578364,\\\"price\\\":42826.21104678961,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.19861723664808184},{\\\"volatility\\\":0.0049,\\\"forecast\\\":0.3056048441141725,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":44103.49945066599,\\\"ask\\\":44191.794744861516,\\\"price\\\":44147.647097763744,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.19979226208322998}],\\\"recentTicksOfPrices\\\":[42381.55768246575,42207.425935709674,42044.60779596953,41996.672964926685,41886.69091476846,41784.60025044628,41738.17813774507,41796.69724664386,41809.04832383699,41717.71644780798,41684.537753755634,41596.0803674657,41560.51427930098,41757.78902656493,41922.45874554896,41848.717494959936,41821.356380204365,41630.06535748564,41818.75612612714,41827.616098674145]}],[\\\"BLD\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":24656.784218949375,\\\"ask\\\":24854.83067853933,\\\"price\\\":24755.807448744352,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6486213995777355,\\\"bias\\\":0.14862139957773546,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":24767.807929588686,\\\"ask\\\":24966.746145890604,\\\"price\\\":24867.277037739645,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6492906068480351,\\\"bias\\\":0.14929060684803508,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":24677.457929408778,\\\"ask\\\":24875.670442898005,\\\"price\\\":24776.56418615339,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6498371950093507,\\\"bias\\\":0.14983719500935067,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":24830.245686940936,\\\"ask\\\":25029.685411334038,\\\"price\\\":24929.965549137487,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6489094945514722,\\\"bias\\\":0.14890949455147218,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":24742.927797967222,\\\"ask\\\":24941.66617385451,\\\"price\\\":24842.296985910867,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6494349967401601,\\\"bias\\\":0.14943499674016014,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":24764.0964275259,\\\"ask\\\":24963.00483256627,\\\"price\\\":24863.550630046084,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6493071487298145,\\\"bias\\\":0.14930714872981454,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":24682.48212849782,\\\"ask\\\":24880.734996999814,\\\"price\\\":24781.608562748817,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.648813454529206,\\\"bias\\\":0.14881345452920602,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":24734.67303525497,\\\"ask\\\":24933.3451078273,\\\"price\\\":24834.009071541135,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6484987896956974,\\\"bias\\\":0.1484987896956974,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":24636.043455122657,\\\"ask\\\":24833.923322232076,\\\"price\\\":24734.983388677367,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6479042797329054,\\\"bias\\\":0.14790427973290543,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":24739.20627426622,\\\"ask\\\":24937.91475839687,\\\"price\\\":24838.560516331545,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.647284934240662,\\\"bias\\\":0.14728493424066202,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":24824.261563471326,\\\"ask\\\":25023.653222615674,\\\"price\\\":24923.9573930435,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6477913111445334,\\\"bias\\\":0.14779131114453337,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":24738.992634426304,\\\"ask\\\":24937.699402574308,\\\"price\\\":24838.346018500306,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6483007096883494,\\\"bias\\\":0.1483007096883494,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":24871.157156519013,\\\"ask\\\":25070.925487093464,\\\"price\\\":24971.04132180624,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6490929849726185,\\\"bias\\\":0.14909298497261847,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":24859.699595107337,\\\"ask\\\":25059.375897076072,\\\"price\\\":24959.537746091704,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6490242696599157,\\\"bias\\\":0.14902426965991566,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":24882.94293163553,\\\"ask\\\":25082.805927070352,\\\"price\\\":24982.87442935294,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6488849348607433,\\\"bias\\\":0.14888493486074328,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":24918.79649467475,\\\"ask\\\":25118.947470535593,\\\"price\\\":25018.87198260517,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6486704081702193,\\\"bias\\\":0.14867040817021926,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":24984.53187805023,\\\"ask\\\":25185.210848958264,\\\"price\\\":25084.871363504248,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6482782180305492,\\\"bias\\\":0.1482782180305492,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25058.231492228988,\\\"ask\\\":25259.502427909545,\\\"price\\\":25158.866960069266,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6487156105545837,\\\"bias\\\":0.1487156105545837,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25234.169257675403,\\\"ask\\\":25436.853348098502,\\\"price\\\":25335.511302886953,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6476714549757638,\\\"bias\\\":0.14767145497576384,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25390.27341664706,\\\"ask\\\":25594.211355736592,\\\"price\\\":25492.242386191825,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6467579266543945,\\\"bias\\\":0.14675792665439447,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25461.734306939732,\\\"ask\\\":25666.246229083823,\\\"price\\\":25563.990268011778,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.647170976641062,\\\"bias\\\":0.14717097664106205,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25532.959951589884,\\\"ask\\\":25738.043967265305,\\\"price\\\":25635.501959427595,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6475826668880298,\\\"bias\\\":0.1475826668880298,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25364.325496501307,\\\"ask\\\":25568.05501856156,\\\"price\\\":25466.190257531434,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6466014650573478,\\\"bias\\\":0.14660146505734784,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25397.439704268516,\\\"ask\\\":25601.435203901194,\\\"price\\\":25499.437454084855,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6464100705976941,\\\"bias\\\":0.14641007059769406,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25386.379160635257,\\\"ask\\\":25590.28582056004,\\\"price\\\":25488.332490597648,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6463462814703061,\\\"bias\\\":0.14634628147030615,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25427.093365733064,\\\"ask\\\":25631.32704738554,\\\"price\\\":25529.210206559303,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6465809889282457,\\\"bias\\\":0.14658098892824567,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25527.4085162935,\\\"ask\\\":25732.447942127183,\\\"price\\\":25629.92822921034,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6471592812938785,\\\"bias\\\":0.14715928129387845,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25401.506255674452,\\\"ask\\\":25605.534418370633,\\\"price\\\":25503.520337022543,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6478886745038515,\\\"bias\\\":0.14788867450385146,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25566.187145423937,\\\"ask\\\":25771.53804619039,\\\"price\\\":25668.862595807164,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6469298951993475,\\\"bias\\\":0.14692989519934752,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25721.76690342807,\\\"ask\\\":25928.367440805,\\\"price\\\":25825.067172116534,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6460357721371693,\\\"bias\\\":0.14603577213716934,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25767.90203441251,\\\"ask\\\":25974.873135090522,\\\"price\\\":25871.387584751516,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.646297705133501,\\\"bias\\\":0.14629770513350104,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25662.017823028033,\\\"ask\\\":25868.138448112597,\\\"price\\\":25765.078135570315,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6456940652622234,\\\"bias\\\":0.1456940652622234,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25760.54481536723,\\\"ask\\\":25967.456821916367,\\\"price\\\":25864.000818641798,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6451346860991758,\\\"bias\\\":0.1451346860991758,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25715.599677720744,\\\"ask\\\":25922.15067914822,\\\"price\\\":25818.875178434482,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6453883491879531,\\\"bias\\\":0.14538834918795307,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25772.256931158005,\\\"ask\\\":25979.263010926345,\\\"price\\\":25875.759971042175,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6457086724411535,\\\"bias\\\":0.1457086724411535,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25784.224611154063,\\\"ask\\\":25991.32681686614,\\\"price\\\":25887.775714010102,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6456410107393055,\\\"bias\\\":0.14564101073930547,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25872.930115907322,\\\"ask\\\":26080.744815633487,\\\"price\\\":25976.837465770404,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6461420597165478,\\\"bias\\\":0.1461420597165478,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25905.291311506884,\\\"ask\\\":26113.36594051497,\\\"price\\\":26009.328626010927,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6463248504464196,\\\"bias\\\":0.14632485044641963,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25991.860793681877,\\\"ask\\\":26200.63075989619,\\\"price\\\":26096.245776789034,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6468138341980462,\\\"bias\\\":0.14681383419804617,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25956.95451360878,\\\"ask\\\":26165.4441080956,\\\"price\\\":26061.19931085219,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6466164025304585,\\\"bias\\\":0.1466164025304585,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":26150.569497282322,\\\"ask\\\":26360.614232200252,\\\"price\\\":26255.591864741287,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6455227791484347,\\\"bias\\\":0.1455227791484347,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25989.516396006416,\\\"ask\\\":26198.267531717313,\\\"price\\\":26093.891963861864,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6464245617953693,\\\"bias\\\":0.14642456179536933,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":26061.48137269806,\\\"ask\\\":26270.810540350252,\\\"price\\\":26166.145956524157,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6468300114396078,\\\"bias\\\":0.14683001143960783,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":26034.71539245492,\\\"ask\\\":26243.829572313996,\\\"price\\\":26139.27248238446,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6469809656223614,\\\"bias\\\":0.1469809656223614,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":26222.705491160632,\\\"ask\\\":26433.329631651883,\\\"price\\\":26328.017561406257,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6459196532239468,\\\"bias\\\":0.14591965322394684,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":26037.252704222286,\\\"ask\\\":26246.38726409556,\\\"price\\\":26141.819984158923,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6448803267378974,\\\"bias\\\":0.1448803267378974,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":26028.586947313575,\\\"ask\\\":26237.651902713682,\\\"price\\\":26133.11942501363,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6449285620760243,\\\"bias\\\":0.14492856207602434,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6373645856765131,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19969.01282512313,\\\"ask\\\":20129.406502433365,\\\"price\\\":20049.20966377825,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.14149132702209355},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6386877048553167,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":22945.177090932113,\\\"ask\\\":23129.475702104264,\\\"price\\\":23037.326396518176,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.14351359651630458},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4296615369845896,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":24400.30885579015,\\\"ask\\\":24596.295272302516,\\\"price\\\":24498.30206404635,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.14370486938160987},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6411035481258845,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":25552.40451166248,\\\"ask\\\":25757.644708543317,\\\"price\\\":25655.024610102904,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.15049706803203577},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6510285103181275,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":29884.373021534677,\\\"ask\\\":30124.408146205627,\\\"price\\\":30004.39058387014,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.15444770798666896},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4332985877812434,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":31571.28454376662,\\\"ask\\\":31824.86915857599,\\\"price\\\":31698.076851171314,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.15538276321442868},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6438655828775544,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":31726.281149563834,\\\"ask\\\":31981.11071703019,\\\"price\\\":31853.69593329701,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.158728949144346},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5136082267211123,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":34923.81379216728,\\\"ask\\\":35204.32635274693,\\\"price\\\":35064.07007245712,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.164357939711614},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5669945174837728,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":33670.245298410984,\\\"ask\\\":33940.68903574762,\\\"price\\\":33805.467167079296,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.17536301618995143},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.3502081459555261,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":32186.945498588782,\\\"ask\\\":32445.47518130838,\\\"price\\\":32316.210339948582,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.17959565709671876},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.3270772538372108,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":27125.642961571994,\\\"ask\\\":27343.51961186575,\\\"price\\\":27234.58128671887,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.17860253372422336},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.32639383421059764,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":23563.484509293095,\\\"ask\\\":23752.749445110694,\\\"price\\\":23658.116977201895,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.17871640667548616},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5863293194705888,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":22314.434717535954,\\\"ask\\\":22493.667124905704,\\\"price\\\":22404.050921220834,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.17488680968732084},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.3381222808957297,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":21541.65662511636,\\\"ask\\\":21714.68197953497,\\\"price\\\":21628.16930232566,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.16563886941512124},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.33407475336337955,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19961.046163883766,\\\"ask\\\":20121.375851947072,\\\"price\\\":20041.211007915415,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.17048404090756814},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.37867809825973786,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":17666.40617217623,\\\"ask\\\":17808.305016932663,\\\"price\\\":17737.35559455445,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.16387450654089059},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6514993983484456,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":18390.390848262123,\\\"ask\\\":18538.104830979086,\\\"price\\\":18464.2478396206,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.15544905901798},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6441179154299131,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":21108.78510459903,\\\"ask\\\":21278.33357933475,\\\"price\\\":21193.559341966895,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.15458278451989615},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4317894122852588,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":21100.893309299838,\\\"ask\\\":21270.37839612153,\\\"price\\\":21185.635852710682,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.1387627556795748},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6387061995854008,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":21271.815687634702,\\\"ask\\\":21442.673644965103,\\\"price\\\":21357.24466629991,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.14449900870519372},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6440003882575144,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":22141.86868400518,\\\"ask\\\":22319.715018816474,\\\"price\\\":22230.79185141081,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.14829993757020177},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6222251797978524,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":23311.49075923019,\\\"ask\\\":23498.73164886256,\\\"price\\\":23405.111204046385,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.14236588010345996},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.44425760827167976,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":22439.365147295546,\\\"ask\\\":22619.60101193245,\\\"price\\\":22529.483079613987,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.14458069792711203},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.487859569649101,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":23348.316335646672,\\\"ask\\\":23535.853013041415,\\\"price\\\":23442.084674344052,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.14208434822433125},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.3638153406921177,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":21315.702303460537,\\\"ask\\\":21486.912763729313,\\\"price\\\":21401.307533594925,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.14919590286960815},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.6448046767033915,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":22714.43339587965,\\\"ask\\\":22896.878644039327,\\\"price\\\":22805.656019959482,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.14993330821775752}],\\\"recentTicksOfPrices\\\":[25503.520337022543,25668.862595807164,25825.067172116534,25871.387584751516,25765.078135570315,25864.000818641798,25818.875178434482,25875.759971042175,25887.775714010102,25976.837465770404,26009.328626010927,26096.245776789034,26061.19931085219,26255.591864741287,26093.891963861864,26166.145956524157,26139.27248238446,26328.017561406257,26141.819984158923,26133.11942501363]}],[\\\"CLRK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19439.89596958068,\\\"ask\\\":19556.886316438737,\\\"price\\\":19498.39114300971,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6134810563560725,\\\"bias\\\":0.11348105635607253,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19355.008573853956,\\\"ask\\\":19471.488063766818,\\\"price\\\":19413.248318810387,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6139787627405274,\\\"bias\\\":0.11397876274052743,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19424.03122617496,\\\"ask\\\":19540.926098147927,\\\"price\\\":19482.478662161444,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6135722986212996,\\\"bias\\\":0.11357229862129958,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19307.59533733553,\\\"ask\\\":19423.789491823005,\\\"price\\\":19365.69241457927,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6142572048101058,\\\"bias\\\":0.11425720481010582,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19241.45588304796,\\\"ask\\\":19357.25200671725,\\\"price\\\":19299.353944882605,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6146499458386692,\\\"bias\\\":0.11464994583866916,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19257.490187398216,\\\"ask\\\":19373.382806379548,\\\"price\\\":19315.436496888884,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6147454860169432,\\\"bias\\\":0.11474548601694323,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19195.66703162516,\\\"ask\\\":19311.18759550655,\\\"price\\\":19253.427313565855,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6151150448368891,\\\"bias\\\":0.11511504483688906,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19235.2018508518,\\\"ask\\\":19350.960337416604,\\\"price\\\":19293.081094134202,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6153521323254559,\\\"bias\\\":0.11535213232545594,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19310.20914679264,\\\"ask\\\":19426.419031326997,\\\"price\\\":19368.31408905982,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6158019457245474,\\\"bias\\\":0.11580194572454738,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19231.768349806833,\\\"ask\\\":19347.50617337638,\\\"price\\\":19289.637261591608,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.615329623224093,\\\"bias\\\":0.11532962322409301,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19296.171234625766,\\\"ask\\\":19412.296638244374,\\\"price\\\":19354.23393643507,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6149434101465636,\\\"bias\\\":0.11494341014656362,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19231.606569748277,\\\"ask\\\":19347.343419716668,\\\"price\\\":19289.474994732474,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6145575202455263,\\\"bias\\\":0.11455752024552635,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19132.051140346324,\\\"ask\\\":19247.188860348408,\\\"price\\\":19189.620000347368,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6151536310877775,\\\"bias\\\":0.11515363108777754,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19123.46627535062,\\\"ask\\\":19238.55233117018,\\\"price\\\":19181.0093032604,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.615101936569513,\\\"bias\\\":0.11510193656951295,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19140.881927684884,\\\"ask\\\":19256.072791843468,\\\"price\\\":19198.477359764176,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6152067593710612,\\\"bias\\\":0.11520675937106117,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19167.745456431618,\\\"ask\\\":19283.097986761193,\\\"price\\\":19225.421721596405,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6150450708917176,\\\"bias\\\":0.11504507089171756,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19118.62083289396,\\\"ask\\\":19233.677728578376,\\\"price\\\":19176.14928073617,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.614749466629945,\\\"bias\\\":0.11474946662994501,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19173.552287066082,\\\"ask\\\":19288.939763216928,\\\"price\\\":19231.246025141507,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6144197694659836,\\\"bias\\\":0.11441976946598365,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19304.676162070387,\\\"ask\\\":19420.852748803005,\\\"price\\\":19362.764455436696,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6136372768258691,\\\"bias\\\":0.1136372768258691,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19189.051756107954,\\\"ask\\\":19304.532508902983,\\\"price\\\":19246.79213250547,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6129525508271497,\\\"bias\\\":0.11295255082714972,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19136.590805766366,\\\"ask\\\":19251.755845720825,\\\"price\\\":19194.173325743595,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.612642903292746,\\\"bias\\\":0.11264290329274596,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19188.732305128735,\\\"ask\\\":19304.21113545047,\\\"price\\\":19246.471720289603,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.612949821590254,\\\"bias\\\":0.11294982159025402,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19312.994728294674,\\\"ask\\\":19429.221376609385,\\\"price\\\":19371.10805245203,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6122183809560431,\\\"bias\\\":0.11221838095604308,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19337.55375841321,\\\"ask\\\":19453.92820430135,\\\"price\\\":19395.74098135728,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6120756804253111,\\\"bias\\\":0.11207568042531113,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19345.760065855768,\\\"ask\\\":19462.183897746574,\\\"price\\\":19403.971981801173,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6121232421542606,\\\"bias\\\":0.11212324215426062,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19375.980558045274,\\\"ask\\\":19492.58625849489,\\\"price\\\":19434.283408270083,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6119480916534661,\\\"bias\\\":0.11194809165346609,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19450.437301918962,\\\"ask\\\":19567.491087085975,\\\"price\\\":19508.96419450247,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6123782784180751,\\\"bias\\\":0.11237827841807513,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19544.339112474823,\\\"ask\\\":19661.958003823718,\\\"price\\\":19603.14855814927,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6118357444047361,\\\"bias\\\":0.11183574440473609,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19667.756191150875,\\\"ask\\\":19786.117813163815,\\\"price\\\":19726.937002157345,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6111295327090341,\\\"bias\\\":0.11112953270903414,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19784.33308571593,\\\"ask\\\":19903.39627379446,\\\"price\\\":19843.864679755196,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6104708334811317,\\\"bias\\\":0.11047083348113174,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19749.829450980902,\\\"ask\\\":19868.68499431679,\\\"price\\\":19809.25722264885,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6102778371164407,\\\"bias\\\":0.11027783711644068,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19829.202724515813,\\\"ask\\\":19948.53594051089,\\\"price\\\":19888.869332513354,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6098346376978327,\\\"bias\\\":0.10983463769783275,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19903.35768612033,\\\"ask\\\":20023.13717069076,\\\"price\\\":19963.247428405546,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6094238908082839,\\\"bias\\\":0.10942389080828385,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19937.24077106219,\\\"ask\\\":20057.22416587299,\\\"price\\\":19997.23246846759,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6096101718893655,\\\"bias\\\":0.1096101718893655,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19894.54710426505,\\\"ask\\\":20014.27356627667,\\\"price\\\":19954.410335270863,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6098453951458537,\\\"bias\\\":0.10984539514585367,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19885.552838350417,\\\"ask\\\":20005.225172382612,\\\"price\\\":19945.389005366516,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6098950783858154,\\\"bias\\\":0.10989507838581536,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19952.18819143076,\\\"ask\\\":20072.26154062693,\\\"price\\\":20012.224866028846,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6102633305239158,\\\"bias\\\":0.11026333052391579,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19976.495675717422,\\\"ask\\\":20096.715308670584,\\\"price\\\":20036.605492194005,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6103976628662328,\\\"bias\\\":0.11039766286623276,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":20041.518552987065,\\\"ask\\\":20162.129497137437,\\\"price\\\":20101.82402506225,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6100383218787075,\\\"bias\\\":0.11003832187870755,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":20015.301582246753,\\\"ask\\\":20135.754751247234,\\\"price\\\":20075.528166746994,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6101824551785807,\\\"bias\\\":0.11018245517858072,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19870.93255991112,\\\"ask\\\":19990.5169083158,\\\"price\\\":19930.72473411346,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.609381942505876,\\\"bias\\\":0.10938194250587596,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19990.871354938743,\\\"ask\\\":20111.177501508082,\\\"price\\\":20051.024428223413,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6087217249573346,\\\"bias\\\":0.10872172495733456,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":20044.788297052008,\\\"ask\\\":20165.41891869926,\\\"price\\\":20105.103607875633,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6090149559449639,\\\"bias\\\":0.10901495594496391,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":20024.7358373362,\\\"ask\\\":20145.24578219479,\\\"price\\\":20084.990809765495,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6091241218301103,\\\"bias\\\":0.10912412183011033,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":20165.573716129486,\\\"ask\\\":20286.931230970782,\\\"price\\\":20226.252473550136,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6098916130953423,\\\"bias\\\":0.10989161309534234,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":20305.474235432543,\\\"ask\\\":20427.673679176365,\\\"price\\\":20366.573957304456,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6106539962516813,\\\"bias\\\":0.11065399625168126,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":20312.058989900474,\\\"ask\\\":20434.298061053334,\\\"price\\\":20373.178525476906,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6106898796488265,\\\"bias\\\":0.11068987964882648,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5539275826120785,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":18691.47671176425,\\\"ask\\\":18803.963030992523,\\\"price\\\":18747.719871378384,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.11986611661615487},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.501637780985874,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":17606.430361027345,\\\"ask\\\":17712.386812548066,\\\"price\\\":17659.4085867877,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.11778546544043744},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.4380525156640396,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":16853.625563278638,\\\"ask\\\":16955.051594752724,\\\"price\\\":16904.338579015686,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.12626981737174653},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.3829117085411343,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":15453.157516696348,\\\"ask\\\":15546.155455613267,\\\"price\\\":15499.656486154807,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.12388935052816952},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.3819960608624091,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":14277.1897400978,\\\"ask\\\":14363.110641241814,\\\"price\\\":14320.150190669812,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.12054733316761246},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5560053631760327,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":14490.745133223636,\\\"ask\\\":14577.95122229017,\\\"price\\\":14534.348177756909,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.12743375040471439},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6203102629855273,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":16526.782909765243,\\\"ask\\\":16626.241984447868,\\\"price\\\":16576.512447106557,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.12588387192623252},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.511288973825076,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":17695.20365135506,\\\"ask\\\":17801.69434534517,\\\"price\\\":17748.448998350108,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.12035162579588315},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.3838159878761928,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":16482.81169818874,\\\"ask\\\":16582.006151738515,\\\"price\\\":16532.40892496363,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.1180870324939815},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6015148204474647,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":16007.956233643396,\\\"ask\\\":16104.292981288187,\\\"price\\\":16056.124607465794,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.12093510317491363},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6115080898018259,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":16882.45728390734,\\\"ask\\\":16984.05682623778,\\\"price\\\":16933.257055072547,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.11764205795800808},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6027861509372116,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":18552.108539119785,\\\"ask\\\":18663.756133136558,\\\"price\\\":18607.932336128175,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.10660924529980942},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5703329513520113,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19665.941882281644,\\\"ask\\\":19784.292585685536,\\\"price\\\":19725.11723398359,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.10613373197800291},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.38959484527165195,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19163.47467308925,\\\"ask\\\":19278.801501613354,\\\"price\\\":19221.1380873513,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.11468920908170233},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.3831136420633266,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":18735.6230301691,\\\"ask\\\":18848.375024332618,\\\"price\\\":18791.999027250866,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.12137025031468751},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5875460989439106,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":16940.830850794628,\\\"ask\\\":17042.781688412248,\\\"price\\\":16991.806269603436,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.12092534403633792},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.614478831366142,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":17483.116096903435,\\\"ask\\\":17588.33043650366,\\\"price\\\":17535.723266703553,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.11916283255228122},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6152759044637329,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":18165.661949872654,\\\"ask\\\":18274.98388738442,\\\"price\\\":18220.32291862853,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.11740094147539482},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6180069801047601,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19407.587931295428,\\\"ask\\\":19524.383846629193,\\\"price\\\":19465.985888962314,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.12318360896694491},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.6219745021504224,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":21199.10956921578,\\\"ask\\\":21326.686958799823,\\\"price\\\":21262.89826400779,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.1252741571337025},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.617496928929977,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22662.26068355045,\\\"ask\\\":22798.64339578846,\\\"price\\\":22730.45203966948,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.12012484123871947},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.4437901514373278,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23378.84902173823,\\\"ask\\\":23519.54420140766,\\\"price\\\":23449.196611572956,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.11617618846266498},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5438541990557565,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":24120.095042934223,\\\"ask\\\":24265.25108130693,\\\"price\\\":24192.673062120582,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.11541427316392616},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.38435137462933056,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23680.757165123596,\\\"ask\\\":23823.269244352017,\\\"price\\\":23752.01320473783,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.1193003830828781},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.38276615667551483,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22053.802898849743,\\\"ask\\\":22186.523879183835,\\\"price\\\":22120.16338901679,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.12019838206267397},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.44853910981757505,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":19770.08806817159,\\\"ask\\\":19889.065528963,\\\"price\\\":19829.57679856731,\\\"maxShares\\\":16800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.11644783569348477}],\\\"recentTicksOfPrices\\\":[19603.14855814927,19726.937002157345,19843.864679755196,19809.25722264885,19888.869332513354,19963.247428405546,19997.23246846759,19954.410335270863,19945.389005366516,20012.224866028846,20036.605492194005,20101.82402506225,20075.528166746994,19930.72473411346,20051.024428223413,20105.103607875633,20084.990809765495,20226.252473550136,20366.573957304456,20373.178525476906]}],[\\\"OMTK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18194.078527236285,\\\"ask\\\":18376.93358781152,\\\"price\\\":18285.506057523904,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.621069351013833,\\\"bias\\\":0.12106935101383298,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18128.352315589014,\\\"ask\\\":18310.546811223074,\\\"price\\\":18219.449563406044,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6215083004368256,\\\"bias\\\":0.12150830043682559,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18181.794848677324,\\\"ask\\\":18364.526455196694,\\\"price\\\":18273.16065193701,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6218665079150096,\\\"bias\\\":0.12186650791500964,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18091.60323532948,\\\"ask\\\":18273.428393473492,\\\"price\\\":18182.515814401486,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6224740459435055,\\\"bias\\\":0.12247404594350553,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18143.01117028796,\\\"ask\\\":18325.35299109487,\\\"price\\\":18234.182080691415,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6221260315798216,\\\"bias\\\":0.1221260315798216,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18155.509500290682,\\\"ask\\\":18337.976932454407,\\\"price\\\":18246.743216372546,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6222101615751284,\\\"bias\\\":0.12221016157512843,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18107.300060326466,\\\"ask\\\":18289.282975505626,\\\"price\\\":18198.291517916048,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6225355377177805,\\\"bias\\\":0.12253553771778047,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18138.129148071504,\\\"ask\\\":18320.421903328504,\\\"price\\\":18229.275525700006,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6227441640083706,\\\"bias\\\":0.12274416400837063,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18196.598688063892,\\\"ask\\\":18379.479076888652,\\\"price\\\":18288.038882476274,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6231398384876805,\\\"bias\\\":0.12313983848768051,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18257.95276430465,\\\"ask\\\":18441.44977701123,\\\"price\\\":18349.70127065794,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6235550331714983,\\\"bias\\\":0.1235550331714983,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18308.496647783493,\\\"ask\\\":18492.501639218503,\\\"price\\\":18400.499143500998,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6238970732282594,\\\"bias\\\":0.12389707322825938,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18257.82572438062,\\\"ask\\\":18441.32146030404,\\\"price\\\":18349.57359234233,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6242409246376309,\\\"bias\\\":0.12424092463763092,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18336.36427823065,\\\"ask\\\":18520.64934635357,\\\"price\\\":18428.50681229211,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6237064851760361,\\\"bias\\\":0.12370648517603611,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18343.169002153667,\\\"ask\\\":18527.522459461743,\\\"price\\\":18435.345730807705,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6237523933215298,\\\"bias\\\":0.12375239332152976,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18356.978501237794,\\\"ask\\\":18541.470747481388,\\\"price\\\":18449.22462435959,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6238455592604158,\\\"bias\\\":0.12384555926041585,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18378.27620300871,\\\"ask\\\":18562.982496506283,\\\"price\\\":18470.6293497575,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6237018740789683,\\\"bias\\\":0.12370187407896827,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18339.321816177944,\\\"ask\\\":18523.636608300334,\\\"price\\\":18431.47921223914,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6234391200522456,\\\"bias\\\":0.12343912005224555,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18382.88084952824,\\\"ask\\\":18567.63342088028,\\\"price\\\":18475.25713520426,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6231459309800988,\\\"bias\\\":0.12314593098009885,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18486.80660527616,\\\"ask\\\":18672.603656585467,\\\"price\\\":18579.705130930815,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6224497379269454,\\\"bias\\\":0.12244973792694536,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18395.178137509673,\\\"ask\\\":18580.054299695697,\\\"price\\\":18487.616218602685,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6218398019001898,\\\"bias\\\":0.12183980190018984,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18436.865652468965,\\\"ask\\\":18622.16078465458,\\\"price\\\":18529.513218561773,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.622115917658699,\\\"bias\\\":0.122115917658699,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18478.39321702632,\\\"ask\\\":18664.1057116698,\\\"price\\\":18571.24946434806,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6223909739914641,\\\"bias\\\":0.12239097399146415,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18379.999029427952,\\\"ask\\\":18564.72263776391,\\\"price\\\":18472.360833595932,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6217357748026078,\\\"bias\\\":0.12173577480260778,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18360.697967578104,\\\"ask\\\":18545.227595392957,\\\"price\\\":18452.96278148553,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6218637454126006,\\\"bias\\\":0.12186374541260059,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18354.259040120774,\\\"ask\\\":18538.72395509686,\\\"price\\\":18446.49149760882,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6219064968968568,\\\"bias\\\":0.12190649689685684,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18330.587716018104,\\\"ask\\\":18514.81472823939,\\\"price\\\":18422.701222128748,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6220639216473871,\\\"bias\\\":0.12206392164738711,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18272.542057032068,\\\"ask\\\":18456.185695796208,\\\"price\\\":18364.36387641414,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.621676166033071,\\\"bias\\\":0.12167616603307096,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18345.46664641841,\\\"ask\\\":18529.84319562864,\\\"price\\\":18437.654921023524,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6211905639521799,\\\"bias\\\":0.12119056395217986,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18441.233112619553,\\\"ask\\\":18626.572138877033,\\\"price\\\":18533.902625748295,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6205579285294723,\\\"bias\\\":0.12055792852947234,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18351.31333115272,\\\"ask\\\":18535.74864101355,\\\"price\\\":18443.530986083137,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6199672055445914,\\\"bias\\\":0.1199672055445914,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18377.81657757098,\\\"ask\\\":18562.518251717418,\\\"price\\\":18470.1674146442,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6201404640113443,\\\"bias\\\":0.12014046401134426,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18438.873552184356,\\\"ask\\\":18624.18886426661,\\\"price\\\":18531.531208225482,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6205396089930246,\\\"bias\\\":0.12053960899302463,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18495.87682270808,\\\"ask\\\":18681.765031981526,\\\"price\\\":18588.820927344805,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6209122538794277,\\\"bias\\\":0.12091225387942772,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18521.906090245844,\\\"ask\\\":18708.055900198062,\\\"price\\\":18614.980995221955,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.621082413825614,\\\"bias\\\":0.12108241382561402,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18489.105947290544,\\\"ask\\\":18674.926107564817,\\\"price\\\":18582.016027427682,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6212972170991836,\\\"bias\\\":0.12129721709918362,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18482.19540645423,\\\"ask\\\":18667.946114056784,\\\"price\\\":18575.07076025551,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6213425704435056,\\\"bias\\\":0.1213425704435056,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18533.393173228575,\\\"ask\\\":18719.65843125097,\\\"price\\\":18626.525802239772,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6216787030557167,\\\"bias\\\":0.12167870305571671,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18552.05846772085,\\\"ask\\\":18738.511316642667,\\\"price\\\":18645.28489218176,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6215561583708472,\\\"bias\\\":0.12155615837084721,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18502.273023235295,\\\"ask\\\":18688.225515931124,\\\"price\\\":18595.24926958321,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6218832385823894,\\\"bias\\\":0.12188323858238936,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18522.307402103645,\\\"ask\\\":18708.461245340866,\\\"price\\\":18615.384323722257,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6217512626367099,\\\"bias\\\":0.12175126263670988,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18411.7263535562,\\\"ask\\\":18596.768829471337,\\\"price\\\":18504.24759151377,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6224825021753501,\\\"bias\\\":0.12248250217535006,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18503.594799439543,\\\"ask\\\":18689.56057631833,\\\"price\\\":18596.577687878937,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6218713548604987,\\\"bias\\\":0.12187135486049872,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18544.85012935652,\\\"ask\\\":18731.230532666636,\\\"price\\\":18638.04033101158,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6215996323651298,\\\"bias\\\":0.12159963236512983,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18560.201763466703,\\\"ask\\\":18746.73645455682,\\\"price\\\":18653.469109011763,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6214989708310122,\\\"bias\\\":0.12149897083101224,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18668.112783776585,\\\"ask\\\":18855.732007734136,\\\"price\\\":18761.922395755362,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6207925626746751,\\\"bias\\\":0.12079256267467509,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18775.175827619936,\\\"ask\\\":18963.871062068378,\\\"price\\\":18869.52344484416,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6200998081588128,\\\"bias\\\":0.12009980815881283,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":18780.208989371946,\\\"ask\\\":18968.954808360606,\\\"price\\\":18874.581898866276,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6201320039564127,\\\"bias\\\":0.12013200395641266,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.5545136051934206,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":36441.48847790603,\\\"ask\\\":36807.73459326186,\\\"price\\\":36624.61153558394,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.12821707366496837},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.37673472692382454,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":35143.966503706244,\\\"ask\\\":35497.17219721083,\\\"price\\\":35320.56935045855,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.12647846598776885},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3827156193422065,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":31828.560214101664,\\\"ask\\\":32148.445241379068,\\\"price\\\":31988.50272774037,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.11925844187517642},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3831393916182085,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":30916.256326999675,\\\"ask\\\":31226.97247098961,\\\"price\\\":31071.61439899465,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.11998100133766942},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.38144287822307205,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":29648.912284576363,\\\"ask\\\":29946.891302511805,\\\"price\\\":29797.901793544082,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.1246378874834167},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.37911077275761473,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":27898.12528591786,\\\"ask\\\":28178.508454620573,\\\"price\\\":28038.31687026922,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.1237837910161872},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.4287950109442707,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":26307.763810781285,\\\"ask\\\":26572.16344707055,\\\"price\\\":26439.963628925918,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.12573233796161987},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6223227317323679,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":27171.398925491525,\\\"ask\\\":27444.478311677358,\\\"price\\\":27307.93861858444,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.12459566752065099},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6271619970242142,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":28973.62900368049,\\\"ask\\\":29264.821254973762,\\\"price\\\":29119.225129327133,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.13035238061697352},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.43449606025388265,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":28231.432708861816,\\\"ask\\\":28515.16570091068,\\\"price\\\":28373.299204886254,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.13374768255675012},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6290093200048327,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":28529.551047236524,\\\"ask\\\":28816.280203490158,\\\"price\\\":28672.915625363345,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.13198260064262624},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.4593366747562689,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":29781.40954126157,\\\"ask\\\":30080.720189917454,\\\"price\\\":29931.06486558951,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.13196663948973741},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3726047610495542,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":27681.066836298254,\\\"ask\\\":27959.268513044946,\\\"price\\\":27820.16767467161,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.13121076514645635},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3794700814912711,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":25619.770071947547,\\\"ask\\\":25877.255198298782,\\\"price\\\":25748.512635123163,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.12473318340621808},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3796856755133159,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":24137.28951704357,\\\"ask\\\":24379.87534133545,\\\"price\\\":24258.58242918952,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.1249838857993627},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3765373777853758,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22606.146129058405,\\\"ask\\\":22833.343577591655,\\\"price\\\":22719.744853325043,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.12596524404120785},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3772957322643902,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21131.30135998143,\\\"ask\\\":21343.67624802144,\\\"price\\\":21237.48880400144,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.1249252830406789},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.5234383008548612,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":20891.5148450156,\\\"ask\\\":21101.479818332322,\\\"price\\\":20996.497331673945,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.12244747776528625},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.416062292264332,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21538.862165665683,\\\"ask\\\":21755.333142205025,\\\"price\\\":21647.09765393535,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.12636056168682797},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.4599307688121712,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":19485.796405725225,\\\"ask\\\":19681.63355553151,\\\"price\\\":19583.71498062837,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.12378282686040631},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6259086283947859,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":19919.69857404576,\\\"ask\\\":20119.896549664318,\\\"price\\\":20019.797561855034,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.12813881243583614},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6117216266181954,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":20566.806998183674,\\\"ask\\\":20773.50857605487,\\\"price\\\":20670.15778711928,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.12958024074100166},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.44865930939400805,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":19543.58181534168,\\\"ask\\\":19739.999723033554,\\\"price\\\":19641.79076918761,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.12901321387644216},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.49193202993700447,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":19157.65347189822,\\\"ask\\\":19350.19270277157,\\\"price\\\":19253.92308733489,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.12069965752904654},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3921947432367206,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":17586.90604679423,\\\"ask\\\":17763.658871385116,\\\"price\\\":17675.282459089678,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.11733868432371153},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6160085418545495,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":17648.609571060995,\\\"ask\\\":17825.98253157417,\\\"price\\\":17737.296051317582,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.12106935101383298}],\\\"recentTicksOfPrices\\\":[18437.654921023524,18533.902625748295,18443.530986083137,18470.1674146442,18531.531208225482,18588.820927344805,18614.980995221955,18582.016027427682,18575.07076025551,18626.525802239772,18645.28489218176,18595.24926958321,18615.384323722257,18504.24759151377,18596.577687878937,18638.04033101158,18653.469109011763,18761.922395755362,18869.52344484416,18874.581898866276]}],[\\\"FSIG\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":64742.69017199751,\\\"ask\\\":65132.31518807773,\\\"price\\\":64937.50268003762,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33651663836950896,\\\"bias\\\":0.16348336163049104,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":65140.21899127452,\\\"ask\\\":65532.2363573203,\\\"price\\\":65336.22767429741,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3375204481825975,\\\"bias\\\":0.16247955181740248,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":65465.43770345177,\\\"ask\\\":65859.41225332208,\\\"price\\\":65662.42497838693,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33833164273207045,\\\"bias\\\":0.16166835726792955,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":66018.14956692929,\\\"ask\\\":66415.45036673026,\\\"price\\\":66216.79996682979,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33696670846834975,\\\"bias\\\":0.16303329153165025,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":65701.9734017809,\\\"ask\\\":66097.37143629511,\\\"price\\\":65899.672419038,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3361821469363426,\\\"bias\\\":0.16381785306365743,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":65625.41157817192,\\\"ask\\\":66020.34885948487,\\\"price\\\":65822.8802188284,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33637326487783265,\\\"bias\\\":0.16362673512216735,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":65330.83770535863,\\\"ask\\\":65724.00222515015,\\\"price\\\":65527.41996525439,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3356354791283507,\\\"bias\\\":0.16436452087164932,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":65143.00449989839,\\\"ask\\\":65535.03862928593,\\\"price\\\":65339.02156459216,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3351615508062497,\\\"bias\\\":0.1648384491937503,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":64789.30202545039,\\\"ask\\\":65179.20755418931,\\\"price\\\":64984.25478981985,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33426165274374087,\\\"bias\\\":0.16573834725625913,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":64421.443129161795,\\\"ask\\\":64809.134863138686,\\\"price\\\":64615.288996150244,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33520805075243104,\\\"bias\\\":0.16479194924756896,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":64120.826328647345,\\\"ask\\\":64506.708934436596,\\\"price\\\":64313.767631541974,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33598064261329436,\\\"bias\\\":0.16401935738670564,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":64422.20081382034,\\\"ask\\\":64809.89710758454,\\\"price\\\":64616.04896070244,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33520973474729987,\\\"bias\\\":0.16479026525270013,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":63956.27729919716,\\\"ask\\\":64341.169640014785,\\\"price\\\":64148.723469605975,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33400923242282843,\\\"bias\\\":0.16599076757717157,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":63996.47285776744,\\\"ask\\\":64381.60709763364,\\\"price\\\":64189.039977700544,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33411355512424307,\\\"bias\\\":0.16588644487575693,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":63914.98294645712,\\\"ask\\\":64299.626775623365,\\\"price\\\":64107.30486104025,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3339020542983438,\\\"bias\\\":0.1660979457016562,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":63789.64593266528,\\\"ask\\\":64173.53547689394,\\\"price\\\":63981.59070477961,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33422841165942996,\\\"bias\\\":0.16577158834057004,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":64019.11328374698,\\\"ask\\\":64404.38377492298,\\\"price\\\":64211.74852933498,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3348247336283789,\\\"bias\\\":0.1651752663716211,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":63762.630159886205,\\\"ask\\\":64146.357121731045,\\\"price\\\":63954.49364080863,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33416032144529767,\\\"bias\\\":0.16583967855470233,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":63157.93685056171,\\\"ask\\\":63538.02473531934,\\\"price\\\":63347.98079294053,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33574812100055906,\\\"bias\\\":0.16425187899944094,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":62629.60872083113,\\\"ask\\\":63006.51709828849,\\\"price\\\":62818.06290955981,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3371337098587512,\\\"bias\\\":0.16286629014124882,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":62390.158244132406,\\\"ask\\\":62765.625595651756,\\\"price\\\":62577.891919892085,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33650863673968845,\\\"bias\\\":0.16349136326031155,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":62153.07024722734,\\\"ask\\\":62527.11079034003,\\\"price\\\":62340.09051878369,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3371322879876877,\\\"bias\\\":0.16286771201231232,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":62716.557578784035,\\\"ask\\\":63093.989219177914,\\\"price\\\":62905.27339898098,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33860886657139255,\\\"bias\\\":0.16139113342860745,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":62828.21094934868,\\\"ask\\\":63206.31452577405,\\\"price\\\":63017.26273756137,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33832154429602823,\\\"bias\\\":0.16167845570397177,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":62790.90560683113,\\\"ask\\\":63168.78467768468,\\\"price\\\":62979.84514225791,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3384176007250517,\\\"bias\\\":0.16158239927494827,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":62928.22773283728,\\\"ask\\\":63306.93321568283,\\\"price\\\":63117.58047426006,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33806422409543996,\\\"bias\\\":0.16193577590456004,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":62591.496252966936,\\\"ask\\\":62968.175267528415,\\\"price\\\":62779.835760247675,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3371930374849792,\\\"bias\\\":0.1628069625150208,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":63014.54261563992,\\\"ask\\\":63393.76754612521,\\\"price\\\":63204.15508088256,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3360926500931927,\\\"bias\\\":0.16390734990680728,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":63571.6297090721,\\\"ask\\\":63954.20721985889,\\\"price\\\":63762.918464465496,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3346436088820438,\\\"bias\\\":0.1653563911179562,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":64099.16199809656,\\\"ask\\\":64484.914226771165,\\\"price\\\":64292.03811243387,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33601577498680596,\\\"bias\\\":0.16398422501319404,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":64255.93883047631,\\\"ask\\\":64642.63455061959,\\\"price\\\":64449.28669054795,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33641685554006784,\\\"bias\\\":0.16358314445993216,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":64617.47541540581,\\\"ask\\\":65006.34688229892,\\\"price\\\":64811.91114885237,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33733725749008997,\\\"bias\\\":0.16266274250991003,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":64280.9288668859,\\\"ask\\\":64667.77497842182,\\\"price\\\":64474.35192265386,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3364856272238588,\\\"bias\\\":0.16351437277614123,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":64128.09030610765,\\\"ask\\\":64514.01662690669,\\\"price\\\":64321.053466507175,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33687533634013483,\\\"bias\\\":0.16312466365986517,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":64320.75659942529,\\\"ask\\\":64707.8423964128,\\\"price\\\":64514.29949791905,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33736542772046463,\\\"bias\\\":0.16263457227953537,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":64361.48592642683,\\\"ask\\\":64748.81683471024,\\\"price\\\":64555.15138056854,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3374684115320106,\\\"bias\\\":0.16253158846798937,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":64060.95547649882,\\\"ask\\\":64446.47777625709,\\\"price\\\":64253.71662637796,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3382308992446349,\\\"bias\\\":0.1617691007553651,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":63951.87906879288,\\\"ask\\\":64336.74494082172,\\\"price\\\":64144.3120048073,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.338506812832244,\\\"bias\\\":0.161493187167756,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":63661.77510863919,\\\"ask\\\":64044.89511932306,\\\"price\\\":63853.33511398113,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33777089535185234,\\\"bias\\\":0.16222910464814766,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":63545.246790715355,\\\"ask\\\":63927.665527670506,\\\"price\\\":63736.45615919293,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33747340205947124,\\\"bias\\\":0.16252659794052876,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":62905.40622178995,\\\"ask\\\":63283.97436354595,\\\"price\\\":63094.690292667954,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33582026734279635,\\\"bias\\\":0.16417973265720365,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":62378.294150964706,\\\"ask\\\":62753.69010372878,\\\"price\\\":62565.99212734675,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3344329078446506,\\\"bias\\\":0.16556709215534943,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":62143.64537656267,\\\"ask\\\":62517.62920029323,\\\"price\\\":62330.637288427955,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3350580741833831,\\\"bias\\\":0.16494192581661687,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":62056.6457896585,\\\"ask\\\":62430.10604516296,\\\"price\\\":62243.37591741073,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33528931258221417,\\\"bias\\\":0.16471068741778583,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":61451.5645888014,\\\"ask\\\":61821.38343286639,\\\"price\\\":61636.474010833896,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.33691113199728745,\\\"bias\\\":0.16308886800271255,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":60860.44964791917,\\\"ask\\\":61226.71113025369,\\\"price\\\":61043.58038908643,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3353271104015603,\\\"bias\\\":0.16467288959843968,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":60888.080204996055,\\\"ask\\\":61254.50796951959,\\\"price\\\":61071.294087257826,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3352523491452537,\\\"bias\\\":0.1647476508547463,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.5778757532690685,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":81978.76264835587,\\\"ask\\\":82472.11528214737,\\\"price\\\":82225.43896525164,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.18781681158195362},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3089201005905628,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":74012.328282408,\\\"ask\\\":74457.73848270332,\\\"price\\\":74235.03338255569,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.20267602536480306},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.6026016779429011,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":63944.09574970571,\\\"ask\\\":64328.91478129875,\\\"price\\\":64136.50526550223,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.2085021176182491},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.31734523550744326,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":62476.02860379955,\\\"ask\\\":62852.012727794325,\\\"price\\\":62664.02066579693,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.19770914861404598},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.31577050017410946,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":52380.229816508145,\\\"ask\\\":52695.45687658745,\\\"price\\\":52537.843346547794,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.19577434666082022},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.5824156074605219,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49848.047102972436,\\\"ask\\\":50148.03535033234,\\\"price\\\":49998.04122665242,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.18916853103420495},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.40546643578041575,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":48092.59402828839,\\\"ask\\\":48382.01786396516,\\\"price\\\":48237.30594612678,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.19431893883818335},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.520706399749621,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":52662.528856723824,\\\"ask\\\":52979.45480771716,\\\"price\\\":52820.99183222046,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.19436997321391924},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3170638094174381,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":47898.23564060172,\\\"ask\\\":48186.48981697444,\\\"price\\\":48042.36272878809,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.1891147446425755},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.5975948688898071,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49007.43197064135,\\\"ask\\\":49302.36135060507,\\\"price\\\":49154.896660623184,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.19507636477951962},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.4721660234818247,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":48663.629713365,\\\"ask\\\":48956.490072723274,\\\"price\\\":48810.05989304415,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.1838056503542832},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.681463830757697,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":56356.08508381621,\\\"ask\\\":56695.23905623638,\\\"price\\\":56525.6620700263,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.1882571146932901},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.6235513090037571,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":66370.42524204272,\\\"ask\\\":66769.84605593662,\\\"price\\\":66570.13564898969,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.18957702135577637},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.32083989453738243,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":58506.644488362625,\\\"ask\\\":58858.740643759,\\\"price\\\":58682.69256606084,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.18600395791435176},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3283550327817235,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":46759.74256472663,\\\"ask\\\":47041.145228105124,\\\"price\\\":46900.44389641588,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.18208605534670153},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.585044418090789,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":44708.93526303794,\\\"ask\\\":44977.996056998054,\\\"price\\\":44843.46566001801,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.17689272485231028},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.4501882458482617,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":44478.280278345446,\\\"ask\\\":44745.95297811483,\\\"price\\\":44612.11662823014,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.17932495406891957},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.6730854653289378,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":51511.987509777624,\\\"ask\\\":51821.98944062883,\\\"price\\\":51666.98847520324,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.17953672884263427},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3838509354801824,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":55710.9764443033,\\\"ask\\\":56046.24811799016,\\\"price\\\":55878.61228114672,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.1793399274184455},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.43866377690838937,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":48061.688561664465,\\\"ask\\\":48350.926406569146,\\\"price\\\":48206.3074841168,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.17286348855274364},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.47737762469288475,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50951.8952786642,\\\"ask\\\":51258.52654413256,\\\"price\\\":51105.210911398375,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.15910620809941206},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.6043554380131664,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":46680.76479438147,\\\"ask\\\":46961.69216526037,\\\"price\\\":46821.22847982088,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.17097427128178222},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.6731471701379828,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":54535.427282321194,\\\"ask\\\":54863.624437480605,\\\"price\\\":54699.525859900896,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.17721348521931957},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.6716372438213414,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":68085.32806082646,\\\"ask\\\":68495.06925276724,\\\"price\\\":68290.19865679689,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.17846472932006863},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.40145875065948017,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":73423.39465892786,\\\"ask\\\":73865.260624779,\\\"price\\\":73644.32764185348,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.1780982592610077},{\\\"volatility\\\":0.0105,\\\"forecast\\\":0.3349484105669007,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":66849.10945418995,\\\"ask\\\":67251.41101559928,\\\"price\\\":67050.26023489465,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.17279522776656975}],\\\"recentTicksOfPrices\\\":[63204.15508088256,63762.918464465496,64292.03811243387,64449.28669054795,64811.91114885237,64474.35192265386,64321.053466507175,64514.29949791905,64555.15138056854,64253.71662637796,64144.3120048073,63853.33511398113,63736.45615919293,63094.690292667954,62565.99212734675,62330.637288427955,62243.37591741073,61636.474010833896,61043.58038908643,61071.294087257826]}],[\\\"KGI\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27284.739270244037,\\\"ask\\\":27614.132500870724,\\\"price\\\":27449.43588555738,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.577568037801323,\\\"bias\\\":0.07756803780132304,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27418.764843263212,\\\"ask\\\":27749.776088855928,\\\"price\\\":27584.27046605957,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5771870152593326,\\\"bias\\\":0.07718701525933258,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27309.687880856753,\\\"ask\\\":27639.382301953618,\\\"price\\\":27474.535091405185,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5774953060460468,\\\"bias\\\":0.07749530604604682,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27126.46910994754,\\\"ask\\\":27453.95163441371,\\\"price\\\":27290.210372180623,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5769718838982014,\\\"bias\\\":0.07697188389820142,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27022.437523354554,\\\"ask\\\":27348.664133294445,\\\"price\\\":27185.5508283245,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.57667555581166,\\\"bias\\\":0.07667555581165997,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27047.658084053764,\\\"ask\\\":27374.18916756347,\\\"price\\\":27210.923625808617,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5766039930406175,\\\"bias\\\":0.07660399304061749,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27145.223444268897,\\\"ask\\\":27472.932379209768,\\\"price\\\":27309.077911739332,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5768803162680001,\\\"bias\\\":0.07688031626800007,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27082.75116497442,\\\"ask\\\":27409.705907408716,\\\"price\\\":27246.228536191567,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.576702975031104,\\\"bias\\\":0.07670297503110401,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27201.03286645838,\\\"ask\\\":27529.415556999127,\\\"price\\\":27365.224211728753,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5763679810587304,\\\"bias\\\":0.07636798105873044,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27325.291392093746,\\\"ask\\\":27655.174185559667,\\\"price\\\":27490.232788826706,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5760191203085268,\\\"bias\\\":0.07601912030852676,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27427.778426547273,\\\"ask\\\":27758.898488034763,\\\"price\\\":27593.338457291018,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5757340007798676,\\\"bias\\\":0.07573400077986758,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27325.03404797256,\\\"ask\\\":27654.913734668404,\\\"price\\\":27489.973891320482,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5760187668604311,\\\"bias\\\":0.07601876686043108,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27166.70579524279,\\\"ask\\\":27494.67407446101,\\\"price\\\":27330.6899348519,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5764618061682661,\\\"bias\\\":0.07646180616826614,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27180.36488811145,\\\"ask\\\":27508.498065835127,\\\"price\\\":27344.43147697329,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5765002502446009,\\\"bias\\\":0.07650025024460094,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27208.08828468617,\\\"ask\\\":27536.556151302102,\\\"price\\\":27372.322217994137,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5764222216094326,\\\"bias\\\":0.07642222160943257,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27250.85610992461,\\\"ask\\\":27579.84028831404,\\\"price\\\":27415.348199119326,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5765423481021111,\\\"bias\\\":0.07654234810211114,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27172.658616855104,\\\"ask\\\":27500.698761122974,\\\"price\\\":27336.67868898904,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5763220744873856,\\\"bias\\\":0.0763220744873856,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27260.099531361648,\\\"ask\\\":27589.195300351927,\\\"price\\\":27424.647415856787,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5765676769543474,\\\"bias\\\":0.07656767695434741,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27468.896722911926,\\\"ask\\\":27800.51318234346,\\\"price\\\":27634.704952627693,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5759812111605156,\\\"bias\\\":0.0759812111605156,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27654.273462480174,\\\"ask\\\":27988.127870477925,\\\"price\\\":27821.20066647905,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5764939783581015,\\\"bias\\\":0.07649397835810146,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27739.182097427845,\\\"ask\\\":28074.061559368623,\\\"price\\\":27906.621828398234,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5767288425751244,\\\"bias\\\":0.07672884257512436,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27823.832810167914,\\\"ask\\\":28159.73421230274,\\\"price\\\":27991.783511235328,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5769629933582617,\\\"bias\\\":0.07696299335826173,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27623.482515145042,\\\"ask\\\":27956.965201444582,\\\"price\\\":27790.223858294812,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.577521198081968,\\\"bias\\\":0.077521198081968,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27584.196321992,\\\"ask\\\":27917.204728293713,\\\"price\\\":27750.700525142856,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5774107901974768,\\\"bias\\\":0.07741079019747676,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27597.306983568462,\\\"ask\\\":27930.473667474722,\\\"price\\\":27763.890325521592,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5774475832459599,\\\"bias\\\":0.0774475832459599,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27549.107621045714,\\\"ask\\\":27881.692421299787,\\\"price\\\":27715.40002117275,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5775830839740681,\\\"bias\\\":0.0775830839740681,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27431.048165736807,\\\"ask\\\":27762.20770093685,\\\"price\\\":27596.62793333683,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5772491770602738,\\\"bias\\\":0.07724917706027379,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27579.369977427286,\\\"ask\\\":27912.320117999847,\\\"price\\\":27745.845047713567,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5768314847495772,\\\"bias\\\":0.07683148474957724,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27774.42477489688,\\\"ask\\\":28109.7297017568,\\\"price\\\":27942.07723832684,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5762880949002303,\\\"bias\\\":0.07628809490023025,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27591.257793681198,\\\"ask\\\":27924.351449138117,\\\"price\\\":27757.804621409658,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5757816497011727,\\\"bias\\\":0.07578164970117274,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27645.245020514463,\\\"ask\\\":27978.99043323697,\\\"price\\\":27812.117726875716,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5759299300420984,\\\"bias\\\":0.07592993004209836,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27521.365662617176,\\\"ask\\\":27853.615549892234,\\\"price\\\":27687.490606254705,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5755881537256863,\\\"bias\\\":0.07558815372568628,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27406.574687682845,\\\"ask\\\":27737.438768419463,\\\"price\\\":27572.006728051154,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.575271556779204,\\\"bias\\\":0.07527155677920405,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27458.829871470574,\\\"ask\\\":27790.324799496375,\\\"price\\\":27624.577335483475,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5751280390620755,\\\"bias\\\":0.07512803906207555,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27392.990319628923,\\\"ask\\\":27723.69040397052,\\\"price\\\":27558.34036179972,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5753086106741878,\\\"bias\\\":0.07530861067418781,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27406.8669979426,\\\"ask\\\":27737.734607575712,\\\"price\\\":27572.300802759157,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5753467603377471,\\\"bias\\\":0.07534676033774712,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27509.72650740503,\\\"ask\\\":27841.8358817399,\\\"price\\\":27675.781194572464,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.575629540956506,\\\"bias\\\":0.07562954095650598,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27472.241155349824,\\\"ask\\\":27803.89799022326,\\\"price\\\":27638.069572786542,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5755263458821582,\\\"bias\\\":0.07552634588215823,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27572.393008669827,\\\"ask\\\":27905.258920243305,\\\"price\\\":27738.825964456566,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5752510096446881,\\\"bias\\\":0.07525100964468812,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27612.84248038584,\\\"ask\\\":27946.196715561524,\\\"price\\\":27779.51959797368,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5751406143088438,\\\"bias\\\":0.07514061430884378,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27389.96547007067,\\\"ask\\\":27720.629037113777,\\\"price\\\":27555.297253592224,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5757520468237441,\\\"bias\\\":0.07575204682374415,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27575.127076238605,\\\"ask\\\":27908.02599466402,\\\"price\\\":27741.576535451313,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5752399479430165,\\\"bias\\\":0.07523994794301647,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27658.424021349714,\\\"ask\\\":27992.328536698,\\\"price\\\":27825.376279023858,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.575012668561977,\\\"bias\\\":0.07501266856197697,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27689.444343942512,\\\"ask\\\":28023.723350106808,\\\"price\\\":27856.58384702466,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5749285380570884,\\\"bias\\\":0.07492853805708843,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27907.559047407707,\\\"ask\\\":28244.471229066552,\\\"price\\\":28076.01513823713,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5743383125669559,\\\"bias\\\":0.07433831256695589,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":28124.40365124365,\\\"ask\\\":28463.93367520233,\\\"price\\\":28294.16866322299,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5749159289006176,\\\"bias\\\":0.0749159289006176,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":28134.618402463326,\\\"ask\\\":28474.271743338133,\\\"price\\\":28304.44507290073,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5749431382802581,\\\"bias\\\":0.07494313828025811,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5448366865508141,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":22664.39610147475,\\\"ask\\\":22938.010541331594,\\\"price\\\":22801.20332140317,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.09987503545297682},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.4048688622756994,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":23137.491717737794,\\\"ask\\\":23416.817573485136,\\\"price\\\":23277.15464561147,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.09787412671857687},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.3998004113493849,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":21520.174336343433,\\\"ask\\\":21779.975233764086,\\\"price\\\":21650.07478505376,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.10241403058102838},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5930526544491282,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":21722.062986204102,\\\"ask\\\":21984.301171148207,\\\"price\\\":21853.182078676145,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.09706782367186828},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5954263539245748,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":22623.727339218967,\\\"ask\\\":22896.850808102903,\\\"price\\\":22760.28907366094,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.09864233397481226},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5944986276798057,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":24706.068186493576,\\\"ask\\\":25004.33057908707,\\\"price\\\":24855.199382790328,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.09817647362131199},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5589589332615287,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":26005.275254667198,\\\"ask\\\":26319.22223963301,\\\"price\\\":26162.248747150108,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.10373268233444877},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.4003348347130929,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":25303.005433031576,\\\"ask\\\":25608.474311498776,\\\"price\\\":25455.739872265163,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.10197328467798628},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5368837669147051,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":24114.671305125623,\\\"ask\\\":24405.79409754162,\\\"price\\\":24260.23270133362,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.10107143639643434},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5621997442243665,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":26370.613497562525,\\\"ask\\\":26688.971004575338,\\\"price\\\":26529.792251068928,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.09865046089183305},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.48369990741134444,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27928.170987559413,\\\"ask\\\":28265.332005517892,\\\"price\\\":28096.75149653868,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.09891263179493842},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.46983849793349264,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":28761.705546530346,\\\"ask\\\":29108.929355945205,\\\"price\\\":28935.317451237785,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.09610871179392277},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5466096539702061,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27911.57571261725,\\\"ask\\\":28248.536385204177,\\\"price\\\":28080.056048910727,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.09484087353083548},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.4079790222277461,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":28221.752752484186,\\\"ask\\\":28562.458017101682,\\\"price\\\":28392.105384792932,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.09593568889903387},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.4097921127448305,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":25897.698170331107,\\\"ask\\\":26210.34643798098,\\\"price\\\":26054.022304156046,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.09529992652750979},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5651255936640843,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":24491.010686064,\\\"ask\\\":24786.676811046666,\\\"price\\\":24638.843748555333,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.08968733123284778},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5249179748887629,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":26673.2721411444,\\\"ask\\\":26995.283474840307,\\\"price\\\":26834.277807992356,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.09561527157236471},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5204459726274755,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":26535.714592782595,\\\"ask\\\":26856.065271971118,\\\"price\\\":26695.88993237686,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.09963656065423265},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.4523409473687178,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27467.767508814293,\\\"ask\\\":27799.370335882475,\\\"price\\\":27633.5689223484,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.09792563008780503},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5925628064826105,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27717.874644571966,\\\"ask\\\":28052.496873681495,\\\"price\\\":27885.18575912674,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.09658219134298562},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5873286704020877,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":29987.39192702656,\\\"ask\\\":30349.412755119454,\\\"price\\\":30168.402341073015,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.09176283029823029},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5726620802534239,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":30544.721664051114,\\\"ask\\\":30913.470818949132,\\\"price\\\":30729.096241500123,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.08608885869442773},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.4206305300004388,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":30591.123594944693,\\\"ask\\\":30960.43293411909,\\\"price\\\":30775.77826453188,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.08212325354838257},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.4243773532989282,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27910.504972935218,\\\"ask\\\":28247.45271908736,\\\"price\\\":28078.97884601126,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.0790311574613648},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.5382481408945449,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27350.57478854448,\\\"ask\\\":27680.762814160706,\\\"price\\\":27515.668801352596,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.07717533264609555},{\\\"volatility\\\":0.0084,\\\"forecast\\\":0.4658286201171068,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":27460.502553113325,\\\"ask\\\":27792.017674478873,\\\"price\\\":27626.260113796117,\\\"maxShares\\\":17000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.07756803780132304}],\\\"recentTicksOfPrices\\\":[27745.845047713567,27942.07723832684,27757.804621409658,27812.117726875716,27687.490606254705,27572.006728051154,27624.577335483475,27558.34036179972,27572.300802759157,27675.781194572464,27638.069572786542,27738.825964456566,27779.51959797368,27555.297253592224,27741.576535451313,27825.376279023858,27856.58384702466,28076.01513823713,28294.16866322299,28304.44507290073]}],[\\\"FLCM\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":74488.14990813083,\\\"ask\\\":75689.57168084262,\\\"price\\\":75088.86079448673,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":153919,\\\"averageShortPrice\\\":82234.1478924935,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.37404583881173403,\\\"bias\\\":0.12595416118826597,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":73939.03143184548,\\\"ask\\\":75131.59645493975,\\\"price\\\":74535.31394339261,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":153919,\\\"averageShortPrice\\\":82234.1478924935,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.37311042275699097,\\\"bias\\\":0.12688957724300903,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":73495.21863594228,\\\"ask\\\":74680.6253881349,\\\"price\\\":74087.92201203859,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":153919,\\\"averageShortPrice\\\":82234.1478924935,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.37234417946807513,\\\"bias\\\":0.12765582053192487,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":74245.73509100702,\\\"ask\\\":75443.2469473136,\\\"price\\\":74844.49101916031,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":153919,\\\"averageShortPrice\\\":82234.1478924935,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.37364777167001934,\\\"bias\\\":0.12635222832998066,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":73816.08378522428,\\\"ask\\\":75006.66578176017,\\\"price\\\":74411.37478349223,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":153919,\\\"averageShortPrice\\\":82234.1478924935,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.37291233032571164,\\\"bias\\\":0.12708766967428836,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":73712.06943629128,\\\"ask\\\":74900.97378203792,\\\"price\\\":74306.5216091646,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":153919,\\\"averageShortPrice\\\":82234.1478924935,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.372732998211993,\\\"bias\\\":0.12726700178800698,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":73312.2471932155,\\\"ask\\\":74494.70279310609,\\\"price\\\":73903.4749931608,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":153919,\\\"averageShortPrice\\\":82234.1478924935,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.37342707294128485,\\\"bias\\\":0.12657292705871515,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":73057.45650316442,\\\"ask\\\":74235.8025757961,\\\"price\\\":73646.62953948026,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":153919,\\\"averageShortPrice\\\":82234.1478924935,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.37298564498894876,\\\"bias\\\":0.12701435501105124,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":72578.2138162011,\\\"ask\\\":73748.83016807532,\\\"price\\\":73163.52199213821,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":153919,\\\"averageShortPrice\\\":82234.1478924935,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3738243360723717,\\\"bias\\\":0.1261756639276283,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":73079.48358308795,\\\"ask\\\":74258.18493120227,\\\"price\\\":73668.8342571451,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":153919,\\\"averageShortPrice\\\":82234.1478924935,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.37295288936242693,\\\"bias\\\":0.12704711063757307,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":72667.41616365609,\\\"ask\\\":73839.4712630699,\\\"price\\\":73253.443713363,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":153919,\\\"averageShortPrice\\\":82234.1478924935,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.37367332195505953,\\\"bias\\\":0.12632667804494047,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":72256.64534116488,\\\"ask\\\":73422.07510473205,\\\"price\\\":72839.36022294847,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":153919,\\\"averageShortPrice\\\":82234.1478924935,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3729551691374454,\\\"bias\\\":0.12704483086255458,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":72893.32894974538,\\\"ask\\\":74069.02780377354,\\\"price\\\":73481.17837675946,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3719567812168536,\\\"bias\\\":0.1280432187831464,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":72837.95989792401,\\\"ask\\\":74012.76570272923,\\\"price\\\":73425.36280032662,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.37205411551377954,\\\"bias\\\":0.12794588448622046,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":72950.28410536138,\\\"ask\\\":74126.90159093172,\\\"price\\\":73538.59284814655,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3722514222490304,\\\"bias\\\":0.1277485777509696,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":73123.65275285764,\\\"ask\\\":74303.066506936,\\\"price\\\":73713.35962989682,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3719478237310003,\\\"bias\\\":0.12805217626899967,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":73441.81087173148,\\\"ask\\\":74626.3562083723,\\\"price\\\":74034.08354005188,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3725049736816072,\\\"bias\\\":0.12749502631839282,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":73086.22660770541,\\\"ask\\\":74265.0367142813,\\\"price\\\":73675.63166099336,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.37312527147511276,\\\"bias\\\":0.12687472852488724,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":72249.5515804618,\\\"ask\\\":73414.86692853378,\\\"price\\\":72832.2092544978,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3716560178310003,\\\"bias\\\":0.12834398216899973,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":71519.81712404646,\\\"ask\\\":72673.36256153109,\\\"price\\\":72096.58984278877,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3703464923060701,\\\"bias\\\":0.12965350769392991,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":71189.34938849189,\\\"ask\\\":72337.56470120949,\\\"price\\\":71763.45704485069,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3709483562290075,\\\"bias\\\":0.12905164377099249,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":70862.40245030457,\\\"ask\\\":72005.34442530948,\\\"price\\\":71433.87343780702,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3703529341385901,\\\"bias\\\":0.1296470658614099,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":71639.45763725934,\\\"ask\\\":72794.93276044093,\\\"price\\\":72217.19519885014,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.36893126451524183,\\\"bias\\\":0.13106873548475817,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":71485.52802452445,\\\"ask\\\":72638.52041201678,\\\"price\\\":72062.02421827061,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.36921349450293806,\\\"bias\\\":0.13078650549706194,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":71536.8977016856,\\\"ask\\\":72690.71863235794,\\\"price\\\":72113.80816702177,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3693074780091117,\\\"bias\\\":0.13069252199088832,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":71348.16766780199,\\\"ask\\\":72498.94456566975,\\\"price\\\":71923.55611673587,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.36896177040497924,\\\"bias\\\":0.13103822959502076,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":70886.90445565007,\\\"ask\\\":72030.2416242896,\\\"price\\\":71458.57303996984,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.36810910071708913,\\\"bias\\\":0.13189089928291087,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":71466.40395540238,\\\"ask\\\":72619.08789016693,\\\"price\\\":72042.74592278466,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3670308943721619,\\\"bias\\\":0.1329691056278381,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":70710.30361697417,\\\"ask\\\":71850.7923849899,\\\"price\\\":71280.54800098203,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3656090650117578,\\\"bias\\\":0.13439093498824223,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":71420.01672386282,\\\"ask\\\":72571.9524774735,\\\"price\\\":71995.98460066816,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3642601950008917,\\\"bias\\\":0.13573980499910832,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":71631.29940681296,\\\"ask\\\":72786.64294563251,\\\"price\\\":72208.97117622274,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3638586343250628,\\\"bias\\\":0.13614136567493718,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":72118.77876347941,\\\"ask\\\":73281.98487256779,\\\"price\\\":72700.3818180236,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3647851302270568,\\\"bias\\\":0.13521486977294322,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":71664.95809584635,\\\"ask\\\":72820.8445167471,\\\"price\\\":72242.90130629673,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3656413827681132,\\\"bias\\\":0.1343586172318868,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":71871.54648319478,\\\"ask\\\":73030.7649748592,\\\"price\\\":72451.15572902698,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3652540675334741,\\\"bias\\\":0.1347459324665259,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":71611.31878000022,\\\"ask\\\":72766.34005064539,\\\"price\\\":72188.8294153228,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3647644155466381,\\\"bias\\\":0.13523558445336192,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":71666.16569229732,\\\"ask\\\":72822.07159056018,\\\"price\\\":72244.11864142875,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3646608389840734,\\\"bias\\\":0.13533916101592658,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":71261.80742699084,\\\"ask\\\":72411.19141774876,\\\"price\\\":71836.4994223698,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.36389288893688293,\\\"bias\\\":0.13610711106311707,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":71408.81806826434,\\\"ask\\\":72560.57319839764,\\\"price\\\":71984.695633331,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3636121046794843,\\\"bias\\\":0.1363878953205157,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":71017.38813750623,\\\"ask\\\":72162.82988165956,\\\"price\\\":71590.1090095829,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3628603690014813,\\\"bias\\\":0.13713963099851872,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":70860.21970449551,\\\"ask\\\":72003.12647392286,\\\"price\\\":71431.67308920919,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.36255619239862014,\\\"bias\\\":0.13744380760137986,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":69999.04681412141,\\\"ask\\\":71128.06369822014,\\\"price\\\":70563.55525617077,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3642471137245977,\\\"bias\\\":0.13575288627540227,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":70714.49142343517,\\\"ask\\\":71855.04773671638,\\\"price\\\":71284.76958007578,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3628596138213144,\\\"bias\\\":0.13714038617868562,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":70393.00289655669,\\\"ask\\\":71528.37391101729,\\\"price\\\":70960.68840378699,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.36223328650305914,\\\"bias\\\":0.13776671349694086,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":70273.84110973423,\\\"ask\\\":71407.29015989124,\\\"price\\\":70840.56563481274,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3624668944499952,\\\"bias\\\":0.1375331055500048,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":69446.76183631063,\\\"ask\\\":70566.87089818662,\\\"price\\\":70006.81636724863,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.36410485103720236,\\\"bias\\\":0.13589514896279764,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":68640.39808718808,\\\"ask\\\":69747.50128214274,\\\"price\\\":69193.94968466541,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3625084016450234,\\\"bias\\\":0.1374915983549766,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":68602.72681519696,\\\"ask\\\":69709.22240899045,\\\"price\\\":69155.9746120937,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0127,\\\"forecast\\\":0.36258390131739177,\\\"bias\\\":0.13741609868260823,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.6649039188774065,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":32102.90813129369,\\\"ask\\\":32620.69697212099,\\\"price\\\":32361.80255170735,\\\"maxShares\\\":13700000,\\\"investedShares\\\":8405.46,\\\"averagePrice\\\":28529.331616659852,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.17056471695914466},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.5002995880306911,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":34365.31306124169,\\\"ask\\\":34919.592304164966,\\\"price\\\":34642.45268270334,\\\"maxShares\\\":13700000,\\\"investedShares\\\":4288.5,\\\"averagePrice\\\":14555.78143707138,\\\"sharesShort\\\":4223.8,\\\"averageShortPrice\\\":17838.15578057237,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.16918143569115796},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3485375499805683,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":29051.472264746382,\\\"ask\\\":29520.04439804874,\\\"price\\\":29285.758331397552,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":8620,\\\"averageShortPrice\\\":36404.39955218845,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.15989555683025392},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.5704246667044929,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":29408.348727065673,\\\"ask\\\":29882.676932340935,\\\"price\\\":29645.512829703293,\\\"maxShares\\\":13700000,\\\"investedShares\\\":9706.58,\\\"averagePrice\\\":21413.6228248916,\\\"sharesShort\\\":3187.93,\\\"averageShortPrice\\\":7939.261244702827,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.15271651472613207},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.49363261885457005,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":28705.13469438578,\\\"ask\\\":29168.1207378436,\\\"price\\\":28936.627716114683,\\\"maxShares\\\":13700000,\\\"investedShares\\\":7445.74,\\\"averagePrice\\\":13342.61331579697,\\\"sharesShort\\\":6948.83,\\\"averageShortPrice\\\":16617.05141060567,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.1599479590223719},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.6514850128131016,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":34241.17299013433,\\\"ask\\\":34793.44997384618,\\\"price\\\":34517.311481990255,\\\"maxShares\\\":13700000,\\\"investedShares\\\":15842,\\\"averagePrice\\\":28388.538969780788,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.1555729054468148},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.6635249187205539,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":40439.10545074312,\\\"ask\\\":41091.34908704543,\\\"price\\\":40765.22726889427,\\\"maxShares\\\":13700000,\\\"investedShares\\\":15842,\\\"averagePrice\\\":28388.538969780788,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.1777151461627139},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.5209359832467834,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":43720.338939424044,\\\"ask\\\":44425.50569651153,\\\"price\\\":44072.92231796778,\\\"maxShares\\\":13700000,\\\"investedShares\\\":8871.52,\\\"averagePrice\\\":15897.581823077242,\\\"sharesShort\\\":6874.84,\\\"averageShortPrice\\\":19704.949868553736,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.1793800642044555},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3509819463098306,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":35405.58280364533,\\\"ask\\\":35976.6405908009,\\\"price\\\":35691.111697223096,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":15988,\\\"averageShortPrice\\\":45825.46481059017,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.15842000622635838},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.6160973758743079,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":36127.7081572075,\\\"ask\\\":36710.41312748504,\\\"price\\\":36419.06064234627,\\\"maxShares\\\":13700000,\\\"investedShares\\\":22663.05,\\\"averagePrice\\\":26867.422747707344,\\\"sharesShort\\\":1279.04,\\\"averageShortPrice\\\":3666.037184847209,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.1426870071627841},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.6406056956529457,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":47024.58501532814,\\\"ask\\\":47783.04606396245,\\\"price\\\":47403.81553964531,\\\"maxShares\\\":13700000,\\\"investedShares\\\":29109,\\\"averagePrice\\\":37458.489178287455,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.14758545840473658},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.46345815179091177,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":54048.91785037607,\\\"ask\\\":54920.67458989829,\\\"price\\\":54484.79622013718,\\\"maxShares\\\":13700000,\\\"investedShares\\\":10188.15,\\\"averagePrice\\\":13110.47121240064,\\\"sharesShort\\\":18454.59,\\\"averageShortPrice\\\":35595.62242256464,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.13373091725366548},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.4123547517234431,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":50088.589134561866,\\\"ask\\\":50896.469604474165,\\\"price\\\":50492.529369518,\\\"maxShares\\\":13700000,\\\"investedShares\\\":5939.5,\\\"averagePrice\\\":6461.374108726704,\\\"sharesShort\\\":25191.98,\\\"averageShortPrice\\\":48590.849656199316,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.12948358330134824},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.6141334981858545,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":53045.47997565206,\\\"ask\\\":53901.05223332386,\\\"price\\\":53473.26610448798,\\\"maxShares\\\":13700000,\\\"investedShares\\\":42425,\\\"averagePrice\\\":46152.67220519071,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.11971752914489553},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.6210066192832785,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":65547.83475409237,\\\"ask\\\":66605.0578952874,\\\"price\\\":66076.44632468991,\\\"maxShares\\\":13700000,\\\"investedShares\\\":42425,\\\"averagePrice\\\":46152.67220519071,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.1250983260990688},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.4087989030629728,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":73239.57074969898,\\\"ask\\\":74420.85414888767,\\\"price\\\":73830.21244929329,\\\"maxShares\\\":13700000,\\\"investedShares\\\":5939.5,\\\"averagePrice\\\":6461.374108726704,\\\"sharesShort\\\":35456.4,\\\"averageShortPrice\\\":64052.950677387846,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.1278402007361461},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.36925754706208813,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":67111.44072945531,\\\"ask\\\":68193.8833218659,\\\"price\\\":67652.6620256606,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":42210,\\\"averageShortPrice\\\":76253.51271117596,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.13860843646649257},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.524266415523889,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":61056.94089134058,\\\"ask\\\":62041.73026055581,\\\"price\\\":61549.33557594819,\\\"maxShares\\\":13700000,\\\"investedShares\\\":38732.64,\\\"averagePrice\\\":33588.604588141025,\\\"sharesShort\\\":17306.1,\\\"averageShortPrice\\\":31263.94021158222,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.14191429645369907},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.6070507681698715,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":70938.11606962844,\\\"ask\\\":72082.27923204176,\\\"price\\\":71510.1976508351,\\\"maxShares\\\":13700000,\\\"investedShares\\\":62515.84,\\\"averagePrice\\\":54213.18635278911,\\\"sharesShort\\\":4721.92,\\\"averageShortPrice\\\":5604.103585398317,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.14832800559311876},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.3603746657333739,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":72166.93963111695,\\\"ask\\\":73330.92252839304,\\\"price\\\":72748.93107975501,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":67456,\\\"averageShortPrice\\\":80058.62264854739,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.1504756551215951},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.5180433725243896,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":64576.78536099973,\\\"ask\\\":65618.3464152094,\\\"price\\\":65097.56588810456,\\\"maxShares\\\":13700000,\\\"investedShares\\\":58448.5,\\\"averagePrice\\\":34144.75121866149,\\\"sharesShort\\\":29680.64,\\\"averageShortPrice\\\":35225.793965360856,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.13776769492446095},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.4318086409338388,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":69505.87985935928,\\\"ask\\\":70626.94243773603,\\\"price\\\":70066.41114854769,\\\"maxShares\\\":13700000,\\\"investedShares\\\":27776.4,\\\"averagePrice\\\":15736.812473585387,\\\"sharesShort\\\":78869.2,\\\"averageShortPrice\\\":54647.39141640514,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.14181263938249855},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.5534373652702047,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":64862.96133086298,\\\"ask\\\":65909.13812652206,\\\"price\\\":65386.04972869253,\\\"maxShares\\\":13700000,\\\"investedShares\\\":92618.08,\\\"averagePrice\\\":47151.65810491526,\\\"sharesShort\\\":37829.05,\\\"averageShortPrice\\\":19214.454083207962,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.1407054551079383},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.5115905645788691,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":61571.28800623508,\\\"ask\\\":62564.37329665824,\\\"price\\\":62067.83065144665,\\\"maxShares\\\":13700000,\\\"investedShares\\\":82722.4,\\\"averagePrice\\\":30901.69177219004,\\\"sharesShort\\\":54265.47,\\\"averageShortPrice\\\":24647.64450986204,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.14524141502490184},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.6180913510323608,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":73081.05732249463,\\\"ask\\\":74259.7840535026,\\\"price\\\":73670.42068799866,\\\"maxShares\\\":13700000,\\\"investedShares\\\":152958.4,\\\"averagePrice\\\":57138.97723914378,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.13700012694401875},{\\\"volatility\\\":0.0127,\\\"forecast\\\":0.38421852715085847,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":77006.58300629481,\\\"ask\\\":78248.62466768666,\\\"price\\\":77627.6038369907,\\\"maxShares\\\":13700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":150840.62,\\\"averageShortPrice\\\":80589.46493464369,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.12758375547257278}],\\\"recentTicksOfPrices\\\":[72042.74592278466,71280.54800098203,71995.98460066816,72208.97117622274,72700.3818180236,72242.90130629673,72451.15572902698,72188.8294153228,72244.11864142875,71836.4994223698,71984.695633331,71590.1090095829,71431.67308920919,70563.55525617077,71284.76958007578,70960.68840378699,70840.56563481274,70006.81636724863,69193.94968466541,69155.9746120937]}],[\\\"STM\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":26557.59389103076,\\\"ask\\\":26717.418929492324,\\\"price\\\":26637.506410261543,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5714114855191472,\\\"bias\\\":0.07141148551914722,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":26689.600668676216,\\\"ask\\\":26850.220131075468,\\\"price\\\":26769.910399875844,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5717664423773979,\\\"bias\\\":0.07176644237739793,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":26797.47000681571,\\\"ask\\\":26958.73863273436,\\\"price\\\":26878.104319775037,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5714763893812524,\\\"bias\\\":0.07147638938125245,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":26980.62135954988,\\\"ask\\\":27142.992200229215,\\\"price\\\":27061.80677988955,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5709878732116139,\\\"bias\\\":0.07098787321161393,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27085.728516119914,\\\"ask\\\":27248.731897360354,\\\"price\\\":27167.230206740136,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5712644173802895,\\\"bias\\\":0.07126441738028955,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27060.172073003047,\\\"ask\\\":27223.02165418461,\\\"price\\\":27141.59686359383,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5713317216466528,\\\"bias\\\":0.0713317216466528,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":26961.75876214123,\\\"ask\\\":27124.016086687716,\\\"price\\\":27042.887424414475,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.571071353213026,\\\"bias\\\":0.07107135321302605,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27024.69234108533,\\\"ask\\\":27187.32840331854,\\\"price\\\":27106.010372201938,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5709054599321923,\\\"bias\\\":0.07090545993219233,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":26905.78461209394,\\\"ask\\\":27067.70508117374,\\\"price\\\":26986.74484663384,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5712188203242115,\\\"bias\\\":0.07121882032421145,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27030.157609771253,\\\"ask\\\":27192.826562287428,\\\"price\\\":27111.492086029342,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5708896086583014,\\\"bias\\\":0.0708896086583014,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27132.744612775066,\\\"ask\\\":27296.030939431683,\\\"price\\\":27214.387776103376,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5711586545366629,\\\"bias\\\":0.07115865453666292,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27029.900026116844,\\\"ask\\\":27192.567428480634,\\\"price\\\":27111.23372729874,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5714294022052042,\\\"bias\\\":0.07142940220520422,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":26871.42828480511,\\\"ask\\\":27033.141995646463,\\\"price\\\":26952.285140225787,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.571850650440629,\\\"bias\\\":0.071850650440629,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":26885.099756537507,\\\"ask\\\":27046.895743036224,\\\"price\\\":26965.997749786868,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5718872061505094,\\\"bias\\\":0.07188720615050936,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":26912.848444078536,\\\"ask\\\":27074.811423681815,\\\"price\\\":26993.829933880177,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5718130098246735,\\\"bias\\\":0.07181300982467353,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":26870.109065087112,\\\"ask\\\":27031.814836792746,\\\"price\\\":26950.96195093993,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5719272350195165,\\\"bias\\\":0.07192723501951648,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":26792.088891402742,\\\"ask\\\":26953.32513347738,\\\"price\\\":26872.707012440063,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5717177785866266,\\\"bias\\\":0.07171777858662665,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":26879.331526289472,\\\"ask\\\":27041.092799266138,\\\"price\\\":26960.212162777807,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5719513120000712,\\\"bias\\\":0.07195131200007121,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27087.66320778566,\\\"ask\\\":27250.678232105332,\\\"price\\\":27169.170719945498,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5725089798051717,\\\"bias\\\":0.07250897980517168,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27272.643390308516,\\\"ask\\\":27436.771635385594,\\\"price\\\":27354.707512847057,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5730041396946025,\\\"bias\\\":0.07300413969460251,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27357.37715048827,\\\"ask\\\":27522.015327923502,\\\"price\\\":27439.69623920589,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5727773221039317,\\\"bias\\\":0.07277732210393173,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27273.15777201686,\\\"ask\\\":27437.289112670922,\\\"price\\\":27355.223442343893,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5725525860874557,\\\"bias\\\":0.07255258608745574,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27473.322071600614,\\\"ask\\\":27638.658011850966,\\\"price\\\":27555.990041725792,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5720201051148238,\\\"bias\\\":0.07202010511482382,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27512.916167399784,\\\"ask\\\":27678.490387063168,\\\"price\\\":27595.703277231478,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5719163109346388,\\\"bias\\\":0.0719163109346388,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27499.690070173372,\\\"ask\\\":27665.18469446729,\\\"price\\\":27582.43738232033,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5718817224677084,\\\"bias\\\":0.07188172246770841,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27451.090436138114,\\\"ask\\\":27616.292585202133,\\\"price\\\":27533.691510670124,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5717544624809373,\\\"bias\\\":0.07175446248093731,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27332.056629046037,\\\"ask\\\":27496.54242621181,\\\"price\\\":27414.299527628926,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5714419647073203,\\\"bias\\\":0.07144196470732034,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27481.602549566473,\\\"ask\\\":27646.988322181714,\\\"price\\\":27564.295435874094,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5710510737282423,\\\"bias\\\":0.07105107372824226,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27678.279737220808,\\\"ask\\\":27844.84912380388,\\\"price\\\":27761.564430512346,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5715595639203803,\\\"bias\\\":0.07155956392038032,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27493.58830307036,\\\"ask\\\":27659.046206599363,\\\"price\\\":27576.317254834863,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5720402737623241,\\\"bias\\\":0.07204027376232414,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27548.024852078608,\\\"ask\\\":27713.810357707967,\\\"price\\\":27630.91760489329,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5721829115238998,\\\"bias\\\":0.07218291152389977,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27673.50039131497,\\\"ask\\\":27840.041015535517,\\\"price\\\":27756.770703425245,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5725116897138333,\\\"bias\\\":0.07251168971383326,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27556.706551912914,\\\"ask\\\":27722.544304482093,\\\"price\\\":27639.625428197505,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5728190166662489,\\\"bias\\\":0.0728190166662489,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27503.642004379442,\\\"ask\\\":27669.160411627458,\\\"price\\\":27586.40120800345,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5726785222484329,\\\"bias\\\":0.07267852224843285,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27570.534479863327,\\\"ask\\\":27736.45544965187,\\\"price\\\":27653.4949647576,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5725017585213986,\\\"bias\\\":0.07250175852139862,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27584.66736735579,\\\"ask\\\":27750.673389626736,\\\"price\\\":27667.670378491264,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5725389235316358,\\\"bias\\\":0.07253892353163582,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27480.30444393943,\\\"ask\\\":27645.682404484698,\\\"price\\\":27562.993424212065,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5722634398980144,\\\"bias\\\":0.07226343989801443,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27442.414020759243,\\\"ask\\\":27607.563954685575,\\\"price\\\":27524.98898772241,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5721636639702801,\\\"bias\\\":0.07216366397028007,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27341.551991229142,\\\"ask\\\":27506.094931998825,\\\"price\\\":27423.823461613985,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5724298732040758,\\\"bias\\\":0.07242987320407579,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27382.140322495787,\\\"ask\\\":27546.927526041392,\\\"price\\\":27464.53392426859,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5723223515941778,\\\"bias\\\":0.07232235159417777,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27607.60619790702,\\\"ask\\\":27773.750267302647,\\\"price\\\":27690.678232604834,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5729178573553028,\\\"bias\\\":0.07291785735530276,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27796.460918864686,\\\"ask\\\":27963.74152619988,\\\"price\\\":27880.101222532285,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5734166648761342,\\\"bias\\\":0.07341666487613419,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27881.426042898926,\\\"ask\\\":28049.217974952477,\\\"price\\\":27965.3220089257,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5736410767556028,\\\"bias\\\":0.07364107675560283,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27913.06874057864,\\\"ask\\\":28081.051100100674,\\\"price\\\":27997.05992033966,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5737246521912711,\\\"bias\\\":0.07372465219127111,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27692.334397018556,\\\"ask\\\":27858.988365305526,\\\"price\\\":27775.66138116204,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5743123080556097,\\\"bias\\\":0.07431230805560973,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27476.299135738245,\\\"ask\\\":27641.652992121824,\\\"price\\\":27558.976063930037,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5748965963110195,\\\"bias\\\":0.07489659631101953,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":27466.204683367258,\\\"ask\\\":27631.497790789723,\\\"price\\\":27548.851237078492,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5749241225066817,\\\"bias\\\":0.07492412250668168,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5321206978542548,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":22250.30468594426,\\\"ask\\\":22384.20822467612,\\\"price\\\":22317.256455310206,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.07348307705727619},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.42815551881318437,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":20429.79902429303,\\\"ask\\\":20552.746661349953,\\\"price\\\":20491.272842821487,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.07727404673560684},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5366277853969789,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":18602.455726890064,\\\"ask\\\":18714.40631300976,\\\"price\\\":18658.43101994992,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.07857166254137904},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5786681473699232,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":18989.769823254628,\\\"ask\\\":19104.051286584123,\\\"price\\\":19046.91055491937,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.0812470358392986},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5044689002797782,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":19061.449704432565,\\\"ask\\\":19176.162541169364,\\\"price\\\":19118.806122800965,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.07832239577310207},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.42757084726260147,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":19863.35716422106,\\\"ask\\\":19982.89592348417,\\\"price\\\":19923.12654385262,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.07413195187076094},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.45826535226654164,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":18353.0536145622,\\\"ask\\\":18463.50328526167,\\\"price\\\":18408.27844991195,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.07511009431418908},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5076643894945798,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":18078.610753440185,\\\"ask\\\":18187.408812136917,\\\"price\\\":18133.009782788547,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.07599595916833235},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5288298285802429,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":19011.278710630275,\\\"ask\\\":19125.689615609,\\\"price\\\":19068.484163119632,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.07639994010157036},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.46304037566914213,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":18456.935235727637,\\\"ask\\\":18568.01007164975,\\\"price\\\":18512.472653688692,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.07754210418717966},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5135060662639228,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":18588.033961578378,\\\"ask\\\":18699.897756733313,\\\"price\\\":18643.96585915584,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.07721910617618244},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5204441286594881,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":19106.501835231677,\\\"ask\\\":19221.48579813177,\\\"price\\\":19163.993816681726,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.0694513017677984},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5663211703175917,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":20300.338343105934,\\\"ask\\\":20422.50687877155,\\\"price\\\":20361.42261093874,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.06843689343728765},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5143426791422434,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":21364.43237778057,\\\"ask\\\":21493.004688980855,\\\"price\\\":21428.71853338071,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.06727135695911957},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.433015107171282,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":20986.045490905075,\\\"ask\\\":21112.340649325764,\\\"price\\\":21049.19307011542,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.06913044678852115},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.4447260759823808,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":19830.771859047316,\\\"ask\\\":19950.11451817899,\\\"price\\\":19890.44318861316,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.07432910107843499},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5731449449681099,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":19663.0380247659,\\\"ask\\\":19781.37125259799,\\\"price\\\":19722.204638681953,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.07490013899921055},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.4860874688590655,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":19452.587433808072,\\\"ask\\\":19569.654158585246,\\\"price\\\":19511.12079619666,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.07774872574515246},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5487697942028367,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":19834.50381182807,\\\"ask\\\":19953.86893005372,\\\"price\\\":19894.186370940908,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.07488257753349647},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5760562986707677,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":21163.163336680234,\\\"ask\\\":21290.52439988994,\\\"price\\\":21226.843868285072,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.07804982627130974},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.48992330817271706,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":21546.192498999077,\\\"ask\\\":21675.858652453437,\\\"price\\\":21611.025575726257,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.07832597474733805},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5374003405684368,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":20810.144518618465,\\\"ask\\\":20935.38109546069,\\\"price\\\":20872.762807039573,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.0778340276665408},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.47018435100667255,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":22438.040418250104,\\\"ask\\\":22573.07376078721,\\\"price\\\":22505.55708951867,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.07613375731808558},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5723384248798679,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":23629.762225351493,\\\"ask\\\":23771.96741427036,\\\"price\\\":23700.864819810926,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.07562102789781511},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5722168188408151,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":24891.78553745934,\\\"ask\\\":25041.58565102479,\\\"price\\\":24966.685594242063,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.07655510849402691},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5750316062113158,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":26315.443060671212,\\\"ask\\\":26473.81082232018,\\\"price\\\":26394.626941495695,\\\"maxShares\\\":11100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.07765967271793661}],\\\"recentTicksOfPrices\\\":[27564.295435874094,27761.564430512346,27576.317254834863,27630.91760489329,27756.770703425245,27639.625428197505,27586.40120800345,27653.4949647576,27667.670378491264,27562.993424212065,27524.98898772241,27423.823461613985,27464.53392426859,27690.678232604834,27880.101222532285,27965.3220089257,27997.05992033966,27775.66138116204,27558.976063930037,27548.851237078492]}],[\\\"DCOMM\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9717.57279213261,\\\"ask\\\":9854.577846603765,\\\"price\\\":9786.075319368189,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.581346196114852,\\\"bias\\\":0.08134619611485205,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9679.648022904095,\\\"ask\\\":9816.118387778875,\\\"price\\\":9747.883205341486,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.581027482489318,\\\"bias\\\":0.08102748248931801,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9648.909002321181,\\\"ask\\\":9784.945987248166,\\\"price\\\":9716.927494784673,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5812856158649589,\\\"bias\\\":0.08128561586495886,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9597.205849818203,\\\"ask\\\":9732.51388798281,\\\"price\\\":9664.859868900507,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5808477048042678,\\\"bias\\\":0.08084770480426784,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9567.826005772238,\\\"ask\\\":9702.719826598835,\\\"price\\\":9635.272916185537,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5810959631815826,\\\"bias\\\":0.08109596318158263,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9574.948613091432,\\\"ask\\\":9709.942853356566,\\\"price\\\":9642.445733224,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5810355926543003,\\\"bias\\\":0.08103559265430027,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9602.497112857629,\\\"ask\\\":9737.87975090396,\\\"price\\\":9670.188431880795,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5808024416374648,\\\"bias\\\":0.08080244163746475,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9584.862092830537,\\\"ask\\\":9719.996100181621,\\\"price\\\":9652.429096506079,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5809511086357704,\\\"bias\\\":0.08095110863577037,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9551.588789627054,\\\"ask\\\":9686.253686963186,\\\"price\\\":9618.921238295121,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5812331047352278,\\\"bias\\\":0.08123310473522782,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9516.91251810557,\\\"ask\\\":9651.08852541018,\\\"price\\\":9584.000521757875,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5809371199617024,\\\"bias\\\":0.08093711996170239,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9488.526894852148,\\\"ask\\\":9622.302702030325,\\\"price\\\":9555.414798441238,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5806949906385832,\\\"bias\\\":0.08069499063858321,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9460.154818594212,\\\"ask\\\":9593.530616640857,\\\"price\\\":9526.842717617536,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5804529772178797,\\\"bias\\\":0.0804529772178797,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9504.130765535307,\\\"ask\\\":9638.126566862087,\\\"price\\\":9571.128666198698,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5800789880046766,\\\"bias\\\":0.08007898800467661,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9500.320820885629,\\\"ask\\\":9634.262906980692,\\\"price\\\":9567.29186393316,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5801111023424608,\\\"bias\\\":0.08011110234246077,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9508.049849992645,\\\"ask\\\":9642.100905279549,\\\"price\\\":9575.075377636098,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5801762770932375,\\\"bias\\\":0.08017627709323749,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9496.143957819324,\\\"ask\\\":9630.027155613352,\\\"price\\\":9563.085556716338,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5802767989591833,\\\"bias\\\":0.08027679895918327,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9474.396536322196,\\\"ask\\\":9607.973123944059,\\\"price\\\":9541.184830133128,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5800925325125857,\\\"bias\\\":0.08009253251258575,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9450.140694629683,\\\"ask\\\":9583.37530663856,\\\"price\\\":9516.758000634121,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5802981074190504,\\\"bias\\\":0.08029810741905041,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9507.87460938924,\\\"ask\\\":9641.923194013056,\\\"price\\\":9574.898901701148,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5807886740930175,\\\"bias\\\":0.08078867409301749,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9456.969482169783,\\\"ask\\\":9590.300371142972,\\\"price\\\":9523.634926656378,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5812235446654932,\\\"bias\\\":0.0812235446654932,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9480.129405108511,\\\"ask\\\":9613.786818674995,\\\"price\\\":9546.958111891754,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5814224594487978,\\\"bias\\\":0.08142245944879778,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9503.204672899845,\\\"ask\\\":9637.187417532874,\\\"price\\\":9570.19604521636,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5816206471502228,\\\"bias\\\":0.08162064715022277,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9558.181181582228,\\\"ask\\\":9692.939023014404,\\\"price\\\":9625.560102298316,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5820928266276902,\\\"bias\\\":0.08209282662769024,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9547.335488439041,\\\"ask\\\":9681.94041979669,\\\"price\\\":9614.637954117867,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5821860833911022,\\\"bias\\\":0.08218608339110223,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9550.954933362313,\\\"ask\\\":9685.610894154932,\\\"price\\\":9618.282913758623,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.582154926216134,\\\"bias\\\":0.08215492621613396,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9564.283273618705,\\\"ask\\\":9699.127146559955,\\\"price\\\":9631.70521008933,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5820402791658665,\\\"bias\\\":0.08204027916586654,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9597.115952539358,\\\"ask\\\":9732.422723270023,\\\"price\\\":9664.76933790469,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5823219105299065,\\\"bias\\\":0.08232191052990645,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9638.506281441922,\\\"ask\\\":9774.396601623377,\\\"price\\\":9706.45144153265,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5826769474982594,\\\"bias\\\":0.08267694749825938,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9584.439002911387,\\\"ask\\\":9719.567045248506,\\\"price\\\":9652.003024079948,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5822105542594808,\\\"bias\\\":0.08221055425948076,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9635.189219882177,\\\"ask\\\":9771.032773838218,\\\"price\\\":9703.110996860198,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5826458643975797,\\\"bias\\\":0.0826458643975797,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9650.226707585143,\\\"ask\\\":9786.282270431257,\\\"price\\\":9718.2544890082,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5825168803017599,\\\"bias\\\":0.08251688030175985,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9684.873417329769,\\\"ask\\\":9821.417453425052,\\\"price\\\":9753.145435377412,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5828131363885314,\\\"bias\\\":0.08281313638853138,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9717.228495220192,\\\"ask\\\":9854.228695555621,\\\"price\\\":9785.728595387907,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5825364755213478,\\\"bias\\\":0.0825364755213478,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9732.00638935416,\\\"ask\\\":9869.21493865019,\\\"price\\\":9800.610664002175,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.582410954618135,\\\"bias\\\":0.08241095461813497,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9750.66354025001,\\\"ask\\\":9888.135130948398,\\\"price\\\":9819.399335599204,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5822529652422276,\\\"bias\\\":0.08225296524222758,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9746.725317104947,\\\"ask\\\":9884.14138401277,\\\"price\\\":9815.433350558858,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.582286200048886,\\\"bias\\\":0.08228620004888598,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9717.635487475558,\\\"ask\\\":9854.64142586897,\\\"price\\\":9786.138456672265,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.582039875565594,\\\"bias\\\":0.082039875565594,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9728.211540632557,\\\"ask\\\":9865.366587529692,\\\"price\\\":9796.789064081126,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5821291625208511,\\\"bias\\\":0.08212916252085112,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9700.006130081129,\\\"ask\\\":9836.763517615,\\\"price\\\":9768.384823848064,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.581890349605057,\\\"bias\\\":0.08189034960505703,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9688.669132983121,\\\"ask\\\":9825.266683699901,\\\"price\\\":9756.967908341512,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5819861719149206,\\\"bias\\\":0.08198617191492064,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9751.552158714912,\\\"ask\\\":9889.036277770309,\\\"price\\\":9820.29421824261,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5814540515083495,\\\"bias\\\":0.0814540515083495,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9699.253172929955,\\\"ask\\\":9835.99994475374,\\\"price\\\":9767.626558841848,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5818932568993224,\\\"bias\\\":0.08189325689932236,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9722.622454633904,\\\"ask\\\":9859.698702735488,\\\"price\\\":9791.160578684696,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5820905696775346,\\\"bias\\\":0.08209056967753459,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9713.932660563874,\\\"ask\\\":9850.886393945439,\\\"price\\\":9782.409527254656,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5820171339053797,\\\"bias\\\":0.08201713390537968,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9774.965181327821,\\\"ask\\\":9912.779393350569,\\\"price\\\":9843.872287339196,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.582532446560202,\\\"bias\\\":0.08253244656020198,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9714.757176843836,\\\"ask\\\":9851.72253482552,\\\"price\\\":9783.239855834678,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5820209449526872,\\\"bias\\\":0.08202094495268719,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9711.943681871808,\\\"ask\\\":9848.869373257714,\\\"price\\\":9780.40652756476,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5819971839503808,\\\"bias\\\":0.0819971839503808,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5452566626478451,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":14850.708091306764,\\\"ask\\\":15060.083633379561,\\\"price\\\":14955.395862343148,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.09990033602462711},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5018786795208016,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":14412.568521967305,\\\"ask\\\":14615.76686970904,\\\"price\\\":14514.167695838165,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.09415597818507204},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5945288299548056,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":14716.0310955821,\\\"ask\\\":14923.507868329478,\\\"price\\\":14819.769481955793,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.09727984774673293},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.452756646592319,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":14910.088938620089,\\\"ask\\\":15120.301672900729,\\\"price\\\":15015.195305760417,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.09884992274465887},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5977353815331299,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":14817.471346658269,\\\"ask\\\":15026.378294143884,\\\"price\\\":14921.92482040108,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.09889299055423872},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5968704410154778,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":15680.550225720386,\\\"ask\\\":15901.625455488847,\\\"price\\\":15791.087840604614,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.09841497113794495},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5555964626048144,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":17075.28525198995,\\\"ask\\\":17316.024419691716,\\\"price\\\":17195.654835840833,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.09891859250426738},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.40469735246887817,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":16103.815379607968,\\\"ask\\\":16330.858093922689,\\\"price\\\":16217.33673676533,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.09878520632675758},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4082989715141345,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":14902.874739139434,\\\"ask\\\":15112.985762651966,\\\"price\\\":15007.930250895699,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.09401576416384044},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4103921897139038,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":13840.963423363673,\\\"ask\\\":14036.102887539999,\\\"price\\\":13938.53315545183,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.09130539154377582},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.41140978180485743,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":12554.104526409732,\\\"ask\\\":12731.100964848541,\\\"price\\\":12642.60274562914,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.09026623121493038},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5270128942466343,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":12098.200622784207,\\\"ask\\\":12268.769413034941,\\\"price\\\":12183.485017909577,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.09004664708451171},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5607466346009384,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":11942.472597021935,\\\"ask\\\":12110.845825982968,\\\"price\\\":12026.659211502454,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.08888842367840899},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.417096624598944,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":11477.74932010947,\\\"ask\\\":11639.570559265092,\\\"price\\\":11558.659939687284,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.08432897585833143},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5215834165121556,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":11139.124734678913,\\\"ask\\\":11296.171810495132,\\\"price\\\":11217.64827258702,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.0840582340997853},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.439172647809699,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":11823.860947117086,\\\"ask\\\":11990.56190709659,\\\"price\\\":11907.21142710684,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.08452883775881193},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4772525120350412,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":11270.356659061428,\\\"ask\\\":11429.253933207316,\\\"price\\\":11349.805296134376,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.08363839499821935},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4827052248351889,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":11177.855671588653,\\\"ask\\\":11335.448802910152,\\\"price\\\":11256.652237249404,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.08554187176815486},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.541974014204885,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":10139.243357492851,\\\"ask\\\":10282.193414899593,\\\"price\\\":10210.718386196222,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.08571429555813664},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4157969433293963,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9635.689424326047,\\\"ask\\\":9771.540030509901,\\\"price\\\":9703.614727417971,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.08639993594634887},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.41899958620959127,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9603.149744504166,\\\"ask\\\":9738.54158380231,\\\"price\\\":9670.845664153238,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.08386458790420936},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.548478879298605,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9551.791511086085,\\\"ask\\\":9686.4592665294,\\\"price\\\":9619.125388807744,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.07966118052441423},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5805491620459217,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":10149.037268230033,\\\"ask\\\":10292.12540695634,\\\"price\\\":10220.581337593192,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.08301723361535318},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4939208904969805,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":10311.288007543897,\\\"ask\\\":10456.663669281674,\\\"price\\\":10383.975838412782,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.08221072557425613},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.423270608831608,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9648.221655278232,\\\"ask\\\":9784.248949511768,\\\"price\\\":9716.235302394995,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.08288007035269274},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5811896636999176,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9417.452358072622,\\\"ask\\\":9550.22610733045,\\\"price\\\":9483.839232701534,\\\"maxShares\\\":12400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.0824956739183419}],\\\"recentTicksOfPrices\\\":[9706.45144153265,9652.003024079948,9703.110996860198,9718.2544890082,9753.145435377412,9785.728595387907,9800.610664002175,9819.399335599204,9815.433350558858,9786.138456672265,9796.789064081126,9768.384823848064,9756.967908341512,9820.29421824261,9767.626558841848,9791.160578684696,9782.409527254656,9843.872287339196,9783.239855834678,9780.40652756476]}],[\\\"HLS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11506.759030720386,\\\"ask\\\":11599.18279803541,\\\"price\\\":11552.970914377898,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5891475324480715,\\\"bias\\\":0.0891475324480715,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11467.863554858144,\\\"ask\\\":11559.974908712426,\\\"price\\\":11513.919231785285,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.588845171360505,\\\"bias\\\":0.08884517136050496,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11436.324297133235,\\\"ask\\\":11528.182323616233,\\\"price\\\":11482.253310374734,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5886001528839079,\\\"bias\\\":0.08860015288390788,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11489.659244033313,\\\"ask\\\":11581.945663664103,\\\"price\\\":11535.802453848708,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5881869532992663,\\\"bias\\\":0.08818695329926629,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11520.201179615337,\\\"ask\\\":11612.73291599779,\\\"price\\\":11566.467047806564,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5879525337930273,\\\"bias\\\":0.08795253379302725,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11512.781943329039,\\\"ask\\\":11605.254087452162,\\\"price\\\":11559.0180153906,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5878958541274694,\\\"bias\\\":0.08789585412746936,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11541.456385046802,\\\"ask\\\":11634.158845970875,\\\"price\\\":11587.807615508838,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5881147729395182,\\\"bias\\\":0.0881147729395182,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11559.838856244087,\\\"ask\\\":11652.688967539221,\\\"price\\\":11606.263911891654,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5879744295355684,\\\"bias\\\":0.08797442953556844,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11594.698686763037,\\\"ask\\\":11687.828796696875,\\\"price\\\":11641.263741729956,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5882397250766005,\\\"bias\\\":0.0882397250766005,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11558.241657324297,\\\"ask\\\":11651.078939712444,\\\"price\\\":11604.66029851837,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5885180509976324,\\\"bias\\\":0.08851805099763244,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11588.174268389026,\\\"ask\\\":11681.251973356008,\\\"price\\\":11634.713120872517,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5887472879759958,\\\"bias\\\":0.08874728797599585,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11558.166409530128,\\\"ask\\\":11651.003087518322,\\\"price\\\":11604.584748524225,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5885168780651732,\\\"bias\\\":0.08851687806517317,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11511.841460843625,\\\"ask\\\":11604.306050890562,\\\"price\\\":11558.073755867093,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5888730799680751,\\\"bias\\\":0.08887307996807514,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11507.846360968802,\\\"ask\\\":11600.278861860117,\\\"price\\\":11554.06261141446,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5889039334240145,\\\"bias\\\":0.08890393342401448,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11515.95100448916,\\\"ask\\\":11608.448602918792,\\\"price\\\":11562.199803703976,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5889665458942681,\\\"bias\\\":0.08896654589426811,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11528.449785375977,\\\"ask\\\":11621.04777561996,\\\"price\\\":11574.748780497968,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5888699864904503,\\\"bias\\\":0.0888699864904503,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11551.357423687688,\\\"ask\\\":11644.139411026546,\\\"price\\\":11597.748417357117,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5890465758450635,\\\"bias\\\":0.08904657584506348,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11525.747965837021,\\\"ask\\\":11618.324254719246,\\\"price\\\":11572.036110278133,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5888487201798511,\\\"bias\\\":0.08884872017985113,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11586.703766725406,\\\"ask\\\":11679.769660434044,\\\"price\\\":11633.236713579725,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5893186111502701,\\\"bias\\\":0.08931861115027007,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11640.694923705845,\\\"ask\\\":11734.194481325974,\\\"price\\\":11687.44470251591,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5889024086432432,\\\"bias\\\":0.08890240864324317,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11665.373336297991,\\\"ask\\\":11759.07111409958,\\\"price\\\":11712.222225198786,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5887139344726449,\\\"bias\\\":0.08871393447264486,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11689.95347433679,\\\"ask\\\":11783.848682966001,\\\"price\\\":11736.901078651395,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5885270051140689,\\\"bias\\\":0.08852700511406886,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11748.496214589783,\\\"ask\\\":11842.861646032272,\\\"price\\\":11795.678930311027,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5880836660129214,\\\"bias\\\":0.08808366601292139,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11736.954143955418,\\\"ask\\\":11831.226868003252,\\\"price\\\":11784.090505979335,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5881702871143064,\\\"bias\\\":0.08817028711430641,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11733.103566323403,\\\"ask\\\":11827.345362036845,\\\"price\\\":11780.224464180124,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5881992228970216,\\\"bias\\\":0.08819922289702165,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11747.277662340104,\\\"ask\\\":11841.63330621432,\\\"price\\\":11794.455484277212,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5880926744252661,\\\"bias\\\":0.08809267442526614,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11712.471541100826,\\\"ask\\\":11806.547617736174,\\\"price\\\":11759.5095794185,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5883544607011669,\\\"bias\\\":0.08835446070116693,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11756.199567345062,\\\"ask\\\":11850.62687310687,\\\"price\\\":11803.413220225966,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5886843284120747,\\\"bias\\\":0.08868432841207474,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11813.609621013564,\\\"ask\\\":11908.498051704437,\\\"price\\\":11861.053836359,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5891174081692298,\\\"bias\\\":0.08911740816922975,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11867.760687202326,\\\"ask\\\":11963.084066215999,\\\"price\\\":11915.422376709163,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5887089129824785,\\\"bias\\\":0.08870891298247852,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11851.748500140393,\\\"ask\\\":11946.943267209796,\\\"price\\\":11899.345883675094,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5888287622780249,\\\"bias\\\":0.08882876227802494,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11888.583451394632,\\\"ask\\\":11984.074081526316,\\\"price\\\":11936.328766460474,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5891048399494712,\\\"bias\\\":0.08910483994947116,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11854.30054557936,\\\"ask\\\":11949.5158110057,\\\"price\\\":11901.90817829253,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5888471467330788,\\\"bias\\\":0.08884714673307881,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11869.906820769365,\\\"ask\\\":11965.247437803659,\\\"price\\\":11917.577129286512,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5889641146652171,\\\"bias\\\":0.08896411466521714,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11889.605787161618,\\\"ask\\\":11985.104628825567,\\\"price\\\":11937.355207993593,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5888164723010969,\\\"bias\\\":0.0888164723010969,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11893.764531661522,\\\"ask\\\":11989.296776895751,\\\"price\\\":11941.530654278637,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5887854060889537,\\\"bias\\\":0.08878540608895369,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11924.585984077708,\\\"ask\\\":12020.365791178734,\\\"price\\\":11972.475887628221,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5890154842245799,\\\"bias\\\":0.08901548422457994,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11913.361909425576,\\\"ask\\\":12009.051563316543,\\\"price\\\":11961.20673637106,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5890993494213,\\\"bias\\\":0.08909934942130004,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11943.34993985831,\\\"ask\\\":12039.280461463599,\\\"price\\\":11991.315200660954,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5893236281784047,\\\"bias\\\":0.08932362817840467,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11931.2641910502,\\\"ask\\\":12027.097638367874,\\\"price\\\":11979.180914709037,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5894141083585018,\\\"bias\\\":0.08941410835850183,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11864.602597328923,\\\"ask\\\":11959.900610158873,\\\"price\\\":11912.251603743898,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5889117327487459,\\\"bias\\\":0.08891173274874586,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11919.983669363637,\\\"ask\\\":12015.726510081417,\\\"price\\\":11967.855089722527,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5893267510382921,\\\"bias\\\":0.08932675103829213,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11944.845661198946,\\\"ask\\\":12040.788196630263,\\\"price\\\":11992.816928914604,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5895130634541972,\\\"bias\\\":0.08951306345419718,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11954.095797447733,\\\"ask\\\":12050.112631162172,\\\"price\\\":12002.104214304953,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5895823827285088,\\\"bias\\\":0.08958238272850882,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11889.429140077758,\\\"ask\\\":11984.926562889628,\\\"price\\\":11937.177851483693,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5890951437549602,\\\"bias\\\":0.0890951437549602,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11953.216771672778,\\\"ask\\\":12049.226544939225,\\\"price\\\":12001.221658306002,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5895731455277778,\\\"bias\\\":0.08957314552777784,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11950.2198935898,\\\"ask\\\":12046.205595546346,\\\"price\\\":11998.212744568073,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.58959560869574,\\\"bias\\\":0.08959560869574001,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5885769640453674,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":10649.449363407888,\\\"ask\\\":10734.987109298712,\\\"price\\\":10692.218236353297,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.09130115303615172},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.49831373156415404,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":10449.190004086196,\\\"ask\\\":10533.119241066808,\\\"price\\\":10491.154622576505,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.0908820225619883},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.41151786655902106,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":10250.855325650147,\\\"ask\\\":10333.191513004767,\\\"price\\\":10292.02341932746,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.09098785604739129},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5467818458957372,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":10247.637513240103,\\\"ask\\\":10329.947854711909,\\\"price\\\":10288.792683976004,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.09575421943666962},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.495911672692463,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":9908.97746955472,\\\"ask\\\":9988.567650033072,\\\"price\\\":9948.772559793899,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.09389828422426999},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5899936667384188,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":10153.234524272537,\\\"ask\\\":10234.78660880485,\\\"price\\\":10194.010566538696,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.09220892964192617},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5911770594589217,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11297.626201601503,\\\"ask\\\":11388.370187156534,\\\"price\\\":11342.998194379015,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.09370214422793244},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5916076992228189,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":12225.425430666848,\\\"ask\\\":12323.621618864974,\\\"price\\\":12274.523524765922,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.09320961520585014},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4660386797357346,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":12943.715892549202,\\\"ask\\\":13047.681482047597,\\\"price\\\":12995.69868729839,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.09147237914305395},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4137339998991601,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":12429.078378276383,\\\"ask\\\":12528.910333121969,\\\"price\\\":12478.994355699175,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.09076416724771036},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.418024472406034,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11971.297640844034,\\\"ask\\\":12067.452641975311,\\\"price\\\":12019.375141409673,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.08302990193831566},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.41923479532421426,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11408.404260224306,\\\"ask\\\":11500.038029382738,\\\"price\\\":11454.221144803523,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.08204611020737818},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.41853467719270016,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":10955.012816642884,\\\"ask\\\":11043.004887459287,\\\"price\\\":10999.008852051087,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.08363060056126359},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.42060006063566824,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":10424.365321789575,\\\"ask\\\":10508.095163731656,\\\"price\\\":10466.230242760617,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.08050937539255476},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4159308073759835,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":9618.242776889394,\\\"ask\\\":9695.497738952756,\\\"price\\\":9656.870257921075,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.08802378500714425},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.43466274173726044,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":8828.032050370231,\\\"ask\\\":8898.939938325006,\\\"price\\\":8863.485994347622,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.0867546354995215},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5841091798825547,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":8548.299807295738,\\\"ask\\\":8616.960849924613,\\\"price\\\":8582.63032861018,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.08525393777060897},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5844522329799606,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":8844.360360150502,\\\"ask\\\":8915.39939918786,\\\"price\\\":8879.879879669184,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.08581413618162581},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5858947408500997,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":9384.682292089446,\\\"ask\\\":9460.061266323102,\\\"price\\\":9422.371779206274,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.08752869181604961},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.528925387182257,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":9740.562038454358,\\\"ask\\\":9818.79948454636,\\\"price\\\":9779.68076150036,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.09327063238858585},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5128876700977822,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":9607.081064750626,\\\"ask\\\":9684.246374507662,\\\"price\\\":9645.663719629147,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.09371080529043263},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4533168959670906,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":9500.18227008705,\\\"ask\\\":9576.488954987353,\\\"price\\\":9538.335612537201,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.0947398816011264},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5918813730834951,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":9402.750576177621,\\\"ask\\\":9478.274677191093,\\\"price\\\":9440.51262668436,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.09464232571941877},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5945432077007161,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":10052.323539571593,\\\"ask\\\":10133.0650941063,\\\"price\\\":10092.694316838944,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.09609557580258421},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5903169928133049,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":10514.273338065781,\\\"ask\\\":10598.725332749045,\\\"price\\\":10556.499335407418,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.09316284843647904},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5879881382515416,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":11261.59960171726,\\\"ask\\\":11352.054216992103,\\\"price\\\":11306.826909354677,\\\"maxShares\\\":15600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.09001306360386663}],\\\"recentTicksOfPrices\\\":[11803.413220225966,11861.053836359,11915.422376709163,11899.345883675094,11936.328766460474,11901.90817829253,11917.577129286512,11937.355207993593,11941.530654278637,11972.475887628221,11961.20673637106,11991.315200660954,11979.180914709037,11912.251603743898,11967.855089722527,11992.816928914604,12002.104214304953,11937.177851483693,12001.221658306002,11998.212744568073]}],[\\\"VITA\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11593.16250627041,\\\"ask\\\":11733.12020252317,\\\"price\\\":11663.14135439679,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4357178943523259,\\\"bias\\\":0.06428210564767411,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11541.195213761126,\\\"ask\\\":11680.525538273334,\\\"price\\\":11610.86037601723,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4354284471221705,\\\"bias\\\":0.06457155287782951,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11499.09431437576,\\\"ask\\\":11637.916378533215,\\\"price\\\":11568.505346454487,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4351920354208187,\\\"bias\\\":0.06480796457918131,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11428.337026828329,\\\"ask\\\":11566.304878258852,\\\"price\\\":11497.32095254359,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4355932867817409,\\\"bias\\\":0.06440671321825908,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11468.667672894586,\\\"ask\\\":11607.122413412428,\\\"price\\\":11537.895043153507,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43536599523888575,\\\"bias\\\":0.06463400476111425,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11478.479607014971,\\\"ask\\\":11617.052801465856,\\\"price\\\":11547.766204240414,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43542129238540184,\\\"bias\\\":0.06457870761459816,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11440.65032179246,\\\"ask\\\":11578.766824671244,\\\"price\\\":11509.708573231852,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4352077585144295,\\\"bias\\\":0.0647922414855705,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11416.510204260496,\\\"ask\\\":11554.335277148952,\\\"price\\\":11485.422740704724,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.435344761179573,\\\"bias\\\":0.06465523882042701,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11370.986836863742,\\\"ask\\\":11508.262331876182,\\\"price\\\":11439.624584369962,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43560360627658823,\\\"bias\\\":0.06439639372341177,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11418.602561388341,\\\"ask\\\":11556.4528941214,\\\"price\\\":11487.52772775487,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43587326457343634,\\\"bias\\\":0.06412673542656366,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11457.860593049096,\\\"ask\\\":11596.184865802203,\\\"price\\\":11527.02272942565,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4360937372097456,\\\"bias\\\":0.06390626279025441,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11497.352884281556,\\\"ask\\\":11636.153925138073,\\\"price\\\":11566.753404709814,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4363140056203442,\\\"bias\\\":0.06368599437965577,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11436.256324128783,\\\"ask\\\":11574.319780758105,\\\"price\\\":11505.288052443444,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43597377232404283,\\\"bias\\\":0.06402622767595717,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11430.987907853305,\\\"ask\\\":11568.987761871656,\\\"price\\\":11499.98783486248,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4360032813063517,\\\"bias\\\":0.06399671869364831,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11420.310139571558,\\\"ask\\\":11558.181086930572,\\\"price\\\":11489.245613251065,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43594344561672055,\\\"bias\\\":0.06405655438327945,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11403.87841464439,\\\"ask\\\":11541.55099107873,\\\"price\\\":11472.71470286156,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43585114722111007,\\\"bias\\\":0.06414885277888993,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11373.874317580936,\\\"ask\\\":11511.184671515515,\\\"price\\\":11442.529494548226,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43602037086043866,\\\"bias\\\":0.06397962913956134,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11407.425082230639,\\\"ask\\\":11545.140475577486,\\\"price\\\":11476.282778904062,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43583164313058165,\\\"bias\\\":0.06416835686941835,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11487.518399234572,\\\"ask\\\":11626.20071391346,\\\"price\\\":11556.859556574016,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43538110705330596,\\\"bias\\\":0.06461889294669404,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11558.582731888935,\\\"ask\\\":11698.122966076728,\\\"price\\\":11628.352848982831,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4349813602721015,\\\"bias\\\":0.06501863972789851,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11591.114347401226,\\\"ask\\\":11731.047317389972,\\\"price\\\":11661.080832395599,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4347983653982642,\\\"bias\\\":0.06520163460173578,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11623.53887047789,\\\"ask\\\":11763.863283401164,\\\"price\\\":11693.701076939527,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43498075786221696,\\\"bias\\\":0.06501924213778304,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11700.817848146517,\\\"ask\\\":11842.075206474243,\\\"price\\\":11771.44652731038,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43454847810497726,\\\"bias\\\":0.06545152189502274,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11685.561849204048,\\\"ask\\\":11826.635030482164,\\\"price\\\":11756.098439843106,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4344630283541053,\\\"bias\\\":0.06553697164589473,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11690.653109595869,\\\"ask\\\":11831.787754782135,\\\"price\\\":11761.220432189002,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43443447467459495,\\\"bias\\\":0.06556552532540505,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11709.402362705958,\\\"ask\\\":11850.763357024338,\\\"price\\\":11780.082859865148,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43453962745075697,\\\"bias\\\":0.06546037254924303,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11663.387881438191,\\\"ask\\\":11804.193368940463,\\\"price\\\":11733.790625189327,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4342813727209077,\\\"bias\\\":0.06571862727909228,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11721.197323365353,\\\"ask\\\":11862.700711574997,\\\"price\\\":11791.949017470175,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43395563913424806,\\\"bias\\\":0.06604436086575194,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11797.187195175018,\\\"ask\\\":11939.607966142925,\\\"price\\\":11868.397580658971,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4343838123299962,\\\"bias\\\":0.06561618767000382,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11868.977467166487,\\\"ask\\\":12012.264921498476,\\\"price\\\":11940.621194332482,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43398451342238886,\\\"bias\\\":0.06601548657761114,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11890.265928109116,\\\"ask\\\":12033.810385993735,\\\"price\\\":11962.038157051426,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43410292026168934,\\\"bias\\\":0.06589707973831066,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11841.407024917535,\\\"ask\\\":11984.36163688837,\\\"price\\\":11912.884330902953,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43437481861234706,\\\"bias\\\":0.06562518138765294,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11796.116902849411,\\\"ask\\\":11938.524752783207,\\\"price\\\":11867.32082781631,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43462678055035325,\\\"bias\\\":0.06537321944964675,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11775.535890231373,\\\"ask\\\":11917.695277236178,\\\"price\\\":11846.615583733776,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4347410383698629,\\\"bias\\\":0.06525896163013711,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11749.6487697097,\\\"ask\\\":11891.495636144828,\\\"price\\\":11820.572202927264,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4348848185489942,\\\"bias\\\":0.06511518145100581,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11744.195201155186,\\\"ask\\\":11885.97622974056,\\\"price\\\":11815.085715447873,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43485458147443096,\\\"bias\\\":0.06514541852556904,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11784.598772678086,\\\"ask\\\":11926.867570738586,\\\"price\\\":11855.733171708336,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4350787013508213,\\\"bias\\\":0.06492129864917873,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11799.33864575147,\\\"ask\\\":11941.785389965773,\\\"price\\\":11870.562017858621,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43499749946009025,\\\"bias\\\":0.06500250053990975,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11760.039318755289,\\\"ask\\\":11902.011624414308,\\\"price\\\":11831.025471584799,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4352147227579931,\\\"bias\\\":0.06478527724200689,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11775.853933136028,\\\"ask\\\":11918.017159693003,\\\"price\\\":11846.935546414516,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43512760109544074,\\\"bias\\\":0.06487239890455926,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11863.690962160785,\\\"ask\\\":12006.91459550679,\\\"price\\\":11935.302778833788,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4346437127237065,\\\"bias\\\":0.0653562872762935,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11790.626235129374,\\\"ask\\\":11932.967799336166,\\\"price\\\":11861.79701723277,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4350487157485163,\\\"bias\\\":0.06495128425148372,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11823.274481801685,\\\"ask\\\":11966.010189831484,\\\"price\\\":11894.642335816585,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4352285658690813,\\\"bias\\\":0.06477143413091868,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11835.429849218564,\\\"ask\\\":11978.312302126635,\\\"price\\\":11906.8710756726,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4352951566076446,\\\"bias\\\":0.06470484339235538,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11750.581867902176,\\\"ask\\\":11892.439999104216,\\\"price\\\":11821.510933503196,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43482793928981706,\\\"bias\\\":0.06517206071018294,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11834.276494993008,\\\"ask\\\":11977.14502410761,\\\"price\\\":11905.71075955031,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43436374514358683,\\\"bias\\\":0.06563625485641317,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11830.337793607685,\\\"ask\\\":11973.158773007375,\\\"price\\\":11901.74828330753,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43434189271532647,\\\"bias\\\":0.06565810728467353,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5716453737230297,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":14120.98417666299,\\\"ask\\\":14291.45883473137,\\\"price\\\":14206.221505697178,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.07299710498655143},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4996187719125573,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":15229.825279136448,\\\"ask\\\":15413.686348904697,\\\"price\\\":15321.755814020575,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.0748968500572268},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5345255391485252,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":15757.227542397082,\\\"ask\\\":15947.455641500466,\\\"price\\\":15852.341591948776,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.0706881681488416},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5353521840116836,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":16566.835019684466,\\\"ask\\\":16766.837052115265,\\\"price\\\":16666.836035899854,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.0722374325446013},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.42812495587332644,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":16110.680910966279,\\\"ask\\\":16305.176052748568,\\\"price\\\":16207.928481857432,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.07320436409024894},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5317046394504265,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":16128.986416156722,\\\"ask\\\":16323.702549953387,\\\"price\\\":16226.344483055052,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.0746476404669203},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5398617290881786,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":15773.387152887304,\\\"ask\\\":15963.810337831621,\\\"price\\\":15868.598745359464,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.07279796890403167},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.49336928740478087,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":14711.254340181033,\\\"ask\\\":14888.854996199305,\\\"price\\\":14800.054668190176,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.07136115359678685},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4721225427412287,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":14518.075789964749,\\\"ask\\\":14693.344310567947,\\\"price\\\":14605.710050266345,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.0733572602988749},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5359975090583672,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":14020.385464600646,\\\"ask\\\":14189.64565129602,\\\"price\\\":14105.01555794833,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.07415333378927591},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.48880958047286344,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":13914.94429580908,\\\"ask\\\":14082.931550889269,\\\"price\\\":13998.937923349173,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.07183039916249057},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.47817420448890036,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":14149.259490325314,\\\"ask\\\":14320.07550026888,\\\"price\\\":14234.667495297095,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.07223549303999266},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4349804187711156,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":13321.072664068162,\\\"ask\\\":13481.890442708824,\\\"price\\\":13401.481553388496,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.06855608627402304},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.44047506773301337,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":12718.424035983013,\\\"ask\\\":12871.966378469737,\\\"price\\\":12795.19520722638,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.06258485770052791},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5164166599311328,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":12784.731530798015,\\\"ask\\\":12939.074366179882,\\\"price\\\":12861.902948488952,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.06197296662505902},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4532536595556834,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":13305.372093611919,\\\"ask\\\":13466.00032814245,\\\"price\\\":13385.686210877186,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.06541845134052038},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4352651480178173,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":12428.438513770303,\\\"ask\\\":12578.480025002944,\\\"price\\\":12503.459269386623,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.06634034234096953},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5133935357230706,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11719.652967982374,\\\"ask\\\":11861.137712062642,\\\"price\\\":11790.39534002251,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.06677354428994864},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4664637947062784,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":12087.238321332403,\\\"ask\\\":12233.16071555373,\\\"price\\\":12160.199518443069,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.06750439354981724},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5221296190966931,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11836.955918832593,\\\"ask\\\":11979.856795116288,\\\"price\\\":11908.406356974438,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.06741141850380522},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5102851577228993,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":12031.492869165417,\\\"ask\\\":12176.742280060773,\\\"price\\\":12104.117574613092,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.06859885890622541},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4592421120333375,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":12494.151621223093,\\\"ask\\\":12644.98644964833,\\\"price\\\":12569.569035435705,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.06768488843367348},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.47227281059392967,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":12424.299758904828,\\\"ask\\\":12574.291305290006,\\\"price\\\":12499.295532097416,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.07031834126348085},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5691116334962217,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":12941.94578140693,\\\"ask\\\":13098.18657554867,\\\"price\\\":13020.066178477802,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.07083220793266609},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4636433182456049,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":13113.407294927516,\\\"ask\\\":13271.71804697895,\\\"price\\\":13192.562670953232,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.07020109868414615},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43666822480428935,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":11579.085864156976,\\\"ask\\\":11718.87362106833,\\\"price\\\":11648.97974261265,\\\"maxShares\\\":14700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.0645103446187209}],\\\"recentTicksOfPrices\\\":[11791.949017470175,11868.397580658971,11940.621194332482,11962.038157051426,11912.884330902953,11867.32082781631,11846.615583733776,11820.572202927264,11815.085715447873,11855.733171708336,11870.562017858621,11831.025471584799,11846.935546414516,11935.302778833788,11861.79701723277,11894.642335816585,11906.8710756726,11821.510933503196,11905.71075955031,11901.74828330753]}],[\\\"ICRS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9731.150375133906,\\\"ask\\\":9927.739271601256,\\\"price\\\":9829.444823367581,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41397496238578796,\\\"bias\\\":0.08602503761421204,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9692.043508134933,\\\"ask\\\":9887.842366885134,\\\"price\\\":9789.942937510034,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41432206872117916,\\\"bias\\\":0.08567793127882084,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9723.841629176639,\\\"ask\\\":9920.28287421051,\\\"price\\\":9822.062251693575,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41460316498608146,\\\"bias\\\":0.08539683501391854,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9670.19017259417,\\\"ask\\\":9865.547549818295,\\\"price\\\":9767.868861206232,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41507695759038965,\\\"bias\\\":0.08492304240961035,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9639.706008253726,\\\"ask\\\":9834.447543774002,\\\"price\\\":9737.076776013864,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41480840085443854,\\\"bias\\\":0.08519159914556146,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9647.096337886212,\\\"ask\\\":9841.987172995026,\\\"price\\\":9744.54175544062,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4147430882817247,\\\"bias\\\":0.08525691171827532,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9675.680956674321,\\\"ask\\\":9871.149258829359,\\\"price\\\":9773.41510775184,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41499570691796106,\\\"bias\\\":0.08500429308203894,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9657.38210689972,\\\"ask\\\":9852.480735321937,\\\"price\\\":9754.931421110829,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4148346404123505,\\\"bias\\\":0.08516535958764948,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9622.859884136195,\\\"ask\\\":9817.261093916723,\\\"price\\\":9720.060489026459,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.414529107800339,\\\"bias\\\":0.08547089219966097,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9586.88593090394,\\\"ask\\\":9780.560394154523,\\\"price\\\":9683.723162529232,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4148498298680543,\\\"bias\\\":0.0851501701319457,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9557.440660986538,\\\"ask\\\":9750.520270299397,\\\"price\\\":9653.980465642968,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41458749292744607,\\\"bias\\\":0.08541250707255393,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9528.01207051873,\\\"ask\\\":9720.49716285244,\\\"price\\\":9624.254616685585,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4148513013349988,\\\"bias\\\":0.08514869866500119,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9482.615880752042,\\\"ask\\\":9674.183878342994,\\\"price\\\":9578.399879547518,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41525893426367505,\\\"bias\\\":0.08474106573632495,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9478.701135436635,\\\"ask\\\":9670.190047263639,\\\"price\\\":9574.445591350137,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4152939326970441,\\\"bias\\\":0.08470606730295588,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9486.642767998641,\\\"ask\\\":9678.2921168471,\\\"price\\\":9582.46744242287,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41536490280704974,\\\"bias\\\":0.08463509719295026,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9498.891792131242,\\\"ask\\\":9690.78859601268,\\\"price\\\":9594.840194071961,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41525562312051206,\\\"bias\\\":0.08474437687948794,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9476.490244540177,\\\"ask\\\":9667.934491904625,\\\"price\\\":9572.212368222401,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4150552952414395,\\\"bias\\\":0.08494470475856047,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9451.506736962952,\\\"ask\\\":9642.44626700261,\\\"price\\\":9546.976501982781,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4152798326336291,\\\"bias\\\":0.08472016736637089,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9392.412628611055,\\\"ask\\\":9582.158338279965,\\\"price\\\":9487.28548344551,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.415812865300304,\\\"bias\\\":0.08418713469969602,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9340.632857103263,\\\"ask\\\":9529.332510782117,\\\"price\\\":9434.98268394269,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41534617416006386,\\\"bias\\\":0.08465382583993614,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9317.134269223634,\\\"ask\\\":9505.359203955426,\\\"price\\\":9411.24673658953,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4151326701674878,\\\"bias\\\":0.08486732983251222,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9340.489766921715,\\\"ask\\\":9529.186529889832,\\\"price\\\":9434.838148405774,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.415345409264003,\\\"bias\\\":0.08465459073599702,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9285.171154886277,\\\"ask\\\":9472.750370136506,\\\"price\\\":9378.960762511391,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41584975909060573,\\\"bias\\\":0.08415024090939427,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9274.321109727885,\\\"ask\\\":9461.681132146632,\\\"price\\\":9368.001120937259,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41594820661071574,\\\"bias\\\":0.08405179338928426,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9270.701625567568,\\\"ask\\\":9457.988527094187,\\\"price\\\":9364.345076330877,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41591539095693825,\\\"bias\\\":0.08408460904306175,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9257.397312165673,\\\"ask\\\":9444.415439684171,\\\"price\\\":9350.906375924922,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4157945483536382,\\\"bias\\\":0.08420545164636178,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9290.125132358335,\\\"ask\\\":9477.804427961535,\\\"price\\\":9383.964780159935,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4160922411918944,\\\"bias\\\":0.08390775880810558,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9331.387485083036,\\\"ask\\\":9519.900363569563,\\\"price\\\":9425.6439243263,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4164649198685486,\\\"bias\\\":0.08353508013145139,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9385.598598113442,\\\"ask\\\":9575.206650600581,\\\"price\\\":9480.402624357012,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4159796190836172,\\\"bias\\\":0.08402038091638281,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9436.77944525039,\\\"ask\\\":9627.421454245346,\\\"price\\\":9532.100449747868,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4164377927661071,\\\"bias\\\":0.0835622072338929,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9421.63631487977,\\\"ask\\\":9611.97240204906,\\\"price\\\":9516.804358464415,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41657209994544503,\\\"bias\\\":0.08342790005455497,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9386.928897545562,\\\"ask\\\":9576.563824768704,\\\"price\\\":9481.746361157133,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4162636319708695,\\\"bias\\\":0.08373636802913048,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9419.224717640815,\\\"ask\\\":9609.512085673961,\\\"price\\\":9514.368401657388,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4159755361829058,\\\"bias\\\":0.08402446381709422,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9433.977012430927,\\\"ask\\\":9624.56240662145,\\\"price\\\":9529.269709526188,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41610713445101893,\\\"bias\\\":0.08389286554898107,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9415.388037144607,\\\"ask\\\":9605.59789648086,\\\"price\\\":9510.492966812733,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41627276569194466,\\\"bias\\\":0.08372723430805534,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9411.47175993987,\\\"ask\\\":9601.60250256492,\\\"price\\\":9506.537131252395,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41630760605140166,\\\"bias\\\":0.08369239394859834,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9382.546611796193,\\\"ask\\\":9572.093007994097,\\\"price\\\":9477.319809895145,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4160495934889681,\\\"bias\\\":0.08395040651103192,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9393.062792476489,\\\"ask\\\":9582.821636768942,\\\"price\\\":9487.942214622715,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41595549988308667,\\\"bias\\\":0.08404450011691333,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9421.190991772872,\\\"ask\\\":9611.518082515757,\\\"price\\\":9516.354537144314,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4162071771582505,\\\"bias\\\":0.08379282284174949,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9409.851568379865,\\\"ask\\\":9599.949579862288,\\\"price\\\":9504.900574121077,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41630815242747693,\\\"bias\\\":0.08369184757252307,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9472.748052064373,\\\"ask\\\":9664.116699580823,\\\"price\\\":9568.432375822598,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.415748746905815,\\\"bias\\\":0.08425125309418502,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9525.350414075123,\\\"ask\\\":9717.78173557159,\\\"price\\\":9621.566074823357,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4152808979890316,\\\"bias\\\":0.08471910201096838,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9501.77355040755,\\\"ask\\\":9693.728571627904,\\\"price\\\":9597.751061017727,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41549111250399084,\\\"bias\\\":0.08450888749600916,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9493.027873275441,\\\"ask\\\":9684.806214149692,\\\"price\\\":9588.917043712567,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.41541325668657414,\\\"bias\\\":0.08458674331342586,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9554.452887131776,\\\"ask\\\":9747.472137376864,\\\"price\\\":9650.96251225432,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4148659348047206,\\\"bias\\\":0.08513406519527938,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9493.857539379524,\\\"ask\\\":9685.652641185172,\\\"price\\\":9589.755090282348,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4154093101676511,\\\"bias\\\":0.08459068983234891,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9496.689955038251,\\\"ask\\\":9688.542277362256,\\\"price\\\":9592.616116200254,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4154345471162223,\\\"bias\\\":0.0845654528837777,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5776568360654667,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":13821.06902857263,\\\"ask\\\":14100.28254430138,\\\"price\\\":13960.675786437,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.08039883246999502},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5000173748409104,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":14443.351060776873,\\\"ask\\\":14735.13593069156,\\\"price\\\":14589.24349573421,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.07958267573631628},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5374445613977457,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":14904.128702406448,\\\"ask\\\":15205.222211545972,\\\"price\\\":15054.675456976205,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.07630162632656978},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4248549741867948,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":14096.211109332413,\\\"ask\\\":14380.983050935096,\\\"price\\\":14238.59708013375,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.07922790061604845},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4960299945650138,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":12906.579739114004,\\\"ask\\\":13167.318723742575,\\\"price\\\":13036.949231428292,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.07983348323647799},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.463051595684805,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":12914.29658495181,\\\"ask\\\":13175.191465455888,\\\"price\\\":13044.744025203854,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.08373407387634224},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4527335755335833,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":11727.688983210794,\\\"ask\\\":11964.61199297262,\\\"price\\\":11846.150488091705,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.08330991934840226},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5070915136918495,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":12040.039303438962,\\\"ask\\\":12283.27242068016,\\\"price\\\":12161.655862059559,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.08129271351517575},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4195815101413521,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":11491.670490251212,\\\"ask\\\":11723.825449650227,\\\"price\\\":11607.747969950718,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.08154347517004029},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4488030206771533,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":10784.497870298062,\\\"ask\\\":11002.366514142472,\\\"price\\\":10893.432192220267,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.0813966476551537},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.513204504624569,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":10642.093764084375,\\\"ask\\\":10857.085557298195,\\\"price\\\":10749.589660691287,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.08239609910493517},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5274132661164408,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":10653.255188974586,\\\"ask\\\":10868.472465519533,\\\"price\\\":10760.863827247058,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.08597853781430465},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4550079244285121,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":10424.610279928751,\\\"ask\\\":10635.208467402053,\\\"price\\\":10529.909373665398,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.09258637470019282},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5208398915110182,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":10477.751737597604,\\\"ask\\\":10689.42348987231,\\\"price\\\":10583.587613734955,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.0929652714658955},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5239595787146625,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":10391.402248149887,\\\"ask\\\":10601.329566294333,\\\"price\\\":10496.365907222116,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.09168128556475752},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4320483562094566,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":10060.647467397246,\\\"ask\\\":10263.892870779007,\\\"price\\\":10162.270169088128,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.09345652260825388},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4738674050205192,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9177.562246363588,\\\"ask\\\":9362.96754426993,\\\"price\\\":9270.26489531676,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.09503460408506698},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.47979496925009696,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9469.223908064007,\\\"ask\\\":9660.521360752171,\\\"price\\\":9564.872634408086,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.10090917566922541},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5680137025888796,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":8922.530857290347,\\\"ask\\\":9102.784005922478,\\\"price\\\":9012.657431606413,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.10178127488029087},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6025845334550629,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9515.917242785981,\\\"ask\\\":9708.157995165499,\\\"price\\\":9612.037618975743,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.10496602053819426},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6018328539806522,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":10307.536481563975,\\\"ask\\\":10515.769541797586,\\\"price\\\":10411.653011680783,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.1045809996834357},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.437140172951596,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":10945.533171362125,\\\"ask\\\":11166.655053611861,\\\"price\\\":11056.094112486997,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.1024610807352645},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.39685467532178154,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":10443.62088138769,\\\"ask\\\":10654.603121415723,\\\"price\\\":10549.112001401705,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.10637517362550675},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.40176968221815473,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9923.905045040003,\\\"ask\\\":10124.38797524284,\\\"price\\\":10024.146510141421,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.10133825090173765},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4118656515992026,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9363.285803082093,\\\"ask\\\":9552.443092033247,\\\"price\\\":9457.86444755767,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.09626995068860117},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5420238632819846,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":9651.540552369624,\\\"ask\\\":9846.52116958921,\\\"price\\\":9749.03086097942,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.09191867228663542}],\\\"recentTicksOfPrices\\\":[9425.6439243263,9480.402624357012,9532.100449747868,9516.804358464415,9481.746361157133,9514.368401657388,9529.269709526188,9510.492966812733,9506.537131252395,9477.319809895145,9487.942214622715,9516.354537144314,9504.900574121077,9568.432375822598,9621.566074823357,9597.751061017727,9588.917043712567,9650.96251225432,9589.755090282348,9592.616116200254]}],[\\\"UNV\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33678.47511983658,\\\"ask\\\":34016.952256719356,\\\"price\\\":33847.71368827797,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.39795264044673845,\\\"bias\\\":0.10204735955326155,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33792.70217789621,\\\"ask\\\":34132.32732541275,\\\"price\\\":33962.51475165448,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.3976065271021453,\\\"bias\\\":0.10239347289785472,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33699.76448831599,\\\"ask\\\":34038.45558870107,\\\"price\\\":33869.11003850853,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.397888909277324,\\\"bias\\\":0.10211109072267599,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33543.330332058234,\\\"ask\\\":33880.44922986786,\\\"price\\\":33711.88978096305,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.3974126994864764,\\\"bias\\\":0.1025873005135236,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33454.401482792906,\\\"ask\\\":33790.626623323486,\\\"price\\\":33622.5140530582,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.397140000822637,\\\"bias\\\":0.10285999917736299,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33475.96066029139,\\\"ask\\\":33812.40247597271,\\\"price\\\":33644.18156813205,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.39707371426895594,\\\"bias\\\":0.10292628573104406,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33392.79052552891,\\\"ask\\\":33728.39646045884,\\\"price\\\":33560.593492993874,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.39681735974092364,\\\"bias\\\":0.10318264025907636,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33445.9763618353,\\\"ask\\\":33782.11682778339,\\\"price\\\":33614.04659480935,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.39698170225103174,\\\"bias\\\":0.10301829774896826,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33345.41996972781,\\\"ask\\\":33680.549818669795,\\\"price\\\":33512.9848941988,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.3972923640556243,\\\"bias\\\":0.10270763594437571,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33240.5724881049,\\\"ask\\\":33574.64859351299,\\\"price\\\":33407.61054080895,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.3976163246906604,\\\"bias\\\":0.10238367530933962,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33326.65626774494,\\\"ask\\\":33661.5975367675,\\\"price\\\":33494.12690225622,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.39735117962592903,\\\"bias\\\":0.10264882037407097,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33240.35608150684,\\\"ask\\\":33574.43001197424,\\\"price\\\":33407.393046740544,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.3976176813533378,\\\"bias\\\":0.1023823186466622,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33107.129258563094,\\\"ask\\\":33439.86422598584,\\\"price\\\":33273.49674227447,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.39720568335337886,\\\"bias\\\":0.10279431664662114,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33095.63967295626,\\\"ask\\\":33428.25916715682,\\\"price\\\":33261.949420056546,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.3972413697493113,\\\"bias\\\":0.10275863025068871,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33072.34777448232,\\\"ask\\\":33404.73317925098,\\\"price\\\":33238.54047686665,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.3973137396820249,\\\"bias\\\":0.10268626031797512,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33108.24268477542,\\\"ask\\\":33440.988842411345,\\\"price\\\":33274.615763593385,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.39720228965351223,\\\"bias\\\":0.10279771034648777,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33042.585323415966,\\\"ask\\\":33374.67160807341,\\\"price\\\":33208.62846574469,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.3974065541306735,\\\"bias\\\":0.1025934458693265,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":32969.32963016022,\\\"ask\\\":33300.67967669449,\\\"price\\\":33135.00465342736,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.3971785982066386,\\\"bias\\\":0.10282140179336141,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33143.6933155641,\\\"ask\\\":33476.795760946654,\\\"price\\\":33310.24453825538,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.39772238598625675,\\\"bias\\\":0.10227761401374325,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33298.134680834104,\\\"ask\\\":33632.789300741984,\\\"price\\\":33465.46199078805,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.3981989742226506,\\\"bias\\\":0.1018010257773494,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33227.69157691342,\\\"ask\\\":33561.63822592762,\\\"price\\\":33394.664901420525,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.39841479361598603,\\\"bias\\\":0.10158520638401397,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33297.70573095081,\\\"ask\\\":33632.35603980458,\\\"price\\\":33465.030885377695,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.3986288440645772,\\\"bias\\\":0.10137115593542279,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33464.45908389675,\\\"ask\\\":33800.78530584546,\\\"price\\\":33632.6221948711,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.39913650607230905,\\\"bias\\\":0.10086349392769095,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33431.582608181714,\\\"ask\\\":33767.57841328906,\\\"price\\\":33599.58051073539,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.39923569480194565,\\\"bias\\\":0.10076430519805435,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33420.61460893634,\\\"ask\\\":33756.50018289549,\\\"price\\\":33588.557395915916,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.39926876369778447,\\\"bias\\\":0.10073123630221553,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33380.28977674795,\\\"ask\\\":33715.770076011744,\\\"price\\\":33548.02992637985,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.3991470760124114,\\\"bias\\\":0.1008529239875886,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33281.3869971962,\\\"ask\\\":33615.87329867555,\\\"price\\\":33448.63014793587,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.39884736991815717,\\\"bias\\\":0.10115263008184283,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33405.6416738416,\\\"ask\\\":33741.37676604101,\\\"price\\\":33573.509219941305,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.3992250190631194,\\\"bias\\\":0.10077498093688059,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33243.301818128515,\\\"ask\\\":33577.4053539891,\\\"price\\\":33410.35358605881,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.3997171421366422,\\\"bias\\\":0.10028285786335778,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33091.61690599276,\\\"ask\\\":33424.195970374596,\\\"price\\\":33257.90643818368,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4001768173627558,\\\"bias\\\":0.09982318263724421,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33136.32500624263,\\\"ask\\\":33469.353398265164,\\\"price\\\":33302.8392022539,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4000419522436144,\\\"bias\\\":0.09995804775638562,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33239.311912886405,\\\"ask\\\":33573.37534919682,\\\"price\\\":33406.343631041615,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4003526194684996,\\\"bias\\\":0.0996473805315004,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33335.44075619458,\\\"ask\\\":33670.470311533216,\\\"price\\\":33502.9555338639,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.400640801951166,\\\"bias\\\":0.09935919804883397,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33379.32711288184,\\\"ask\\\":33714.79773713191,\\\"price\\\":33547.06242500687,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.40050999482497196,\\\"bias\\\":0.09949000517502804,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33434.72251344574,\\\"ask\\\":33770.74987538991,\\\"price\\\":33602.73619441783,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.40067510566349,\\\"bias\\\":0.09932489433650998,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33446.41730559004,\\\"ask\\\":33782.56220313365,\\\"price\\\":33614.48975436185,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4007098475098909,\\\"bias\\\":0.09929015249010908,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33359.968420836085,\\\"ask\\\":33695.2444853671,\\\"price\\\":33527.606453101595,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4009671476020714,\\\"bias\\\":0.09903285239792858,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33328.5681880357,\\\"ask\\\":33663.52867233756,\\\"price\\\":33496.04843018663,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4008738446253988,\\\"bias\\\":0.09912615537460118,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33412.46206490278,\\\"ask\\\":33748.265703746016,\\\"price\\\":33580.3638843244,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4011233626192828,\\\"bias\\\":0.09887663738071722,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33446.307147629195,\\\"ask\\\":33782.45093805763,\\\"price\\\":33614.379042843415,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4010232057387344,\\\"bias\\\":0.0989767942612656,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33259.43808640895,\\\"ask\\\":33593.70379582009,\\\"price\\\":33426.57094111452,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4015793095603967,\\\"bias\\\":0.09842069043960328,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33414.68503390572,\\\"ask\\\":33750.51101414597,\\\"price\\\":33582.59802402585,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4011199057748735,\\\"bias\\\":0.0988800942251265,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33484.379393355855,\\\"ask\\\":33820.90581941973,\\\"price\\\":33652.642606387795,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4013261439848819,\\\"bias\\\":0.09867385601511808,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33458.469021141784,\\\"ask\\\":33794.73504145476,\\\"price\\\":33626.60203129827,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.40140255741358766,\\\"bias\\\":0.09859744258641234,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33640.449781262614,\\\"ask\\\":33978.544753938615,\\\"price\\\":33809.497267600615,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.40193882933734204,\\\"bias\\\":0.09806117066265796,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33820.93318311952,\\\"ask\\\":34160.84205933178,\\\"price\\\":33990.88762122565,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4014127241934945,\\\"bias\\\":0.0985872758065055,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33829.414802228195,\\\"ask\\\":34169.40892084355,\\\"price\\\":33999.411861535875,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4014374479265099,\\\"bias\\\":0.09856255207349007,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5456749353897549,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":28298.698884775018,\\\"ask\\\":28583.10791879284,\\\"price\\\":28440.90340178393,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.1011005018524187},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.503208585167081,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":28526.421562085277,\\\"ask\\\":28813.11926622685,\\\"price\\\":28669.77041415607,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.10435285599199928},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5998831068628647,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":29928.96260694571,\\\"ask\\\":30229.756200985354,\\\"price\\\":30079.359403965533,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.10208569646492549},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5509585688523416,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":32784.589238571774,\\\"ask\\\":33114.082597753426,\\\"price\\\":32949.33591816259,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.09936950861934674},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.39987735177806955,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":31445.869959554017,\\\"ask\\\":31761.90885361986,\\\"price\\\":31603.88940658695,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.10326040658098828},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.3996378395901853,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":31532.160715497932,\\\"ask\\\":31849.06685334211,\\\"price\\\":31690.61378442004,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.10251334263876011},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5898099164277917,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":32136.367473426522,\\\"ask\\\":32459.34604099865,\\\"price\\\":32297.856757212576,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.10163627624354893},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5077558415240003,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":34223.10910832205,\\\"ask\\\":34567.05995363181,\\\"price\\\":34395.08453097692,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.10311108009869357},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.538818327558509,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33379.88462865899,\\\"ask\\\":33715.360856082734,\\\"price\\\":33547.62274237085,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.10411189655109043},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4491306935561888,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":34160.0326124711,\\\"ask\\\":34503.349523149205,\\\"price\\\":34331.69106781015,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.10371919912286759},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.6009972603538474,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33379.23219025262,\\\"ask\\\":33714.70186050641,\\\"price\\\":33546.967025379505,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.10339053466222015},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.46951525547318307,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":36616.60198307868,\\\"ask\\\":36984.608033159886,\\\"price\\\":36800.605008119295,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.1001551671150005},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.547512595097841,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":37881.50545486295,\\\"ask\\\":38262.224102650514,\\\"price\\\":38071.86477875674,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.09733446491167497},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.47918389565173775,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":37845.378389210484,\\\"ask\\\":38225.7339509111,\\\"price\\\":38035.55617006081,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.09432472514650747},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5908254648525407,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":39069.51287687468,\\\"ask\\\":39462.1712977478,\\\"price\\\":39265.84208731126,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.09276079077187172},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5689902065703452,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":39963.77847219289,\\\"ask\\\":40365.424486988784,\\\"price\\\":40164.60147959084,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.09212981513991947},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4113727589024015,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":40622.6322394768,\\\"ask\\\":41030.899900175056,\\\"price\\\":40826.76606982595,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.0898763641201476},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4114422458582968,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":39932.61057026825,\\\"ask\\\":40333.943339818674,\\\"price\\\":40133.27695504345,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.09152174880386676},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.40762160902456324,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":36473.05511848686,\\\"ask\\\":36839.61848651187,\\\"price\\\":36656.336802499354,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.09369013983417424},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4689573536809047,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":35277.338944714764,\\\"ask\\\":35631.88506476216,\\\"price\\\":35454.61200473849,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.09304539157583569},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5936124308492997,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":36533.172348351145,\\\"ask\\\":36900.3399096411,\\\"price\\\":36716.756128996116,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.09610466919358707},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4514285868202289,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":36931.5467154867,\\\"ask\\\":37302.71803926044,\\\"price\\\":37117.13237737359,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.10052291240184164},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5401990282947567,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":36435.68174382247,\\\"ask\\\":36801.86950004179,\\\"price\\\":36618.77562193212,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.10454262262930764},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5081933799516423,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":36712.15502938762,\\\"ask\\\":37081.12141159251,\\\"price\\\":36896.63822049006,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.10439333726835831},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.44219386941648847,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":35740.79103611465,\\\"ask\\\":36099.99496612584,\\\"price\\\":35920.39300112024,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.10509559429532017},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.39821556313543666,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":33487.4511332883,\\\"ask\\\":33824.00843111027,\\\"price\\\":33655.72978219929,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.10316282789039521}],\\\"recentTicksOfPrices\\\":[33573.509219941305,33410.35358605881,33257.90643818368,33302.8392022539,33406.343631041615,33502.9555338639,33547.06242500687,33602.73619441783,33614.48975436185,33527.606453101595,33496.04843018663,33580.3638843244,33614.379042843415,33426.57094111452,33582.59802402585,33652.642606387795,33626.60203129827,33809.497267600615,33990.88762122565,33999.411861535875]}],[\\\"AERO\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16395.650203699723,\\\"ask\\\":16560.430607757004,\\\"price\\\":16478.040405728363,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5738620034415657,\\\"bias\\\":0.07386200344156568,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16341.18151896205,\\\"ask\\\":16505.41449905212,\\\"price\\\":16423.298009007085,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.574108201439849,\\\"bias\\\":0.07410820143984898,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16297.012285633458,\\\"ask\\\":16460.80135383078,\\\"price\\\":16378.90681973212,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5743090543559288,\\\"bias\\\":0.07430905435592883,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16371.705347047427,\\\"ask\\\":16536.24509927906,\\\"price\\\":16453.975223163245,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5739684783863376,\\\"bias\\\":0.07396847838633758,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16329.047677335524,\\\"ask\\\":16493.158709268544,\\\"price\\\":16411.103193302035,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5737752446483728,\\\"bias\\\":0.07377524464837282,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16339.389251308296,\\\"ask\\\":16503.604218658125,\\\"price\\\":16421.49673498321,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5738219682641627,\\\"bias\\\":0.07382196826416265,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16379.383484381551,\\\"ask\\\":16544.00040382257,\\\"price\\\":16461.691944102062,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5736412728318381,\\\"bias\\\":0.07364127283183808,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16353.785342932983,\\\"ask\\\":16518.14499462075,\\\"price\\\":16435.965168776867,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5737565415405116,\\\"bias\\\":0.07375654154051159,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16305.462389225673,\\\"ask\\\":16469.336383087237,\\\"price\\\":16387.399386156456,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5739751268131886,\\\"bias\\\":0.07397512681318863,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16356.006375391918,\\\"ask\\\":16520.388349013945,\\\"price\\\":16438.197362202933,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.574204436335178,\\\"bias\\\":0.07420443633517804,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16397.633552955856,\\\"ask\\\":16562.43389017149,\\\"price\\\":16480.033721563675,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5743932918037113,\\\"bias\\\":0.07439329180371135,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16439.47186014985,\\\"ask\\\":16604.692682864923,\\\"price\\\":16522.08227150739,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5742034784757329,\\\"bias\\\":0.07420347847573294,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16504.485558253164,\\\"ask\\\":16670.359784969274,\\\"price\\\":16587.42267161122,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5744969333135086,\\\"bias\\\":0.0744969333135086,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16498.85651878637,\\\"ask\\\":16664.67417224151,\\\"price\\\":16581.76534551394,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5744715166322192,\\\"bias\\\":0.07447151663221918,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16510.275847381363,\\\"ask\\\":16676.20826795806,\\\"price\\\":16593.24205766971,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5744199727741086,\\\"bias\\\":0.07441997277410861,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16527.8862399617,\\\"ask\\\":16693.99564940855,\\\"price\\\":16610.940944685124,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.574499351516686,\\\"bias\\\":0.07449935151668596,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16560.161784800734,\\\"ask\\\":16726.59557158265,\\\"price\\\":16643.378678191693,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5743538696852257,\\\"bias\\\":0.07435386968522573,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16596.322973928756,\\\"ask\\\":16763.120189747133,\\\"price\\\":16679.721581837945,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5745162306801863,\\\"bias\\\":0.07451623068018631,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16510.50993695463,\\\"ask\\\":16676.444710190353,\\\"price\\\":16593.477323572493,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.574128934098618,\\\"bias\\\":0.07412893409861798,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16435.24619501748,\\\"ask\\\":16600.424548736246,\\\"price\\\":16517.835371876863,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5737894672661853,\\\"bias\\\":0.0737894672661853,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16401.075210192044,\\\"ask\\\":16565.91013692764,\\\"price\\\":16483.492673559842,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5736357298597095,\\\"bias\\\":0.07363572985970945,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16435.038117304583,\\\"ask\\\":16600.214379790053,\\\"price\\\":16517.62624854732,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5734832469632323,\\\"bias\\\":0.07348324696323227,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16354.54742609678,\\\"ask\\\":16518.914736911822,\\\"price\\\":16436.731081504302,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5738449027881332,\\\"bias\\\":0.07384490278813316,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16370.353125297343,\\\"ask\\\":16534.879287360633,\\\"price\\\":16452.61620632899,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5737735360733868,\\\"bias\\\":0.07377353607338677,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16365.07502252585,\\\"ask\\\":16529.54813833013,\\\"price\\\":16447.31158042799,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5737497424577341,\\\"bias\\\":0.07374974245773414,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16384.503882977115,\\\"ask\\\":16549.172263710552,\\\"price\\\":16466.838073343835,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5738372992488003,\\\"bias\\\":0.07383729924880034,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16432.35446644296,\\\"ask\\\":16597.50375756299,\\\"price\\\":16514.929112002977,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5740529394583441,\\\"bias\\\":0.07405293945834412,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16492.646229411002,\\\"ask\\\":16658.401467897544,\\\"price\\\":16575.523848654273,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5737812326690325,\\\"bias\\\":0.07378123266903247,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16571.797557896647,\\\"ask\\\":16738.34828712174,\\\"price\\\":16655.072922509193,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5741353227587507,\\\"bias\\\":0.07413532275875068,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16646.449459984113,\\\"ask\\\":16813.75045958194,\\\"price\\\":16730.099959783027,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5738013612294431,\\\"bias\\\":0.07380136122944314,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16624.37650607704,\\\"ask\\\":16791.455666942133,\\\"price\\\":16707.916086509587,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5737033717473052,\\\"bias\\\":0.07370337174730524,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16573.75379293439,\\\"ask\\\":16740.324182813125,\\\"price\\\":16657.03898787376,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.573478252882127,\\\"bias\\\":0.07347825288212695,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16526.782030780687,\\\"ask\\\":16692.880342647826,\\\"price\\\":16609.83118671426,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5732694159160787,\\\"bias\\\":0.07326941591607872,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16505.427159535167,\\\"ask\\\":16671.310849580746,\\\"price\\\":16588.369004557957,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5733642125504219,\\\"bias\\\":0.07336421255042191,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16532.346831286846,\\\"ask\\\":16698.501070797265,\\\"price\\\":16615.423951042056,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5732445585420107,\\\"bias\\\":0.07324455854201073,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16526.665803790216,\\\"ask\\\":16692.7629475469,\\\"price\\\":16609.71437566856,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5732193807864976,\\\"bias\\\":0.07321938078649759,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16568.754538623067,\\\"ask\\\":16735.27468473988,\\\"price\\\":16652.014611681476,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5730329117709602,\\\"bias\\\":0.07303291177096016,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16584.09551275168,\\\"ask\\\":16750.769839513,\\\"price\\\":16667.43267613234,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5731005327866137,\\\"bias\\\":0.07310053278661366,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16625.120859476174,\\\"ask\\\":16792.207501279954,\\\"price\\\":16708.664180378066,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5732813671710401,\\\"bias\\\":0.07328136717104006,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16641.67088906506,\\\"ask\\\":16808.923862824504,\\\"price\\\":16725.29737594478,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5732084167964084,\\\"bias\\\":0.07320841679640844,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16733.560473475445,\\\"ask\\\":16901.736960646052,\\\"price\\\":16817.64871706075,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5728041850915749,\\\"bias\\\":0.07280418509157494,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16810.32196093866,\\\"ask\\\":16979.26992034508,\\\"price\\\":16894.79594064187,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5724702120826606,\\\"bias\\\":0.07247021208266058,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16844.77941236163,\\\"ask\\\":17014.0736778125,\\\"price\\\":16929.426545087066,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5723216641358543,\\\"bias\\\":0.07232166413585428,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16831.96940491433,\\\"ask\\\":17001.134926571758,\\\"price\\\":16916.552165743044,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5722666235738205,\\\"bias\\\":0.07226662357382052,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16921.940126799513,\\\"ask\\\":17092.009876817596,\\\"price\\\":17006.975001808554,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5726529051867876,\\\"bias\\\":0.07265290518678758,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16833.18597902334,\\\"ask\\\":17002.363727556236,\\\"price\\\":16917.77485328979,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5722698376741163,\\\"bias\\\":0.07226983767411632,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16829.038355382312,\\\"ask\\\":16998.174419255498,\\\"price\\\":16913.606387318905,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5722876490357011,\\\"bias\\\":0.07228764903570106,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5601240739961965,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":13885.42299486386,\\\"ask\\\":14024.974984761991,\\\"price\\\":13955.19898981293,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.06115685057014886},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5604655499321453,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":14371.957793876363,\\\"ask\\\":14516.399580749501,\\\"price\\\":14444.178687312924,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.0629345071823425},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.4683313888597374,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":14365.674002807624,\\\"ask\\\":14510.052636001668,\\\"price\\\":14437.863319404642,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.06435069927835302},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5311702188494545,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":14773.765423194453,\\\"ask\\\":14922.24547769891,\\\"price\\\":14848.005450446677,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.06314985414132501},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.43938571557514805,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":14507.353200269412,\\\"ask\\\":14653.155744995736,\\\"price\\\":14580.254472632574,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.06207070155997918},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5283588668931912,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":14784.29261163351,\\\"ask\\\":14932.878467026814,\\\"price\\\":14858.585539330163,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.06446535492242633},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.4431662348289481,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":14383.097544355749,\\\"ask\\\":14527.651288520114,\\\"price\\\":14455.374416437922,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.06336603585573075},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.4359948860794304,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":14378.65056679563,\\\"ask\\\":14523.159617718193,\\\"price\\\":14450.905092256915,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.0654608719922935},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5261626892675771,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":13860.075640865025,\\\"ask\\\":13999.372883486783,\\\"price\\\":13929.724262175912,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.06864336112717251},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.4417320979068726,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":13414.535048185555,\\\"ask\\\":13549.354495906007,\\\"price\\\":13481.944772045774,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.07010325509726817},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.48956487368283313,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":13773.95392119156,\\\"ask\\\":13912.385618891974,\\\"price\\\":13843.16977004177,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.06892954878667817},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5683285271150466,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":14231.254520337294,\\\"ask\\\":14374.282203958759,\\\"price\\\":14302.768362148025,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.06934890705695607},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5684566188105182,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":14869.92686065998,\\\"ask\\\":15019.373361772141,\\\"price\\\":14944.65011121606,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.06944307240024761},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5690060262657173,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16012.550638565177,\\\"ask\\\":16173.480795736697,\\\"price\\\":16093.015717150927,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.0697931888717469},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.48259558901170285,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16075.821075739846,\\\"ask\\\":16237.387116702052,\\\"price\\\":16156.60409622095,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.06880987885621093},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.43104757725274434,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16348.52066793456,\\\"ask\\\":16512.827408315807,\\\"price\\\":16430.67403812518,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.07048732097597932},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.4279315569044333,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15194.634775710441,\\\"ask\\\":15347.34467295376,\\\"price\\\":15270.989724332101,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.07492208140622914},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5152656061081421,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":14989.59745575882,\\\"ask\\\":15140.246676419712,\\\"price\\\":15064.922066089275,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.07610350716025005},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.46263522893949455,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15926.026696413639,\\\"ask\\\":16086.087266226841,\\\"price\\\":16006.056981320235,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.07784889370220716},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5262759215281927,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16459.749500048394,\\\"ask\\\":16625.174118139323,\\\"price\\\":16542.46180909386,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.0784619299635187},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.4190844404475086,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15763.922718075495,\\\"ask\\\":15922.354102176745,\\\"price\\\":15843.138410126126,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.08291250491697227},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5390674173985419,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15946.987426675782,\\\"ask\\\":16107.25865709464,\\\"price\\\":16027.123041885208,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.0809782897565568},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.4687292327377592,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16784.267888599614,\\\"ask\\\":16952.953998032783,\\\"price\\\":16868.610943316206,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.07825941639896306},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.4939397333026258,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16697.0435454519,\\\"ask\\\":16864.853028320762,\\\"price\\\":16780.948286886338,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.07584076202132195},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5412310106214193,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16144.417859964553,\\\"ask\\\":16306.6733158436,\\\"price\\\":16225.545587904078,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.07517370511515675},{\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.5735917672538444,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15896.554605543055,\\\"ask\\\":16056.318973437972,\\\"price\\\":15976.436789490499,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.07469107330181102}],\\\"recentTicksOfPrices\\\":[16575.523848654273,16655.072922509193,16730.099959783027,16707.916086509587,16657.03898787376,16609.83118671426,16588.369004557957,16615.423951042056,16609.71437566856,16652.014611681476,16667.43267613234,16708.664180378066,16725.29737594478,16817.64871706075,16894.79594064187,16929.426545087066,16916.552165743044,17006.975001808554,16917.77485328979,16913.606387318905]}],[\\\"OMN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11695.327584366705,\\\"ask\\\":11836.518661843971,\\\"price\\\":11765.923123105338,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5524492349430644,\\\"bias\\\":0.052449234943064416,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11744.569332885641,\\\"ask\\\":11886.354878151868,\\\"price\\\":11815.462105518754,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5522284038446239,\\\"bias\\\":0.052228403844623905,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11784.776789768199,\\\"ask\\\":11927.04773692838,\\\"price\\\":11855.91226334829,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5524072074461955,\\\"bias\\\":0.052407207446195536,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11716.943288230912,\\\"ask\\\":11858.395319879575,\\\"price\\\":11787.669304055244,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5521038037085981,\\\"bias\\\":0.05210380370859813,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11678.406324660273,\\\"ask\\\":11819.39312133625,\\\"price\\\":11748.899722998261,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5522757383313188,\\\"bias\\\":0.05227573833131882,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11687.74890858816,\\\"ask\\\":11828.848492997677,\\\"price\\\":11758.298700792919,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5523175582902392,\\\"bias\\\":0.05231755829023921,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11651.723462796714,\\\"ask\\\":11792.3881323677,\\\"price\\\":11722.055797582207,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5524793166229137,\\\"bias\\\":0.05247931662291372,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11674.761100864758,\\\"ask\\\":11815.703890814835,\\\"price\\\":11745.232495839797,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5525830780541112,\\\"bias\\\":0.05258307805411122,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11718.465584811034,\\\"ask\\\":11859.935994285614,\\\"price\\\":11789.200789548324,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5527799228778131,\\\"bias\\\":0.05277992287781308,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11672.76017847612,\\\"ask\\\":11813.678812421504,\\\"price\\\":11743.219495448811,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5525732598619907,\\\"bias\\\":0.052573259861990684,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11710.28605955969,\\\"ask\\\":11851.657722250551,\\\"price\\\":11780.97189090512,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5524042460325629,\\\"bias\\\":0.052404246032562884,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11672.665900837848,\\\"ask\\\":11813.583396622613,\\\"price\\\":11743.12464873023,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5522353509343744,\\\"bias\\\":0.05223535093437437,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11730.97612420067,\\\"ask\\\":11872.597566343937,\\\"price\\\":11801.786845272303,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5519744118304633,\\\"bias\\\":0.05197441183046325,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11725.922707447333,\\\"ask\\\":11867.4831425473,\\\"price\\\":11796.702924997317,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5519968107810654,\\\"bias\\\":0.05199681078106544,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11736.174301307028,\\\"ask\\\":11877.858498103493,\\\"price\\\":11807.01639970526,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5519513516560629,\\\"bias\\\":0.051951351656062905,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11720.383136799179,\\\"ask\\\":11861.876695794743,\\\"price\\\":11791.12991629696,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5518813563043043,\\\"bias\\\":0.05188135630430435,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11691.54376687307,\\\"ask\\\":11832.689164461077,\\\"price\\\":11762.116465667073,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5520093313310898,\\\"bias\\\":0.05200933133108976,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11723.79212652176,\\\"ask\\\":11865.326840322829,\\\"price\\\":11794.559483422294,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5521527867767773,\\\"bias\\\":0.05215278677677726,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11800.761603494218,\\\"ask\\\":11943.225526272821,\\\"price\\\":11871.99356488352,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5518103913574843,\\\"bias\\\":0.05181039135748433,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11732.892466999001,\\\"ask\\\":11874.537044065386,\\\"price\\\":11803.714755532194,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5515106931771079,\\\"bias\\\":0.05151069317710788,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11763.77037767332,\\\"ask\\\":11905.787726297143,\\\"price\\\":11834.779051985231,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5513751304770176,\\\"bias\\\":0.05137513047701758,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11794.541030952025,\\\"ask\\\":11936.929856275388,\\\"price\\\":11865.735443613707,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5515095131006411,\\\"bias\\\":0.05150951310064111,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11721.670109420606,\\\"ask\\\":11863.179205308983,\\\"price\\\":11792.424657364794,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5518297358719902,\\\"bias\\\":0.051829735871990246,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11735.979538857853,\\\"ask\\\":11877.661384397386,\\\"price\\\":11806.82046162762,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5517664638347047,\\\"bias\\\":0.051766463834704735,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11731.200286842333,\\\"ask\\\":11872.824435174432,\\\"price\\\":11802.012361008383,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5517875533200574,\\\"bias\\\":0.051787553320057356,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11748.792862146573,\\\"ask\\\":11890.629395693613,\\\"price\\\":11819.711128920093,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5517098906419572,\\\"bias\\\":0.05170989064195719,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11705.610573646336,\\\"ask\\\":11846.92579183925,\\\"price\\\":11776.268182742793,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5515191315694622,\\\"bias\\\":0.051519131569462195,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11759.861842606857,\\\"ask\\\":11901.832005696677,\\\"price\\\":11830.846924151767,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5512803590384778,\\\"bias\\\":0.05128035903847783,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11831.15169663877,\\\"ask\\\":11973.98250182958,\\\"price\\\":11902.567099234175,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.551591227427876,\\\"bias\\\":0.05159122742787603,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11898.473528071738,\\\"ask\\\":12042.11707167019,\\\"price\\\":11970.295299870964,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5512976621009007,\\\"bias\\\":0.0512976621009007,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11918.429090833155,\\\"ask\\\":12062.313546658102,\\\"price\\\":11990.371318745629,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5513836961382209,\\\"bias\\\":0.05138369613822091,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11872.622409207592,\\\"ask\\\":12015.953866864022,\\\"price\\\":11944.288138035807,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5515819435454595,\\\"bias\\\":0.05158194354545953,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11915.246276454596,\\\"ask\\\":12059.092307961091,\\\"price\\\":11987.169292207844,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5513967593596709,\\\"bias\\\":0.05139675935967092,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11934.71918628885,\\\"ask\\\":12078.80030322594,\\\"price\\\":12006.759744757395,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5514807563193277,\\\"bias\\\":0.05148075631932769,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11910.182323056346,\\\"ask\\\":12053.967220316583,\\\"price\\\":11982.074771686464,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5515868148365402,\\\"bias\\\":0.05158681483654015,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11905.01305369618,\\\"ask\\\":12048.7355452901,\\\"price\\\":11976.87429949314,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5516092143198603,\\\"bias\\\":0.05160921431986032,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11943.31035246979,\\\"ask\\\":12087.495185698801,\\\"price\\\":12015.402769084296,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5514431923683207,\\\"bias\\\":0.051443192368320734,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11929.35830974612,\\\"ask\\\":12073.374707851708,\\\"price\\\":12001.366508798914,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5515033580200791,\\\"bias\\\":0.051503358020079104,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11892.19792181076,\\\"ask\\\":12035.765703563002,\\\"price\\\":11963.981812686881,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.551664294188194,\\\"bias\\\":0.05166429418819396,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11907.151796351498,\\\"ask\\\":12050.900107776264,\\\"price\\\":11979.025952063881,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5515993287899887,\\\"bias\\\":0.05159932878998874,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11824.677936583133,\\\"ask\\\":11967.430587729008,\\\"price\\\":11896.05426215607,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5519592198440699,\\\"bias\\\":0.051959219844069926,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11893.19551190409,\\\"ask\\\":12036.7753369975,\\\"price\\\":11964.985424450795,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5516581444339507,\\\"bias\\\":0.05165814443395067,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11923.989314418688,\\\"ask\\\":12067.940895679278,\\\"price\\\":11995.965105048983,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.551524391423973,\\\"bias\\\":0.051524391423973026,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11912.537445489583,\\\"ask\\\":12056.350774811388,\\\"price\\\":11984.444110150485,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5515739233209295,\\\"bias\\\":0.05157392332092947,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11992.969320234744,\\\"ask\\\":12137.753658104783,\\\"price\\\":12065.361489169763,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5512257030228068,\\\"bias\\\":0.05122570302280682,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11913.623537298581,\\\"ask\\\":12057.44997839273,\\\"price\\\":11985.536757845655,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5508845353251642,\\\"bias\\\":0.05088453532516424,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11917.332406813799,\\\"ask\\\":12061.203622992638,\\\"price\\\":11989.268014903218,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5508686942923103,\\\"bias\\\":0.050868694292310335,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.528520487145371,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11071.776598477281,\\\"ask\\\":11205.439897452858,\\\"price\\\":11138.608247965069,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.04820981474670116},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5003473258772422,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11532.776926207436,\\\"ask\\\":11672.005621493636,\\\"price\\\":11602.391273850535,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.01675249579832072},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5092679100652806,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11887.013694416491,\\\"ask\\\":12030.518889922532,\\\"price\\\":11958.766292169516,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.02075157865487187},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5129907744470042,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11763.115370432392,\\\"ask\\\":11905.124811524127,\\\"price\\\":11834.12009097826,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.030279002374924535},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.49513443898488596,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11366.279522385363,\\\"ask\\\":11503.498188651589,\\\"price\\\":11434.888855518477,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.032140541613630225},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5163515010107848,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11982.72276252668,\\\"ask\\\":12127.383399498834,\\\"price\\\":12055.053081012764,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.02002507895131389},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.520471074219037,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":12322.528282678619,\\\"ask\\\":12471.291199572133,\\\"price\\\":12396.909741125384,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.027204071198621005},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5219034372818357,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":12801.959716376607,\\\"ask\\\":12956.510537902283,\\\"price\\\":12879.235127139447,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.0257414618031212},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5202280424321488,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":12794.400101040155,\\\"ask\\\":12948.859659604019,\\\"price\\\":12871.62988032208,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.026264976281411556},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.47748208101829415,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":12566.811941325757,\\\"ask\\\":12718.523956713996,\\\"price\\\":12642.66794901988,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.0422749030915166},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.4883821254075887,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11488.33084755402,\\\"ask\\\":11627.02297046212,\\\"price\\\":11557.676909008063,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.0454325330633622},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.49329786014420834,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":12334.478040084947,\\\"ask\\\":12483.385219643318,\\\"price\\\":12408.931629864148,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.0256782531514107},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5176980827563401,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":12626.522447815694,\\\"ask\\\":12778.955314388912,\\\"price\\\":12702.738881102303,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.02605929046859845},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5136461633489293,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":13053.724009016896,\\\"ask\\\":13211.314238502006,\\\"price\\\":13132.519123759455,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.02004170581425535},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.49730773794303595,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":13663.15826470379,\\\"ask\\\":13828.105849388341,\\\"price\\\":13745.63205704606,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.017328490014271503},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.48540832473128664,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":13613.159505998883,\\\"ask\\\":13777.503483938497,\\\"price\\\":13695.331494968697,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.01718015366365494},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.4998432435626363,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":12956.163700265999,\\\"ask\\\":13112.576139303417,\\\"price\\\":13034.36991978471,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.027633930656361327},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.49579062739360624,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":12488.366557769625,\\\"ask\\\":12639.131546394614,\\\"price\\\":12563.749052082121,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.03299943893590479},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5105338235417533,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":12519.764249818842,\\\"ask\\\":12670.908285027925,\\\"price\\\":12595.336267423385,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.025635997564590396},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.4762496197618847,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":12851.101825396747,\\\"ask\\\":13006.245911820044,\\\"price\\\":12928.673868608395,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.02705491844784924},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5050052423582627,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":12488.734135908291,\\\"ask\\\":12639.503562096317,\\\"price\\\":12564.118849002314,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.035000544105680875},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.48371486557472304,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":12462.635890509679,\\\"ask\\\":12613.090247336759,\\\"price\\\":12537.863068923223,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.03316172788801841},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.47604266413588625,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":12422.096134786103,\\\"ask\\\":12572.061078063198,\\\"price\\\":12497.078606424651,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.0386030105104721},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.45273186191475057,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11740.001040783853,\\\"ask\\\":11881.731435642412,\\\"price\\\":11810.866238213128,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.05188393780661288},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.5266690702206439,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11101.467191017917,\\\"ask\\\":11235.488927730406,\\\"price\\\":11168.478059374163,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.052692893198230784},{\\\"volatility\\\":0.0072,\\\"forecast\\\":0.47623672816752644,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":11377.879746045372,\\\"ask\\\":11515.23845525317,\\\"price\\\":11446.55910064927,\\\"maxShares\\\":10800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.05330625136219036}],\\\"recentTicksOfPrices\\\":[11830.846924151767,11902.567099234175,11970.295299870964,11990.371318745629,11944.288138035807,11987.169292207844,12006.759744757395,11982.074771686464,11976.87429949314,12015.402769084296,12001.366508798914,11963.981812686881,11979.025952063881,11896.05426215607,11964.985424450795,11995.965105048983,11984.444110150485,12065.361489169763,11985.536757845655,11989.268014903218]}],[\\\"SLRS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20005.85361197615,\\\"ask\\\":20166.543199220934,\\\"price\\\":20086.19840559854,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5854292883379472,\\\"bias\\\":0.08542928833794716,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20092.425598852395,\\\"ask\\\":20253.81054342149,\\\"price\\\":20173.11807113694,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5850596073749508,\\\"bias\\\":0.08505960737495077,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20163.122617719047,\\\"ask\\\":20325.07540982924,\\\"price\\\":20244.099013774143,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5847603174441361,\\\"bias\\\":0.08476031744413615,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20043.858319935483,\\\"ask\\\":20204.85316587874,\\\"price\\\":20124.35574290711,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5852646554602272,\\\"bias\\\":0.08526465546022721,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19976.109140982222,\\\"ask\\\":20136.559816813406,\\\"price\\\":20056.334478897814,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5855538314133818,\\\"bias\\\":0.0855538314133818,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19992.533693717323,\\\"ask\\\":20153.11629366686,\\\"price\\\":20072.82499369209,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5854834882146226,\\\"bias\\\":0.0854834882146226,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19929.203857067594,\\\"ask\\\":20089.277783630387,\\\"price\\\":20009.24082034899,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5857551325504279,\\\"bias\\\":0.08575513255042788,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19888.787672051974,\\\"ask\\\":20048.536970622674,\\\"price\\\":19968.662321337324,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.58558086877124,\\\"bias\\\":0.08558086877124005,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19965.30953399019,\\\"ask\\\":20125.67346599011,\\\"price\\\":20045.49149999015,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5859101400939898,\\\"bias\\\":0.08591014009398978,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20045.656463087733,\\\"ask\\\":20206.665751947876,\\\"price\\\":20126.161107517804,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5862558705682978,\\\"bias\\\":0.08625587056829775,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20111.88983139197,\\\"ask\\\":20273.431115178253,\\\"price\\\":20192.660473285112,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5859708703312502,\\\"bias\\\":0.08597087033125017,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20178.50953145065,\\\"ask\\\":20340.585913229374,\\\"price\\\":20259.547722340012,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5856860958200896,\\\"bias\\\":0.08568609582008957,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20075.437959004532,\\\"ask\\\":20236.68645666722,\\\"price\\\":20156.062207835876,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5852461651619898,\\\"bias\\\":0.0852461651619898,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20084.330018102555,\\\"ask\\\":20245.649937926675,\\\"price\\\":20164.989978014615,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5852084068854307,\\\"bias\\\":0.08520840688543074,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20066.299389157914,\\\"ask\\\":20227.474484653158,\\\"price\\\":20146.886936905536,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5852849711356555,\\\"bias\\\":0.08528497113565547,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20094.086209936817,\\\"ask\\\":20255.484492747557,\\\"price\\\":20174.785351342187,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5854030695534116,\\\"bias\\\":0.08540306955341159,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20043.272399841335,\\\"ask\\\":20204.262539599098,\\\"price\\\":20123.767469720216,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5851865552402152,\\\"bias\\\":0.08518655524021523,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19986.612710475623,\\\"ask\\\":20147.147752326833,\\\"price\\\":20066.88023140123,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5854280490755122,\\\"bias\\\":0.08542804907551216,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19852.654838057693,\\\"ask\\\":20012.113913062174,\\\"price\\\":19932.384375559934,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5860044838038807,\\\"bias\\\":0.0860044838038807,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19735.32439086675,\\\"ask\\\":19893.841052640782,\\\"price\\\":19814.582721753766,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5854931699614893,\\\"bias\\\":0.08549316996148926,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19682.087437194434,\\\"ask\\\":19840.176492914874,\\\"price\\\":19761.131965054654,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5852619243711491,\\\"bias\\\":0.0852619243711491,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19735.000214562842,\\\"ask\\\":19893.51427251114,\\\"price\\\":19814.25724353699,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5850327085810736,\\\"bias\\\":0.08503270858107359,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19861.09616104827,\\\"ask\\\":20020.62303784384,\\\"price\\\":19940.859599446056,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5844893956976596,\\\"bias\\\":0.08448939569765956,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19886.015427866263,\\\"ask\\\":20045.74245941539,\\\"price\\\":19965.878943640826,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5845954026258577,\\\"bias\\\":0.08459540262585774,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19877.692374660008,\\\"ask\\\":20037.35255437615,\\\"price\\\":19957.52246451808,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5846308238419521,\\\"bias\\\":0.08463082384195209,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19908.329792359837,\\\"ask\\\":20068.236055752284,\\\"price\\\":19988.28292405606,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5847612650345944,\\\"bias\\\":0.08476126503459436,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19833.13251444291,\\\"ask\\\":19992.43478363522,\\\"price\\\":19912.783649039065,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5844398928863089,\\\"bias\\\":0.08443989288630893,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19927.60522283927,\\\"ask\\\":20087.66630896649,\\\"price\\\":20007.63576590288,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5840376737526517,\\\"bias\\\":0.0840376737526517,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19804.214544514536,\\\"ask\\\":19963.284540856017,\\\"price\\\":19883.749542685277,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5845612726838724,\\\"bias\\\":0.08456127268387237,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19689.067374784634,\\\"ask\\\":19847.212494260817,\\\"price\\\":19768.139934522726,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5840667347236449,\\\"bias\\\":0.0840667347236449,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19723.006222988373,\\\"ask\\\":19881.423943654943,\\\"price\\\":19802.21508332166,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5839218254654023,\\\"bias\\\":0.08392182546540228,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19801.21482275359,\\\"ask\\\":19960.260724944386,\\\"price\\\":19880.73777384899,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.583589046152493,\\\"bias\\\":0.08358904615249296,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19874.2777811606,\\\"ask\\\":20033.910534422932,\\\"price\\\":19954.094157791766,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.583280617449659,\\\"bias\\\":0.08328061744965898,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19907.66024664535,\\\"ask\\\":20067.561132160572,\\\"price\\\":19987.61068940296,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5831407325004712,\\\"bias\\\":0.08314073250047116,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19949.812430124348,\\\"ask\\\":20110.05188739442,\\\"price\\\":20029.932158759384,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5829646915510317,\\\"bias\\\":0.0829646915510317,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19958.71544967545,\\\"ask\\\":20119.026417142722,\\\"price\\\":20038.870933409085,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5830017162736207,\\\"bias\\\":0.08300171627362074,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19892.944130408807,\\\"ask\\\":20052.726814187194,\\\"price\\\":19972.835472298,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5827272907112242,\\\"bias\\\":0.0827272907112242,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19916.85630100699,\\\"ask\\\":20076.831050412668,\\\"price\\\":19996.843675709828,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5826278489656663,\\\"bias\\\":0.08262784896566633,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19980.820670578873,\\\"ask\\\":20141.30919002127,\\\"price\\\":20061.064930300072,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5823624838805198,\\\"bias\\\":0.08236248388051981,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19955.031151854677,\\\"ask\\\":20115.312526568367,\\\"price\\\":20035.17183921152,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.582468927654225,\\\"bias\\\":0.08246892765422498,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19813.002320759562,\\\"ask\\\":19972.1429016492,\\\"price\\\":19892.57261120438,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5830601033481845,\\\"bias\\\":0.08306010334818448,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19930.99693335122,\\\"ask\\\":20091.085262133158,\\\"price\\\":20011.04109774219,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5835547605716443,\\\"bias\\\":0.08355476057164435,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19984.035650055997,\\\"ask\\\":20144.549992626726,\\\"price\\\":20064.29282134136,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5833324115697297,\\\"bias\\\":0.0833324115697297,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20003.780530526798,\\\"ask\\\":20164.453466514962,\\\"price\\\":20084.11699852088,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5834147467163738,\\\"bias\\\":0.08341474671637383,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20142.595153273505,\\\"ask\\\":20304.383066151204,\\\"price\\\":20223.489109712355,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5828358968045146,\\\"bias\\\":0.08283589680451464,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20280.47304197463,\\\"ask\\\":20443.36840777362,\\\"price\\\":20361.920724874126,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5822688775861289,\\\"bias\\\":0.08226887758612889,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20286.962000312047,\\\"ask\\\":20449.909486258326,\\\"price\\\":20368.435743285187,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5822952004099613,\\\"bias\\\":0.0822952004099613,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5825369753280456,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":25419.043194133737,\\\"ask\\\":25623.21221577337,\\\"price\\\":25521.12770495356,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.08531506690519075},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5796449168227802,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":27222.975413323642,\\\"ask\\\":27441.633850378454,\\\"price\\\":27332.304631851035,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.08110129041070924},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5804166312686442,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":28070.99698125993,\\\"ask\\\":28296.4668365311,\\\"price\\\":28183.73190889552,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.08149963519580616},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.4182217881147646,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":26934.272198773804,\\\"ask\\\":27150.61173450691,\\\"price\\\":27042.441966640345,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.08687836593874787},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.4174656339370762,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":24454.85853583945,\\\"ask\\\":24651.28310239239,\\\"price\\\":24553.07081911593,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.08400706368055388},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5369412808651143,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":25012.35733889926,\\\"ask\\\":25213.259807484807,\\\"price\\\":25112.80857319204,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.08550611104832495},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.4251919770775629,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":24313.48288481317,\\\"ask\\\":24508.7719039683,\\\"price\\\":24411.127394390744,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.08412415223184766},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.49207038082335175,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22136.402327553704,\\\"ask\\\":22314.204755887473,\\\"price\\\":22225.30354172059,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.08279546821687583},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.4715724641893083,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":21589.21010598525,\\\"ask\\\":21762.61741607347,\\\"price\\\":21675.91376102936,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.08097691592404},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.42500339073443927,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20997.075665417648,\\\"ask\\\":21165.726875581644,\\\"price\\\":21081.40127049965,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.07690606451884563},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.4245970624755517,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20381.84931359261,\\\"ask\\\":20545.55894663352,\\\"price\\\":20463.704130113067,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.07752937352779182},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.42424353296681927,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19696.295641314235,\\\"ask\\\":19854.498819156117,\\\"price\\\":19775.397230235165,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.07788434905432678},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5614792931293834,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19908.998647262153,\\\"ask\\\":20068.910282983135,\\\"price\\\":19988.954465122657,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.07979034447893762},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.577977458184814,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22040.34772910233,\\\"ask\\\":22217.37863455699,\\\"price\\\":22128.86318182964,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.08097986181956485},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5803885407389484,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":23321.641781173857,\\\"ask\\\":23508.964205119024,\\\"price\\\":23415.302993146448,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.0816158677059825},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.4622281104568627,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":23307.03212798102,\\\"ask\\\":23494.237205314184,\\\"price\\\":23400.634666647595,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.0788403354333983},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5208730995465036,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":24722.773206686346,\\\"ask\\\":24921.349698306312,\\\"price\\\":24822.061452496335,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.07572606163553852},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.42551942027977563,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":25103.28991366206,\\\"ask\\\":25304.922764374212,\\\"price\\\":25204.106339018123,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.07818422543616438},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5377326431152128,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":25121.204573271287,\\\"ask\\\":25322.98131683169,\\\"price\\\":25222.092945051485,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.0774008520027436},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.42490793402973587,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":24555.249364424064,\\\"ask\\\":24752.48028301381,\\\"price\\\":24653.864823718948,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.07707589017376149},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.4227117976923916,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":23402.217158990574,\\\"ask\\\":23590.186774725433,\\\"price\\\":23496.201966858007,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.0790700073727793},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.4205288753354555,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22333.734630157716,\\\"ask\\\":22513.122056905973,\\\"price\\\":22423.428343531843,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.08310003672787902},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.41687799220249133,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":21298.452119215843,\\\"ask\\\":21469.524023787868,\\\"price\\\":21383.98807150186,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.0850916552296877},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.4145130147204153,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20517.05848374232,\\\"ask\\\":20681.854134214133,\\\"price\\\":20599.45630897823,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.0877719431141189},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.417358503904573,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19975.859625410154,\\\"ask\\\":20136.30829710019,\\\"price\\\":20056.083961255186,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.09082614167685654},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5872723666417051,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19549.54115781127,\\\"ask\\\":19706.56558478165,\\\"price\\\":19628.053371296453,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.09112871360098163}],\\\"recentTicksOfPrices\\\":[20007.63576590288,19883.749542685277,19768.139934522726,19802.21508332166,19880.73777384899,19954.094157791766,19987.61068940296,20029.932158759384,20038.870933409085,19972.835472298,19996.843675709828,20061.064930300072,20035.17183921152,19892.57261120438,20011.04109774219,20064.29282134136,20084.11699852088,20223.489109712355,20361.920724874126,20368.435743285187]}],[\\\"GPH\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":17057.32395037673,\\\"ask\\\":17401.916353414646,\\\"price\\\":17229.620151895688,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4066016361594215,\\\"bias\\\":0.09339836384057848,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":17001.64800168061,\\\"ask\\\":17345.115638078198,\\\"price\\\":17173.381819879403,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4069074913631626,\\\"bias\\\":0.09309250863683738,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":17046.918581801423,\\\"ask\\\":17391.300775373173,\\\"price\\\":17219.109678587298,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4066596123416422,\\\"bias\\\":0.09334038765835778,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16970.50331016895,\\\"ask\\\":17313.341760879437,\\\"price\\\":17141.922535524194,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40623931655271767,\\\"bias\\\":0.09376068344728233,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16927.059195183483,\\\"ask\\\":17269.019987005373,\\\"price\\\":17098.039591094428,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4059986752300974,\\\"bias\\\":0.09400132476990258,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16916.533511114,\\\"ask\\\":17258.281662853675,\\\"price\\\":17087.407586983838,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.406057164059738,\\\"bias\\\":0.09394283594026198,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16875.950621061194,\\\"ask\\\":17216.878916436166,\\\"price\\\":17046.41476874868,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4058312525322739,\\\"bias\\\":0.09416874746772608,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16850.03842574928,\\\"ask\\\":17190.443242431083,\\\"price\\\":17020.240834090182,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40597606638462297,\\\"bias\\\":0.09402393361537703,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16801.120080198714,\\\"ask\\\":17140.536647475456,\\\"price\\\":16970.828363837085,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4062498276131997,\\\"bias\\\":0.09375017238680028,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":2},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16852.286823766564,\\\"ask\\\":17192.73706263054,\\\"price\\\":17022.51194319855,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40596431742060185,\\\"bias\\\":0.09403568257939815,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16810.25413763086,\\\"ask\\\":17149.855231320373,\\\"price\\\":16980.054684475617,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40572918877239367,\\\"bias\\\":0.09427081122760633,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":2},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16852.39276435734,\\\"ask\\\":17192.84514343527,\\\"price\\\":17022.618953896304,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40596549944878196,\\\"bias\\\":0.09403450055121804,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16787.168733298746,\\\"ask\\\":17126.30345518357,\\\"price\\\":16956.736094241158,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4063308564236223,\\\"bias\\\":0.09366914357637768,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16792.79565762929,\\\"ask\\\":17132.044054753114,\\\"price\\\":16962.4198561912,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40636225356934624,\\\"bias\\\":0.09363774643065376,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16804.214521590617,\\\"ask\\\":17143.69360283487,\\\"price\\\":16973.954062212742,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40629858122378,\\\"bias\\\":0.09370141877622001,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16786.623493207462,\\\"ask\\\":17125.747200140944,\\\"price\\\":16956.185346674203,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4063967727581228,\\\"bias\\\":0.0936032272418772,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16754.479459263326,\\\"ask\\\":17092.953791773696,\\\"price\\\":16923.71662551851,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40621719180957355,\\\"bias\\\":0.09378280819042645,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16718.612749550583,\\\"ask\\\":17056.362502066757,\\\"price\\\":16887.48762580867,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4064183855813177,\\\"bias\\\":0.09358161441868229,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16633.676280687763,\\\"ask\\\":16969.710144944085,\\\"price\\\":16801.693212815924,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40594053019053844,\\\"bias\\\":0.09405946980946156,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16559.175389138985,\\\"ask\\\":16893.704184879167,\\\"price\\\":16726.439787009076,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4063637103426133,\\\"bias\\\":0.09363628965738668,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16525.34951718852,\\\"ask\\\":16859.194961980207,\\\"price\\\":16692.272239584363,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4065553752233212,\\\"bias\\\":0.09344462477667881,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16491.797880373,\\\"ask\\\":16824.965514319927,\\\"price\\\":16658.381697346464,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40636526738088874,\\\"bias\\\":0.09363473261911126,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16412.439383588142,\\\"ask\\\":16744.003815579825,\\\"price\\\":16578.221599583983,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4068180161438139,\\\"bias\\\":0.09318198385618609,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16428.022757396575,\\\"ask\\\":16759.902005020747,\\\"price\\\":16593.96238120866,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40672954119790833,\\\"bias\\\":0.09327045880209167,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16422.81895594086,\\\"ask\\\":16754.593076262896,\\\"price\\\":16588.706016101878,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.406699987139583,\\\"bias\\\":0.093300012860417,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16403.685917462302,\\\"ask\\\":16735.07351175447,\\\"price\\\":16569.379714608385,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40659116326029815,\\\"bias\\\":0.09340883673970185,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16356.754437778449,\\\"ask\\\":16687.193921369933,\\\"price\\\":16521.97417957419,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40685917577710995,\\\"bias\\\":0.09314082422289005,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16298.004718066242,\\\"ask\\\":16627.257338633237,\\\"price\\\":16462.63102834974,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40652342932154584,\\\"bias\\\":0.09347657067845416,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16221.520365880644,\\\"ask\\\":16549.227848019647,\\\"price\\\":16385.374106950145,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4069641706818878,\\\"bias\\\":0.09303582931811222,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16293.31235493179,\\\"ask\\\":16622.470180283948,\\\"price\\\":16457.89126760787,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40655241968141936,\\\"bias\\\":0.09344758031858064,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16272.086191802962,\\\"ask\\\":16600.81520577878,\\\"price\\\":16436.45069879087,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4064305217538607,\\\"bias\\\":0.09356947824613931,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16223.402930886708,\\\"ask\\\":16551.148444641996,\\\"price\\\":16387.27568776435,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40671130546752793,\\\"bias\\\":0.09328869453247207,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16178.228499972829,\\\"ask\\\":16505.061398962178,\\\"price\\\":16341.644949467503,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40697179527864724,\\\"bias\\\":0.09302820472135276,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16157.690287635405,\\\"ask\\\":16484.1082732442,\\\"price\\\":16320.899280439804,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40685354613610747,\\\"bias\\\":0.09314645386389253,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16131.84150411771,\\\"ask\\\":16457.737292079684,\\\"price\\\":16294.789398098697,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40700279893658625,\\\"bias\\\":0.09299720106341375,\\\"countOfNegative\\\":18,\\\"countOfPositive\\\":2},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16126.395322506076,\\\"ask\\\":16452.18108659711,\\\"price\\\":16289.288204551593,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4070342058093706,\\\"bias\\\":0.09296579419062939,\\\"countOfNegative\\\":18,\\\"countOfPositive\\\":2},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16166.74416676701,\\\"ask\\\":16493.34505902493,\\\"price\\\":16330.04461289597,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40726680970356866,\\\"bias\\\":0.09273319029643134,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16152.051388232785,\\\"ask\\\":16478.355456681933,\\\"price\\\":16315.203422457358,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4073511648232403,\\\"bias\\\":0.0926488351767597,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16112.890989055742,\\\"ask\\\":16438.403938329597,\\\"price\\\":16275.647463692669,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40757633641853475,\\\"bias\\\":0.09242366358146525,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16097.147678478761,\\\"ask\\\":16422.342581074292,\\\"price\\\":16259.745129776526,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4076667284848491,\\\"bias\\\":0.09233327151515092,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16184.471243577846,\\\"ask\\\":16511.43025859962,\\\"price\\\":16347.950751088732,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4081676166301908,\\\"bias\\\":0.0918323833698092,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16257.411403450486,\\\"ask\\\":16585.843957055546,\\\"price\\\":16421.627680253016,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4085814867297245,\\\"bias\\\":0.0914185132702755,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16290.150876758635,\\\"ask\\\":16619.24483386487,\\\"price\\\":16454.69785531175,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40839738645073126,\\\"bias\\\":0.09160261354926874,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16302.331029295941,\\\"ask\\\":16631.6710500898,\\\"price\\\":16467.00103969287,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4084658777627079,\\\"bias\\\":0.09153412223729213,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16217.16734495584,\\\"ask\\\":16544.78688727818,\\\"price\\\":16380.97711611701,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4079851906657106,\\\"bias\\\":0.0920148093342894,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16301.173383661087,\\\"ask\\\":16630.49001767444,\\\"price\\\":16465.831700667764,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4084618336866508,\\\"bias\\\":0.09153816631334921,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":16305.120428672664,\\\"ask\\\":16634.516800969082,\\\"price\\\":16469.818614820873,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.408483998058148,\\\"bias\\\":0.091516001941852,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.608797462656568,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":17664.64436012689,\\\"ask\\\":18021.505862351685,\\\"price\\\":17843.075111239286,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.11254769692954336},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.6126737885893755,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":19078.90535955025,\\\"ask\\\":19464.337791056307,\\\"price\\\":19271.62157530329,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.11466281237120268},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.6134049826922175,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":19615.262028584046,\\\"ask\\\":20011.52994835342,\\\"price\\\":19813.395988468736,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.11539555432715176},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.3920770425793845,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":18864.551348764864,\\\"ask\\\":19245.653396214664,\\\"price\\\":19055.102372489768,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.11359553374213988},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4962611825831564,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":17903.44152228028,\\\"ask\\\":18265.127209599086,\\\"price\\\":18084.284365939686,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.10863325907018118},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.6087379430177511,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":18164.63973201073,\\\"ask\\\":18531.602150839215,\\\"price\\\":18348.12094142497,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.11056128575609347},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.3976398612879221,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":17716.07264418913,\\\"ask\\\":18073.973101647494,\\\"price\\\":17895.022872918318,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.11356767626410713},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4881498906365622,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":17023.715254153725,\\\"ask\\\":17367.62869363159,\\\"price\\\":17195.67197389266,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.11091480992004238},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.6115847371259983,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":18319.94188777104,\\\"ask\\\":18690.04172388762,\\\"price\\\":18504.991805829333,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.11421736432513674},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.5720957841355914,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":19605.783278185907,\\\"ask\\\":20001.859708048243,\\\"price\\\":19803.82149311708,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.1153027592916609},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4802440213179122,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":20046.801080637473,\\\"ask\\\":20451.7869610544,\\\"price\\\":20249.29402084594,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.11541136270010932},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.604566430322057,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":20954.133272197927,\\\"ask\\\":21377.449095878685,\\\"price\\\":21165.791184038317,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.10723474957236234},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.6053720239300557,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":22135.551972268513,\\\"ask\\\":22582.734840395144,\\\"price\\\":22359.143406331837,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.1077591774316976},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.6073678895511069,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":22166.10536354913,\\\"ask\\\":22613.90547190365,\\\"price\\\":22390.005417726396,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.10952408573701478},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.47278215812448865,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":22631.84510725707,\\\"ask\\\":23089.054099322868,\\\"price\\\":22860.44960328997,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.10965166827111811},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.5767671565997735,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":22647.316292167154,\\\"ask\\\":23104.83783342305,\\\"price\\\":22876.077062795102,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.10534744920208483},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.5282788651573864,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":24230.043946739115,\\\"ask\\\":24719.539784046985,\\\"price\\\":24474.791865393054,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.10206172990022877},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.40302239121467004,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":22999.971856902,\\\"ask\\\":23464.617753001017,\\\"price\\\":23232.29480495152,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.0999907741182679},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4071362464028476,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":21033.879985419997,\\\"ask\\\":21458.806853812333,\\\"price\\\":21246.343419616165,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.09568242558546686},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.46909095689911307,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":19891.187871231836,\\\"ask\\\":20293.030050448644,\\\"price\\\":20092.108960840236,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.09327259615801003},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4857187206435439,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":20177.093626194135,\\\"ask\\\":20584.711679248554,\\\"price\\\":20380.90265272135,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.09642405257838571},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4058725099396235,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":18882.310780132866,\\\"ask\\\":19263.771603973935,\\\"price\\\":19073.0411920534,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.09618182311221135},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4050569398454071,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":17965.602371431465,\\\"ask\\\":18328.543833480588,\\\"price\\\":18147.073102456023,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.09646972859506009},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.5063888121057919,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":17468.691689346844,\\\"ask\\\":17821.594551757895,\\\"price\\\":17645.14312055237,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.0967387150030366},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4514492048054445,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":17945.051545948758,\\\"ask\\\":18307.57783980631,\\\"price\\\":18126.31469287754,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.09817807974575188},{\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.5438911078985368,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":17402.53129334508,\\\"ask\\\":17754.097582099526,\\\"price\\\":17578.314437722307,\\\"maxShares\\\":8000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.0960257648491758}],\\\"recentTicksOfPrices\\\":[16462.63102834974,16385.374106950145,16457.89126760787,16436.45069879087,16387.27568776435,16341.644949467503,16320.899280439804,16294.789398098697,16289.288204551593,16330.04461289597,16315.203422457358,16275.647463692669,16259.745129776526,16347.950751088732,16421.627680253016,16454.69785531175,16467.00103969287,16380.97711611701,16465.831700667764,16469.818614820873]}],[\\\"NVMD\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25916.148024628004,\\\"ask\\\":26176.611823870495,\\\"price\\\":26046.37992424925,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.523709654504592,\\\"bias\\\":0.023709654504591948,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26028.29582247692,\\\"ask\\\":26289.88673526563,\\\"price\\\":26159.091278871278,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5247356501648737,\\\"bias\\\":0.024735650164873668,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25937.03401964429,\\\"ask\\\":26197.70772838443,\\\"price\\\":26067.37087401436,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5238653039153472,\\\"bias\\\":0.023865303915347247,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25783.617199859495,\\\"ask\\\":26042.749031013856,\\\"price\\\":25913.183115436677,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5224452785552477,\\\"bias\\\":0.022445278555247694,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25871.062601934915,\\\"ask\\\":26131.073281351342,\\\"price\\\":26001.06794164313,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5232065124786124,\\\"bias\\\":0.023206512478612384,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25892.33404318604,\\\"ask\\\":26152.558505931625,\\\"price\\\":26022.446274558835,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5230157062583857,\\\"bias\\\":0.02301570625838567,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25810.315560158528,\\\"ask\\\":26069.71571654203,\\\"price\\\":25940.01563835028,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5222843268574947,\\\"bias\\\":0.022284326857494707,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25862.76493546443,\\\"ask\\\":26122.692221247988,\\\"price\\\":25992.72857835621,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5218314850392443,\\\"bias\\\":0.02183148503924426,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25962.27160024285,\\\"ask\\\":26223.198953009105,\\\"price\\\":26092.73527662598,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5226714486969722,\\\"bias\\\":0.02267144869697224,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26066.75226416266,\\\"ask\\\":26328.729673852737,\\\"price\\\":26197.7409690077,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5217590755239477,\\\"bias\\\":0.021759075523947735,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25980.908078574852,\\\"ask\\\":26242.022732630878,\\\"price\\\":26111.465405602867,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5210401283216991,\\\"bias\\\":0.021040128321699103,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26066.968628724902,\\\"ask\\\":26328.94821293319,\\\"price\\\":26197.958420829047,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5203431838526618,\\\"bias\\\":0.02034318385266176,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25933.818881401952,\\\"ask\\\":26194.460277194932,\\\"price\\\":26064.139579298444,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5213876462213214,\\\"bias\\\":0.021387646221321388,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25922.337042081293,\\\"ask\\\":26182.863042504217,\\\"price\\\":26052.600042292757,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.521292913436634,\\\"bias\\\":0.021292913436633976,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25945.629629893287,\\\"ask\\\":26206.38972667613,\\\"price\\\":26076.00967828471,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5214842415006086,\\\"bias\\\":0.02148424150060857,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25981.55785694402,\\\"ask\\\":26242.679041435917,\\\"price\\\":26112.11844918997,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5211867383304573,\\\"bias\\\":0.021186738330457255,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26047.426439707877,\\\"ask\\\":26309.209620006448,\\\"price\\\":26178.318029857164,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5206496110208094,\\\"bias\\\":0.020649611020809422,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26121.267821047928,\\\"ask\\\":26383.793125782075,\\\"price\\\":26252.530473415,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5200642189071429,\\\"bias\\\":0.02006421890714294,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25946.19315918026,\\\"ask\\\":26206.958919574026,\\\"price\\\":26076.576039377145,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5214180731389588,\\\"bias\\\":0.021418073138958826,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25792.849514660065,\\\"ask\\\":26052.074132897855,\\\"price\\\":25922.461823778962,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5226914203865598,\\\"bias\\\":0.022691420386559802,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25723.272105771644,\\\"ask\\\":25981.797453568342,\\\"price\\\":25852.534779669993,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5233051876506943,\\\"bias\\\":0.023305187650694337,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25654.303787792338,\\\"ask\\\":25912.13598666462,\\\"price\\\":25783.21988722848,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5226786574568696,\\\"bias\\\":0.02267865745686959,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25818.220873294023,\\\"ask\\\":26077.700480060797,\\\"price\\\":25947.960676677412,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5241277006521834,\\\"bias\\\":0.024127700652183393,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25785.86792973722,\\\"ask\\\":26045.022381292365,\\\"price\\\":25915.445155514793,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5244304254390637,\\\"bias\\\":0.024430425439063708,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25775.075564040468,\\\"ask\\\":26034.121549608713,\\\"price\\\":25904.598556824592,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5243281320103557,\\\"bias\\\":0.024328132010355663,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25735.409667175365,\\\"ask\\\":25994.05700051381,\\\"price\\\":25864.73333384459,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5239531633629849,\\\"bias\\\":0.02395316336298492,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25832.98541581917,\\\"ask\\\":26092.613409948004,\\\"price\\\":25962.79941288359,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5248613470203494,\\\"bias\\\":0.024861347020349367,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25956.037691924263,\\\"ask\\\":26216.902392345608,\\\"price\\\":26086.470042134937,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5260455869711911,\\\"bias\\\":0.02604558697119108,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26117.75746577493,\\\"ask\\\":26380.247490556583,\\\"price\\\":26249.002478165756,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5276683641010375,\\\"bias\\\":0.027668364101037457,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25965.901614833896,\\\"ask\\\":26226.865450158857,\\\"price\\\":26096.383532496377,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5260502408265085,\\\"bias\\\":0.02605024082650853,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26010.660098138578,\\\"ask\\\":26272.0737674666,\\\"price\\\":26141.36693280259,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.526499279448934,\\\"bias\\\":0.026499279448934043,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25907.92613340693,\\\"ask\\\":26168.30730057685,\\\"price\\\":26038.11671699189,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5254484905798048,\\\"bias\\\":0.025448490579804806,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26003.52176965657,\\\"ask\\\":26264.8636969898,\\\"price\\\":26134.192733323187,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5263874945880925,\\\"bias\\\":0.02638749458809253,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25959.917365261343,\\\"ask\\\":26220.82105737452,\\\"price\\\":26090.36921131793,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5259442686067434,\\\"bias\\\":0.02594426860674337,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26014.884507874922,\\\"ask\\\":26276.340633582204,\\\"price\\\":26145.612570728565,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5264936086883957,\\\"bias\\\":0.026493608688395676,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26026.494192236845,\\\"ask\\\":26288.06699818897,\\\"price\\\":26157.28059521291,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5263753754383547,\\\"bias\\\":0.026375375438354665,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26112.544645487367,\\\"ask\\\":26374.98228011538,\\\"price\\\":26243.763462801373,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5255033359718176,\\\"bias\\\":0.025503335971817642,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26081.19393366424,\\\"ask\\\":26343.316485761363,\\\"price\\\":26212.255209712803,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5258098969899269,\\\"bias\\\":0.02580989698992686,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25997.700509887844,\\\"ask\\\":26258.983932097766,\\\"price\\\":26128.342220992807,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5249809941928563,\\\"bias\\\":0.024980994192856265,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25964.14492199985,\\\"ask\\\":26225.091102120452,\\\"price\\\":26094.618012060153,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.525303844010821,\\\"bias\\\":0.025303844010820975,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26150.268008948256,\\\"ask\\\":26413.084772857284,\\\"price\\\":26281.676390902772,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.527117741434789,\\\"bias\\\":0.027117741434788956,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25995.45434091138,\\\"ask\\\":26256.71518855873,\\\"price\\\":26126.084764735057,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5255027679223668,\\\"bias\\\":0.02550276792236683,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26064.631288909022,\\\"ask\\\":26326.587382264886,\\\"price\\\":26195.609335586956,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5248241094049102,\\\"bias\\\":0.0248241094049102,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26038.904000583214,\\\"ask\\\":26300.601528227264,\\\"price\\\":26169.75276440524,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5250693797204646,\\\"bias\\\":0.025069379720464635,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26219.598876237476,\\\"ask\\\":26483.112432782575,\\\"price\\\":26351.355654510025,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5233297103199333,\\\"bias\\\":0.02332971031993325,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26399.074405986106,\\\"ask\\\":26664.39173669953,\\\"price\\\":26531.73307134282,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.524926650127562,\\\"bias\\\":0.02492665012756201,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26407.52107750172,\\\"ask\\\":26672.923299386155,\\\"price\\\":26540.22218844394,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5250064056607955,\\\"bias\\\":0.025006405660795483,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5227834259229658,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":23805.243568364902,\\\"ask\\\":24044.492247443926,\\\"price\\\":23924.86790790441,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.053320057346679106},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.4484251501425988,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":23068.991719793325,\\\"ask\\\":23300.840882806297,\\\"price\\\":23184.916301299814,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.053140608920787424},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.4488106389142033,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":22378.53709033136,\\\"ask\\\":22603.4470108372,\\\"price\\\":22490.99205058428,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.05243947014790984},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.4722815892773348,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":22127.46103451047,\\\"ask\\\":22349.847577570865,\\\"price\\\":22238.65430604068,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.05478451541541224},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5533182676443702,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":22841.907058196495,\\\"ask\\\":23071.473963304,\\\"price\\\":22956.690510750253,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.054312600668466215},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.552074132406187,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":23839.895680132904,\\\"ask\\\":24079.49262164176,\\\"price\\\":23959.694150887335,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.05333470621007874},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.45121871624753884,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":23159.545909131743,\\\"ask\\\":23392.305164499892,\\\"price\\\":23275.925536815823,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.053989536117665715},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.4950105965006125,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":23003.152484311722,\\\"ask\\\":23234.339946465614,\\\"price\\\":23118.74621538868,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.05528049823644099},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5530671931600554,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":24516.470862166592,\\\"ask\\\":24762.867554248674,\\\"price\\\":24639.669208207644,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.05523580754233881},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5333479431294851,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25623.32593045844,\\\"ask\\\":25880.846794081135,\\\"price\\\":25752.086362269787,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.05375510319478727},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.4916495942973713,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":25474.034245847488,\\\"ask\\\":25730.054690529392,\\\"price\\\":25602.04446818844,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.05321031502458873},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5526180834549247,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":24942.64880092854,\\\"ask\\\":25193.32868837505,\\\"price\\\":25067.988744651793,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.053863928523151694},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5369529613816961,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":24551.216870036227,\\\"ask\\\":24797.962768227546,\\\"price\\\":24674.589819131896,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.055041328271779766},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.4885528719375076,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":23714.499556598064,\\\"ask\\\":23952.836235558847,\\\"price\\\":23833.667896078452,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.053095419759402906},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5542616498385524,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26340.033392335932,\\\"ask\\\":26604.75734602774,\\\"price\\\":26472.39536918183,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.05590159832081665},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5421697709577569,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":28522.255910306238,\\\"ask\\\":28808.911748600764,\\\"price\\\":28665.583829453502,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.05795826344095756},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.48417971291150946,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":29438.321781359715,\\\"ask\\\":29734.184311825637,\\\"price\\\":29586.253046592665,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.058896719637162365},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.556632120292308,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":30230.057790417326,\\\"ask\\\":30533.87746670293,\\\"price\\\":30381.967628560145,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.05861440629326309},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5554106761227883,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":32514.95265297475,\\\"ask\\\":32841.73609672325,\\\"price\\\":32678.344374848977,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.05656185131778091},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5545336916451047,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":30778.5309111268,\\\"ask\\\":31087.862880082834,\\\"price\\\":30933.196895604822,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.05565572733459978},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.4928686364034314,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":30867.534510313362,\\\"ask\\\":31177.760987803966,\\\"price\\\":31022.647749058673,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.05544250643970938},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.527224006973484,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":30010.58427565181,\\\"ask\\\":30312.198187969923,\\\"price\\\":30161.39123181087,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.05511777911199078},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.4785658355031219,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":27915.80709886404,\\\"ask\\\":28196.367974229488,\\\"price\\\":28056.08753654677,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.054871630471040045},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.4959076113127861,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":28543.84490387755,\\\"ask\\\":28830.717716981853,\\\"price\\\":28687.281310429695,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.054934041025054614},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.45162824131668516,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":27623.10907656114,\\\"ask\\\":27900.72826326023,\\\"price\\\":27761.91866991069,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.05285010312965127},{\\\"volatility\\\":0.0074,\\\"forecast\\\":0.5367160490893496,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":26771.86538992686,\\\"ask\\\":27040.929363694955,\\\"price\\\":26906.397376810914,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.050573014332447985}],\\\"recentTicksOfPrices\\\":[26086.470042134937,26249.002478165756,26096.383532496377,26141.36693280259,26038.11671699189,26134.192733323187,26090.36921131793,26145.612570728565,26157.28059521291,26243.763462801373,26212.255209712803,26128.342220992807,26094.618012060153,26281.676390902772,26126.084764735057,26195.609335586956,26169.75276440524,26351.355654510025,26531.73307134282,26540.22218844394]}],[\\\"WDS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3230.424090802938,\\\"ask\\\":3308.895931065357,\\\"price\\\":3269.6600109341475,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.42637104828797,\\\"bias\\\":0.07362895171202999,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3183.8778106116624,\\\"ask\\\":3261.218972003039,\\\"price\\\":3222.548391307351,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.425294639574936,\\\"bias\\\":0.07470536042506398,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3221.724980818427,\\\"ask\\\":3299.9855066682676,\\\"price\\\":3260.8552437433473,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4261826719240235,\\\"bias\\\":0.07381732807597652,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3286.487820723956,\\\"ask\\\":3366.321532968262,\\\"price\\\":3326.404676846109,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4276665415370108,\\\"bias\\\":0.07233345846298922,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3249.2584512981425,\\\"ask\\\":3328.1878063904055,\\\"price\\\":3288.723128844274,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4268377588817285,\\\"bias\\\":0.07316224111827152,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3258.284032875309,\\\"ask\\\":3337.432632864183,\\\"price\\\":3297.858332869746,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4266345335041604,\\\"bias\\\":0.07336546649583958,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3223.6759070871008,\\\"ask\\\":3301.9838238584475,\\\"price\\\":3262.829865472774,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4274221565054108,\\\"bias\\\":0.07257784349458918,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3201.695520676604,\\\"ask\\\":3279.4695009359543,\\\"price\\\":3240.582510806279,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.42692389268408576,\\\"bias\\\":0.07307610731591424,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3243.312018958237,\\\"ask\\\":3322.096926301352,\\\"price\\\":3282.7044726297945,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.42787375555358764,\\\"bias\\\":0.07212624444641236,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3287.4071111711655,\\\"ask\\\":3367.26315435751,\\\"price\\\":3327.3351327643377,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4288543622239438,\\\"bias\\\":0.0711456377760562,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3251.116244034207,\\\"ask\\\":3330.0907276949565,\\\"price\\\":3290.6034858645817,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4280601928697588,\\\"bias\\\":0.07193980713024117,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3215.136546942709,\\\"ask\\\":3293.2370298643946,\\\"price\\\":3254.186788403552,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.42886525120291985,\\\"bias\\\":0.07113474879708015,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3160.3198080525326,\\\"ask\\\":3237.088710272432,\\\"price\\\":3198.7042591624822,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4276313966604485,\\\"bias\\\":0.07236860333955147,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3155.597794331274,\\\"ask\\\":3232.2519917644227,\\\"price\\\":3193.9248930478484,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.42773968851518723,\\\"bias\\\":0.07226031148481277,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3165.1770887439684,\\\"ask\\\":3242.0639815879517,\\\"price\\\":3203.62053516596,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4275203314097572,\\\"bias\\\":0.0724796685902428,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3150.438670020342,\\\"ask\\\":3226.9675445957355,\\\"price\\\":3188.703107308039,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.42785940663594646,\\\"bias\\\":0.07214059336405354,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3177.421807733036,\\\"ask\\\":3254.6061431435555,\\\"price\\\":3216.013975438296,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4272415309147203,\\\"bias\\\":0.07275846908527972,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3207.852942897467,\\\"ask\\\":3285.7764961662315,\\\"price\\\":3246.8147195318493,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.42654470092453683,\\\"bias\\\":0.07345529907546317,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3136.356673068569,\\\"ask\\\":3212.5434748435136,\\\"price\\\":3174.4500739560413,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.42821918518462054,\\\"bias\\\":0.07178081481537946,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3199.3508188656947,\\\"ask\\\":3277.067842805752,\\\"price\\\":3238.2093308357234,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4267774578604471,\\\"bias\\\":0.07322254213955293,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3228.5864310910565,\\\"ask\\\":3307.0136318463046,\\\"price\\\":3267.8000314686806,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4274465641789928,\\\"bias\\\":0.0725534358210072,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3257.9095463464937,\\\"ask\\\":3337.0490494966107,\\\"price\\\":3297.479297921552,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4267876093062752,\\\"bias\\\":0.07321239069372482,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3328.2347990776248,\\\"ask\\\":3409.0826079621015,\\\"price\\\":3368.658703519863,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4283679723597431,\\\"bias\\\":0.07163202764025689,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3314.186708257321,\\\"ask\\\":3394.693267972074,\\\"price\\\":3354.4399881146974,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.42867160438730073,\\\"bias\\\":0.07132839561269927,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3318.874863300057,\\\"ask\\\":3399.4953053235404,\\\"price\\\":3359.1850843117986,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.42877250352395735,\\\"bias\\\":0.07122749647604265,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3301.682728045707,\\\"ask\\\":3381.8855473504614,\\\"price\\\":3341.784137698084,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4291433909938051,\\\"bias\\\":0.07085660900619489,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3259.9259643305795,\\\"ask\\\":3339.1144492940757,\\\"price\\\":3299.5202068123276,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4300510013850535,\\\"bias\\\":0.06994899861494652,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3208.2964742821546,\\\"ask\\\":3286.2308015926524,\\\"price\\\":3247.2636379374035,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.42892534758191,\\\"bias\\\":0.07107465241809002,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3275.828147793666,\\\"ask\\\":3355.402920614565,\\\"price\\\":3315.6155342041156,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4304214032801654,\\\"bias\\\":0.06957859671983457,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3340.550981262322,\\\"ask\\\":3421.6979686614063,\\\"price\\\":3381.124474961864,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4290466901617396,\\\"bias\\\":0.07095330983826043,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3360.0045080480068,\\\"ask\\\":3441.6240507536268,\\\"price\\\":3400.8142794008168,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4286334972120693,\\\"bias\\\":0.07136650278793072,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3405.016636305919,\\\"ask\\\":3487.729591033998,\\\"price\\\":3446.3731136699585,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4276774395136006,\\\"bias\\\":0.0723225604863994,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3363.093606465438,\\\"ask\\\":3444.788187999012,\\\"price\\\":3403.940897232225,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4267758943244978,\\\"bias\\\":0.0732241056755022,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3344.1170758512767,\\\"ask\\\":3425.35068902985,\\\"price\\\":3384.7338824405633,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.42719141191898635,\\\"bias\\\":0.07280858808101365,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3368.0386424692974,\\\"ask\\\":3449.853346334948,\\\"price\\\":3408.945994402123,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4277122356373667,\\\"bias\\\":0.07228776436263329,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3362.9683900087757,\\\"ask\\\":3444.6599298470455,\\\"price\\\":3403.8141599279106,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4278212218580562,\\\"bias\\\":0.07217877814194379,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3325.819617348698,\\\"ask\\\":3406.6087578510956,\\\"price\\\":3366.214187599897,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.42862744508378087,\\\"bias\\\":0.07137255491621913,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3312.368237461401,\\\"ask\\\":3392.830623796496,\\\"price\\\":3352.5994306289485,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.42833760431703055,\\\"bias\\\":0.07166239568296945,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3348.3070922823545,\\\"ask\\\":3429.6424872365815,\\\"price\\\":3388.974789759468,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4275600746917176,\\\"bias\\\":0.07243992530828242,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3362.9263189287335,\\\"ask\\\":3444.6168367974474,\\\"price\\\":3403.7715778630904,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.42724379077356395,\\\"bias\\\":0.07275620922643605,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3444.3689627480767,\\\"ask\\\":3528.0378444342646,\\\"price\\\":3486.2034035911706,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.42548179616775833,\\\"bias\\\":0.07451820383224167,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3376.43628466017,\\\"ask\\\":3458.4549798341013,\\\"price\\\":3417.4456322471356,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.42698107550426573,\\\"bias\\\":0.07301892449573427,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3406.791326298406,\\\"ask\\\":3489.5473909048455,\\\"price\\\":3448.169358601626,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.42632461635426866,\\\"bias\\\":0.07367538364573134,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3395.4574649206347,\\\"ask\\\":3477.9382130563586,\\\"price\\\":3436.6978389884966,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4265705409737998,\\\"bias\\\":0.07342945902620018,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3317.6778763133307,\\\"ask\\\":3398.2692417298485,\\\"price\\\":3357.9735590215896,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.42829202007081846,\\\"bias\\\":0.07170797992918154,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3394.4001926580504,\\\"ask\\\":3476.8552580667483,\\\"price\\\":3435.6277253623994,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4299502890546299,\\\"bias\\\":0.0700497109453701,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3390.734981155993,\\\"ask\\\":3473.1010130869076,\\\"price\\\":3431.9179971214503,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.025,\\\"forecast\\\":0.4300260092178687,\\\"bias\\\":0.06997399078213129,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.025,\\\"forecast\\\":0.4965801401156628,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":5600.471163533104,\\\"ask\\\":5736.514997465087,\\\"price\\\":5668.493080499095,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.04144666477517733},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.5010474715632165,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":6149.675194876099,\\\"ask\\\":6299.060017423699,\\\"price\\\":6224.367606149899,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.046450737844757284},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.46887024374429415,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":5699.232127540351,\\\"ask\\\":5837.675013229591,\\\"price\\\":5768.453570384968,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.05486989638338252},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.5526478109685065,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":4576.022747021544,\\\"ask\\\":4687.18119431761,\\\"price\\\":4631.60197066958,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.05832956481891394},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.5012481730008058,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":5191.267192678872,\\\"ask\\\":5317.370849181192,\\\"price\\\":5254.31902093003,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.0623861951419426},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.4463460381318778,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3829.150786247886,\\\"ask\\\":3922.16659482071,\\\"price\\\":3875.658690534297,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.06032534356166025},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.4464312180188804,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":2688.0695387302203,\\\"ask\\\":2753.36677448885,\\\"price\\\":2720.718156609535,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.057358025539237134},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.49399247419734416,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":2766.5454608196674,\\\"ask\\\":2833.7489942808734,\\\"price\\\":2800.147227550269,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.06685929966640763},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.47362511796629647,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3668.2331804276614,\\\"ask\\\":3757.3400593044475,\\\"price\\\":3712.7866198660568,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.07081671556965569},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.4367328029543657,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":2781.170161566636,\\\"ask\\\":2848.7289509164316,\\\"price\\\":2814.9495562415336,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.07343277254273817},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.49423051468911644,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":1991.1034066616592,\\\"ask\\\":2039.4702910340059,\\\"price\\\":2015.286848847832,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.10292544176868834},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.4687959961907493,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":1976.0581410793734,\\\"ask\\\":2024.059553413284,\\\"price\\\":2000.0588472463292,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.10692897826545944},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.547365007750173,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":1530.4049285664871,\\\"ask\\\":1567.5807567907748,\\\"price\\\":1548.992842678631,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.10681032400764534},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.481827052835842,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":1497.5031801030066,\\\"ask\\\":1533.8797755710964,\\\"price\\\":1515.6914778370517,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.10767845546032062},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.4723736214003255,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":1509.1412616801992,\\\"ask\\\":1545.8005635833624,\\\"price\\\":1527.470912631781,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.11199694025289375},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.42628921496662103,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":1291.3910062046689,\\\"ask\\\":1322.7608282177375,\\\"price\\\":1307.0759172112034,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.1101189838547677},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.6015076619577505,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":1587.0499388039223,\\\"ask\\\":1625.6017591797267,\\\"price\\\":1606.3258489918253,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.11024374372801016},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.5945119493343539,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":2247.30420555742,\\\"ask\\\":2301.894591117519,\\\"price\\\":2274.59939833747,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.1051508264314287},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.45972208070088394,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":2364.645740022222,\\\"ask\\\":2422.0865272292394,\\\"price\\\":2393.36613362573,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.08729986947932938},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.5763396052791777,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":2232.8944721026182,\\\"ask\\\":2287.1348236516706,\\\"price\\\":2260.014647877144,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.08519844696589618},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.5667383172982045,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":2320.475810245465,\\\"ask\\\":2376.8436436927227,\\\"price\\\":2348.6597269690956,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.08015432618770324},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.5785350807261951,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":2347.3617154970652,\\\"ask\\\":2404.382647857318,\\\"price\\\":2375.872181677191,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.08470516559847285},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.5302196594076578,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":2540.3132319798183,\\\"ask\\\":2602.021245712122,\\\"price\\\":2571.1672388459697,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.0803110812294282},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.5074264788370256,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":2408.7793036953512,\\\"ask\\\":2467.292161274994,\\\"price\\\":2438.035732485175,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.094063235885542},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.5863204060251611,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":2938.5368234460043,\\\"ask\\\":3009.918284744289,\\\"price\\\":2974.2275540951464,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.09644200705750028},{\\\"volatility\\\":0.025,\\\"forecast\\\":0.5333975238674475,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":3455.4805891118117,\\\"ask\\\":3539.4193888473196,\\\"price\\\":3497.4499889795657,\\\"maxShares\\\":18200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.079487649399685}],\\\"recentTicksOfPrices\\\":[3247.2636379374035,3315.6155342041156,3381.124474961864,3400.8142794008168,3446.3731136699585,3403.940897232225,3384.7338824405633,3408.945994402123,3403.8141599279106,3366.214187599897,3352.5994306289485,3388.974789759468,3403.7715778630904,3486.2034035911706,3417.4456322471356,3448.169358601626,3436.6978389884966,3357.9735590215896,3435.6277253623994,3431.9179971214503]}],[\\\"LXO\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6797.454091580072,\\\"ask\\\":6879.515911599146,\\\"price\\\":6838.485001589609,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43143733252480154,\\\"bias\\\":0.06856266747519846,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6750.870777658723,\\\"ask\\\":6832.370223666675,\\\"price\\\":6791.620500662699,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4309642267037196,\\\"bias\\\":0.06903577329628041,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6713.204828317376,\\\"ask\\\":6794.24955461497,\\\"price\\\":6753.727191466173,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43135156747555925,\\\"bias\\\":0.06864843252444075,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6776.900411313774,\\\"ask\\\":6858.714098371889,\\\"price\\\":6817.807254842832,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4307002240347948,\\\"bias\\\":0.0692997759652052,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6740.447505573091,\\\"ask\\\":6821.821117310392,\\\"price\\\":6781.134311441741,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4310750030385659,\\\"bias\\\":0.06892499696143412,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6731.621734845443,\\\"ask\\\":6812.888798042772,\\\"price\\\":6772.255266444107,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4309846360743266,\\\"bias\\\":0.06901536392567342,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6765.732260319827,\\\"ask\\\":6847.411120605379,\\\"price\\\":6806.571690462603,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43133435125768643,\\\"bias\\\":0.06866564874231357,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6743.8794602553335,\\\"ask\\\":6825.294504041112,\\\"price\\\":6784.586982148223,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43111184777106454,\\\"bias\\\":0.06888815222893546,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6785.25439331377,\\\"ask\\\":6867.168933273292,\\\"price\\\":6826.211663293531,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43153448917558385,\\\"bias\\\":0.06846551082441615,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6741.9899001980975,\\\"ask\\\":6823.382132393648,\\\"price\\\":6782.686016295873,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43197384397521604,\\\"bias\\\":0.06802615602478396,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6706.654276174709,\\\"ask\\\":6787.619921359917,\\\"price\\\":6747.137098767313,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4323322561691452,\\\"bias\\\":0.06766774383085478,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6671.415721825438,\\\"ask\\\":6751.955951867595,\\\"price\\\":6711.685836846516,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.431974833761653,\\\"bias\\\":0.06802516623834698,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6726.034523151654,\\\"ask\\\":6807.234135101172,\\\"price\\\":6766.634329126413,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43141791253310474,\\\"bias\\\":0.06858208746689526,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6730.785103759961,\\\"ask\\\":6812.04206678322,\\\"price\\\":6771.413585271591,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4313694731839346,\\\"bias\\\":0.06863052681606541,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6721.154848975955,\\\"ask\\\":6802.29555137808,\\\"price\\\":6761.7252001770175,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4312711374850777,\\\"bias\\\":0.06872886251492227,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6706.346458903048,\\\"ask\\\":6787.3083879843725,\\\"price\\\":6746.82742344371,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4314228987774036,\\\"bias\\\":0.06857710122259641,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6733.457700355295,\\\"ask\\\":6814.746928126184,\\\"price\\\":6774.102314240739,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4317001302566799,\\\"bias\\\":0.06829986974332009,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6703.156166202774,\\\"ask\\\":6784.079580684096,\\\"price\\\":6743.617873443435,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.432008878969126,\\\"bias\\\":0.06799112103087401,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6631.800024558211,\\\"ask\\\":6711.861996685674,\\\"price\\\":6671.831010621942,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43127731528432156,\\\"bias\\\":0.06872268471567844,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6569.519771545644,\\\"ask\\\":6648.829869391267,\\\"price\\\":6609.174820468455,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4319288189467861,\\\"bias\\\":0.06807118105321391,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6597.854949928703,\\\"ask\\\":6677.50712236245,\\\"price\\\":6637.681036145576,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4322224186504117,\\\"bias\\\":0.06777758134958828,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6569.6915767197725,\\\"ask\\\":6649.003748672124,\\\"price\\\":6609.347662695948,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4319318653882903,\\\"bias\\\":0.06806813461170969,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6503.430757861724,\\\"ask\\\":6581.943000411363,\\\"price\\\":6542.686879136543,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43123834676628314,\\\"bias\\\":0.06876165323371686,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6490.44531311356,\\\"ask\\\":6568.800789730625,\\\"price\\\":6529.623051422092,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4313759183204344,\\\"bias\\\":0.06862408167956557,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6486.114677767383,\\\"ask\\\":6564.4178730724225,\\\"price\\\":6525.266275419903,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4313300995385465,\\\"bias\\\":0.06866990046145349,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6470.21255770038,\\\"ask\\\":6548.323775700787,\\\"price\\\":6509.268166700584,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43116132656665584,\\\"bias\\\":0.06883867343334416,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6509.3308278818995,\\\"ask\\\":6587.914298641038,\\\"price\\\":6548.622563261469,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43074513470243375,\\\"bias\\\":0.06925486529756625,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6460.260902480028,\\\"ask\\\":6538.2519797735495,\\\"price\\\":6499.256441126789,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43021909850588264,\\\"bias\\\":0.06978090149411736,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6524.444650534975,\\\"ask\\\":6603.210581929763,\\\"price\\\":6563.827616232369,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4309123831685541,\\\"bias\\\":0.06908761683144587,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6464.162233422786,\\\"ask\\\":6542.200409278997,\\\"price\\\":6503.181321350891,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4315566690612544,\\\"bias\\\":0.0684433309387456,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6446.443103368028,\\\"ask\\\":6524.267366185349,\\\"price\\\":6485.355234776688,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43136854108698425,\\\"bias\\\":0.06863145891301575,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6405.9375669535875,\\\"ask\\\":6483.2728293312975,\\\"price\\\":6444.6051981424425,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4318025062995892,\\\"bias\\\":0.06819749370041078,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6368.466970501744,\\\"ask\\\":6445.349871554079,\\\"price\\\":6406.908421027912,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43220376468364174,\\\"bias\\\":0.06779623531635826,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6385.52434722798,\\\"ask\\\":6462.61317234542,\\\"price\\\":6424.0687597867,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4320221784507589,\\\"bias\\\":0.06797782154924109,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6364.0369981623235,\\\"ask\\\":6440.866418663277,\\\"price\\\":6402.4517084128,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4322516967864904,\\\"bias\\\":0.06774830321350961,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6359.511435834799,\\\"ask\\\":6436.286221780491,\\\"price\\\":6397.898828807645,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4322034856665214,\\\"bias\\\":0.06779651433347861,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6326.158975271704,\\\"ask\\\":6402.531115818244,\\\"price\\\":6364.345045544974,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43184605225717126,\\\"bias\\\":0.06815394774282874,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6338.284773199227,\\\"ask\\\":6414.803301648312,\\\"price\\\":6376.54403742377,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43171541674808545,\\\"bias\\\":0.06828458325191455,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6305.990838931239,\\\"ask\\\":6382.11950097065,\\\"price\\\":6344.055169950944,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4320651124421293,\\\"bias\\\":0.0679348875578707,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6318.9863825275625,\\\"ask\\\":6395.271932417232,\\\"price\\\":6357.129157472397,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43220511435705744,\\\"bias\\\":0.06779488564294256,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6247.571659506872,\\\"ask\\\":6322.99505982285,\\\"price\\\":6285.283359664861,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.432980063928551,\\\"bias\\\":0.06701993607144902,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6188.799910172138,\\\"ask\\\":6263.513792387495,\\\"price\\\":6226.156851279817,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4323436111525052,\\\"bias\\\":0.06765638884749481,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6215.061481899065,\\\"ask\\\":6290.092405221791,\\\"price\\\":6252.576943560428,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43263070447177426,\\\"bias\\\":0.06736929552822574,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6205.284983523043,\\\"ask\\\":6280.197880708432,\\\"price\\\":6242.741432115738,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43252456336623696,\\\"bias\\\":0.06747543663376304,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6273.949940980586,\\\"ask\\\":6349.6917913747175,\\\"price\\\":6311.820866177652,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4332712169040179,\\\"bias\\\":0.06672878309598212,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6206.208281001577,\\\"ask\\\":6281.1323246353995,\\\"price\\\":6243.670302818488,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43399957121161314,\\\"bias\\\":0.06600042878838686,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6209.374737595856,\\\"ask\\\":6284.33700806985,\\\"price\\\":6246.855872832853,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43403324515285063,\\\"bias\\\":0.06596675484714937,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.5612127134607423,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5080.160713613319,\\\"ask\\\":5141.490621624746,\\\"price\\\":5110.825667619032,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.06512150407768591},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.5621846045875469,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5904.931882389745,\\\"ask\\\":5976.218786402498,\\\"price\\\":5940.575334396121,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.06400009759392133},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.5619999988369712,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":7438.157020753514,\\\"ask\\\":7527.953684987961,\\\"price\\\":7483.055352870736,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.06349845255686626},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43764790222736266,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":7275.37709677289,\\\"ask\\\":7363.208611019647,\\\"price\\\":7319.292853896273,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.06596537206482855},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4981081819977813,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":7411.889873026891,\\\"ask\\\":7501.369428838078,\\\"price\\\":7456.629650932484,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.06479908648382504},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4677710469538993,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":7203.100801263366,\\\"ask\\\":7290.059764658899,\\\"price\\\":7246.580282961129,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.07233520188210235},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.458774468723476,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6277.906599788859,\\\"ask\\\":6353.696216687721,\\\"price\\\":6315.801408238288,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.07948710829577366},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.5733000602729772,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5808.795871468975,\\\"ask\\\":5878.922179776447,\\\"price\\\":5843.85902562271,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.0783515303201332},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4745680754707684,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6122.206710833391,\\\"ask\\\":6196.11665100442,\\\"price\\\":6159.161680918907,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.07110312782857209},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43239046264005876,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5730.869678694249,\\\"ask\\\":5800.055228135228,\\\"price\\\":5765.46245341474,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.07027241876265189},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43419582428548653,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5622.354812755362,\\\"ask\\\":5690.230323573334,\\\"price\\\":5656.292568164346,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.0697390112569809},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.429222325727874,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5095.77242077958,\\\"ask\\\":5157.290800104885,\\\"price\\\":5126.531610442234,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.07339135631361016},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.5323995225005748,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5118.7529472906745,\\\"ask\\\":5180.548757519536,\\\"price\\\":5149.650852405103,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.07029689626496138},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4374510675962606,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5536.044268558753,\\\"ask\\\":5602.877800975958,\\\"price\\\":5569.461034767354,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.0659817820815991},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43349799339295586,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5244.814321651819,\\\"ask\\\":5308.131999579208,\\\"price\\\":5276.473160615515,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.06993124359603237},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.5489136439708268,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4957.010657785762,\\\"ask\\\":5016.853844801284,\\\"price\\\":4986.932251293523,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.0693382972021036},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.560823687594411,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5338.472326675512,\\\"ask\\\":5402.920684744029,\\\"price\\\":5370.696505709767,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.06373533106316909},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.5604846587683554,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5807.452627041555,\\\"ask\\\":5877.562719118514,\\\"price\\\":5842.507673080033,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.0641304530287592},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.5630422230836927,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6187.539481633853,\\\"ask\\\":6262.238147408101,\\\"price\\\":6224.888814520977,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.06662858718620479},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.5211306079771325,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6683.742298104774,\\\"ask\\\":6764.431339933006,\\\"price\\\":6724.086819018889,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.06269111264820504},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.5089059494720012,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6431.840861761314,\\\"ask\\\":6509.488839971708,\\\"price\\\":6470.664850866515,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.06271767955358254},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4677927131189135,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6367.1591905657315,\\\"ask\\\":6444.026303530306,\\\"price\\\":6405.59274704802,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.06656647220466233},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.5683423592453454,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6746.36502178809,\\\"ask\\\":6827.810072352939,\\\"price\\\":6787.087547070517,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.0710342004066673},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.49271888018972715,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":7449.658235795576,\\\"ask\\\":7539.59374769653,\\\"price\\\":7494.625991746052,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.07379793303445598},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.4341850410578075,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":7305.117316784173,\\\"ask\\\":7393.307867892228,\\\"price\\\":7349.2125923382,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.06952503838025792},{\\\"volatility\\\":0.0118,\\\"forecast\\\":0.43269417385802184,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":6639.209655823256,\\\"ask\\\":6719.361080239632,\\\"price\\\":6679.285368031444,\\\"maxShares\\\":11700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.07101314021525745}],\\\"recentTicksOfPrices\\\":[6499.256441126789,6563.827616232369,6503.181321350891,6485.355234776688,6444.6051981424425,6406.908421027912,6424.0687597867,6402.4517084128,6397.898828807645,6364.345045544974,6376.54403742377,6344.055169950944,6357.129157472397,6285.283359664861,6226.156851279817,6252.576943560428,6242.741432115738,6311.820866177652,6243.670302818488,6246.855872832853]}],[\\\"RHOC\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4400.270195080322,\\\"ask\\\":4489.164542455683,\\\"price\\\":4444.717368768002,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4872386250281398,\\\"bias\\\":0.012761374971860195,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4383.863331804264,\\\"ask\\\":4472.4262273962695,\\\"price\\\":4428.144779600267,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4877162269024018,\\\"bias\\\":0.012283773097598205,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4370.5632474395525,\\\"ask\\\":4458.857454458533,\\\"price\\\":4414.710350949043,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4880900350577025,\\\"bias\\\":0.011909964942297513,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4348.18708494617,\\\"ask\\\":4436.029248278415,\\\"price\\\":4392.108166612293,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4887029325840348,\\\"bias\\\":0.0112970674159652,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4335.47029191379,\\\"ask\\\":4423.055550336291,\\\"price\\\":4379.2629211250405,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.48903429794587244,\\\"bias\\\":0.010965702054127557,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4338.553246438239,\\\"ask\\\":4426.200786770324,\\\"price\\\":4382.377016604281,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.48911227509364485,\\\"bias\\\":0.010887724906355145,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4350.476961913897,\\\"ask\\\":4438.3653853869055,\\\"price\\\":4394.421173650401,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4888130460037006,\\\"bias\\\":0.011186953996299376,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4358.122923874763,\\\"ask\\\":4446.165811225767,\\\"price\\\":4402.144367550265,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4890096566867647,\\\"bias\\\":0.010990343313235285,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4343.669118354674,\\\"ask\\\":4431.420009634567,\\\"price\\\":4387.54456399462,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.48937536659817865,\\\"bias\\\":0.010624633401821348,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4328.603419326013,\\\"ask\\\":4416.049953049771,\\\"price\\\":4372.326686187892,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.48974515683677405,\\\"bias\\\":0.010254843163225946,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4316.269152729749,\\\"ask\\\":4403.466509350553,\\\"price\\\":4359.867831040151,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4894521121609152,\\\"bias\\\":0.01054788783908478,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4328.634507024899,\\\"ask\\\":4416.081668782977,\\\"price\\\":4372.358087903938,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4897542906525259,\\\"bias\\\":0.010245709347474097,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4309.498607933229,\\\"ask\\\":4396.559185871275,\\\"price\\\":4353.028896902252,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.49020924116541137,\\\"bias\\\":0.009790758834588631,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4307.848372245778,\\\"ask\\\":4394.875612089128,\\\"price\\\":4351.361992167453,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5002092411654114,\\\"bias\\\":0.00020924116541143345,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4311.196116329889,\\\"ask\\\":4398.290987366856,\\\"price\\\":4354.743551848373,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5102092411654113,\\\"bias\\\":0.010209241165411331,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4306.039108433108,\\\"ask\\\":4393.029797492363,\\\"price\\\":4349.5344529627355,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5100869730299291,\\\"bias\\\":0.010086973029929114,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4296.618300287851,\\\"ask\\\":4383.418669990636,\\\"price\\\":4340.018485139243,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5098658050530693,\\\"bias\\\":0.009865805053069332,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4307.152705513345,\\\"ask\\\":4394.1658914833115,\\\"price\\\":4350.659298498328,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4998658050530693,\\\"bias\\\":0.0001341949469306769,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4332.28824280603,\\\"ask\\\":4419.809217408173,\\\"price\\\":4376.048730107102,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5098658050530693,\\\"bias\\\":0.009865805053069332,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4310.126458517586,\\\"ask\\\":4397.199720305821,\\\"price\\\":4353.663089411703,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4998658050530693,\\\"bias\\\":0.0001341949469306769,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4300.067210007268,\\\"ask\\\":4386.93725465388,\\\"price\\\":4343.502232330574,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4898658050530693,\\\"bias\\\":0.010134194946930686,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4290.092407578072,\\\"ask\\\":4376.760941064497,\\\"price\\\":4333.426674321285,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.49010143306004655,\\\"bias\\\":0.009898566939953446,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4266.515568494595,\\\"ask\\\":4352.707802201556,\\\"price\\\":4309.611685348075,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4801014330600466,\\\"bias\\\":0.0198985669399534,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4271.145276862876,\\\"ask\\\":4357.431040031824,\\\"price\\\":4314.28815844735,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.479885508471469,\\\"bias\\\":0.02011449152853101,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4269.599125310612,\\\"ask\\\":4355.853653094665,\\\"price\\\":4312.7263892026385,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4799583491560088,\\\"bias\\\":0.020041650843991177,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4275.290557259931,\\\"ask\\\":4361.660063467202,\\\"price\\\":4318.475310363567,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4802255070052186,\\\"bias\\\":0.0197744929947814,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4289.309804533947,\\\"ask\\\":4375.962527857864,\\\"price\\\":4332.636166195905,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.47957707503714725,\\\"bias\\\":0.02042292496285275,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4271.711726314915,\\\"ask\\\":4358.008932907135,\\\"price\\\":4314.860329611025,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4787357162236681,\\\"bias\\\":0.021264283776331883,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4248.816708817908,\\\"ask\\\":4334.651389804128,\\\"price\\\":4291.734049311018,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.47758987684653037,\\\"bias\\\":0.02241012315346963,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4270.307102584758,\\\"ask\\\":4356.575932940005,\\\"price\\\":4313.441517762381,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.47645637920721784,\\\"bias\\\":0.02354362079278216,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4263.9503932708385,\\\"ask\\\":4350.090805256107,\\\"price\\\":4307.020599263473,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.47680736817231706,\\\"bias\\\":0.02319263182768294,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4278.5735722787995,\\\"ask\\\":4365.009402021806,\\\"price\\\":4321.791487150303,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.47760275736684704,\\\"bias\\\":0.02239724263315296,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4264.963232615759,\\\"ask\\\":4351.1241060019365,\\\"price\\\":4308.043669308848,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4783174975958402,\\\"bias\\\":0.02168250240415981,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4258.776516933694,\\\"ask\\\":4344.812406164678,\\\"price\\\":4301.794461549186,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4780025163397991,\\\"bias\\\":0.02199748366020088,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4250.991879589297,\\\"ask\\\":4336.8705034193845,\\\"price\\\":4293.931191504341,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.47840534569735715,\\\"bias\\\":0.021594654302642846,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4252.6326092904455,\\\"ask\\\":4338.5443791751,\\\"price\\\":4295.588494232773,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4784886932823537,\\\"bias\\\":0.021511306717646284,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4264.792890258009,\\\"ask\\\":4350.950322384434,\\\"price\\\":4307.871606321221,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.47787358363687304,\\\"bias\\\":0.022126416363126955,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4269.226588557803,\\\"ask\\\":4355.473590346849,\\\"price\\\":4312.350089452326,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.47764355639490824,\\\"bias\\\":0.022356443605091758,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4281.0846799632645,\\\"ask\\\":4367.571239154441,\\\"price\\\":4324.327959558853,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.47826452308822165,\\\"bias\\\":0.02173547691177835,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4276.30490175766,\\\"ask\\\":4362.694899772966,\\\"price\\\":4319.499900765313,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.47850746825050094,\\\"bias\\\":0.021492531749499055,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4249.9562175351675,\\\"ask\\\":4335.813918899514,\\\"price\\\":4292.885068217341,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4798399524061563,\\\"bias\\\":0.02016004759384371,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4271.846158916514,\\\"ask\\\":4358.146081318867,\\\"price\\\":4314.99612011769,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4788015834501337,\\\"bias\\\":0.021198416549866317,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4262.037052176015,\\\"ask\\\":4348.138810805834,\\\"price\\\":4305.087931490924,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4792894664228099,\\\"bias\\\":0.020710533577190104,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4265.679025734703,\\\"ask\\\":4351.85435958793,\\\"price\\\":4308.7666926613165,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4794664409886127,\\\"bias\\\":0.020533559011387315,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4291.280181019559,\\\"ask\\\":4377.972709929046,\\\"price\\\":4334.626445474302,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.47823408658587907,\\\"bias\\\":0.02176591341412093,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4266.024978880428,\\\"ask\\\":4352.207301686093,\\\"price\\\":4309.11614028326,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.47694552745709323,\\\"bias\\\":0.023054472542906768,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4264.844798499482,\\\"ask\\\":4351.003279277249,\\\"price\\\":4307.924038888365,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4768817304434299,\\\"bias\\\":0.023118269556570092,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5073506465645595,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4173.670402303349,\\\"ask\\\":4257.986976087254,\\\"price\\\":4215.828689195302,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.03543576657872144},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.46476258643787305,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4409.377474689181,\\\"ask\\\":4498.455807511183,\\\"price\\\":4453.916641100181,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.04361749821769145},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4636878333991328,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4400.432659293159,\\\"ask\\\":4489.330288773832,\\\"price\\\":4444.8814740334965,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.04433557497853796},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.48796060326222945,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4233.344731147412,\\\"ask\\\":4318.8668469281665,\\\"price\\\":4276.105789037789,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.027545342379262705},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4996239554445264,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4219.994073908834,\\\"ask\\\":4305.246479442346,\\\"price\\\":4262.6202766755905,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.018430560592033074},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5007926816157497,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4244.252652033007,\\\"ask\\\":4329.995129851853,\\\"price\\\":4287.12389094243,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.019793751784959124},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4883383060418556,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4303.668633916981,\\\"ask\\\":4390.611434602174,\\\"price\\\":4347.140034259581,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.02900773056181416},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5013615327284477,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4395.973408579035,\\\"ask\\\":4484.780952186692,\\\"price\\\":4440.377180382864,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.01970324562153203},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4850385436937092,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4467.045717156215,\\\"ask\\\":4557.289064977554,\\\"price\\\":4512.167391066882,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.017926989016590955},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.48640443381266435,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4551.431534880557,\\\"ask\\\":4643.379646696326,\\\"price\\\":4597.40559078844,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.027996008948801387},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4809608637597351,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4353.483007808121,\\\"ask\\\":4441.4321594810135,\\\"price\\\":4397.457583644567,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.026114075286132077},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.47887486395098156,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4384.511262976794,\\\"ask\\\":4473.087248087435,\\\"price\\\":4428.799255532116,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.024139535034641446},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4753590994615887,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4414.696799801866,\\\"ask\\\":4503.882593737257,\\\"price\\\":4459.289696769565,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.03741566025558707},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4803227943229832,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4539.823770831371,\\\"ask\\\":4631.537382363316,\\\"price\\\":4585.680576597343,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.025107278815893586},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5087894793145746,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4384.859025609974,\\\"ask\\\":4473.442036228356,\\\"price\\\":4429.150530919167,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.028640162535743974},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5186512843677501,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4690.853539603023,\\\"ask\\\":4785.618257574803,\\\"price\\\":4738.235898588911,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.031012198496717658},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.49804687864894864,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4814.652166587299,\\\"ask\\\":4911.917866922397,\\\"price\\\":4863.285016754849,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.02393249255930019},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5268988548513307,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4837.584769854194,\\\"ask\\\":4935.313755103774,\\\"price\\\":4886.449262478983,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.03667824110289031},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5153250939752002,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4948.579029586527,\\\"ask\\\":5048.55032311353,\\\"price\\\":4998.564676350027,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.02265461589929485},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4843789729634297,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4960.876261655012,\\\"ask\\\":5061.095984112688,\\\"price\\\":5010.986122883849,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.020835633281219734},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5022067481512686,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4823.909830233091,\\\"ask\\\":4921.362554076183,\\\"price\\\":4872.636192154638,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.021444993690641123},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5156046879827104,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4650.207531102485,\\\"ask\\\":4744.1511175894,\\\"price\\\":4697.1793243459415,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.021381059687408555},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5060495240138461,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4597.803090465623,\\\"ask\\\":4690.68800138412,\\\"price\\\":4644.245545924873,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.02237898605597821},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.48112257441996936,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4479.532649052725,\\\"ask\\\":4570.028258124497,\\\"price\\\":4524.78045358861,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.02462108436965066},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5073846690105708,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4439.797382070679,\\\"ask\\\":4529.490258476147,\\\"price\\\":4484.643820273413,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.02165344812491099},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.4864701046579916,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":4456.511614514453,\\\"ask\\\":4546.5421521814105,\\\"price\\\":4501.526883347932,\\\"maxShares\\\":8800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.02031033161251239}],\\\"recentTicksOfPrices\\\":[4314.860329611025,4291.734049311018,4313.441517762381,4307.020599263473,4321.791487150303,4308.043669308848,4301.794461549186,4293.931191504341,4295.588494232773,4307.871606321221,4312.350089452326,4324.327959558853,4319.499900765313,4292.885068217341,4314.99612011769,4305.087931490924,4308.7666926613165,4334.626445474302,4309.11614028326,4307.924038888365]}],[\\\"APHE\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2578.911128178554,\\\"ask\\\":2657.4566447728243,\\\"price\\\":2618.183886475689,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5698824944610956,\\\"bias\\\":0.06988249446109562,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2605.4533712792795,\\\"ask\\\":2684.807281064435,\\\"price\\\":2645.130326171857,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5706017275266342,\\\"bias\\\":0.07060172752663418,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2627.2572112267408,\\\"ask\\\":2707.2751973554737,\\\"price\\\":2667.2662042911074,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.571192560885609,\\\"bias\\\":0.07119256088560899,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2590.595753563838,\\\"ask\\\":2669.4971470733963,\\\"price\\\":2630.046450318617,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5722000600499346,\\\"bias\\\":0.07220006004993462,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2569.866453527777,\\\"ask\\\":2648.136497797658,\\\"price\\\":2609.001475662718,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5727824470083474,\\\"bias\\\":0.07278244700834735,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2574.8918942322143,\\\"ask\\\":2653.3149976098452,\\\"price\\\":2614.10344592103,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5726401190398016,\\\"bias\\\":0.07264011903980161,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2555.5771764353262,\\\"ask\\\":2633.4120142963,\\\"price\\\":2594.4945953658134,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5731891235515508,\\\"bias\\\":0.07318912355155083,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2567.9285982766287,\\\"ask\\\":2646.139621574394,\\\"price\\\":2607.0341099255115,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5735428556741867,\\\"bias\\\":0.07354285567418672,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2591.427150705114,\\\"ask\\\":2670.353865955016,\\\"price\\\":2630.890508330065,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5742158302463615,\\\"bias\\\":0.07421583024636147,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2616.23066323424,\\\"ask\\\":2695.912815413963,\\\"price\\\":2656.0717393241016,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5735054829480111,\\\"bias\\\":0.07350548294801107,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2595.8314230308056,\\\"ask\\\":2674.8922785545865,\\\"price\\\":2635.3618507926963,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5740831229247917,\\\"bias\\\":0.07408312292479169,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2616.282078162886,\\\"ask\\\":2695.9657962795222,\\\"price\\\":2656.1239372212044,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5746667696071612,\\\"bias\\\":0.07466676960716123,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2584.719803737929,\\\"ask\\\":2663.442234308627,\\\"price\\\":2624.0810190232783,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.575578533067695,\\\"bias\\\":0.07557853306769502,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2581.999768946156,\\\"ask\\\":2660.6393558176123,\\\"price\\\":2621.319562381884,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5754989140677524,\\\"bias\\\":0.07549891406775244,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2576.4935484862553,\\\"ask\\\":2654.9654332117248,\\\"price\\\":2615.7294908489903,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5756602626826498,\\\"bias\\\":0.0756602626826498,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2584.979129414028,\\\"ask\\\":2663.709458228668,\\\"price\\\":2624.3442938213484,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5759094468043751,\\\"bias\\\":0.07590944680437506,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2569.4859579215326,\\\"ask\\\":2647.744413492747,\\\"price\\\":2608.61518570714,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5763671562826521,\\\"bias\\\":0.07636715628265212,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2586.8105169416835,\\\"ask\\\":2665.5966240566586,\\\"price\\\":2626.2035704991713,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5758522566770944,\\\"bias\\\":0.07585225667709439,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2545.9521657402124,\\\"ask\\\":2623.4938560673254,\\\"price\\\":2584.723010903769,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5770695608293253,\\\"bias\\\":0.07706956082932526,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2510.454502930947,\\\"ask\\\":2586.9150461674226,\\\"price\\\":2548.684774549185,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.578159319388974,\\\"bias\\\":0.07815931938897402,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2526.6046076467906,\\\"ask\\\":2603.5570322451695,\\\"price\\\":2565.0808199459802,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5786621292153131,\\\"bias\\\":0.07866212921531313,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2510.5522211151365,\\\"ask\\\":2587.0157405399627,\\\"price\\\":2548.78398082755,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5781591662046468,\\\"bias\\\":0.0781591662046468,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2548.7039477732337,\\\"ask\\\":2626.3294487206417,\\\"price\\\":2587.5166982469377,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5793469157044521,\\\"bias\\\":0.07934691570445207,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2541.1209952196405,\\\"ask\\\":2618.5155432973957,\\\"price\\\":2579.8182692585183,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5795836946292623,\\\"bias\\\":0.07958369462926229,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2538.5929157745313,\\\"ask\\\":2615.9104665087807,\\\"price\\\":2577.251691141656,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.579662948731528,\\\"bias\\\":0.07966294873152802,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2547.8988548354455,\\\"ask\\\":2625.4998351857635,\\\"price\\\":2586.6993450106047,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5793709213876788,\\\"bias\\\":0.07937092138767876,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2570.8748291910997,\\\"ask\\\":2649.175585410118,\\\"price\\\":2610.025207300609,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5800866579056049,\\\"bias\\\":0.08008665790560487,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2600.0005668095887,\\\"ask\\\":2679.188401331708,\\\"price\\\":2639.5944840706484,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5809939688950062,\\\"bias\\\":0.08099396889500621,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2562.0349269906105,\\\"ask\\\":2640.0664476096135,\\\"price\\\":2601.0506873001123,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5797937558072833,\\\"bias\\\":0.07979375580728332,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2526.887385043225,\\\"ask\\\":2603.8484221511403,\\\"price\\\":2565.3679035971827,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5786838708175619,\\\"bias\\\":0.0786838708175619,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2537.246884922249,\\\"ask\\\":2614.523439792977,\\\"price\\\":2575.8851623576134,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5783612899399809,\\\"bias\\\":0.07836128993998093,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2561.1759138507878,\\\"ask\\\":2639.181271633045,\\\"price\\\":2600.1785927419164,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5791003230963497,\\\"bias\\\":0.07910032309634973,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2538.8950962804033,\\\"ask\\\":2616.2218504818366,\\\"price\\\":2577.55847338112,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5784061550422028,\\\"bias\\\":0.07840615504220283,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2549.037777076932,\\\"ask\\\":2626.6734454143,\\\"price\\\":2587.8556112456163,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5780929287871122,\\\"bias\\\":0.07809292878711216,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2536.2652897059406,\\\"ask\\\":2613.5119482756645,\\\"price\\\":2574.8886189908026,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5784862003233135,\\\"bias\\\":0.07848620032331355,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2538.957284009594,\\\"ask\\\":2616.2859322535405,\\\"price\\\":2577.6216081315674,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5785695056482901,\\\"bias\\\":0.07856950564829013,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2558.9224917128327,\\\"ask\\\":2636.8592173487564,\\\"price\\\":2597.8908545307945,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5791873405796961,\\\"bias\\\":0.07918734057969612,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2551.6276112683504,\\\"ask\\\":2629.342157804442,\\\"price\\\":2590.4848845363963,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5789609508903487,\\\"bias\\\":0.07896095089034871,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2571.117778926022,\\\"ask\\\":2649.4259346293525,\\\"price\\\":2610.2718567776874,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5783578212783059,\\\"bias\\\":0.07835782127830593,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2579.020811045277,\\\"ask\\\":2657.569668234473,\\\"price\\\":2618.295239639875,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5785986754248693,\\\"bias\\\":0.07859867542486931,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2622.9913731068373,\\\"ask\\\":2702.8794352319183,\\\"price\\\":2662.9354041693778,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5772586211217305,\\\"bias\\\":0.07725862112173054,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2586.357620204705,\\\"ask\\\":2665.129933510432,\\\"price\\\":2625.7437768575687,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5761643125800104,\\\"bias\\\":0.07616431258001044,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2602.727048379907,\\\"ask\\\":2681.997922949853,\\\"price\\\":2642.3624856648803,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5766463674337369,\\\"bias\\\":0.07664636743373687,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2596.625198361751,\\\"ask\\\":2675.710229783936,\\\"price\\\":2636.1677140728434,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5768264799269887,\\\"bias\\\":0.07682647992698866,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2639.4813679016147,\\\"ask\\\":2719.871663370699,\\\"price\\\":2679.676515636157,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5755584922901978,\\\"bias\\\":0.07555849229019784,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2682.452693316214,\\\"ask\\\":2764.151760117723,\\\"price\\\":2723.3022267169686,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5767886008257318,\\\"bias\\\":0.0767886008257318,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2684.494007836522,\\\"ask\\\":2766.2552466538777,\\\"price\\\":2725.3746272452,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5768470360355121,\\\"bias\\\":0.07684703603551213,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5472365229609563,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":8344.037752551552,\\\"ask\\\":8598.170882070886,\\\"price\\\":8471.104317311216,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.10433925990890802},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.4136051454393275,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":8710.026341049963,\\\"ask\\\":8975.306331132706,\\\"price\\\":8842.666336091334,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.09068803037280238},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.40411711529206473,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":8598.14388467895,\\\"ask\\\":8860.016287257997,\\\"price\\\":8729.080085968477,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.10222453883429045},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5429901408873634,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":8842.226466624701,\\\"ask\\\":9111.532856471138,\\\"price\\\":8976.879661547922,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.09922168324647967},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.4113106281201513,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":7530.009936065955,\\\"ask\\\":7759.350340210097,\\\"price\\\":7644.680138138028,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.0957388817753177},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.4182744940763801,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":6776.816311465762,\\\"ask\\\":6983.216808261666,\\\"price\\\":6880.016559863712,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.08584391530191704},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.4555844649111866,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":6065.060579070668,\\\"ask\\\":6249.783236301253,\\\"price\\\":6157.421907685958,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.08062265045022299},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.508243063577195,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":5672.038158106791,\\\"ask\\\":5844.790589318166,\\\"price\\\":5758.414373712477,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.07523854343734271},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.42859521685199903,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":5604.204019145837,\\\"ask\\\":5774.890435972613,\\\"price\\\":5689.547227559226,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.07637447792698415},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.4316289177607194,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":5647.201213253285,\\\"ask\\\":5819.197189291453,\\\"price\\\":5733.199201272369,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.07077072799178752},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.4924257460310651,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":4871.153037500748,\\\"ask\\\":5019.51302849062,\\\"price\\\":4945.333032995683,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.08411374490879564},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.4727053681522733,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":5193.8822675947595,\\\"ask\\\":5352.071575237242,\\\"price\\\":5272.976921416003,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.08840329204294911},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.41548860597614345,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":4492.068548265745,\\\"ask\\\":4628.882818771301,\\\"price\\\":4560.475683518524,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.09117079216253854},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.48164475302364734,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":3794.6517012225254,\\\"ask\\\":3910.2248494831088,\\\"price\\\":3852.438275352819,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.08999774554707085},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.4771575590114083,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":3847.703818540085,\\\"ask\\\":3964.8927673281078,\\\"price\\\":3906.298292934096,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.09274639787483963},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5465412997225407,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":3518.8442259112476,\\\"ask\\\":3626.01714649738,\\\"price\\\":3572.4306862043154,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.09620795506905688},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.4149486645669635,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":3794.310371522389,\\\"ask\\\":3909.8731239545414,\\\"price\\\":3852.0917477384646,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.08831689546902893},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5179354462091537,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":3958.2535330454707,\\\"ask\\\":4078.8094782143676,\\\"price\\\":4018.5315056299196,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.09779196339828289},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5886674153790339,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":3894.5002062248864,\\\"ask\\\":4013.114425703816,\\\"price\\\":3953.807315964349,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.09421683433025618},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5284728176033383,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":3699.346265625021,\\\"ask\\\":3812.0167102633463,\\\"price\\\":3755.6814879441804,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.08289364950246736},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5069066370334648,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":3527.481363022742,\\\"ask\\\":3634.917343622421,\\\"price\\\":3581.1993533225823,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.07663614062394081},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.4590864396776937,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":3087.360864457542,\\\"ask\\\":3181.3921598217303,\\\"price\\\":3134.376512139636,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.0698935400039582},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.47271447144471146,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2499.3858782999746,\\\"ask\\\":2575.509306065456,\\\"price\\\":2537.4475921827147,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.06857987014271155},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.5614102330469659,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2549.9798448439024,\\\"ask\\\":2627.644205600571,\\\"price\\\":2588.812025222238,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.0651737446713061},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.4679649988649935,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2599.795232181286,\\\"ask\\\":2678.9768128568585,\\\"price\\\":2639.3860225190715,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.058694099455534776},{\\\"volatility\\\":0.0176,\\\"forecast\\\":0.47324067868449776,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":2406.6789062782495,\\\"ask\\\":2479.978771444083,\\\"price\\\":2443.3288388611672,\\\"maxShares\\\":6300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.07081470435221532}],\\\"recentTicksOfPrices\\\":[2639.5944840706484,2601.0506873001123,2565.3679035971827,2575.8851623576134,2600.1785927419164,2577.55847338112,2587.8556112456163,2574.8886189908026,2577.6216081315674,2597.8908545307945,2590.4848845363963,2610.2718567776874,2618.295239639875,2662.9354041693778,2625.7437768575687,2642.3624856648803,2636.1677140728434,2679.676515636157,2723.3022267169686,2725.3746272452]}],[\\\"SYSC\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10640.494271506213,\\\"ask\\\":10747.433912425873,\\\"price\\\":10693.964091966043,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5605896431350303,\\\"bias\\\":0.06058964313503035,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10536.366600165848,\\\"ask\\\":10642.259731825805,\\\"price\\\":10589.313165995827,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5611884319477597,\\\"bias\\\":0.06118843194775969,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10452.37445431343,\\\"ask\\\":10557.423443804017,\\\"price\\\":10504.898949058725,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5616801238329959,\\\"bias\\\":0.061680123832995926,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10594.410664491084,\\\"ask\\\":10700.887153581447,\\\"price\\\":10647.648909036267,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5625182885075223,\\\"bias\\\":0.06251828850752228,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10676.4694192645,\\\"ask\\\":10783.770619458113,\\\"price\\\":10730.120019361308,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5630025224180207,\\\"bias\\\":0.06300252241802073,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10656.459259157264,\\\"ask\\\":10763.559352214119,\\\"price\\\":10710.009305685691,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5628842194685996,\\\"bias\\\":0.06288421946859957,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10579.679645850585,\\\"ask\\\":10686.00808450235,\\\"price\\\":10632.843865176468,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5624278515807699,\\\"bias\\\":0.06242785158076991,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10530.807247258745,\\\"ask\\\":10636.644506025163,\\\"price\\\":10583.725876641955,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5621381303111606,\\\"bias\\\":0.062138130311160555,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10439.080823316897,\\\"ask\\\":10543.99620847586,\\\"price\\\":10491.53851589638,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5615921331510327,\\\"bias\\\":0.061592133151032735,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10344.0121915938,\\\"ask\\\":10447.972113117356,\\\"price\\\":10395.992152355579,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5621582074861282,\\\"bias\\\":0.062158207486128214,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10422.067162655145,\\\"ask\\\":10526.811556249668,\\\"price\\\":10474.439359452406,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5626272476416007,\\\"bias\\\":0.06262724764160066,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10500.909346287075,\\\"ask\\\":10606.446123636693,\\\"price\\\":10553.677734961884,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5631010182364222,\\\"bias\\\":0.06310101823642222,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10379.208639586184,\\\"ask\\\":10483.52229425539,\\\"price\\\":10431.365466920788,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5623611315283327,\\\"bias\\\":0.06236113152833267,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10389.707847569276,\\\"ask\\\":10494.127021916705,\\\"price\\\":10441.91743474299,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5624242136488211,\\\"bias\\\":0.062424213648821114,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10368.430788155696,\\\"ask\\\":10472.636122710024,\\\"price\\\":10420.53345543286,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5625523143932625,\\\"bias\\\":0.06255231439326248,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10335.744296142511,\\\"ask\\\":10439.62112323942,\\\"price\\\":10387.682709690966,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5623544945105102,\\\"bias\\\":0.06235449451051023,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10276.2462616043,\\\"ask\\\":10379.525118504844,\\\"price\\\":10327.885690054572,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5619934706722765,\\\"bias\\\":0.06199347067227645,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10342.77732733474,\\\"ask\\\":10446.724838162223,\\\"price\\\":10394.751082748482,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5623948323725664,\\\"bias\\\":0.06239483237256638,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10185.813224332776,\\\"ask\\\":10288.183206486874,\\\"price\\\":10236.998215409825,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5633563411573458,\\\"bias\\\":0.06335634115734579,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10049.367425985778,\\\"ask\\\":10150.366093583623,\\\"price\\\":10099.866759784702,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5642165651080797,\\\"bias\\\":0.06421656510807972,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":9987.670824100276,\\\"ask\\\":10088.049425347514,\\\"price\\\":10037.860124723895,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5646132485712919,\\\"bias\\\":0.06461324857129191,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":9926.724104131801,\\\"ask\\\":10026.490175530109,\\\"price\\\":9976.607139830956,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5642165451346276,\\\"bias\\\":0.0642165451346276,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":9783.955263264914,\\\"ask\\\":9882.286471940943,\\\"price\\\":9833.12086760293,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5632794883445409,\\\"bias\\\":0.06327948834454089,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":9811.99032322147,\\\"ask\\\":9910.603291294046,\\\"price\\\":9861.296807257759,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5630981665577968,\\\"bias\\\":0.06309816655779676,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":9802.616565897675,\\\"ask\\\":9901.135325353933,\\\"price\\\":9851.875945625805,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5631585042132496,\\\"bias\\\":0.06315850421324964,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":9768.232505143882,\\\"ask\\\":9866.405696150352,\\\"price\\\":9817.319100647117,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5629361870392016,\\\"bias\\\":0.06293618703920156,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":9852.815250893344,\\\"ask\\\":9951.838519746541,\\\"price\\\":9902.326885319942,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.562391225040808,\\\"bias\\\":0.06239122504080796,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":9746.784605215316,\\\"ask\\\":9844.742239438585,\\\"price\\\":9795.76342232695,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5630699495785576,\\\"bias\\\":0.0630699495785576,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":9885.473306952004,\\\"ask\\\":9984.824797474133,\\\"price\\\":9935.14905221307,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5639673829147748,\\\"bias\\\":0.06396738291477477,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10017.50572443156,\\\"ask\\\":10118.184173923333,\\\"price\\\":10067.844949177446,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5648217444555761,\\\"bias\\\":0.06482174445557609,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10056.941150596778,\\\"ask\\\":10158.015936029911,\\\"price\\\":10107.478543313346,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5645665638559639,\\\"bias\\\":0.06456656385596393,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10148.016803303555,\\\"ask\\\":10250.00692192972,\\\"price\\\":10199.011862616639,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5651512786174565,\\\"bias\\\":0.06515127861745651,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10063.216536134252,\\\"ask\\\":10164.354390768765,\\\"price\\\":10113.78546345151,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5646022647098908,\\\"bias\\\":0.06460226470989083,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10101.819340481155,\\\"ask\\\":10203.345162998554,\\\"price\\\":10152.582251739856,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5648500809598949,\\\"bias\\\":0.06485008095989486,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10053.205559135688,\\\"ask\\\":10154.242800936045,\\\"price\\\":10103.724180035866,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5645364886795544,\\\"bias\\\":0.06453648867955442,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10042.969903731006,\\\"ask\\\":10143.904274622773,\\\"price\\\":10093.43708917689,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5646022633722483,\\\"bias\\\":0.06460226337224828,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":9967.705835768253,\\\"ask\\\":10067.883783866426,\\\"price\\\":10017.79480981734,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5641144651545733,\\\"bias\\\":0.06411446515457331,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":9940.41734350235,\\\"ask\\\":10040.321035396844,\\\"price\\\":9990.369189449597,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5642904725621141,\\\"bias\\\":0.06429047256211406,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10013.325637673206,\\\"ask\\\":10113.962076242786,\\\"price\\\":10063.643856957997,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5647620129938653,\\\"bias\\\":0.0647620129938653,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":9983.858075328888,\\\"ask\\\":10084.198357492996,\\\"price\\\":10034.028216410943,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5649531594065087,\\\"bias\\\":0.0649531594065087,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":9823.042820048404,\\\"ask\\\":9921.7668684911,\\\"price\\\":9872.404844269753,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5660165222669366,\\\"bias\\\":0.06601652226693655,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":9956.644804936546,\\\"ask\\\":10056.711586895706,\\\"price\\\":10006.678195916127,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5669144047837748,\\\"bias\\\":0.06691440478377475,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10017.15547811192,\\\"ask\\\":10117.83040754018,\\\"price\\\":10067.49294282605,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5673210714629545,\\\"bias\\\":0.06732107146295452,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":9994.603125586653,\\\"ask\\\":10095.051398205613,\\\"price\\\":10044.827261896133,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5674729782987672,\\\"bias\\\":0.0674729782987672,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10152.998930214708,\\\"ask\\\":10255.03912046812,\\\"price\\\":10204.019025341415,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5685422990665847,\\\"bias\\\":0.06854229906658471,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10311.717786708004,\\\"ask\\\":10415.353141348285,\\\"price\\\":10363.535464028146,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5696138007385582,\\\"bias\\\":0.06961380073855816,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":10319.252780669241,\\\"ask\\\":10422.963863892046,\\\"price\\\":10371.108322280645,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0169,\\\"forecast\\\":0.569562932437172,\\\"bias\\\":0.06956293243717204,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5256492080074845,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":6086.7945418974095,\\\"ask\\\":6147.968356388845,\\\"price\\\":6117.381449143127,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.038831788551820234},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5223847782895891,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":6452.603271463761,\\\"ask\\\":6517.453555599077,\\\"price\\\":6485.028413531418,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.03836109242056762},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5082610775608358,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":6625.817253182042,\\\"ask\\\":6692.408381354724,\\\"price\\\":6659.112817268383,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.030928709720321135},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.4843124159374671,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5929.3251776087845,\\\"ask\\\":5988.916385423948,\\\"price\\\":5959.120781516364,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.028127876903882132},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.492952336007209,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5817.194369180689,\\\"ask\\\":5875.658634197582,\\\"price\\\":5846.426501689133,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.033788447056282145},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.4690513503772235,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5299.0455008389,\\\"ask\\\":5352.302239540799,\\\"price\\\":5325.673870189847,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.05663658322464871},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.46497401888131984,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":4668.46757815936,\\\"ask\\\":4715.386850301666,\\\"price\\\":4691.927214230514,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.06113035208641926},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5528950929811473,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":4935.62185284454,\\\"ask\\\":4985.226092571618,\\\"price\\\":4960.423972708077,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.05707887000440659},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5542894270630505,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5176.906590939809,\\\"ask\\\":5228.93580290905,\\\"price\\\":5202.921196924431,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.05905934542114921},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.45663989926719345,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5447.877571586608,\\\"ask\\\":5502.630109994513,\\\"price\\\":5475.2538407905595,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.05448841718726344},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.44239654242790605,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":4716.790461575548,\\\"ask\\\":4764.195390837614,\\\"price\\\":4740.49292620658,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.06281844779343893},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5186353334991947,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":4381.667004558099,\\\"ask\\\":4425.703858875267,\\\"price\\\":4403.685431716684,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.06047858346147439},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5600947616271825,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":4626.1218756129465,\\\"ask\\\":4672.615562805036,\\\"price\\\":4649.368719208991,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.06730376337702426},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5678443258230165,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5323.89586731121,\\\"ask\\\":5377.402358439967,\\\"price\\\":5350.649112875589,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.07551274278929021},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.4831282819865818,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":6265.215030180989,\\\"ask\\\":6328.182015408937,\\\"price\\\":6296.698522794965,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.076022405814683},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.43298472312112074,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":6119.893153654137,\\\"ask\\\":6181.399617509959,\\\"price\\\":6150.646385582044,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.06959364555490616},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.4364157160199126,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5668.130293500913,\\\"ask\\\":5725.096427103934,\\\"price\\\":5696.613360302425,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.06921580560943724},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.4443446637544624,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5430.2383596564705,\\\"ask\\\":5484.813619552517,\\\"price\\\":5457.5259896044945,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.06127770635890145},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5264306013944559,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":6339.658609967928,\\\"ask\\\":6403.37377187715,\\\"price\\\":6371.516190922536,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.055949546099521186},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.4825752974439776,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":7329.986984868449,\\\"ask\\\":7403.655195771653,\\\"price\\\":7366.821090320047,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.05709511220370744},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5565889982377586,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":8287.810905727278,\\\"ask\\\":8371.105487694394,\\\"price\\\":8329.458196710833,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.05917279678089782},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.47024113364660736,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":8241.906583754639,\\\"ask\\\":8324.739815752173,\\\"price\\\":8283.323199753408,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.06298307660999869},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5632178019028703,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":7893.87727169386,\\\"ask\\\":7973.212721660629,\\\"price\\\":7933.544996677246,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.0662134020688323},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5585438311503119,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":8473.030136128033,\\\"ask\\\":8558.186217898157,\\\"price\\\":8515.608177013091,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.061459785053756044},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5572520650974913,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":9290.968421033836,\\\"ask\\\":9384.344988079403,\\\"price\\\":9337.65670455662,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.06008815731576733},{\\\"volatility\\\":0.0169,\\\"forecast\\\":0.5573940423913527,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":9356.530131475052,\\\"ask\\\":9450.565610183343,\\\"price\\\":9403.5478708292,\\\"maxShares\\\":6800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.06058964313503035}],\\\"recentTicksOfPrices\\\":[9795.76342232695,9935.14905221307,10067.844949177446,10107.478543313346,10199.011862616639,10113.78546345151,10152.582251739856,10103.724180035866,10093.43708917689,10017.79480981734,9990.369189449597,10063.643856957997,10034.028216410943,9872.404844269753,10006.678195916127,10067.49294282605,10044.827261896133,10204.019025341415,10363.535464028146,10371.108322280645]}],[\\\"CTK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4843.131340608631,\\\"ask\\\":4950.865303695981,\\\"price\\\":4896.998322152306,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5139280871911384,\\\"bias\\\":0.01392808719113836,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4816.9348989397495,\\\"ask\\\":4924.086130260956,\\\"price\\\":4870.510514600353,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5131706214347669,\\\"bias\\\":0.013170621434766883,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4795.728129445861,\\\"ask\\\":4902.407622719681,\\\"price\\\":4849.067876082771,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5137530279543179,\\\"bias\\\":0.013753027954317876,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4760.132278347251,\\\"ask\\\":4866.01995289087,\\\"price\\\":4813.07611561906,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.51478146730556,\\\"bias\\\":0.014781467305559959,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4739.929261620133,\\\"ask\\\":4845.367526287112,\\\"price\\\":4792.648393953623,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.515411498292823,\\\"bias\\\":0.015411498292822956,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4744.827114535391,\\\"ask\\\":4850.37433043001,\\\"price\\\":4797.600722482701,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5155707480361751,\\\"bias\\\":0.015570748036175086,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4725.953326416415,\\\"ask\\\":4831.080700714859,\\\"price\\\":4778.517013565637,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.516192588708291,\\\"bias\\\":0.01619258870829099,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4738.02278149478,\\\"ask\\\":4843.418637099315,\\\"price\\\":4790.7207092970475,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5166061258478237,\\\"bias\\\":0.016606125847823727,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4760.932807957202,\\\"ask\\\":4866.838290035118,\\\"price\\\":4813.885548996161,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5174090911355761,\\\"bias\\\":0.017409091135576094,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4736.975083597956,\\\"ask\\\":4842.347633485878,\\\"price\\\":4789.661358541917,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5165286089725701,\\\"bias\\\":0.016528608972570136,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4756.645288666264,\\\"ask\\\":4862.45539619979,\\\"price\\\":4809.550342433027,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5158422614148005,\\\"bias\\\":0.015842261414800496,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4776.446957225965,\\\"ask\\\":4882.697546769919,\\\"price\\\":4829.572251997943,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5165017665717637,\\\"bias\\\":0.01650176657176372,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4745.824728438375,\\\"ask\\\":4851.39413594661,\\\"price\\\":4798.609432192493,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.515436997221282,\\\"bias\\\":0.015436997221282,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4743.184396376612,\\\"ask\\\":4848.695070512391,\\\"price\\\":4795.939733444502,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5155229285182643,\\\"bias\\\":0.015522928518264312,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4737.834139052239,\\\"ask\\\":4843.225798363816,\\\"price\\\":4790.529968708028,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5156982230928802,\\\"bias\\\":0.01569822309288016,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4746.079366761702,\\\"ask\\\":4851.65443862091,\\\"price\\\":4798.866902691306,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5159714184396058,\\\"bias\\\":0.01597141843960581,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4731.0057373136915,\\\"ask\\\":4836.24550093442,\\\"price\\\":4783.625619124056,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5164802896113716,\\\"bias\\\":0.0164802896113716,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4747.861161856461,\\\"ask\\\":4853.4758691980605,\\\"price\\\":4800.668515527261,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5158931369140148,\\\"bias\\\":0.015893136914014838,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4788.123490443942,\\\"ask\\\":4894.6338208683765,\\\"price\\\":4841.378655656159,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5172408905211731,\\\"bias\\\":0.017240890521173058,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4823.898769347997,\\\"ask\\\":4931.204909818831,\\\"price\\\":4877.551839583414,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.51852907297549,\\\"bias\\\":0.018529072975490002,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4840.2967909332765,\\\"ask\\\":4947.967700337252,\\\"price\\\":4894.132245635265,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5191589372266595,\\\"bias\\\":0.01915893722665951,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4823.998285752489,\\\"ask\\\":4931.306639935052,\\\"price\\\":4877.652462843771,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5198062468216262,\\\"bias\\\":0.01980624682162624,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4785.570186009923,\\\"ask\\\":4892.023718964643,\\\"price\\\":4838.796952487283,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5182158063959224,\\\"bias\\\":0.01821580639592235,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4793.11618886151,\\\"ask\\\":4899.737580322534,\\\"price\\\":4846.426884592022,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5185030376383132,\\\"bias\\\":0.01850303763831318,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4795.6384258557,\\\"ask\\\":4902.315923700821,\\\"price\\\":4848.977174778261,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5184056708226605,\\\"bias\\\":0.018405670822660536,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4786.367066323487,\\\"ask\\\":4892.83832563503,\\\"price\\\":4839.602695979259,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5180491465752223,\\\"bias\\\":0.018049146575222275,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4809.174059705687,\\\"ask\\\":4916.152653551516,\\\"price\\\":4862.663356628602,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.518909186686629,\\\"bias\\\":0.018909186686628998,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4837.96373569851,\\\"ask\\\":4945.582747008285,\\\"price\\\":4891.773241353398,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5177772057035387,\\\"bias\\\":0.01777720570353869,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4875.846230009518,\\\"ask\\\":4984.30792572257,\\\"price\\\":4930.077077866044,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5191692064102836,\\\"bias\\\":0.019169206410283635,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4840.2708932658625,\\\"ask\\\":4947.941226584213,\\\"price\\\":4894.106059925038,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5177602956526166,\\\"bias\\\":0.01776029565261661,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4829.807969838998,\\\"ask\\\":4937.245558652403,\\\"price\\\":4883.526764245701,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5173755503074348,\\\"bias\\\":0.01737555030743476,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4853.87721615212,\\\"ask\\\":4961.85021792699,\\\"price\\\":4907.863717039555,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5182414571981172,\\\"bias\\\":0.018241457198117206,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4876.385658052723,\\\"ask\\\":4984.859353176241,\\\"price\\\":4930.622505614482,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5190873516475274,\\\"bias\\\":0.019087351647527395,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4886.679472300687,\\\"ask\\\":4995.382150147618,\\\"price\\\":4941.030811224153,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5194902764080429,\\\"bias\\\":0.019490276408042906,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4899.683112313769,\\\"ask\\\":5008.675052122569,\\\"price\\\":4954.179082218169,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5189716327368091,\\\"bias\\\":0.01897163273680913,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4902.4311186643135,\\\"ask\\\":5011.4841870269165,\\\"price\\\":4956.9576528456155,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5188652295959408,\\\"bias\\\":0.018865229595940836,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4922.801549734936,\\\"ask\\\":5032.307752054621,\\\"price\\\":4977.554650894779,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5196491118164427,\\\"bias\\\":0.019649111816442688,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4930.238305092739,\\\"ask\\\":5039.90993574192,\\\"price\\\":4985.07412041733,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5193522775116253,\\\"bias\\\":0.01935227751162527,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4950.137544375164,\\\"ask\\\":5060.251827465409,\\\"price\\\":5005.194685920287,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5201333667349715,\\\"bias\\\":0.02013336673497146,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4958.177604984737,\\\"ask\\\":5068.4707367437495,\\\"price\\\":5013.324170864244,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5198063586723211,\\\"bias\\\":0.019806358672321056,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4913.908118642919,\\\"ask\\\":5023.216489330628,\\\"price\\\":4968.562303986774,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5180220002684696,\\\"bias\\\":0.018022000268469562,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4877.403167369339,\\\"ask\\\":4985.899496673813,\\\"price\\\":4931.651332021576,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5193708578860936,\\\"bias\\\":0.019370857886093606,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4861.145664139104,\\\"ask\\\":4969.280350297911,\\\"price\\\":4915.213007218508,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5187230233910716,\\\"bias\\\":0.01872302339107157,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4855.116984021908,\\\"ask\\\":4963.117564050706,\\\"price\\\":4909.117274036307,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5189555103099718,\\\"bias\\\":0.01895551030997178,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4897.45924684964,\\\"ask\\\":5006.401717457013,\\\"price\\\":4951.930482153327,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5206086511142408,\\\"bias\\\":0.020608651114240817,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4939.590197643082,\\\"ask\\\":5049.469858257994,\\\"price\\\":4994.530027950538,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5188357684372246,\\\"bias\\\":0.018835768437224565,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":4941.576471168423,\\\"ask\\\":5051.500315825355,\\\"price\\\":4996.5383934968895,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5189115095142762,\\\"bias\\\":0.018911509514276226,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5120440736778316,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":6114.72966023614,\\\"ask\\\":6250.749935792455,\\\"price\\\":6182.739798014302,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.04089646628191268},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.4785221781182304,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5705.395144178478,\\\"ask\\\":5832.30989966071,\\\"price\\\":5768.852521919594,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.0353554744002077},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.451189617123051,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5788.877253688218,\\\"ask\\\":5917.649042951248,\\\"price\\\":5853.263148319734,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.05264138134346985},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5483726518119715,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5538.513745480013,\\\"ask\\\":5661.716275713137,\\\"price\\\":5600.115010596576,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.053836489878020366},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5529016908906892,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5244.832773799797,\\\"ask\\\":5361.502461386852,\\\"price\\\":5303.167617593326,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.05440015671155729},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.4845864190173129,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5186.205230201076,\\\"ask\\\":5301.5707661610595,\\\"price\\\":5243.887998181066,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.052306303203344284},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.48190071672739093,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5334.620723315496,\\\"ask\\\":5453.28771614961,\\\"price\\\":5393.954219732554,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.04374336217075531},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5160294669005361,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5513.52122951039,\\\"ask\\\":5636.167808933265,\\\"price\\\":5574.84451922183,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.022847915817590936},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.4906025413048362,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5581.215158589352,\\\"ask\\\":5705.3675685883045,\\\"price\\\":5643.291363588829,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.029785044270220717},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5422378835577546,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5379.305632023993,\\\"ask\\\":5498.966626871844,\\\"price\\\":5439.13612944792,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.05319213984981874},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5525890419357753,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5562.02004626454,\\\"ask\\\":5685.745466909451,\\\"price\\\":5623.882756586997,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.0537566195308018},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5534583614573855,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5727.060555324457,\\\"ask\\\":5854.457251196186,\\\"price\\\":5790.758903260322,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.05505411767652402},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.4765395255595656,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5614.983826817159,\\\"ask\\\":5739.887410426843,\\\"price\\\":5677.435618622,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.05390192509053826},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5526240093746092,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5574.804001033685,\\\"ask\\\":5698.813796809967,\\\"price\\\":5636.808898921827,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.05406778190000838},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.48640143812737635,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5677.0443143572065,\\\"ask\\\":5803.328414373243,\\\"price\\\":5740.186364365222,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.055127774843144906},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.45847935496469666,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5077.315036742797,\\\"ask\\\":5190.258343930193,\\\"price\\\":5133.786690336496,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.05570815642071847},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5511178607281013,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5291.027370339068,\\\"ask\\\":5408.724642480075,\\\"price\\\":5349.876006409572,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.05502503025831462},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.552464076376674,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5684.455806253851,\\\"ask\\\":5810.904772621481,\\\"price\\\":5747.680289437669,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.05454071963710472},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.4738678737446729,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5782.726648389891,\\\"ask\\\":5911.361619334864,\\\"price\\\":5847.044133862376,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.054560821009743965},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.552468429839734,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5695.017186116494,\\\"ask\\\":5821.701087122114,\\\"price\\\":5758.359136619303,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.053995398638831515},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.4934274922568181,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5623.763717184783,\\\"ask\\\":5748.862606748047,\\\"price\\\":5686.313161966415,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.05543961587627588},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.45512664754075394,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5111.848144704336,\\\"ask\\\":5225.5596302285985,\\\"price\\\":5168.7038874664695,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.05256607383757517},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5386353209783178,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5662.256525334911,\\\"ask\\\":5788.211675544582,\\\"price\\\":5725.234100439747,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.052024731597570484},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5011694495735903,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5680.540820447249,\\\"ask\\\":5806.902699162963,\\\"price\\\":5743.721759805107,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.027462780329109315},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.4847943693820941,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5441.147738954213,\\\"ask\\\":5562.184392399097,\\\"price\\\":5501.666065676658,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.0210129997537703},{\\\"volatility\\\":0.009300000000000001,\\\"forecast\\\":0.5164541862939446,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":5101.942010995019,\\\"ask\\\":5215.4331376298915,\\\"price\\\":5158.687574312456,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.02344976372252716}],\\\"recentTicksOfPrices\\\":[4891.773241353398,4930.077077866044,4894.106059925038,4883.526764245701,4907.863717039555,4930.622505614482,4941.030811224153,4954.179082218169,4956.9576528456155,4977.554650894779,4985.07412041733,5005.194685920287,5013.324170864244,4968.562303986774,4931.651332021576,4915.213007218508,4909.117274036307,4951.930482153327,4994.530027950538,4996.5383934968895]}],[\\\"NTLK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":925.4608232826901,\\\"ask\\\":951.7416580209409,\\\"price\\\":938.6012406518155,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.40327567009559767,\\\"bias\\\":0.09672432990440233,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":943.2658453140563,\\\"ask\\\":970.0522993392018,\\\"price\\\":956.659072326629,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4051365579706871,\\\"bias\\\":0.0948634420293129,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":958.0217900392454,\\\"ask\\\":985.2272769774795,\\\"price\\\":971.6245335083624,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.40662055075382414,\\\"bias\\\":0.09337944924617586,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":983.3654128604902,\\\"ask\\\":1011.2905969985164,\\\"price\\\":997.3280049295033,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.40415027965398437,\\\"bias\\\":0.09584972034601563,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":968.7580228578677,\\\"ask\\\":996.2683926753325,\\\"price\\\":982.5132077666001,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4027050124007583,\\\"bias\\\":0.09729498759924171,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":965.2296256384908,\\\"ask\\\":992.6397975633162,\\\"price\\\":978.9347116009035,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4023493505410455,\\\"bias\\\":0.09765064945895452,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":951.7827793867259,\\\"ask\\\":978.8110936086614,\\\"price\\\":965.2969364976937,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.40372896498469574,\\\"bias\\\":0.09627103501530426,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":960.3818007256472,\\\"ask\\\":987.6543062229272,\\\"price\\\":974.0180534742872,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.40285919017646693,\\\"bias\\\":0.09714080982353307,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":944.2300642633465,\\\"ask\\\":971.0438997596689,\\\"price\\\":957.6369820115077,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4011975265423734,\\\"bias\\\":0.0988024734576266,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":961.1241711355394,\\\"ask\\\":988.4177581454737,\\\"price\\\":974.7709646405066,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4029652943873131,\\\"bias\\\":0.0970347056126869,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":975.2430507768378,\\\"ask\\\":1002.9375796021435,\\\"price\\\":989.0903151894906,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.40153985803817244,\\\"bias\\\":0.09846014196182756,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":961.0891019023476,\\\"ask\\\":988.3816930314205,\\\"price\\\":974.735397466884,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.40298987949065207,\\\"bias\\\":0.09701012050934793,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":939.6404618492012,\\\"ask\\\":966.3239638084077,\\\"price\\\":952.9822128288044,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4052042745074678,\\\"bias\\\":0.09479572549253218,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":937.7937088834016,\\\"ask\\\":964.4247675535186,\\\"price\\\":951.1092382184601,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4053909512632832,\\\"bias\\\":0.09460904873671683,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":941.5401169650354,\\\"ask\\\":968.2775645056247,\\\"price\\\":954.90884073533,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4057689065656332,\\\"bias\\\":0.09423109343436681,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":947.3367336105847,\\\"ask\\\":974.2387909544958,\\\"price\\\":960.7877622825403,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.406349042785947,\\\"bias\\\":0.09365095721405298,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":936.7779480853054,\\\"ask\\\":963.3801616211964,\\\"price\\\":950.0790548532509,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4052934667302965,\\\"bias\\\":0.09470653326970352,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":948.5848465697392,\\\"ask\\\":975.522347283687,\\\"price\\\":962.0535969267131,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4040998109376793,\\\"bias\\\":0.09590018906232067,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":920.9566204499333,\\\"ask\\\":947.1095467913108,\\\"price\\\":934.033083620622,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4069767674082799,\\\"bias\\\":0.09302323259172007,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":897.2407204598103,\\\"ask\\\":922.7201729677968,\\\"price\\\":909.9804467138035,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.40943556094115996,\\\"bias\\\":0.09056443905884004,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":908.030565141387,\\\"ask\\\":933.8164229750167,\\\"price\\\":920.9234940582019,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4105246513143858,\\\"bias\\\":0.08947534868561419,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":918.8836711984126,\\\"ask\\\":944.9777308267652,\\\"price\\\":931.9307010125889,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4094552099474831,\\\"bias\\\":0.09054479005251692,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":944.9865677775051,\\\"ask\\\":971.8218861322416,\\\"price\\\":958.4042269548734,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4120273323658018,\\\"bias\\\":0.0879726676341982,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":939.744459367644,\\\"ask\\\":966.4309146032364,\\\"price\\\":953.0876869854402,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.41153660080974297,\\\"bias\\\":0.08846339919025703,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":937.9983037842599,\\\"ask\\\":964.6351724515614,\\\"price\\\":951.3167381179106,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.41137191942620743,\\\"bias\\\":0.08862808057379257,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":944.4259567922722,\\\"ask\\\":971.2453551595984,\\\"price\\\":957.8356559759353,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4107645936491818,\\\"bias\\\":0.08923540635081822,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":928.7698741752093,\\\"ask\\\":955.1446779043227,\\\"price\\\":941.957276039766,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4122688165283275,\\\"bias\\\":0.08773118347167252,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":909.5085553777162,\\\"ask\\\":935.3363845365154,\\\"price\\\":922.4224699571158,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.41412676309005875,\\\"bias\\\":0.08587323690994125,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":934.702472482329,\\\"ask\\\":961.2457475629632,\\\"price\\\":947.9741100226461,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.41650550180496326,\\\"bias\\\":0.08349449819503674,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":911.0150475397915,\\\"ask\\\":936.8856574090756,\\\"price\\\":923.9503524744335,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4186764534972001,\\\"bias\\\":0.08132354650279988,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":917.9967555691595,\\\"ask\\\":944.0656289524621,\\\"price\\\":931.0311922608108,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4180532176251599,\\\"bias\\\":0.0819467823748401,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":902.0931008506636,\\\"ask\\\":927.7103491506825,\\\"price\\\":914.9017250006731,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4166085182577085,\\\"bias\\\":0.0833914817422915,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":916.8917119573258,\\\"ask\\\":942.9292047918137,\\\"price\\\":929.9104583745698,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4179765346040798,\\\"bias\\\":0.0820234653959202,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":910.0953247369233,\\\"ask\\\":935.9398167172823,\\\"price\\\":923.0175707271028,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4185890673979947,\\\"bias\\\":0.08141093260200533,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":918.6627616915687,\\\"ask\\\":944.7505480276375,\\\"price\\\":931.7066548596031,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4178226828078,\\\"bias\\\":0.0821773171922,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":920.4854768317018,\\\"ask\\\":946.6250238411214,\\\"price\\\":933.5552503364116,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4176596351188462,\\\"bias\\\":0.08234036488115382,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":907.1508405035374,\\\"ask\\\":932.9117162987698,\\\"price\\\":920.0312784011536,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4188699948206672,\\\"bias\\\":0.08113000517933278,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":902.3286003076523,\\\"ask\\\":927.9525362190259,\\\"price\\\":915.1405682633391,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4184364184362605,\\\"bias\\\":0.0815635815637395,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":915.2124673728699,\\\"ask\\\":941.2022737485702,\\\"price\\\":928.20737056072,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4172718157162847,\\\"bias\\\":0.08272818428371531,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":920.4711496644604,\\\"ask\\\":946.6102898172037,\\\"price\\\":933.5407197408321,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4167964711889565,\\\"bias\\\":0.08320352881104348,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":892.0412492872541,\\\"ask\\\":917.3730494698538,\\\"price\\\":904.7071493785539,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.41414472382074907,\\\"bias\\\":0.08585527617925093,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":869.0315155579038,\\\"ask\\\":893.7098953100552,\\\"price\\\":881.3707054339795,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.41187149550994817,\\\"bias\\\":0.08812850449005183,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":858.8700668214422,\\\"ask\\\":883.2598861632275,\\\"price\\\":871.0649764923348,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.41291415995383884,\\\"bias\\\":0.08708584004616116,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":855.1137744033591,\\\"ask\\\":879.3969241835763,\\\"price\\\":867.2553492934677,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.41253161450727993,\\\"bias\\\":0.08746838549272007,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":881.4959870489771,\\\"ask\\\":906.5283274519908,\\\"price\\\":894.0121572504839,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.409833015075353,\\\"bias\\\":0.09016698492464698,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":855.4618012093088,\\\"ask\\\":879.7548341036909,\\\"price\\\":867.6083176564998,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4070889719879674,\\\"bias\\\":0.0929110280120326,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":854.2466107596546,\\\"ask\\\":878.5051352031336,\\\"price\\\":866.3758729813941,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4072211406058884,\\\"bias\\\":0.09277885939411162,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4930501838615599,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3858.0707942744116,\\\"ask\\\":3967.630613990114,\\\"price\\\":3912.850704132263,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.034198786781731105},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.5052524972126718,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3354.1106005005527,\\\"ask\\\":3449.3591773910343,\\\"price\\\":3401.7348889457935,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.05772844968023649},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4792778837304634,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3117.007764834019,\\\"ask\\\":3205.5231983181507,\\\"price\\\":3161.2654815760843,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.05685035269977046},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.49598233750911386,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":2739.23803958726,\\\"ask\\\":2817.0257323950123,\\\"price\\\":2778.131885991136,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.05657907464836276},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.5019789601644367,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":2934.453874352238,\\\"ask\\\":3017.7852216969263,\\\"price\\\":2976.119548024581,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.06345443468680223},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4328718458998241,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":2415.1003792089036,\\\"ask\\\":2483.683351437961,\\\"price\\\":2449.391865323433,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.07916522095430628},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.5359541258832577,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":2380.6582630608555,\\\"ask\\\":2448.2631630260717,\\\"price\\\":2414.4607130434642,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.0797032474891094},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.49278901468813624,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1459.1799310451463,\\\"ask\\\":1500.6170893304045,\\\"price\\\":1479.8985101877752,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.08089890061311944},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.47290979321810056,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1301.9779180222608,\\\"ask\\\":1338.950921779485,\\\"price\\\":1320.464419900873,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.07765013282353989},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.5688152627092163,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1313.2057811066425,\\\"ask\\\":1350.4976288459789,\\\"price\\\":1331.8517049763102,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.08851215670294532},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.5804240334792194,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1560.1443245224934,\\\"ask\\\":1604.4486258273912,\\\"price\\\":1582.2964751749425,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.0914694724657279},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.470927229697212,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1689.6875981670994,\\\"ask\\\":1737.6706131251922,\\\"price\\\":1713.6791056461473,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.09314566453041706},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.5405072178278162,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1614.590789099728,\\\"ask\\\":1660.4412374717276,\\\"price\\\":1637.516013285728,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.08872365988394754},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.48350114065229965,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1487.5008758694066,\\\"ask\\\":1529.7422800523107,\\\"price\\\":1508.6215779608592,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.09307827668277247},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.5889583103715486,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1520.5139383430112,\\\"ask\\\":1563.692833143826,\\\"price\\\":1542.103385743419,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.10328804803179603},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4596937502598323,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1490.8212684617881,\\\"ask\\\":1533.1569637122236,\\\"price\\\":1511.9891160870059,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.0889185064891368},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.5228578242663038,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1622.7604474484158,\\\"ask\\\":1668.842894231941,\\\"price\\\":1645.8016708401792,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.07966673885871378},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.5102861625939941,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1438.3587699023747,\\\"ask\\\":1479.2046578914885,\\\"price\\\":1458.781713896932,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.06664221264545572},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.44279036714113423,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1243.1445321235324,\\\"ask\\\":1278.4468109262286,\\\"price\\\":1260.7956715248808,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.0907264742622107},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4698107840305588,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":851.6490775097707,\\\"ask\\\":875.8338383315488,\\\"price\\\":863.7414579206602,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.08847723694224141},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4861325819432591,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":729.9533102922888,\\\"ask\\\":750.6822075419681,\\\"price\\\":740.3177589171282,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.0814863510831016},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.5387988745499682,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":735.1990657084148,\\\"ask\\\":756.0769296433396,\\\"price\\\":745.6379976758774,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.08236542833945171},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4237724722602076,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":696.1489306375936,\\\"ask\\\":715.9178657875451,\\\"price\\\":706.0333982125692,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.08864211283766676},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.5112648823364401,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":574.3444162242762,\\\"ask\\\":590.6543996464669,\\\"price\\\":582.4994079353714,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.09968011612576722},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.5864461120608627,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":734.1538664201846,\\\"ask\\\":755.0020492394195,\\\"price\\\":744.5779578298024,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.10412765741782015},{\\\"volatility\\\":0.0329,\\\"forecast\\\":0.4239649214111694,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":919.7866630764236,\\\"ask\\\":945.9063654761599,\\\"price\\\":932.8465142762918,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.10170842826768989}],\\\"recentTicksOfPrices\\\":[922.4224699571158,947.9741100226461,923.9503524744335,931.0311922608108,914.9017250006731,929.9104583745698,923.0175707271028,931.7066548596031,933.5552503364116,920.0312784011536,915.1405682633391,928.20737056072,933.5407197408321,904.7071493785539,881.3707054339795,871.0649764923348,867.2553492934677,894.0121572504839,867.6083176564998,866.3758729813941]}],[\\\"OMGA\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7609.7040972295745,\\\"ask\\\":7716.9909626487215,\\\"price\\\":7663.347529939148,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44703156064686317,\\\"bias\\\":0.05296843935313683,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7562.385575031661,\\\"ask\\\":7669.005311235531,\\\"price\\\":7615.695443133596,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44670013238941025,\\\"bias\\\":0.053299867610589746,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7524.1052468918715,\\\"ask\\\":7630.185280584204,\\\"price\\\":7577.145263738038,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44642895909305275,\\\"bias\\\":0.053571040906947254,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7459.9229095793435,\\\"ask\\\":7565.098056340784,\\\"price\\\":7512.510482960064,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4459680542473394,\\\"bias\\\":0.054031945752660626,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7423.518416962001,\\\"ask\\\":7528.180308036993,\\\"price\\\":7475.849362499497,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4457030848002698,\\\"bias\\\":0.05429691519973018,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7414.703291767901,\\\"ask\\\":7519.240901118102,\\\"price\\\":7466.972096443002,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4457676368243097,\\\"bias\\\":0.0542323631756903,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7380.789737366045,\\\"ask\\\":7484.849209997589,\\\"price\\\":7432.819473681818,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44601682590357433,\\\"bias\\\":0.05398317409642567,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7359.166153649399,\\\"ask\\\":7462.92076205936,\\\"price\\\":7411.04345785438,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44617544573359214,\\\"bias\\\":0.053824554266407865,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7318.451711655338,\\\"ask\\\":7421.63229973507,\\\"price\\\":7370.042005695204,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44587600580027315,\\\"bias\\\":0.054123994199726855,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7276.112312865723,\\\"ask\\\":7378.695970851744,\\\"price\\\":7327.404141858734,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44556106050036937,\\\"bias\\\":0.054438939499630634,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7310.874573428217,\\\"ask\\\":7413.948333778664,\\\"price\\\":7362.411453603441,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44582114727724415,\\\"bias\\\":0.054178852722755855,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7276.025114546791,\\\"ask\\\":7378.607543150672,\\\"price\\\":7327.316328848732,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44556165068803777,\\\"bias\\\":0.05443834931196223,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7222.407447153394,\\\"ask\\\":7324.233936841356,\\\"price\\\":7273.320691997375,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4451575115795464,\\\"bias\\\":0.05484248842045358,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7217.784772830157,\\\"ask\\\":7319.546088862001,\\\"price\\\":7268.665430846079,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4451926357860755,\\\"bias\\\":0.054807364213924514,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7208.419171233088,\\\"ask\\\":7310.048444543523,\\\"price\\\":7259.233807888306,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4451214268392011,\\\"bias\\\":0.054878573160798916,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":2},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7194.014778430822,\\\"ask\\\":7295.4409686604595,\\\"price\\\":7244.727873545641,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.445011544868065,\\\"bias\\\":0.05498845513193501,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":2},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7220.386380563976,\\\"ask\\\":7322.184375858936,\\\"price\\\":7271.285378211456,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4452131198863711,\\\"bias\\\":0.05478688011362892,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7190.910219791908,\\\"ask\\\":7292.292639809115,\\\"price\\\":7241.601429800512,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4449885437427301,\\\"bias\\\":0.055011456257269886,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":2},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7121.428774719056,\\\"ask\\\":7221.831597323352,\\\"price\\\":7171.630186021204,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4455252724803517,\\\"bias\\\":0.054474727519648325,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":2},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7182.647692735184,\\\"ask\\\":7283.913621937894,\\\"price\\\":7233.28065733654,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4450569838849767,\\\"bias\\\":0.05494301611502328,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7154.665391665519,\\\"ask\\\":7255.536807056573,\\\"price\\\":7205.101099361046,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4452718691290018,\\\"bias\\\":0.054728130870998204,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7182.477299834954,\\\"ask\\\":7283.740826720843,\\\"price\\\":7233.109063277899,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4450591276985162,\\\"bias\\\":0.05494087230148381,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7116.727207436503,\\\"ask\\\":7217.063744097238,\\\"price\\\":7166.895475766871,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44455153940336567,\\\"bias\\\":0.05544846059663433,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7129.6383424667165,\\\"ask\\\":7230.156909228584,\\\"price\\\":7179.8976258476505,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.444652133755392,\\\"bias\\\":0.055347866244608024,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7133.9548873801805,\\\"ask\\\":7234.534311774261,\\\"price\\\":7184.244599577221,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4446186241243233,\\\"bias\\\":0.05538137587567671,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7118.091285443007,\\\"ask\\\":7218.447053817832,\\\"price\\\":7168.26916963042,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44449519944959043,\\\"bias\\\":0.05550480055040957,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7079.280539755337,\\\"ask\\\":7179.089127425602,\\\"price\\\":7129.18483359047,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44479949346456976,\\\"bias\\\":0.05520050653543024,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7128.039701809675,\\\"ask\\\":7228.535729831159,\\\"price\\\":7178.287715820417,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44441929516213946,\\\"bias\\\":0.05558070483786054,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7064.396524180351,\\\"ask\\\":7163.995266716629,\\\"price\\\":7114.19589544849,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44492002196288616,\\\"bias\\\":0.05507997803711384,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7005.158827052135,\\\"ask\\\":7103.922395610775,\\\"price\\\":7054.540611331456,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44445424936053046,\\\"bias\\\":0.05554575063946954,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6987.742326646622,\\\"ask\\\":7086.260345350602,\\\"price\\\":7037.001335998612,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4443158051330082,\\\"bias\\\":0.055684194866991776,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6947.905260701348,\\\"ask\\\":7045.861628928758,\\\"price\\\":6996.883444815054,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44399652977449505,\\\"bias\\\":0.05600347022550495,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6911.032942843081,\\\"ask\\\":7008.469459660607,\\\"price\\\":6959.751201251845,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44369773540143986,\\\"bias\\\":0.05630226459856014,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6894.28858220595,\\\"ask\\\":6991.4890254596085,\\\"price\\\":6942.88880383278,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44356099244212155,\\\"bias\\\":0.05643900755787845,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6873.245286571896,\\\"ask\\\":6970.149046906243,\\\"price\\\":6921.69716673907,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44338819739817725,\\\"bias\\\":0.05661180260182275,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6877.680478428544,\\\"ask\\\":6974.6467691616745,\\\"price\\\":6926.16362379511,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.443424728060975,\\\"bias\\\":0.05657527193902501,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6844.956939216985,\\\"ask\\\":6941.461870887718,\\\"price\\\":6893.209405052352,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44315425986867785,\\\"bias\\\":0.05684574013132215,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6856.854083153398,\\\"ask\\\":6953.52674897832,\\\"price\\\":6905.19041606586,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4430554569165892,\\\"bias\\\":0.05694454308341079,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6888.6956404151115,\\\"ask\\\":6985.817230511598,\\\"price\\\":6937.256435463355,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4427910203532114,\\\"bias\\\":0.057208979646788616,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6875.846648156246,\\\"ask\\\":6972.787084283323,\\\"price\\\":6924.316866219785,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44289792758576524,\\\"bias\\\":0.05710207241423476,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6805.308171423983,\\\"ask\\\":6901.254107375579,\\\"price\\\":6853.281139399782,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4434898027962471,\\\"bias\\\":0.05651019720375289,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6747.2065898931305,\\\"ask\\\":6842.33336960965,\\\"price\\\":6794.769979751391,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4430031818833679,\\\"bias\\\":0.0569968181166321,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6721.3439909072895,\\\"ask\\\":6816.106141836495,\\\"price\\\":6768.725066371892,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44278386773244605,\\\"bias\\\":0.057216132267553954,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6711.755296334,\\\"ask\\\":6806.382259222898,\\\"price\\\":6759.06877777845,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4428656090940952,\\\"bias\\\":0.057134390905904775,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6779.101219140367,\\\"ask\\\":6874.677671373967,\\\"price\\\":6826.889445257168,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4434388970209718,\\\"bias\\\":0.05656110297902822,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6712.6617699161025,\\\"ask\\\":6807.301512895785,\\\"price\\\":6759.981641405944,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44287907609475063,\\\"bias\\\":0.057120923905249366,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6715.767357115789,\\\"ask\\\":6810.450884809265,\\\"price\\\":6763.109120962527,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44285264931857826,\\\"bias\\\":0.05714735068142174,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.48624629440970657,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8226.547782613956,\\\"ask\\\":8342.53133644738,\\\"price\\\":8284.539559530675,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.023658529511389748},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.5073437853961011,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8822.614252060288,\\\"ask\\\":8947.001562764059,\\\"price\\\":8884.807907412176,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.030107003069389404},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.5159573104833524,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":9408.02446139208,\\\"ask\\\":9540.665289649372,\\\"price\\\":9474.344875520734,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.022669694921974348},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4817087025994587,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":9250.36752254889,\\\"ask\\\":9380.785594367298,\\\"price\\\":9315.576558458093,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.029339534094658448},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.5057711093549442,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8686.857208480911,\\\"ask\\\":8809.330522598464,\\\"price\\\":8748.09386553969,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.035120978608707},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.5240316919814387,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8421.927330298413,\\\"ask\\\":8540.665479970288,\\\"price\\\":8481.29640513435,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.0322073559623276},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4726580278941179,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7761.699839546221,\\\"ask\\\":7871.129645944659,\\\"price\\\":7816.414742745442,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.047536148597496386},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.482873884066201,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7625.361066420479,\\\"ask\\\":7732.868674607674,\\\"price\\\":7679.114870514076,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.024565899548637804},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.505749310456838,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7136.634505814926,\\\"ask\\\":7237.251709320876,\\\"price\\\":7186.943107567903,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.020286508920019597},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4878722870339883,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7086.480616126217,\\\"ask\\\":7186.390715447229,\\\"price\\\":7136.435665786719,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.020212945612741118},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.49799943492273757,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7150.968500176103,\\\"ask\\\":7251.787794236996,\\\"price\\\":7201.378147206551,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.0243796492313334},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.501166166307273,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7205.049541027823,\\\"ask\\\":7306.631306963764,\\\"price\\\":7255.840423995792,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.014191152694115416},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.5152059937890214,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8051.6221421665105,\\\"ask\\\":8165.139473476008,\\\"price\\\":8108.380807821261,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.0520812664555626},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4883121772084554,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8120.414846157688,\\\"ask\\\":8234.902064532516,\\\"price\\\":8177.658455345107,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.05464661480473565},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.5506923541718926,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8393.092989773348,\\\"ask\\\":8511.424612992705,\\\"price\\\":8452.258801383025,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.05425762145298296},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.45984559710531037,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":9450.491426203871,\\\"ask\\\":9583.73098306877,\\\"price\\\":9517.11120463633,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.0557982834765377},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4447622658989156,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":9601.768983900989,\\\"ask\\\":9737.141356282275,\\\"price\\\":9669.455170091634,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.05674116104718907},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.44244416527456865,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8741.318939863208,\\\"ask\\\":8864.560093093907,\\\"price\\\":8802.939516478556,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.06007093148704695},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4529570418303778,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8029.897810645477,\\\"ask\\\":8143.108857321241,\\\"price\\\":8086.503333983362,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.05859303052756215},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.5193286527950393,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7998.946693095371,\\\"ask\\\":8111.721369533773,\\\"price\\\":8055.334031314571,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.05702540172157666},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.4472006687182271,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7814.3891572475995,\\\"ask\\\":7924.561814046664,\\\"price\\\":7869.475485647134,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.056695163892541145},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.5256004389820051,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7437.404490590822,\\\"ask\\\":7542.262157124833,\\\"price\\\":7489.833323857831,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.05222125333095429},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.45138586185416,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6889.548465762673,\\\"ask\\\":6986.682079580067,\\\"price\\\":6938.1152726713735,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.05255774260238838},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.49912846046904347,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":6683.631010285046,\\\"ask\\\":6777.86145755996,\\\"price\\\":6730.746233922501,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.03982596994163101},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.5395934287225522,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7090.589634998997,\\\"ask\\\":7190.557666106736,\\\"price\\\":7140.573650552867,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.054037599536937986},{\\\"volatility\\\":0.010700000000000001,\\\"forecast\\\":0.5239433312088584,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":7576.209101266495,\\\"ask\\\":7683.023731093015,\\\"price\\\":7629.616416179754,\\\"maxShares\\\":1500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.05346232207893442}],\\\"recentTicksOfPrices\\\":[7178.287715820417,7114.19589544849,7054.540611331456,7037.001335998612,6996.883444815054,6959.751201251845,6942.88880383278,6921.69716673907,6926.16362379511,6893.209405052352,6905.19041606586,6937.256435463355,6924.316866219785,6853.281139399782,6794.769979751391,6768.725066371892,6759.06877777845,6826.889445257168,6759.981641405944,6763.109120962527]}],[\\\"FNS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2988.254868948227,\\\"ask\\\":3024.3303804445836,\\\"price\\\":3006.2926246964053,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5508482333683677,\\\"bias\\\":0.050848233368367746,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3001.360787895501,\\\"ask\\\":3037.594519741322,\\\"price\\\":3019.4776538184115,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5506252226633364,\\\"bias\\\":0.050625222663336356,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3012.0640578714515,\\\"ask\\\":3048.4270042441453,\\\"price\\\":3030.2455310577984,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5508057592479227,\\\"bias\\\":0.050805759247922744,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3030.228534062921,\\\"ask\\\":3066.8107698866183,\\\"price\\\":3048.5196519747697,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5511121471555228,\\\"bias\\\":0.051112147155522814,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3040.6444642725537,\\\"ask\\\":3077.352445732585,\\\"price\\\":3058.9984550025692,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.551287837058661,\\\"bias\\\":0.05128783705866102,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3043.17829638263,\\\"ask\\\":3079.9168673651166,\\\"price\\\":3061.5475818738732,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5513305762772454,\\\"bias\\\":0.051330576277245354,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3052.9794085582316,\\\"ask\\\":3089.8363028265403,\\\"price\\\":3071.407855692386,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.551165256770094,\\\"bias\\\":0.05116525677009398,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3046.704507470325,\\\"ask\\\":3083.4856484055804,\\\"price\\\":3065.0950779379527,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5510598783441316,\\\"bias\\\":0.051059878344131615,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3058.585072509781,\\\"ask\\\":3095.5096407895776,\\\"price\\\":3077.0473566496794,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5512589853478095,\\\"bias\\\":0.05125898534780948,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3046.160667941568,\\\"ask\\\":3082.9352434096754,\\\"price\\\":3064.547955675622,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5514680558602154,\\\"bias\\\":0.05146805586021541,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3056.361577762706,\\\"ask\\\":3093.2593030475678,\\\"price\\\":3074.810440405137,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5516404108518692,\\\"bias\\\":0.05164041085186921,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3066.622444960514,\\\"ask\\\":3103.6440438936384,\\\"price\\\":3085.133244427076,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.551813778885824,\\\"bias\\\":0.05181377888582395,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3050.7475926326824,\\\"ask\\\":3087.5775434491734,\\\"price\\\":3069.162568040928,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5515441610090956,\\\"bias\\\":0.051544161009095646,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3049.3786721742013,\\\"ask\\\":3086.1920967879746,\\\"price\\\":3067.785384481088,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5515673001020409,\\\"bias\\\":0.051567300102040914,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3046.604143864025,\\\"ask\\\":3083.3840731662067,\\\"price\\\":3064.994108515116,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5516142622038619,\\\"bias\\\":0.051614262203861894,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3050.8799415157637,\\\"ask\\\":3087.711490105491,\\\"price\\\":3069.2957158106274,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.551686700935875,\\\"bias\\\":0.05168670093587502,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3058.719070179673,\\\"ask\\\":3095.645256137577,\\\"price\\\":3077.182163158625,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.551819508095323,\\\"bias\\\":0.051819508095322986,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3049.9559633795675,\\\"ask\\\":3086.776357303667,\\\"price\\\":3068.366160341617,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5519683954527866,\\\"bias\\\":0.05196839545278664,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3029.239633245184,\\\"ask\\\":3065.8099306284253,\\\"price\\\":3047.5247819368046,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5523237963345587,\\\"bias\\\":0.05232379633455875,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3011.0961518331515,\\\"ask\\\":3047.447413223491,\\\"price\\\":3029.271782528321,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5526390754815315,\\\"bias\\\":0.05263907548153146,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3019.350755137282,\\\"ask\\\":3055.801669686223,\\\"price\\\":3037.5762124117523,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5524947709942332,\\\"bias\\\":0.052494770994233164,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3027.577584935321,\\\"ask\\\":3064.127817349027,\\\"price\\\":3045.852701142174,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5526378035801366,\\\"bias\\\":0.05263780358013659,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3047.1835766727945,\\\"ask\\\":3083.970501139669,\\\"price\\\":3065.577038906232,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5522969316080338,\\\"bias\\\":0.052296931608033836,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3043.31360045082,\\\"ask\\\":3080.0538048828216,\\\"price\\\":3061.683702666821,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5522304291346195,\\\"bias\\\":0.052230429134619505,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3042.022652617062,\\\"ask\\\":3078.7472721657587,\\\"price\\\":3060.38496239141,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5522082640270424,\\\"bias\\\":0.05220826402704237,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3046.774671741705,\\\"ask\\\":3083.5566597305387,\\\"price\\\":3065.165665736122,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.552126708201379,\\\"bias\\\":0.05212670820137899,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3035.1115446945646,\\\"ask\\\":3071.752730344801,\\\"price\\\":3053.432137519683,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5523270172876675,\\\"bias\\\":0.05232701728766753,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3049.764298504768,\\\"ask\\\":3086.5823785672,\\\"price\\\":3068.173338535984,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5520743956325331,\\\"bias\\\":0.05207439563253313,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3069.022713854905,\\\"ask\\\":3106.073289877298,\\\"price\\\":3087.5480018661015,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5524032309922657,\\\"bias\\\":0.05240323099226574,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3050.9388524590845,\\\"ask\\\":3087.7711122473233,\\\"price\\\":3069.354982353204,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5527138412049856,\\\"bias\\\":0.05271384120498557,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3045.6180524448473,\\\"ask\\\":3082.3860772228536,\\\"price\\\":3064.0020648338505,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5528059341077082,\\\"bias\\\":0.052805934107708175,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3057.8581923083116,\\\"ask\\\":3094.7739853744083,\\\"price\\\":3076.31608884136,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5525937105104056,\\\"bias\\\":0.05259371051040562,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3046.465373045419,\\\"ask\\\":3083.243627045967,\\\"price\\\":3064.854500045693,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5527903943931478,\\\"bias\\\":0.05279039439314781,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3051.6516158208933,\\\"ask\\\":3088.4924803982076,\\\"price\\\":3070.0720481095505,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5527005250632817,\\\"bias\\\":0.05270052506328171,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3045.11679995731,\\\"ask\\\":3081.8787733974386,\\\"price\\\":3063.4977866773743,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5525874298193792,\\\"bias\\\":0.05258742981937925,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3043.7401116569235,\\\"ask\\\":3080.48546511757,\\\"price\\\":3062.112788387247,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5525636444445693,\\\"bias\\\":0.05256364444456929,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3033.574775650712,\\\"ask\\\":3070.1974087571593,\\\"price\\\":3051.8860922039357,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5527397822183202,\\\"bias\\\":0.05273978221832021,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3029.883509054781,\\\"ask\\\":3066.4615795866293,\\\"price\\\":3048.172544320705,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5528040343903253,\\\"bias\\\":0.05280403439032533,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3020.0533286206137,\\\"ask\\\":3056.5127249419893,\\\"price\\\":3038.2830267813015,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5526321588870718,\\\"bias\\\":0.052632158887071845,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3016.1026973577536,\\\"ask\\\":3052.5143999415495,\\\"price\\\":3034.3085486496516,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5525632188431824,\\\"bias\\\":0.05256321884318238,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2994.347751728175,\\\"ask\\\":3030.496819153465,\\\"price\\\":3012.42228544082,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.552181329342409,\\\"bias\\\":0.052181329342409044,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3012.4213101861455,\\\"ask\\\":3048.7885694640468,\\\"price\\\":3030.604939825096,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5524962901901397,\\\"bias\\\":0.05249629019013968,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3020.5460458476527,\\\"ask\\\":3057.011390465532,\\\"price\\\":3038.7787181565923,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5523547035934833,\\\"bias\\\":0.052354703593483265,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3017.5243437969,\\\"ask\\\":3053.9532091143683,\\\"price\\\":3035.7387764556343,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5523022764057656,\\\"bias\\\":0.05230227640576557,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2996.4497275340595,\\\"ask\\\":3032.624170924813,\\\"price\\\":3014.5369492294362,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5519344242790317,\\\"bias\\\":0.05193442427903172,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2975.8048084306183,\\\"ask\\\":3011.7300173855156,\\\"price\\\":2993.767412908067,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5522947241162007,\\\"bias\\\":0.05229472411620073,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2976.769816377777,\\\"ask\\\":3012.7066753280114,\\\"price\\\":2994.738245852894,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5522777657376728,\\\"bias\\\":0.05227776573767284,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.4704483589705213,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2992.4066900934517,\\\"ask\\\":3028.5323241790857,\\\"price\\\":3010.469507136268,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.04349910636659693},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.4682071528252477,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2885.599495258763,\\\"ask\\\":2920.435706469131,\\\"price\\\":2903.0176008639482,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.03978736941637867},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5182151748926644,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2752.9741254720616,\\\"ask\\\":2786.209225578363,\\\"price\\\":2769.5916755252124,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.04453247449690023},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5293508126494985,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2875.923051767898,\\\"ask\\\":2910.642444746988,\\\"price\\\":2893.282748257442,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.03444458673197481},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.49663335370229933,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3048.723997728279,\\\"ask\\\":3085.529518827615,\\\"price\\\":3067.126758277947,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.05425900488302959},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.44406218402265424,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3059.4334358619885,\\\"ask\\\":3096.3682459528786,\\\"price\\\":3077.9008409074327,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.0571711421169383},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.4675383659929043,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2975.2777254871526,\\\"ask\\\":3011.19657126768,\\\"price\\\":2993.237148377417,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.05739415152928162},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5066006883033664,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3026.7665203300835,\\\"ask\\\":3063.306961219381,\\\"price\\\":3045.036740774731,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.05773962327451798},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.4475654861288257,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2977.235488041608,\\\"ask\\\":3013.177968782552,\\\"price\\\":2995.2067284120812,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.053979818116037304},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.4476138362394465,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2778.842936105739,\\\"ask\\\":2812.390335736795,\\\"price\\\":2795.616635921267,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.05388864423895967},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.49090009733745815,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2661.5804039110785,\\\"ask\\\":2693.7121592902845,\\\"price\\\":2677.646281600684,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.05319604851346438},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5517838337835564,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2741.5381786033768,\\\"ask\\\":2774.6352189889294,\\\"price\\\":2758.0866987961517,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.05336775337247157},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.536281418339714,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2836.187992435864,\\\"ask\\\":2870.4276865095376,\\\"price\\\":2853.3078394727013,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.051674882937616906},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.44992171056286123,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2773.7940905723704,\\\"ask\\\":2807.28053834588,\\\"price\\\":2790.537314459124,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.051961110190127835},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5120424953193727,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2705.4441428506857,\\\"ask\\\":2738.1054403498883,\\\"price\\\":2721.7747916002863,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.05167762081520877},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5384994623391636,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2664.4570975185784,\\\"ask\\\":2696.6235815932496,\\\"price\\\":2680.540339555913,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.05161398253046223},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.4480103277638319,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2661.894876060987,\\\"ask\\\":2694.03042788466,\\\"price\\\":2677.9626519728245,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.053335216051232315},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.449305532506042,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2637.2619272202824,\\\"ask\\\":2669.100099379883,\\\"price\\\":2653.1810133000836,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.05166441987345061},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5259764054765919,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2809.478765428855,\\\"ask\\\":2843.3960141060647,\\\"price\\\":2826.43738976746,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.05447654352474296},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.4824734320361284,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2917.0957681402715,\\\"ask\\\":2952.3122160453854,\\\"price\\\":2934.7039920928296,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.053588092161309},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5519115146541985,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3009.9664039862864,\\\"ask\\\":3046.3040265696222,\\\"price\\\":3028.135215277954,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.05286706081805703},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.4669729222039916,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3202.6709410513245,\\\"ask\\\":3241.334976556974,\\\"price\\\":3222.002958804151,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.05380958370965144},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.47854377110440155,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2946.310036843164,\\\"ask\\\":2981.879172096804,\\\"price\\\":2964.094604469984,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.0534903303722129},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.551950491268097,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2939.7397935682798,\\\"ask\\\":2975.2296099896275,\\\"price\\\":2957.4847017789534,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.053983414607479796},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.47412204236909156,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2977.6698102204678,\\\"ask\\\":3013.617534287515,\\\"price\\\":2995.6436722539925,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.05428312503639121},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.551251514233119,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3009.928205400753,\\\"ask\\\":3046.2653668341627,\\\"price\\\":3028.0967861174563,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.05267534979032451}],\\\"recentTicksOfPrices\\\":[3068.173338535984,3087.5480018661015,3069.354982353204,3064.0020648338505,3076.31608884136,3064.854500045693,3070.0720481095505,3063.4977866773743,3062.112788387247,3051.8860922039357,3048.172544320705,3038.2830267813015,3034.3085486496516,3012.42228544082,3030.604939825096,3038.7787181565923,3035.7387764556343,3014.5369492294362,2993.767412908067,2994.738245852894]}],[\\\"JGN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":272.08028648691646,\\\"ask\\\":277.022208945811,\\\"price\\\":274.5512477163637,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4267302640828268,\\\"bias\\\":0.07326973591717317,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":267.52778123728774,\\\"ask\\\":272.38701439800536,\\\"price\\\":269.95739781764655,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4254834370958905,\\\"bias\\\":0.07451656290410952,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":271.2294613788983,\\\"ask\\\":276.15592990041205,\\\"price\\\":273.6926956396552,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4244523797610317,\\\"bias\\\":0.07554762023896833,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":265.02816581018465,\\\"ask\\\":269.84199727797807,\\\"price\\\":267.43508154408136,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.42622009045390313,\\\"bias\\\":0.07377990954609687,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":268.5628159558164,\\\"ask\\\":273.44084893987764,\\\"price\\\":271.00183244784705,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4272040846162768,\\\"bias\\\":0.07279591538372321,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":269.4311559433394,\\\"ask\\\":274.3249609957915,\\\"price\\\":271.8780584695655,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4269687147121035,\\\"bias\\\":0.07303128528789649,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":266.10583108670784,\\\"ask\\\":270.939236696759,\\\"price\\\":268.5225338917334,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.42788133187380883,\\\"bias\\\":0.07211866812619117,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":263.99620272732324,\\\"ask\\\":268.79129016333917,\\\"price\\\":266.3937464453312,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.42730502211651583,\\\"bias\\\":0.07269497788348417,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":260.0614765851926,\\\"ask\\\":264.7850957360841,\\\"price\\\":262.4232861606384,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.42620514821886823,\\\"bias\\\":0.07379485178113177,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":256.0100174460502,\\\"ask\\\":260.66004803538306,\\\"price\\\":258.33503274071666,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4250373156877317,\\\"bias\\\":0.07496268431226832,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":252.7262814402262,\\\"ask\\\":257.3166679850537,\\\"price\\\":255.02147471263996,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.42406330671578535,\\\"bias\\\":0.07593669328421465,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":256.01829388432674,\\\"ask\\\":260.66847480250823,\\\"price\\\":258.3433843434175,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.42505245805307756,\\\"bias\\\":0.07494754194692244,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":261.1872892347101,\\\"ask\\\":265.931357051284,\\\"price\\\":263.5593231429971,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4265656448256655,\\\"bias\\\":0.0734343551743345,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":261.6422255641091,\\\"ask\\\":266.3945566036186,\\\"price\\\":264.01839108386383,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.42669355287238814,\\\"bias\\\":0.07330644712761186,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":262.5667378615461,\\\"ask\\\":267.3358612535822,\\\"price\\\":264.95129955756414,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.42695258106137707,\\\"bias\\\":0.07304741893862293,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":261.14469056182105,\\\"ask\\\":265.887984638625,\\\"price\\\":263.51633760022304,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.426554805848601,\\\"bias\\\":0.073445194151399,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":258.56690176317227,\\\"ask\\\":263.2633742472662,\\\"price\\\":260.91513800521926,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.42728701943629166,\\\"bias\\\":0.07271298056370834,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":255.71618234815406,\\\"ask\\\":260.36087587213666,\\\"price\\\":258.03852911014536,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4264764164329409,\\\"bias\\\":0.07352358356705913,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":262.5014835467878,\\\"ask\\\":267.2694216939545,\\\"price\\\":264.88545262037115,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4284273280065628,\\\"bias\\\":0.0715726719934372,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":268.63853109464327,\\\"ask\\\":273.5179393284511,\\\"price\\\":271.0782352115472,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.43010063242075475,\\\"bias\\\":0.06989936757924525,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":271.49593486089555,\\\"ask\\\":276.4272434658361,\\\"price\\\":273.96158916336583,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.43084412485784385,\\\"bias\\\":0.06915587514215615,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":268.6557486897125,\\\"ask\\\":273.5354696548132,\\\"price\\\":271.09560917226287,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.43157522985445296,\\\"bias\\\":0.06842477014554704,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":275.4060226285696,\\\"ask\\\":280.4083520002288,\\\"price\\\":277.9071873143992,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.43329447816735334,\\\"bias\\\":0.06670552183264666,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":276.7648577036524,\\\"ask\\\":281.79186823711933,\\\"price\\\":279.2783629703859,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4336235987940658,\\\"bias\\\":0.06637640120593419,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":276.3098964467422,\\\"ask\\\":281.3286433045034,\\\"price\\\":278.8192698756228,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4335143059626827,\\\"bias\\\":0.0664856940373173,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":277.9846229827594,\\\"ask\\\":283.03378868779436,\\\"price\\\":280.5092058352769,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.43311133322264816,\\\"bias\\\":0.06688866677735184,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":282.1293205722061,\\\"ask\\\":287.25376837271034,\\\"price\\\":284.69154447245825,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.43211403598735976,\\\"bias\\\":0.06788596401264024,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":276.9417413700343,\\\"ask\\\":281.9719647248886,\\\"price\\\":279.4568530474615,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4333856529465411,\\\"bias\\\":0.06661434705345892,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":283.7271251626612,\\\"ask\\\":288.88059464089315,\\\"price\\\":286.3038599017772,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.43175352660611693,\\\"bias\\\":0.06824647339388307,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":277.34867039628347,\\\"ask\\\":282.3862849948032,\\\"price\\\":279.86747769554336,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4333230565515308,\\\"bias\\\":0.0666769434484692,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":275.4813218762299,\\\"ask\\\":280.48501894360845,\\\"price\\\":277.9831704099192,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.43287108728253576,\\\"bias\\\":0.06712891271746424,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":271.2515696476909,\\\"ask\\\":276.1784397321091,\\\"price\\\":273.7150046899,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.43182431483976286,\\\"bias\\\":0.06817568516023714,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":267.37200828649276,\\\"ask\\\":272.22841206969844,\\\"price\\\":269.8002101780956,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.43281354237938424,\\\"bias\\\":0.06718645762061576,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":265.61754180565276,\\\"ask\\\":270.4420783873901,\\\"price\\\":268.02981009652143,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4323697599881294,\\\"bias\\\":0.06763024001187062,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":263.4241475172908,\\\"ask\\\":268.20884444495096,\\\"price\\\":265.8164959811209,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.43180663855996626,\\\"bias\\\":0.06819336144003374,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":263.8864384367045,\\\"ask\\\":268.6795321721845,\\\"price\\\":266.28298530444454,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.43192631313063545,\\\"bias\\\":0.06807368686936455,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":260.49951269570323,\\\"ask\\\":265.23108810289057,\\\"price\\\":262.8653003992969,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4328113839699504,\\\"bias\\\":0.06718861603004961,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":259.2739371986974,\\\"ask\\\":263.983251900591,\\\"price\\\":261.6285945496442,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4331289813434999,\\\"bias\\\":0.06687101865650008,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":256.04033207039214,\\\"ask\\\":260.69091327853243,\\\"price\\\":258.3656226744623,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.43397351418375263,\\\"bias\\\":0.06602648581624737,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":257.341581279283,\\\"ask\\\":262.0157976900066,\\\"price\\\":259.6786894846448,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4343090742564158,\\\"bias\\\":0.0656909257435842,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":264.5959137696327,\\\"ask\\\":269.40189403991866,\\\"price\\\":266.9989039047757,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4361608691143391,\\\"bias\\\":0.0638391308856609,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":258.5410733010671,\\\"ask\\\":263.2370766506324,\\\"price\\\":260.8890749758498,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.43765593428224164,\\\"bias\\\":0.06234406571775836,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":255.86354745695016,\\\"ask\\\":260.5109176428483,\\\"price\\\":258.18723254989925,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4383083439312352,\\\"bias\\\":0.06169165606876481,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":254.87327004384366,\\\"ask\\\":259.5026533544281,\\\"price\\\":257.1879616991359,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.43806864891115116,\\\"bias\\\":0.06193135108884884,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":261.8284552059352,\\\"ask\\\":266.5841688221883,\\\"price\\\":264.2063120140618,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4363786167862157,\\\"bias\\\":0.0636213832137843,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":268.87631593060365,\\\"ask\\\":273.76004316244104,\\\"price\\\":271.31817954652234,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.43809116803527237,\\\"bias\\\":0.06190883196472763,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":269.2146227274907,\\\"ask\\\":274.104494785104,\\\"price\\\":271.6595587562974,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0291,\\\"forecast\\\":0.43816906325102806,\\\"bias\\\":0.06183093674897194,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.5315297050045203,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":1230.3751843932034,\\\"ask\\\":1252.7230686707794,\\\"price\\\":1241.5491265319915,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.06154990985663855},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.5461887436749925,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":1289.8270858860124,\\\"ask\\\":1313.2548230665855,\\\"price\\\":1301.5409544763002,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.06359528674979442},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.5049671697466853,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":1252.1152157842118,\\\"ask\\\":1274.8579744967406,\\\"price\\\":1263.486595140476,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.03961651123843635},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4912838404701309,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":1151.5421486961575,\\\"ask\\\":1172.4581513969963,\\\"price\\\":1162.0001500465764,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.0335032835852207},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4800737624680503,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":1094.202382765189,\\\"ask\\\":1114.0768962765646,\\\"price\\\":1104.1396395208772,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.048920446067822365},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.49687462817791683,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":1144.7336959654951,\\\"ask\\\":1165.526033530963,\\\"price\\\":1155.1298647482292,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.0450428906781688},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.5083632182353787,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":1103.286532754614,\\\"ask\\\":1123.3260459630721,\\\"price\\\":1113.3062893588433,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.06058848266414241},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.46924346081091606,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":1060.5895360907464,\\\"ask\\\":1079.8535236282166,\\\"price\\\":1070.2215298594813,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.05560763736093505},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.44341362358261854,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":893.5676491387213,\\\"ask\\\":909.7979394358923,\\\"price\\\":901.682794287307,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.061226442928103086},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4420807019751618,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":759.0032416360996,\\\"ask\\\":772.7893751875123,\\\"price\\\":765.8963084118058,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.06635551558154573},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4917386569546014,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":637.7968215915895,\\\"ask\\\":649.381425818278,\\\"price\\\":643.5891237049339,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.05920804790794687},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4806786435588966,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":539.5814841606551,\\\"ask\\\":549.3821569304752,\\\"price\\\":544.4818205455655,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.06397486935365049},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4525042956051273,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":385.5768943791387,\\\"ask\\\":392.5803092114539,\\\"price\\\":389.0786017952959,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.07824049295847124},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.5163124167458184,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":394.8580693048823,\\\"ask\\\":402.03006249104567,\\\"price\\\":398.44406589796375,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.07824049295847124},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.5165327441284847,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":352.5563220552792,\\\"ask\\\":358.9599686718231,\\\"price\\\":355.7581453635513,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.0665786053293913},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.4513183846673146,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":357.24908373944027,\\\"ask\\\":363.737967197876,\\\"price\\\":360.49352546865805,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.06929820308405205},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.43137439914551395,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":327.04879639943306,\\\"ask\\\":332.9891378072936,\\\"price\\\":330.01896710336337,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.0725712699866149},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.510089790977642,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":308.56011208881716,\\\"ask\\\":314.16463481091455,\\\"price\\\":311.3623734498659,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.06882105222688828},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.5655112336787341,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":342.84954933728426,\\\"ask\\\":349.0768872667202,\\\"price\\\":345.9632183020022,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.07249471940778585},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.5636276242495886,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":446.86443038730795,\\\"ask\\\":454.98103961734984,\\\"price\\\":450.9227350023287,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.0742796657544319},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.5575818734417849,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":507.8297649792665,\\\"ask\\\":517.0537163108773,\\\"price\\\":512.4417406450718,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.0645392398784933},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.463441740779364,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":483.3613459561333,\\\"ask\\\":492.1408658625008,\\\"price\\\":487.7511059093172,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.07788676029218755},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.53066982273554,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":477.1520415553662,\\\"ask\\\":485.81877893982266,\\\"price\\\":481.48541024759453,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.0805081601044958},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.42540320989718194,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":444.44971451566323,\\\"ask\\\":452.5224641234147,\\\"price\\\":448.4860893195388,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.08417256666279826},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.41854568137017767,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":315.97625081277675,\\\"ask\\\":321.71547635730735,\\\"price\\\":318.84586358504225,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.08942589115018634},{\\\"volatility\\\":0.0291,\\\"forecast\\\":0.41802784196098935,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":301.2852045157935,\\\"ask\\\":306.75758966340635,\\\"price\\\":304.0213970895999,\\\"maxShares\\\":6400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.09130427041849548}],\\\"recentTicksOfPrices\\\":[279.4568530474615,286.3038599017772,279.86747769554336,277.9831704099192,273.7150046899,269.8002101780956,268.02981009652143,265.8164959811209,266.28298530444454,262.8653003992969,261.6285945496442,258.3656226744623,259.6786894846448,266.9989039047757,260.8890749758498,258.18723254989925,257.1879616991359,264.2063120140618,271.31817954652234,271.6595587562974]}],[\\\"SGC\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2094.4297473195875,\\\"ask\\\":2132.4718618016786,\\\"price\\\":2113.450804560633,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.557790147268408,\\\"bias\\\":0.05779014726840803,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2121.1297232427555,\\\"ask\\\":2159.656801969667,\\\"price\\\":2140.3932626062115,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5585268611842782,\\\"bias\\\":0.05852686118427819,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2143.1164579257284,\\\"ask\\\":2182.0428920757413,\\\"price\\\":2162.579675000735,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5579201964647256,\\\"bias\\\":0.05792019646472557,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2106.1972022588257,\\\"ask\\\":2144.4530545702873,\\\"price\\\":2125.3251284145567,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5589354720235693,\\\"bias\\\":0.0589354720235693,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2085.3619219653287,\\\"ask\\\":2123.239333262378,\\\"price\\\":2104.3006276138535,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5595243084581021,\\\"bias\\\":0.05952430845810208,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2090.4130556501686,\\\"ask\\\":2128.3822130686376,\\\"price\\\":2109.397634359403,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5596684873828022,\\\"bias\\\":0.05966848738280217,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2109.982356105968,\\\"ask\\\":2148.3069599504756,\\\"price\\\":2129.144658028222,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5591099037315085,\\\"bias\\\":0.059109903731508484,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2097.426149369418,\\\"ask\\\":2135.522688913968,\\\"price\\\":2116.474419141693,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.558756043276563,\\\"bias\\\":0.05875604327656303,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2121.199405504074,\\\"ask\\\":2159.727749902735,\\\"price\\\":2140.4635777034046,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5580900734798707,\\\"bias\\\":0.05809007347987072,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2096.3462789922014,\\\"ask\\\":2134.4232043422107,\\\"price\\\":2115.384741667206,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5574013895731389,\\\"bias\\\":0.057401389573138895,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2076.137621161671,\\\"ask\\\":2113.8474871363533,\\\"price\\\":2094.9925541490124,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5579601218214526,\\\"bias\\\":0.057960121821452604,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2096.3972135706476,\\\"ask\\\":2134.475064069408,\\\"price\\\":2115.4361388200277,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5573945290437349,\\\"bias\\\":0.057394529043734877,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2065.161412471948,\\\"ask\\\":2102.6719123957573,\\\"price\\\":2083.9166624338527,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5565264302682412,\\\"bias\\\":0.05652643026824122,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2062.470188975979,\\\"ask\\\":2099.9318069392157,\\\"price\\\":2081.2009979575973,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5566001890348378,\\\"bias\\\":0.05660018903483777,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2067.929728850288,\\\"ask\\\":2105.4905110090217,\\\"price\\\":2086.710119929655,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5564503633594992,\\\"bias\\\":0.056450363359499156,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2059.5280889076344,\\\"ask\\\":2096.936268120891,\\\"price\\\":2078.2321785142626,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5562200797182453,\\\"bias\\\":0.056220079718245275,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2044.260371426634,\\\"ask\\\":2081.3912358925063,\\\"price\\\":2062.8258036595703,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5558001956829751,\\\"bias\\\":0.05580019568297512,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2061.3328263936946,\\\"ask\\\":2098.7737859043773,\\\"price\\\":2080.053306149036,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5562662059531277,\\\"bias\\\":0.0562662059531277,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2021.156124271461,\\\"ask\\\":2057.8673354085813,\\\"price\\\":2039.5117298400212,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5573846700682844,\\\"bias\\\":0.057384670068284405,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":1986.3664311644552,\\\"ask\\\":2022.445740711337,\\\"price\\\":2004.4060859378963,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5583897187991735,\\\"bias\\\":0.05838971879917354,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2002.1944362285956,\\\"ask\\\":2038.5612372902651,\\\"price\\\":2020.3778367594305,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5588549868133461,\\\"bias\\\":0.05885498681334611,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":1986.4620554655926,\\\"ask\\\":2022.5431018817183,\\\"price\\\":2004.5025786736555,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5593211064957239,\\\"bias\\\":0.05932110649572386,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2023.8532240228437,\\\"ask\\\":2060.613423853733,\\\"price\\\":2042.2333239382883,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5604377074828313,\\\"bias\\\":0.06043770748283128,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2031.333813688272,\\\"ask\\\":2068.229886994416,\\\"price\\\":2049.781850341344,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5602143169302795,\\\"bias\\\":0.060214316930279455,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2033.8394773659043,\\\"ask\\\":2070.781062222197,\\\"price\\\":2052.310269794051,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5601400421725863,\\\"bias\\\":0.06014004217258628,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2043.0742804464094,\\\"ask\\\":2080.183601382873,\\\"price\\\":2061.628940914641,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5598669717297624,\\\"bias\\\":0.05986697172976241,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2065.8944957020512,\\\"ask\\\":2103.4183109620276,\\\"price\\\":2084.6564033320396,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5591982847443444,\\\"bias\\\":0.05919828474434441,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2037.3056892570196,\\\"ask\\\":2074.3102325533123,\\\"price\\\":2055.807960905166,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5600289938094387,\\\"bias\\\":0.06002899380943871,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2074.7000144986373,\\\"ask\\\":2112.3837685460394,\\\"price\\\":2093.5418915223386,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5611308135953815,\\\"bias\\\":0.06113081359538153,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2110.44443054259,\\\"ask\\\":2148.7774272628385,\\\"price\\\":2129.6109289027145,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5600776082071381,\\\"bias\\\":0.060077608207138145,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2121.1613668476743,\\\"ask\\\":2159.6890203322937,\\\"price\\\":2140.4251935899842,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5597725312805913,\\\"bias\\\":0.059772531280591346,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2145.9401446441984,\\\"ask\\\":2184.9178667467163,\\\"price\\\":2165.4290056954574,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5604707762581239,\\\"bias\\\":0.060470776258123915,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2169.2665488040034,\\\"ask\\\":2208.667959377638,\\\"price\\\":2188.967254090821,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5598134579399151,\\\"bias\\\":0.059813457939915105,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2180.0006267881276,\\\"ask\\\":2219.5970054785275,\\\"price\\\":2199.798816133328,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5601094300150763,\\\"bias\\\":0.06010943001507629,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2193.5988212655657,\\\"ask\\\":2233.4421903702882,\\\"price\\\":2213.520505817927,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5597344852975249,\\\"bias\\\":0.0597344852975249,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2190.7187057899496,\\\"ask\\\":2230.5097620000593,\\\"price\\\":2210.6142338950044,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5598130176143754,\\\"bias\\\":0.05981301761437541,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2212.0564684769124,\\\"ask\\\":2252.235092525938,\\\"price\\\":2232.145780501425,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5603956008424611,\\\"bias\\\":0.060395600842461095,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2219.8896992374052,\\\"ask\\\":2260.2106019480743,\\\"price\\\":2240.05015059274,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5601817307694952,\\\"bias\\\":0.06018173076949518,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2240.8923206396244,\\\"ask\\\":2281.5947038601216,\\\"price\\\":2261.243512249873,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5596123447738234,\\\"bias\\\":0.05961234477382338,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2249.4240405534083,\\\"ask\\\":2290.2813894231977,\\\"price\\\":2269.852714988303,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5598393060714858,\\\"bias\\\":0.0598393060714858,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2296.92718172983,\\\"ask\\\":2338.6473525382426,\\\"price\\\":2317.7872671340365,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5611029873307621,\\\"bias\\\":0.06110298733076214,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2337.2252185528614,\\\"ask\\\":2379.677341594185,\\\"price\\\":2358.4512800735233,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5621749979948519,\\\"bias\\\":0.06217499799485193,\\\"countOfNegative\\\":2,\\\"countOfPositive\\\":18},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2355.5479123049413,\\\"ask\\\":2398.3328390672914,\\\"price\\\":2376.9403756861166,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5626624193345897,\\\"bias\\\":0.06266241933458971,\\\"countOfNegative\\\":2,\\\"countOfPositive\\\":18},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2362.4041841618005,\\\"ask\\\":2405.313644620844,\\\"price\\\":2383.8589143913223,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5624800284012862,\\\"bias\\\":0.06248002840128619,\\\"countOfNegative\\\":2,\\\"countOfPositive\\\":18},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2315.076713330321,\\\"ask\\\":2357.1265426339996,\\\"price\\\":2336.1016279821606,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5612027395301723,\\\"bias\\\":0.0612027395301723,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2361.760853140586,\\\"ask\\\":2404.658628475127,\\\"price\\\":2383.2097408078566,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5599685699527471,\\\"bias\\\":0.05996856995274713,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2363.987019413195,\\\"ask\\\":2406.9252296548066,\\\"price\\\":2385.456124534001,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5600250955775443,\\\"bias\\\":0.06002509557754432,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.4924835959137557,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":3536.35160169999,\\\"ask\\\":3600.584022316134,\\\"price\\\":3568.467812008063,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.05691831339590875},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.4905665461764718,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":3525.8266243479648,\\\"ask\\\":3589.8678748406633,\\\"price\\\":3557.8472495943147,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.057622221350077774},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.483863499125762,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":3332.083265377155,\\\"ask\\\":3392.6054639410177,\\\"price\\\":3362.3443646590854,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.057622221350077774},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.49133864459972537,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":3308.2039490709676,\\\"ask\\\":3368.292416359843,\\\"price\\\":3338.248182715406,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.030610841697669366},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5014059186585651,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":3071.3754794130787,\\\"ask\\\":3127.1623196042347,\\\"price\\\":3099.2688995086564,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.025173265619523155},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5094445965979439,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2716.2950087185045,\\\"ask\\\":2765.632354991899,\\\"price\\\":2740.963681855201,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.03360305409495612},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.4510043851993473,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2801.377814770922,\\\"ask\\\":2852.2605601451646,\\\"price\\\":2826.8191874580416,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.06337140002183589},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.49585930739717965,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":3052.102427845679,\\\"ask\\\":3107.539202518959,\\\"price\\\":3079.8208151823187,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.061982208137332906},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5553438949986003,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":3281.3054595459134,\\\"ask\\\":3340.9053568938725,\\\"price\\\":3311.1054082198943,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.06172398480064978},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.4713377822219071,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":3250.7681061095795,\\\"ask\\\":3309.813339116611,\\\"price\\\":3280.2907226130974,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.05902910981808318},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5012069888403561,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":3108.646835281385,\\\"ask\\\":3165.1106526729764,\\\"price\\\":3136.8787439771795,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.04508883749024589},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5060114965646718,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":3527.165820170969,\\\"ask\\\":3591.2313951084834,\\\"price\\\":3559.198607639725,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.04602372111436981},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5384945300085889,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":3962.5727548604564,\\\"ask\\\":4034.5468311344102,\\\"price\\\":3998.5597929974333,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.06199259383328526},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.4840913417912216,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":3629.9506680535214,\\\"ask\\\":3695.8831726195804,\\\"price\\\":3662.916920336551,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.06384651900921717},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5553545644511731,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":3335.8472827728056,\\\"ask\\\":3396.437848958388,\\\"price\\\":3366.1425658655953,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.06038128320700509},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.48570492900772616,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":3432.033354264564,\\\"ask\\\":3494.3709933934874,\\\"price\\\":3463.202173829025,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.05713966312506802},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.4426302606856617,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":3015.71762085037,\\\"ask\\\":3070.4935211281777,\\\"price\\\":3043.105570989272,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.061035470400009895},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.4443771778447578,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2336.9139458822015,\\\"ask\\\":2379.360415131323,\\\"price\\\":2358.137180506761,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.059809086173758186},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5370495235721959,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2059.1184536987125,\\\"ask\\\":2096.5191925146332,\\\"price\\\":2077.8188231066733,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.06155392846400154},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.515394306585615,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2198.3526427955735,\\\"ask\\\":2238.2823578009406,\\\"price\\\":2218.317500298256,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.06787077070139147},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.43944134709635124,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2307.313251015027,\\\"ask\\\":2349.2220688942093,\\\"price\\\":2328.267659954618,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.06753339812122733},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.46507674176295344,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2364.9748500582036,\\\"ask\\\":2407.9310027333267,\\\"price\\\":2386.4529263957656,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.05781427527028443},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.48345268261579705,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2356.63136753721,\\\"ask\\\":2399.4359736075135,\\\"price\\\":2378.0336705723603,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.05516361109697221},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.5239064925518112,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":2216.5972689566247,\\\"ask\\\":2256.858369704577,\\\"price\\\":2236.7278193306006,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.0521133568733817},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.49003145549118693,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":1960.784978612398,\\\"ask\\\":1996.3996401815423,\\\"price\\\":1978.5923093969693,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.02859408352280346},{\\\"volatility\\\":0.0218,\\\"forecast\\\":0.4964068203773225,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":1995.5202591285126,\\\"ask\\\":2031.7658339663665,\\\"price\\\":2013.6430465474386,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.05779014726840803}],\\\"recentTicksOfPrices\\\":[2055.807960905166,2093.5418915223386,2129.6109289027145,2140.4251935899842,2165.4290056954574,2188.967254090821,2199.798816133328,2213.520505817927,2210.6142338950044,2232.145780501425,2240.05015059274,2261.243512249873,2269.852714988303,2317.7872671340365,2358.4512800735233,2376.9403756861166,2383.8589143913223,2336.1016279821606,2383.2097408078566,2385.456124534001]}],[\\\"CTYS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1461.17353928532,\\\"ask\\\":1481.7741732732297,\\\"price\\\":1471.473856279275,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3651824434468707,\\\"bias\\\":0.13481755655312933,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1450.9072476060628,\\\"ask\\\":1471.363140321556,\\\"price\\\":1461.1351939638096,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.36613638199900267,\\\"bias\\\":0.13386361800099733,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1442.6073920194397,\\\"ask\\\":1462.946267637035,\\\"price\\\":1452.7768298282374,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3669065490616821,\\\"bias\\\":0.13309345093831793,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1456.6429904742906,\\\"ask\\\":1477.179749655197,\\\"price\\\":1466.9113700647438,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.36820145871255083,\\\"bias\\\":0.13179854128744917,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1464.720917176685,\\\"ask\\\":1485.371564548763,\\\"price\\\":1475.046240862724,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3674705596776021,\\\"bias\\\":0.13252944032239788,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1462.7543549181003,\\\"ask\\\":1483.377276336885,\\\"price\\\":1473.0658156274926,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3672923838994114,\\\"bias\\\":0.13270761610058862,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1470.3548777606304,\\\"ask\\\":1491.084956601163,\\\"price\\\":1480.7199171808968,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.36660283047975556,\\\"bias\\\":0.13339716952024444,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1465.4854026194998,\\\"ask\\\":1486.1468282354847,\\\"price\\\":1475.8161154274924,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.36615958198358156,\\\"bias\\\":0.13384041801641844,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1456.3234359716598,\\\"ask\\\":1476.8556898524282,\\\"price\\\":1466.5895629120441,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3670015937343444,\\\"bias\\\":0.13299840626565562,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1446.8030119921798,\\\"ask\\\":1467.2010403586355,\\\"price\\\":1457.0020261754078,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.36612642192052525,\\\"bias\\\":0.13387357807947475,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1439.0283848620945,\\\"ask\\\":1459.316801164279,\\\"price\\\":1449.1725930131868,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3668496996286561,\\\"bias\\\":0.1331503003713439,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1431.2761507972841,\\\"ask\\\":1451.4552707481016,\\\"price\\\":1441.3657107726929,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3675708828145169,\\\"bias\\\":0.13242911718548311,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1443.2919028631447,\\\"ask\\\":1463.6404291874992,\\\"price\\\":1453.466166025322,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.36868264272018925,\\\"bias\\\":0.13131735727981075,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1442.2473493069238,\\\"ask\\\":1462.5811487936273,\\\"price\\\":1452.4142490502757,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.36858753558575347,\\\"bias\\\":0.13141246441424653,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1444.3663787370629,\\\"ask\\\":1464.7300537645742,\\\"price\\\":1454.5482162508185,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.36839445713793056,\\\"bias\\\":0.13160554286206944,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1441.10335410759,\\\"ask\\\":1461.4210247596604,\\\"price\\\":1451.2621894336253,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3680964687066983,\\\"bias\\\":0.13190353129330168,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1435.1540618176577,\\\"ask\\\":1455.3878552370404,\\\"price\\\":1445.2709585273492,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3686432620319697,\\\"bias\\\":0.13135673796803032,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1428.5322218091815,\\\"ask\\\":1448.6726559535202,\\\"price\\\":1438.602438881351,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3680343690090612,\\\"bias\\\":0.13196563099093878,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1412.942875533765,\\\"ask\\\":1432.8635203046335,\\\"price\\\":1422.9031979191993,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3694903782742584,\\\"bias\\\":0.1305096217257416,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1399.3396081625006,\\\"ask\\\":1419.0684646723444,\\\"price\\\":1409.2040364174225,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.37075908907791316,\\\"bias\\\":0.12924091092208684,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1393.1778838724679,\\\"ask\\\":1412.8198681365307,\\\"price\\\":1402.9988760044994,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3713306936585724,\\\"bias\\\":0.1286693063414276,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1387.08048349955,\\\"ask\\\":1406.6365024008526,\\\"price\\\":1396.8584929502013,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3707650824443695,\\\"bias\\\":0.1292349175556305,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1401.5721824063655,\\\"ask\\\":1421.3325152902416,\\\"price\\\":1411.4523488483037,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.37211528060211324,\\\"bias\\\":0.12788471939788676,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1404.447601590846,\\\"ask\\\":1424.2484741208277,\\\"price\\\":1414.348037855837,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.37185291653683383,\\\"bias\\\":0.12814708346316617,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1405.4091605021767,\\\"ask\\\":1425.2235897539697,\\\"price\\\":1415.3163751280733,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3717651802838576,\\\"bias\\\":0.12823481971614242,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1401.876112982763,\\\"ask\\\":1421.6407308898713,\\\"price\\\":1411.7584219363173,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.37144199929268096,\\\"bias\\\":0.12855800070731904,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1393.238575455458,\\\"ask\\\":1412.8814153913856,\\\"price\\\":1403.059995423422,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3722390089183883,\\\"bias\\\":0.1277609910816117,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1404.0901858685522,\\\"ask\\\":1423.8860193047653,\\\"price\\\":1413.988102586659,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3732341094888382,\\\"bias\\\":0.12676589051116183,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1418.3947089742169,\\\"ask\\\":1438.392217459251,\\\"price\\\":1428.393463216734,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3745255689891447,\\\"bias\\\":0.12547443101085531,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1404.959464685907,\\\"ask\\\":1424.7675538154162,\\\"price\\\":1414.8635092506618,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.37572544676137953,\\\"bias\\\":0.12427455323862047,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1408.9194119216984,\\\"ask\\\":1428.783331123011,\\\"price\\\":1418.8513715223548,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3753751728311018,\\\"bias\\\":0.12462482716889822,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1399.8429962291711,\\\"ask\\\":1419.5789498517374,\\\"price\\\":1409.7109730404543,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3761832254055985,\\\"bias\\\":0.12381677459440149,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1408.288749639543,\\\"ask\\\":1428.143777328318,\\\"price\\\":1418.2162634839306,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.37543619452491483,\\\"bias\\\":0.12456380547508517,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1412.1566244893274,\\\"ask\\\":1432.066184149801,\\\"price\\\":1422.1114043195644,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.37509407916646026,\\\"bias\\\":0.12490592083353974,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1407.284309559719,\\\"ask\\\":1427.1251759583454,\\\"price\\\":1417.2047427590323,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.37466162853886525,\\\"bias\\\":0.12533837146113475,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1406.2581445271,\\\"ask\\\":1426.084543342185,\\\"price\\\":1416.1713439346427,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.37475308959424786,\\\"bias\\\":0.12524691040575214,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1413.8606403745953,\\\"ask\\\":1433.7942244282149,\\\"price\\\":1423.827432401405,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.37543019793312365,\\\"bias\\\":0.12456980206687635,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1411.0871451424218,\\\"ask\\\":1430.9816265442282,\\\"price\\\":1421.034385843325,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.37567504018350817,\\\"bias\\\":0.12432495981649183,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1403.715742145312,\\\"ask\\\":1423.5062964152357,\\\"price\\\":1413.611019280274,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.37502216627614127,\\\"bias\\\":0.12497783372385873,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1400.7556389107617,\\\"ask\\\":1420.5044596003393,\\\"price\\\":1410.6300492555506,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.37475806076082047,\\\"bias\\\":0.12524193923917953,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1384.5270293570702,\\\"ask\\\":1404.0470478978546,\\\"price\\\":1394.2870386274624,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3762260729328931,\\\"bias\\\":0.12377392706710688,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1371.1746606047664,\\\"ask\\\":1390.5064282265857,\\\"price\\\":1380.840544415676,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3750207741743879,\\\"bias\\\":0.1249792258256121,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1365.2341363326461,\\\"ask\\\":1384.48215033935,\\\"price\\\":1374.8581433359982,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.37447695381070856,\\\"bias\\\":0.12552304618929144,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1367.4397635009673,\\\"ask\\\":1386.7188739632163,\\\"price\\\":1377.079318732092,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.37467974469731,\\\"bias\\\":0.12532025530268998,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1382.9559500050002,\\\"ask\\\":1402.4538183837212,\\\"price\\\":1392.7048841943608,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.37325774973569564,\\\"bias\\\":0.12674225026430436,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1367.6483433192188,\\\"ask\\\":1386.93039448384,\\\"price\\\":1377.2893689015295,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3718391683240382,\\\"bias\\\":0.12816083167596182,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1366.9331921633272,\\\"ask\\\":1386.2051606329007,\\\"price\\\":1376.569176398114,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3719062194187358,\\\"bias\\\":0.1280937805812642,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.6450007262236843,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":978.3375648373512,\\\"ask\\\":992.1308436970926,\\\"price\\\":985.2342042672215,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.15290841018892265},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.4965029963728083,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1135.2046542239023,\\\"ask\\\":1151.2095536792242,\\\"price\\\":1143.207103951563,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.14889856168987686},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3531108913043923,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1019.0279780813751,\\\"ask\\\":1033.3949384974264,\\\"price\\\":1026.2114582894003,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.15131485644150017},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.4213669952937929,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":790.8798876204488,\\\"ask\\\":802.0302586443024,\\\"price\\\":796.4550731323751,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.16396781086226664},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.6656200385687728,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":802.5877667534245,\\\"ask\\\":813.9032035455172,\\\"price\\\":808.2454851494701,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.1713866374206353},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.4350710937717382,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":877.8546256673441,\\\"ask\\\":890.2312266334491,\\\"price\\\":884.0429261503966,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.1672088421777529},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.5769815548222728,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":891.9872680515534,\\\"ask\\\":904.5631207733273,\\\"price\\\":898.2751944124404,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.1596144269657822},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3476332846664962,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":869.3849726260989,\\\"ask\\\":881.6421625724889,\\\"price\\\":875.5135675992934,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.1592779492678868},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.35344626322693495,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":766.8394969796956,\\\"ask\\\":777.6509299683313,\\\"price\\\":772.2452134740139,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.1513654588550466},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.4065744272086548,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":650.7061426719472,\\\"ask\\\":659.8802474024678,\\\"price\\\":655.2931950372074,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.15065114083864972},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.5222011664479465,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":662.1765911474398,\\\"ask\\\":671.5124141847654,\\\"price\\\":666.8445026661025,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.16017424781585987},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.5447015443930329,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":610.3240940572937,\\\"ask\\\":618.9288647690782,\\\"price\\\":614.626479413186,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.15623286259144242},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.6004941964091275,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":713.2774644173583,\\\"ask\\\":723.3337428683581,\\\"price\\\":718.3056036428584,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.14935656341386694},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.46865131960642886,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":791.3719769133031,\\\"ask\\\":802.52928575196,\\\"price\\\":796.9506313326314,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.13836694931874338},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.6273709056863924,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":901.1584138361334,\\\"ask\\\":913.8635677069349,\\\"price\\\":907.5109907715347,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.13286135071484229},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.6318951080611314,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1057.8819020733133,\\\"ask\\\":1072.7966519514866,\\\"price\\\":1065.3392770124003,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.13616874798962642},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.6345161385683512,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1295.7608636312145,\\\"ask\\\":1314.0293954447461,\\\"price\\\":1304.8951295379802,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.14352042580331614},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.6491397123688617,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1474.340649433992,\\\"ask\\\":1495.126922437089,\\\"price\\\":1484.7337859355405,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.16217411224542777},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.3958132672312315,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1431.296188931035,\\\"ask\\\":1451.4755913933054,\\\"price\\\":1441.3858901621709,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.1637153383736938},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.35526595881179174,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1239.933411438214,\\\"ask\\\":1257.414849263124,\\\"price\\\":1248.674130350669,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.14921858722689435},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.5201958569725209,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1075.102036823678,\\\"ask\\\":1090.259568057848,\\\"price\\\":1082.6808024407626,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.15068865314239732},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.6363925704167286,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1359.89170237802,\\\"ask\\\":1379.0643950600868,\\\"price\\\":1369.4780487190533,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.1604834685095594},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.44120360075690945,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1320.9048483368354,\\\"ask\\\":1339.5278774171131,\\\"price\\\":1330.2163628769742,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.14844264013316055},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.6331939610642057,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1349.2869725867972,\\\"ask\\\":1368.31015246214,\\\"price\\\":1358.7985625244685,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.14099524016929132},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.4297155897356915,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1435.7483187360358,\\\"ask\\\":1455.9904903999882,\\\"price\\\":1445.8694045680122,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.14205237320814845},{\\\"volatility\\\":0.0121,\\\"forecast\\\":0.5647342455826352,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1389.4022895896646,\\\"ask\\\":1408.9910429172128,\\\"price\\\":1399.1966662534383,\\\"maxShares\\\":22700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.1484341304801896}],\\\"recentTicksOfPrices\\\":[1413.988102586659,1428.393463216734,1414.8635092506618,1418.8513715223548,1409.7109730404543,1418.2162634839306,1422.1114043195644,1417.2047427590323,1416.1713439346427,1423.827432401405,1421.034385843325,1413.611019280274,1410.6300492555506,1394.2870386274624,1380.840544415676,1374.8581433359982,1377.079318732092,1392.7048841943608,1377.2893689015295,1376.569176398114]}],[\\\"MDYN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24143.255722038426,\\\"ask\\\":24581.781053013892,\\\"price\\\":24362.51838752616,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.573181221609875,\\\"bias\\\":0.07318122160987495,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24249.143461368945,\\\"ask\\\":24689.592081252536,\\\"price\\\":24469.367771310743,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5735021805644969,\\\"bias\\\":0.07350218056449687,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24335.619279337694,\\\"ask\\\":24777.638600254017,\\\"price\\\":24556.628939795857,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5732400615664826,\\\"bias\\\":0.07324006156648255,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24189.741246695878,\\\"ask\\\":24629.110916161593,\\\"price\\\":24409.426081428737,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5736817412017843,\\\"bias\\\":0.07368174120178428,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24272.88964747898,\\\"ask\\\":24713.76958053107,\\\"price\\\":24493.329614005026,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5734284718970255,\\\"bias\\\":0.0734284718970255,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24252.67938662564,\\\"ask\\\":24693.19223118594,\\\"price\\\":24472.935808905793,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5733672824281243,\\\"bias\\\":0.07336728242812429,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24330.789575407474,\\\"ask\\\":24772.72117213536,\\\"price\\\":24551.75537377142,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5736035751770414,\\\"bias\\\":0.07360357517704141,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24380.900538778555,\\\"ask\\\":24823.742324548497,\\\"price\\\":24602.321431663528,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5734519834644812,\\\"bias\\\":0.07345198346448123,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24286.196985434595,\\\"ask\\\":24727.318625936936,\\\"price\\\":24506.757805685767,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5737384080470711,\\\"bias\\\":0.0737384080470711,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24187.54302302486,\\\"ask\\\":24626.872765118143,\\\"price\\\":24407.207894071504,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5734376504989107,\\\"bias\\\":0.07343765049891071,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24106.81469985526,\\\"ask\\\":24544.678135372305,\\\"price\\\":24325.746417613784,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5736835767424275,\\\"bias\\\":0.07368357674242754,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24026.153702736472,\\\"ask\\\":24462.552054552067,\\\"price\\\":24244.35287864427,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5739309484543069,\\\"bias\\\":0.07393094845430692,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24151.17605560427,\\\"ask\\\":24589.845247330682,\\\"price\\\":24370.510651467477,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5743156551052284,\\\"bias\\\":0.07431565510522842,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24162.01794916789,\\\"ask\\\":24600.884067316245,\\\"price\\\":24381.451008242067,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.574349016727905,\\\"bias\\\":0.07434901672790495,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24184.022187219613,\\\"ask\\\":24623.287978713004,\\\"price\\\":24403.65508296631,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5742813074220665,\\\"bias\\\":0.07428130742206651,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24217.963579141495,\\\"ask\\\":24657.845864130944,\\\"price\\\":24437.90472163622,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5741770563199065,\\\"bias\\\":0.07417705631990645,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24280.19078444425,\\\"ask\\\":24721.203331487635,\\\"price\\\":24500.697057965943,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5739864609836269,\\\"bias\\\":0.07398646098362693,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24210.629016890838,\\\"ask\\\":24650.37808076978,\\\"price\\\":24430.50354883031,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5737738837309891,\\\"bias\\\":0.07377388373098914,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24046.182254545052,\\\"ask\\\":24482.944394385424,\\\"price\\\":24264.563324465238,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5742784077421944,\\\"bias\\\":0.07427840774219441,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24191.073496393994,\\\"ask\\\":24630.467364138785,\\\"price\\\":24410.77043026639,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5747259752864475,\\\"bias\\\":0.07472597528644753,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24257.390779252008,\\\"ask\\\":24697.989199056785,\\\"price\\\":24477.689989154398,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5745211218870871,\\\"bias\\\":0.07452112188708715,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24323.484930435297,\\\"ask\\\":24765.2838494543,\\\"price\\\":24544.3843899448,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.574724169706252,\\\"bias\\\":0.07472416970625195,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24166.984334861274,\\\"ask\\\":24605.940659813343,\\\"price\\\":24386.46249733731,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5742402708092789,\\\"bias\\\":0.07424027080927886,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24197.715855503408,\\\"ask\\\":24637.23037154686,\\\"price\\\":24417.473113525135,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5741458644744528,\\\"bias\\\":0.07414586447445282,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24207.984677413293,\\\"ask\\\":24647.685710908183,\\\"price\\\":24427.83519416074,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5741143990798598,\\\"bias\\\":0.07411439907985984,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24245.80057140645,\\\"ask\\\":24686.188472804344,\\\"price\\\":24465.994522105397,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5742301750230587,\\\"bias\\\":0.07423017502305873,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24152.9870610912,\\\"ask\\\":24591.68914696369,\\\"price\\\":24372.338104027447,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.573944928188049,\\\"bias\\\":0.07394492818804899,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24036.94275781153,\\\"ask\\\":24473.5370763187,\\\"price\\\":24255.239917065115,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5743019156701554,\\\"bias\\\":0.07430191567015543,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24188.729381979294,\\\"ask\\\":24628.08067246933,\\\"price\\\":24408.40502722431,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5747711116516246,\\\"bias\\\":0.07477111165162464,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24332.103487668806,\\\"ask\\\":24774.058949604263,\\\"price\\\":24553.081218636537,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5752143032345793,\\\"bias\\\":0.07521430323457934,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24374.612513539498,\\\"ask\\\":24817.340086943845,\\\"price\\\":24595.976300241673,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.575082901246927,\\\"bias\\\":0.07508290124692696,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24472.57248788493,\\\"ask\\\":24917.079354466085,\\\"price\\\":24694.825921175507,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5753846545189366,\\\"bias\\\":0.07538465451893661,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24564.092187310824,\\\"ask\\\":25010.261369320502,\\\"price\\\":24787.176778315665,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5751027396966876,\\\"bias\\\":0.07510273969668757,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24605.90961506487,\\\"ask\\\":25052.83834672094,\\\"price\\\":24829.373980892906,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5749748862687063,\\\"bias\\\":0.0749748862687063,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24553.21844689325,\\\"ask\\\":24999.19012403157,\\\"price\\\":24776.204285462412,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5748139902806884,\\\"bias\\\":0.07481399028068836,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24564.323905090296,\\\"ask\\\":25010.4972958992,\\\"price\\\":24787.41060049475,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5747801517986412,\\\"bias\\\":0.07478015179864117,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24482.28516423186,\\\"ask\\\":24926.96844673052,\\\"price\\\":24704.62680548119,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5745295677762098,\\\"bias\\\":0.07452956777620978,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24512.11160513255,\\\"ask\\\":24957.336639332734,\\\"price\\\":24734.724122232645,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5744387693995993,\\\"bias\\\":0.07443876939959926,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24432.584296844692,\\\"ask\\\":24876.3648390679,\\\"price\\\":24654.4745679563,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5746810652980063,\\\"bias\\\":0.07468106529800633,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24464.587229450448,\\\"ask\\\":24908.94905601968,\\\"price\\\":24686.768142735065,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5745832445734108,\\\"bias\\\":0.07458324457341081,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24288.125809389046,\\\"ask\\\":24729.282484029813,\\\"price\\\":24508.70414670943,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5751251169827313,\\\"bias\\\":0.07512511698273128,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24142.40487049972,\\\"ask\\\":24580.914747057734,\\\"price\\\":24361.659808778728,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5755785640456736,\\\"bias\\\":0.07557856404567365,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24207.518822901606,\\\"ask\\\":24647.21139486147,\\\"price\\\":24427.36510888154,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5753747227528003,\\\"bias\\\":0.07537472275280033,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24231.75985658909,\\\"ask\\\":24671.892729867195,\\\"price\\\":24451.826293228143,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5754502018304705,\\\"bias\\\":0.07545020183047046,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24402.186557113513,\\\"ask\\\":24845.41497086532,\\\"price\\\":24623.800763989417,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5759808578384522,\\\"bias\\\":0.07598085783845221,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24234.06053691384,\\\"ask\\\":24674.235198532857,\\\"price\\\":24454.14786772335,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5754537336604681,\\\"bias\\\":0.07545373366046815,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":24226.204349686544,\\\"ask\\\":24666.236315674792,\\\"price\\\":24446.22033268067,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5754292651696522,\\\"bias\\\":0.0754292651696522,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5790550364781081,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":15839.557515172839,\\\"ask\\\":16127.25886257255,\\\"price\\\":15983.408188872694,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.08083192582004262},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.4970588364098768,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":16844.967302579444,\\\"ask\\\":17150.930381738304,\\\"price\\\":16997.94884215888,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.08502812881433158},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.42121970938154407,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":16915.05445562933,\\\"ask\\\":17222.29056077698,\\\"price\\\":17068.67250820315,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.08208205192482582},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.42200875424069856,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":16106.72714628542,\\\"ask\\\":16399.281221596353,\\\"price\\\":16253.004183940888,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.08019967674234285},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.4961067926180875,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":15846.922025949172,\\\"ask\\\":16134.757138428571,\\\"price\\\":15990.839582188877,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.08147975160818643},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5765804038231941,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":16578.588042612413,\\\"ask\\\":16879.71274974362,\\\"price\\\":16729.150396178025,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.07842649430087933},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5783464330068386,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":17148.76926670843,\\\"ask\\\":17460.250444105754,\\\"price\\\":17304.5098554071,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.08079543642843978},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5754318117604454,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":17380.34749881219,\\\"ask\\\":17696.03494076841,\\\"price\\\":17538.191219790297,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.07938000446181304},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5718837142929116,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":18509.811732680708,\\\"ask\\\":18846.014165766734,\\\"price\\\":18677.912949223715,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.07358038086007301},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5729160339809031,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":20208.449369673166,\\\"ask\\\":20575.50495862787,\\\"price\\\":20391.977164150514,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.0746741028683322},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5756844533350445,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":20971.79324592948,\\\"ask\\\":21352.713809427703,\\\"price\\\":21162.253527678586,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.07906335442654422},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.4725707781492616,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":21579.051662351852,\\\"ask\\\":21971.00214663271,\\\"price\\\":21775.02690449228,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.08368249358186425},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5419816804438485,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":21679.902311291895,\\\"ask\\\":22073.684593434402,\\\"price\\\":21876.793452363145,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.08628336466347031},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.4146125523199601,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":21166.2703917476,\\\"ask\\\":21550.723335290946,\\\"price\\\":21358.49686351927,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.08782808153792154},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5209661030603866,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":19984.645163784142,\\\"ask\\\":20347.635691481526,\\\"price\\\":20166.140427632843,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.08688708886767565},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.4597824892682994,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":20574.674818540803,\\\"ask\\\":20948.38233290381,\\\"price\\\":20761.528575722306,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.08235281815802908},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5218282499842223,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":21100.39282728193,\\\"ask\\\":21483.64920557766,\\\"price\\\":21292.021016429793,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.07972941786670973},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.42434335858425143,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":20141.192723031007,\\\"ask\\\":20507.02669781866,\\\"price\\\":20324.109710424847,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.07740209946082488},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5513617864724122,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":21257.215265976814,\\\"ask\\\":21643.32008412775,\\\"price\\\":21450.267675052295,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.07764401458426173},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5731569451713646,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":21994.922292134695,\\\"ask\\\":22394.426430639665,\\\"price\\\":22194.674361387184,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.07506466578756221},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.48973299820736393,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":22083.02212611888,\\\"ask\\\":22484.126463424782,\\\"price\\\":22283.574294771835,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.0746219096323616},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.53680001820608,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":21267.502588190884,\\\"ask\\\":21653.794259822997,\\\"price\\\":21460.648424006944,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.07589239670589043},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.4708641857437297,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":21463.10556407575,\\\"ask\\\":21852.950064735054,\\\"price\\\":21658.027814405406,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.07692577902851117},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.575452612600233,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":22471.30979500766,\\\"ask\\\":22879.466784220716,\\\"price\\\":22675.388289614184,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.07679431114197466},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5760517549941385,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":22691.937258815793,\\\"ask\\\":23104.101608622736,\\\"price\\\":22898.01943371927,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.07927089607266924},{\\\"volatility\\\":0.0075,\\\"forecast\\\":0.5735823291915524,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":23749.78523707739,\\\"ask\\\":24181.163778215017,\\\"price\\\":23965.474507646206,\\\"maxShares\\\":4600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.0751130555490519}],\\\"recentTicksOfPrices\\\":[24255.239917065115,24408.40502722431,24553.081218636537,24595.976300241673,24694.825921175507,24787.176778315665,24829.373980892906,24776.204285462412,24787.41060049475,24704.62680548119,24734.724122232645,24654.4745679563,24686.768142735065,24508.70414670943,24361.659808778728,24427.36510888154,24451.826293228143,24623.800763989417,24454.14786772335,24446.22033268067]}],[\\\"TITN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":31783.34151113023,\\\"ask\\\":31974.615381809042,\\\"price\\\":31878.97844646964,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:08 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6008624939750892,\\\"bias\\\":0.10086249397508917,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":31911.58556082062,\\\"ask\\\":32103.631211136486,\\\"price\\\":32007.608385978554,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:12 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6004555193124438,\\\"bias\\\":0.10045551931244379,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32016.282620779544,\\\"ask\\\":32208.958343672897,\\\"price\\\":32112.620482226223,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:18 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6007850985967014,\\\"bias\\\":0.10078509859670137,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":31839.63225331503,\\\"ask\\\":32031.24488472916,\\\"price\\\":31935.438569022095,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:24 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6013442672629852,\\\"bias\\\":0.10134426726298518,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":31739.261467960656,\\\"ask\\\":31930.270062552194,\\\"price\\\":31834.765765256427,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:30 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.601023780798402,\\\"bias\\\":0.10102378079840202,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":31714.947042528962,\\\"ask\\\":31905.809311591318,\\\"price\\\":31810.37817706014,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:36 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6009463304031119,\\\"bias\\\":0.10094633040311185,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":31808.919325933606,\\\"ask\\\":32000.347125287262,\\\"price\\\":31904.633225610436,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:42 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.601245437229826,\\\"bias\\\":0.10124543722982604,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":31748.761633793478,\\\"ask\\\":31939.82740089755,\\\"price\\\":31844.294517345515,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:48 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6014372775262671,\\\"bias\\\":0.10143727752626708,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":31862.661018673312,\\\"ask\\\":32054.41223844466,\\\"price\\\":31958.536628558988,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:54 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6010733690485951,\\\"bias\\\":0.1010733690485951,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":31982.222874900894,\\\"ask\\\":32174.69362439879,\\\"price\\\":32078.458249649844,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:00 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6014526380497479,\\\"bias\\\":0.10145263804974791,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32080.756072073025,\\\"ask\\\":32273.819799688306,\\\"price\\\":32177.287935880668,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:08 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6011400752604856,\\\"bias\\\":0.10114007526048563,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":31981.975293219064,\\\"ask\\\":32174.44455275699,\\\"price\\\":32078.20992298803,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6008276900711412,\\\"bias\\\":0.10082769007114123,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32135.082815213224,\\\"ask\\\":32328.473484111197,\\\"price\\\":32231.778149662212,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:20 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6013103831391475,\\\"bias\\\":0.10131038313914753,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32148.354745946515,\\\"ask\\\":32341.825286042476,\\\"price\\\":32245.090015994498,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:25 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6013522247735793,\\\"bias\\\":0.1013522247735793,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32175.28991535605,\\\"ask\\\":32368.922552760396,\\\"price\\\":32272.106234058225,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:31 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6012673078512085,\\\"bias\\\":0.10126730785120852,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32216.834212141006,\\\"ask\\\":32410.71686537355,\\\"price\\\":32313.77553875728,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:37 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6011365528804514,\\\"bias\\\":0.10113655288045142,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32292.99183233721,\\\"ask\\\":32487.33280625298,\\\"price\\\":32390.162319295097,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:43 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6008974754114641,\\\"bias\\\":0.1008974754114641,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32378.35305870964,\\\"ask\\\":32573.20774110909,\\\"price\\\":32475.780399909367,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:49 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6011641813358863,\\\"bias\\\":0.10116418133588634,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32175.912330775267,\\\"ask\\\":32369.54871390932,\\\"price\\\":32272.730522342295,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:39:56 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6005276881014449,\\\"bias\\\":0.10052768810144486,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32354.27940868427,\\\"ask\\\":32548.98921455398,\\\"price\\\":32451.634311619127,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:01 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6010849630526962,\\\"bias\\\":0.10108496305269621,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32272.884508617215,\\\"ask\\\":32467.10447556977,\\\"price\\\":32369.994492093494,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:07 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6008300183648807,\\\"bias\\\":0.1008300183648807,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32353.783769921327,\\\"ask\\\":32548.49059301012,\\\"price\\\":32451.137181465725,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:13 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6010827715391691,\\\"bias\\\":0.10108277153916911,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32546.539119541878,\\\"ask\\\":32742.405954764796,\\\"price\\\":32644.47253715334,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:19 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6004805469243543,\\\"bias\\\":0.10048054692435426,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32584.615374937646,\\\"ask\\\":32780.71135512784,\\\"price\\\":32682.663365032746,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:25 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6003629945494936,\\\"bias\\\":0.1003629945494936,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32597.33711963217,\\\"ask\\\":32793.50965997098,\\\"price\\\":32695.423389801577,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:31 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.600323810646945,\\\"bias\\\":0.10032381064694496,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32550.556929024937,\\\"ask\\\":32746.44794364294,\\\"price\\\":32648.50243633394,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:37 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6004679914975135,\\\"bias\\\":0.10046799149751351,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32665.633417418077,\\\"ask\\\":32862.21696857606,\\\"price\\\":32763.92519299707,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:43 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.600112805450078,\\\"bias\\\":0.10011280545007795,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32810.71874929919,\\\"ask\\\":33008.17543184261,\\\"price\\\":32909.4470905709,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:49 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5996681516018373,\\\"bias\\\":0.09966815160183728,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":33001.33408764737,\\\"ask\\\":33199.93790362117,\\\"price\\\":33100.63599563427,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:40:55 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6002471781871823,\\\"bias\\\":0.10024717818718232,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":33181.294504407015,\\\"ask\\\":33380.98133191598,\\\"price\\\":33281.1379181615,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:01 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5997005177425582,\\\"bias\\\":0.09970051774255817,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":33234.6258633932,\\\"ask\\\":33434.6336419091,\\\"price\\\":33334.629752651155,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:07 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5995402719118197,\\\"bias\\\":0.09954027191181969,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":33357.5082291144,\\\"ask\\\":33558.25552036283,\\\"price\\\":33457.88187473862,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:14 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5991722297335405,\\\"bias\\\":0.09917222973354045,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":33243.13490042889,\\\"ask\\\":33443.19388679055,\\\"price\\\":33343.164393609724,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:20 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5995134327537058,\\\"bias\\\":0.09951343275370583,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":33295.199963159605,\\\"ask\\\":33495.572279888744,\\\"price\\\":33395.38612152418,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:26 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5993575758186006,\\\"bias\\\":0.09935757581860061,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":33360.93529417587,\\\"ask\\\":33561.70320968745,\\\"price\\\":33461.319251931665,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:30 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5991614123132715,\\\"bias\\\":0.09916141231327147,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":33347.05900252376,\\\"ask\\\":33547.74340976061,\\\"price\\\":33447.40120614219,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:36 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5992026751028263,\\\"bias\\\":0.09920267510282632,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":33449.86356739437,\\\"ask\\\":33651.16665807076,\\\"price\\\":33550.515112732566,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:42 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5988968463984966,\\\"bias\\\":0.09889684639849661,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":33487.35496749716,\\\"ask\\\":33688.883683449996,\\\"price\\\":33588.11932547358,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:48 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.598786000468445,\\\"bias\\\":0.09878600046844499,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":33587.63525042989,\\\"ask\\\":33789.767458556846,\\\"price\\\":33688.70135449337,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:41:54 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5984901787146402,\\\"bias\\\":0.09849017871464016,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":33547.2088948654,\\\"ask\\\":33749.09781499497,\\\"price\\\":33648.15335493019,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:02 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5983714922690164,\\\"bias\\\":0.09837149226901643,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":33324.46450587505,\\\"ask\\\":33525.01293820729,\\\"price\\\":33424.73872204117,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:08 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5990290181517105,\\\"bias\\\":0.0990290181517105,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":33509.51593299185,\\\"ask\\\":33711.17801483533,\\\"price\\\":33610.34697391359,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:14 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.598479108005916,\\\"bias\\\":0.09847910800591597,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":33426.57417711155,\\\"ask\\\":33627.73711097581,\\\"price\\\":33527.15564404368,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:19 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5982347506245026,\\\"bias\\\":0.0982347506245026,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":33395.807497203365,\\\"ask\\\":33596.785275521535,\\\"price\\\":33496.29638636245,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:25 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5981442495300591,\\\"bias\\\":0.09814424953005907,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":33181.10782130439,\\\"ask\\\":33380.79352534433,\\\"price\\\":33280.95067332436,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:31 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5975092032658134,\\\"bias\\\":0.09750920326581336,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32970.66973646702,\\\"ask\\\":33169.08901271456,\\\"price\\\":33069.87937459079,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:37 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5968868425387402,\\\"bias\\\":0.09688684253874025,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":32960.83613742541,\\\"ask\\\":33159.196234541305,\\\"price\\\":33060.01618598336,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:42:43 PM\\\",\\\"volatility\\\":0.0069,\\\"forecast\\\":0.596857937132398,\\\"bias\\\":0.09685793713239799,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11}],\\\"longTermRecords\\\":[{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5510112702770779,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":20091.0750825897,\\\"ask\\\":20211.984260619316,\\\"price\\\":20151.529671604512,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:30:38 PM\\\",\\\"bias\\\":0.11372912160734794},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.38866354285873295,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":19090.759213484045,\\\"ask\\\":19205.64843643378,\\\"price\\\":19148.20382495891,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:40:31 PM\\\",\\\"bias\\\":0.11400437392671992},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5558429462770025,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":18356.585048823166,\\\"ask\\\":18467.05597188529,\\\"price\\\":18411.820510354224,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 4:50:26 PM\\\",\\\"bias\\\":0.11447136488867782},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6072052930929237,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":18706.979767272194,\\\"ask\\\":18819.559384728185,\\\"price\\\":18763.269576000195,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:00:18 PM\\\",\\\"bias\\\":0.11188161737731728},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5040998361855202,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":19234.50691810821,\\\"ask\\\":19350.26122253012,\\\"price\\\":19292.38407031917,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:10:13 PM\\\",\\\"bias\\\":0.1056731000097677},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3976008343039885,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":18485.931047314756,\\\"ask\\\":18597.180381601498,\\\"price\\\":18541.55571445812,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:20:06 PM\\\",\\\"bias\\\":0.10428500782511607},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.44292425755051923,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":17762.20391989391,\\\"ask\\\":17869.09782512898,\\\"price\\\":17815.65087251145,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:30:00 PM\\\",\\\"bias\\\":0.10329809077795377},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5985155631590278,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":18675.829511697593,\\\"ask\\\":18788.22166522837,\\\"price\\\":18732.025588462984,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:39:56 PM\\\",\\\"bias\\\":0.10079492851609384},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4618922707877294,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":20971.84581939273,\\\"ask\\\":21098.05552342116,\\\"price\\\":21034.950671406943,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:49:50 PM\\\",\\\"bias\\\":0.10071750045988476},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.43693970657071723,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":20465.580388868075,\\\"ask\\\":20588.74336011502,\\\"price\\\":20527.16187449155,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 5:59:44 PM\\\",\\\"bias\\\":0.09991893743145353},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5149181431693415,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":19830.173659307093,\\\"ask\\\":19949.512718440335,\\\"price\\\":19889.843188873714,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:09:36 PM\\\",\\\"bias\\\":0.10350737656680487},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5299698870156512,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":18971.740787757295,\\\"ask\\\":19085.913751374694,\\\"price\\\":19028.82726956599,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:19:30 PM\\\",\\\"bias\\\":0.10234842599680588},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5664917424892943,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":19302.755072527612,\\\"ask\\\":19418.920098039307,\\\"price\\\":19360.83758528346,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:29:24 PM\\\",\\\"bias\\\":0.099143296109864},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.40408553085703547,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":19895.70086242229,\\\"ask\\\":20015.434267813012,\\\"price\\\":19955.56756511766,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:39:20 PM\\\",\\\"bias\\\":0.09843275665831142},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5250983771181837,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":19604.117851542087,\\\"ask\\\":19722.096494580444,\\\"price\\\":19663.107173061268,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:49:13 PM\\\",\\\"bias\\\":0.0985220607886505},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5925448853338701,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":21347.248647954137,\\\"ask\\\":21475.717546537606,\\\"price\\\":21411.483097245866,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 6:59:07 PM\\\",\\\"bias\\\":0.09707840621087938},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5933083291098444,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22895.2651125976,\\\"ask\\\":23033.050058109715,\\\"price\\\":22964.157585353645,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:09:00 PM\\\",\\\"bias\\\":0.09665647855138582},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5951757407653306,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":24401.15045621895,\\\"ask\\\":24547.99790129149,\\\"price\\\":24474.57417875521,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:18:55 PM\\\",\\\"bias\\\":0.09740811317756282},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4512761991050255,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":25247.627840116853,\\\"ask\\\":25399.569431933003,\\\"price\\\":25323.59863602495,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:28:49 PM\\\",\\\"bias\\\":0.10109308273601914},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5358813217097692,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":24508.96918167409,\\\"ask\\\":24656.465485676148,\\\"price\\\":24582.717333675126,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:38:43 PM\\\",\\\"bias\\\":0.10257632442757325},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.40538973994461364,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":24206.541203925757,\\\"ask\\\":24352.217479977477,\\\"price\\\":24279.37934195162,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:48:37 PM\\\",\\\"bias\\\":0.09837226939697952},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.4193986099391398,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22128.72949377152,\\\"ask\\\":22261.90138641206,\\\"price\\\":22195.315440091785,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 7:58:30 PM\\\",\\\"bias\\\":0.09489032952300136},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5949623730514287,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22040.146396208616,\\\"ask\\\":22172.785190970142,\\\"price\\\":22106.465793589374,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:08:24 PM\\\",\\\"bias\\\":0.09852564236931727},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5980147763720063,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23759.672756666863,\\\"ask\\\":23902.65975419946,\\\"price\\\":23831.166255433174,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:18:19 PM\\\",\\\"bias\\\":0.09987813521695432},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.598230184554976,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":25456.963845079834,\\\"ask\\\":25610.165232311996,\\\"price\\\":25533.56453869592,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:28:12 PM\\\",\\\"bias\\\":0.10035323082027858},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.5975055615198411,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":29758.192568115002,\\\"ask\\\":29937.278982767646,\\\"price\\\":29847.735775441328,\\\"maxShares\\\":4300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/12/2023, 8:38:06 PM\\\",\\\"bias\\\":0.10086249397508917}],\\\"recentTicksOfPrices\\\":[32909.4470905709,33100.63599563427,33281.1379181615,33334.629752651155,33457.88187473862,33343.164393609724,33395.38612152418,33461.319251931665,33447.40120614219,33550.515112732566,33588.11932547358,33688.70135449337,33648.15335493019,33424.73872204117,33610.34697391359,33527.15564404368,33496.29638636245,33280.95067332436,33069.87937459079,33060.01618598336]}]]\"}}],[\"data/salesLedger.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/salesLedger.txt\",\"text\":\"[{\\\"date\\\":\\\"7/12/2023, 4:35:30 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":36610.81156615679,\\\"averagePurchasePrice\\\":29111.56287414274,\\\"profit\\\":\\\"$64,321,056.03\\\",\\\"profitPercent\\\":\\\"25.76%\\\",\\\"shares\\\":8577,\\\"type\\\":\\\"Short-Term Long Sale\\\",\\\"forecastAtSale\\\":0.3344969541725156},{\\\"date\\\":\\\"7/12/2023, 4:50:32 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":28752.20381890262,\\\"averagePurchasePrice\\\":36404.39955218848,\\\"profit\\\":\\\"$65,961,927.22\\\",\\\"profitPercent\\\":\\\"21.02%\\\",\\\"shares\\\":8620,\\\"type\\\":\\\"Short-Term Cover Short\\\",\\\"forecastAtSale\\\":0.6431916162475685},{\\\"date\\\":\\\"7/12/2023, 4:58:00 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":31352.927189821996,\\\"averagePurchasePrice\\\":28937.32814174541,\\\"profit\\\":\\\"$31,685,412.71\\\",\\\"profitPercent\\\":\\\"8.35%\\\",\\\"shares\\\":13117,\\\"type\\\":\\\"Short-Term Long Sale\\\",\\\"forecastAtSale\\\":0.3523297576933498},{\\\"date\\\":\\\"7/12/2023, 5:05:31 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":28388.5389697808,\\\"averagePurchasePrice\\\":31352.927189821996,\\\"profit\\\":\\\"$38,866,093.95\\\",\\\"profitPercent\\\":\\\"9.45%\\\",\\\"shares\\\":13111,\\\"type\\\":\\\"Short-Term Cover Short\\\",\\\"forecastAtSale\\\":0.6502889249809275},{\\\"date\\\":\\\"7/12/2023, 5:35:32 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":46261.20494548948,\\\"averagePurchasePrice\\\":28388.5389697808,\\\"profit\\\":\\\"$283,138,774.39\\\",\\\"profitPercent\\\":\\\"62.96%\\\",\\\"shares\\\":15842,\\\"type\\\":\\\"Short-Term Long Sale\\\",\\\"forecastAtSale\\\":0.34232638585978564},{\\\"date\\\":\\\"7/12/2023, 5:50:30 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":32047.134105411984,\\\"averagePurchasePrice\\\":45825.464810590114,\\\"profit\\\":\\\"$220,287,951.31\\\",\\\"profitPercent\\\":\\\"30.07%\\\",\\\"shares\\\":15988,\\\"type\\\":\\\"Short-Term Cover Short\\\",\\\"forecastAtSale\\\":0.6417959476812284},{\\\"date\\\":\\\"7/12/2023, 5:54:16 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":36595.7063431902,\\\"averagePurchasePrice\\\":31970.67273502631,\\\"profit\\\":\\\"$137,830,626.56\\\",\\\"profitPercent\\\":\\\"14.47%\\\",\\\"shares\\\":29801,\\\"type\\\":\\\"Short-Term Long Sale\\\",\\\"forecastAtSale\\\":0.6314420069719363},{\\\"date\\\":\\\"7/12/2023, 6:13:00 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":56865.34590066188,\\\"averagePurchasePrice\\\":37458.48917828751,\\\"profit\\\":\\\"$564,914,192.33\\\",\\\"profitPercent\\\":\\\"51.81%\\\",\\\"shares\\\":29109,\\\"type\\\":\\\"Short-Term Long Sale\\\",\\\"forecastAtSale\\\":0.38006450837164346},{\\\"date\\\":\\\"7/12/2023, 6:28:02 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":46152.67220519074,\\\"averagePurchasePrice\\\":56500.98797232484,\\\"profit\\\":\\\"$303,133,213.77\\\",\\\"profitPercent\\\":\\\"18.32%\\\",\\\"shares\\\":29293,\\\"type\\\":\\\"Short-Term Cover Short\\\",\\\"forecastAtSale\\\":0.614351254881334},{\\\"date\\\":\\\"7/12/2023, 6:50:32 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":75872.13556285584,\\\"averagePurchasePrice\\\":46152.67220519074,\\\"profit\\\":\\\"$1,260,848,232.95\\\",\\\"profitPercent\\\":\\\"64.39%\\\",\\\"shares\\\":42425,\\\"type\\\":\\\"Short-Term Long Sale\\\",\\\"forecastAtSale\\\":0.3806735701772955},{\\\"date\\\":\\\"7/12/2023, 7:13:01 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":57637.780214084654,\\\"averagePurchasePrice\\\":76253.51271117608,\\\"profit\\\":\\\"$785,770,068.70\\\",\\\"profitPercent\\\":\\\"24.41%\\\",\\\"shares\\\":42210,\\\"type\\\":\\\"Short-Term Cover Short\\\",\\\"forecastAtSale\\\":0.6374225533770604},{\\\"date\\\":\\\"7/12/2023, 7:28:01 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":79477.12714929,\\\"averagePurchasePrice\\\":58927.37647042286,\\\"profit\\\":\\\"$1,396,396,658.13\\\",\\\"profitPercent\\\":\\\"34.87%\\\",\\\"shares\\\":67952,\\\"type\\\":\\\"Short-Term Long Sale\\\",\\\"forecastAtSale\\\":0.3576041483182189},{\\\"date\\\":\\\"7/12/2023, 7:43:00 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":62311.44833347883,\\\"averagePurchasePrice\\\":80058.62264854739,\\\"profit\\\":\\\"$1,197,153,390.60\\\",\\\"profitPercent\\\":\\\"22.17%\\\",\\\"shares\\\":67456,\\\"type\\\":\\\"Short-Term Cover Short\\\",\\\"forecastAtSale\\\":0.6328052380641901},{\\\"date\\\":\\\"7/12/2023, 7:50:31 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":74065.10911368125,\\\"averagePurchasePrice\\\":62081.36585211172,\\\"profit\\\":\\\"$1,273,512,396.41\\\",\\\"profitPercent\\\":\\\"19.30%\\\",\\\"shares\\\":106270,\\\"type\\\":\\\"Short-Term Long Sale\\\",\\\"forecastAtSale\\\":0.3651062464883358},{\\\"date\\\":\\\"7/12/2023, 7:58:00 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":66410.78606326091,\\\"averagePurchasePrice\\\":73847.82623838527,\\\"profit\\\":\\\"$792,639,741.86\\\",\\\"profitPercent\\\":\\\"10.07%\\\",\\\"shares\\\":106580,\\\"type\\\":\\\"Short-Term Cover Short\\\",\\\"forecastAtSale\\\":0.640782954094004},{\\\"date\\\":\\\"7/12/2023, 8:05:31 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":66256.73821795851,\\\"averagePurchasePrice\\\":66410.78606326091,\\\"profit\\\":\\\"-$20,095,233.32\\\",\\\"profitPercent\\\":\\\"-0.23%\\\",\\\"shares\\\":130448,\\\"type\\\":\\\"Short-Term Long Sale\\\",\\\"forecastAtSale\\\":0.3637823913665516},{\\\"date\\\":\\\"7/12/2023, 8:10:25 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":64265.64180625263,\\\"averagePurchasePrice\\\":66256.73821795851,\\\"profit\\\":\\\"$259,728,571.42\\\",\\\"profitPercent\\\":\\\"3.01%\\\",\\\"shares\\\":130445,\\\"type\\\":\\\"Short-Term Cover Short\\\",\\\"forecastAtSale\\\":0.3582313431417731},{\\\"date\\\":\\\"7/12/2023, 8:13:01 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":58305.07881545297,\\\"averagePurchasePrice\\\":59631.8304671708,\\\"profit\\\":\\\"$198,069,427.33\\\",\\\"profitPercent\\\":\\\"2.22%\\\",\\\"shares\\\":149289,\\\"type\\\":\\\"Short-Term Cover Short\\\",\\\"forecastAtSale\\\":0.6398402886114932},{\\\"date\\\":\\\"7/12/2023, 8:28:00 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":81096.9228865993,\\\"averagePurchasePrice\\\":58305.07881545297,\\\"profit\\\":\\\"$3,557,351,022.62\\\",\\\"profitPercent\\\":\\\"39.09%\\\",\\\"shares\\\":156080,\\\"type\\\":\\\"Short-Term Long Sale\\\",\\\"forecastAtSale\\\":0.3874845768078501},{\\\"date\\\":\\\"7/12/2023, 8:39:14 PM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":73422.07510473205,\\\"averagePurchasePrice\\\":82234.1478924935,\\\"profit\\\":\\\"$1,356,345,431.42\\\",\\\"profitPercent\\\":\\\"10.72%\\\",\\\"shares\\\":153919,\\\"type\\\":\\\"Short-Term Cover Short\\\",\\\"forecastAtSale\\\":0.3729551691374454}]\"}}],[\"data/stockMarketReserveMoney.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/stockMarketReserveMoney.txt\",\"text\":\"{\\\"stockMarketReserveMoneyLimit\\\":2000000000000,\\\"capitalToReserveForTrading\\\":7051717066.386705,\\\"moneyInvested\\\":0,\\\"moneyRequested\\\":{},\\\"countOfVisitedWithoutFillingRequest\\\":0}\"}}],[\"contracts/2023-07-12T21:20:44.230Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-12T21:20:44.230Z.txt\",\"text\":\"[{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-750531.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"3358\\\",53],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 3358\\\\n\\\\n You are also given a target number of 53. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"3358\\\\\\\", 53]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-461484.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,0],[0,0,0,0,1,0,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,0],[0,0,0,0,1,0,1],[0,1,1,0,0,0,0],[0,0,1,0,0,0,0],[1,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-523040.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-2,-9,-2,-9,4,2,10,-5,-2,3,7,2,0,6,5,-7,8,-1,-8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -2,-9,-2,-9,4,2,10,-5,-2,3,7,2,0,6,5,-7,8,-1,-8\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-741432.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[111,[1,2,3,4,6,7,8,11,12,15]],\\\"description\\\":\\\"How many different distinct ways can the number 111 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,3,4,6,7,8,11,12,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-149047-NiteSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"01101011010010011111101000011100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '01101011010010011111101000011100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-55508.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":194455156,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 194455156?\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-713464-BladeIndustries.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,-6,9,7,-4,8,0,-10,-10,-1,5,1,4,-1,9,1,6,-4,-4,6,8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,-6,9,7,-4,8,0,-10,-10,-1,5,1,4,-1,9,1,6,-4,-4,6,8\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-9550.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[2],[4,4],[9,6,8],[6,1,4,4],[3,3,1,5,5],[9,5,1,2,3,2],[4,4,4,3,1,2,1],[2,6,2,2,1,4,3,9],[8,7,3,3,6,7,5,7,4],[5,1,4,5,2,1,5,4,3,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,6,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,1,4,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,3,1,5,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,5,1,2,3,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,4,4,3,1,2,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[2,6,2,2,1,4,3,9],\\\\n&nbsp;&nbsp;&nbsp;[8,7,3,3,6,7,5,7,4],\\\\n&nbsp;&nbsp;[5,1,4,5,2,1,5,4,3,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-367378.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[7,[[1,3],[5,6],[2,4],[4,5],[2,3],[0,6]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [7,[[1,3],[5,6],[2,4],[4,5],[2,3],[0,6]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 6. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"}]\"}}],[\"data/organizations.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/organizations.txt\",\"text\":\"{\\\"toJoinInOrderInWhichIWantToComplete\\\":[\\\"CyberSec\\\",\\\"NiteSec\\\",\\\"Chongqing\\\",\\\"The Black Hand\\\",\\\"Bachman & Associates\\\",\\\"BitRunners\\\",\\\"Daedalus\\\",\\\"NWO\\\",\\\"OmniTek Incorporated\\\",\\\"Blade Industries\\\",\\\"ECorp\\\",\\\"Illuminati\\\",\\\"Aevum\\\",\\\"Volhaven\\\",\\\"New Tokyo\\\",\\\"Ishima\\\",\\\"Tian Di Hui\\\",\\\"Netburners\\\"],\\\"companiesWeWantToBecomePartOf\\\":[\\\"Bachman & Associates\\\",\\\"NWO\\\",\\\"OmniTek Incorporated\\\",\\\"Blade Industries\\\",\\\"ECorp\\\"],\\\"doNoWorkFor\\\":[\\\"Aevum\\\",\\\"Volhaven\\\",\\\"New Tokyo\\\",\\\"Ishima\\\",\\\"Tian Di Hui\\\",\\\"Netburners\\\"],\\\"stopAtAugments\\\":[{\\\"final\\\":true,\\\"faction\\\":\\\"Chongqing\\\",\\\"augmentToStopAt\\\":\\\"Neuregen Gene Modification\\\"}]}\"}}],[\"data/enviroment.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/enviroment.txt\",\"text\":\"[{\\\"name\\\":\\\"n00dles\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"n00dles\\\",\\\"ip\\\":\\\"49.6.5.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":3.5,\\\"maxRam\\\":4,\\\"organizationName\\\":\\\"Noodle Bar\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":70000,\\\"moneyMax\\\":1750000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":3000}},{\\\"name\\\":\\\"foodnstuff\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"foodnstuff\\\",\\\"ip\\\":\\\"47.5.3.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"FoodNStuff\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":10,\\\"hackDifficulty\\\":3.012,\\\"minDifficulty\\\":3,\\\"moneyAvailable\\\":2032852.6052848387,\\\"moneyMax\\\":50000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":5}},{\\\"name\\\":\\\"sigma-cosmetics\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"sigma-cosmetics\\\",\\\"ip\\\":\\\"91.9.1.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Sigma Cosmetics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":10,\\\"hackDifficulty\\\":7.726,\\\"minDifficulty\\\":3,\\\"moneyAvailable\\\":2642845.74485087,\\\"moneyMax\\\":57500000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":5,\\\"serverGrowth\\\":10}},{\\\"name\\\":\\\"joesguns\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"joesguns\\\",\\\"ip\\\":\\\"87.1.9.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Joe's Guns\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":7.777999999999897,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":37664325.01763674,\\\"moneyMax\\\":62500000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":10,\\\"serverGrowth\\\":20}},{\\\"name\\\":\\\"hong-fang-tea\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"hong-fang-tea\\\",\\\"ip\\\":\\\"98.3.9.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"HongFang Teahouse\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":10.10799999999999,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":75000000,\\\"moneyMax\\\":75000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":30,\\\"serverGrowth\\\":20}},{\\\"name\\\":\\\"harakiri-sushi\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"harakiri-sushi\\\",\\\"ip\\\":\\\"7.4.0.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"HaraKiri Sushi Bar Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":5,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":50912735.257875726,\\\"moneyMax\\\":100000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":40,\\\"serverGrowth\\\":40}},{\\\"name\\\":\\\"iron-gym\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"iron-gym\\\",\\\"ip\\\":\\\"81.8.4.1\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Iron Gym Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":30,\\\"hackDifficulty\\\":30,\\\"minDifficulty\\\":10,\\\"moneyAvailable\\\":20000000,\\\"moneyMax\\\":500000000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":100,\\\"serverGrowth\\\":20}},{\\\"name\\\":\\\"zer0\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"zer0\\\",\\\"ip\\\":\\\"31.0.5.7\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"ZER0 Nightclub\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":25,\\\"hackDifficulty\\\":25,\\\"minDifficulty\\\":8,\\\"moneyAvailable\\\":7500000,\\\"moneyMax\\\":187500000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":75,\\\"serverGrowth\\\":40}},{\\\"name\\\":\\\"nectar-net\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"nectar-net\\\",\\\"ip\\\":\\\"24.3.2.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Nectar Nightclub Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":20,\\\"hackDifficulty\\\":7,\\\"minDifficulty\\\":7,\\\"moneyAvailable\\\":29119799.498098552,\\\"moneyMax\\\":68750000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":20,\\\"serverGrowth\\\":25}},{\\\"name\\\":\\\"silver-helix\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"silver-helix\\\",\\\"ip\\\":\\\"26.1.5.0\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Silver Helix\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":30,\\\"hackDifficulty\\\":30,\\\"minDifficulty\\\":10,\\\"moneyAvailable\\\":45000000,\\\"moneyMax\\\":1125000000,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":150,\\\"serverGrowth\\\":30}},{\\\"name\\\":\\\"netlink\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"netlink\\\",\\\"ip\\\":\\\"2.4.9.6\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":true,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"NetLink Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":80,\\\"hackDifficulty\\\":80,\\\"minDifficulty\\\":27,\\\"moneyAvailable\\\":275000000,\\\"moneyMax\\\":6875000000,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":3,\\\"requiredHackingSkill\\\":376,\\\"serverGrowth\\\":74}},{\\\"name\\\":\\\"avmnite-02h\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"avmnite-02h\\\",\\\"ip\\\":\\\"28.4.3.2\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":7,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"NiteSec\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":215,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"summit-uni\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"summit-uni\\\",\\\"ip\\\":\\\"76.8.3.8\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":true,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Summit University\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":50,\\\"hackDifficulty\\\":50,\\\"minDifficulty\\\":17,\\\"moneyAvailable\\\":241374129,\\\"moneyMax\\\":6034353225,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":3,\\\"requiredHackingSkill\\\":445,\\\"serverGrowth\\\":40}},{\\\"name\\\":\\\"catalyst\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"catalyst\\\",\\\"ip\\\":\\\"71.2.6.7\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":true,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Catalyst Ventures\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":64,\\\"hackDifficulty\\\":64,\\\"minDifficulty\\\":21,\\\"moneyAvailable\\\":338297518,\\\"moneyMax\\\":8457437950,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":3,\\\"requiredHackingSkill\\\":400,\\\"serverGrowth\\\":44}},{\\\"name\\\":\\\"lexo-corp\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"lexo-corp\\\",\\\"ip\\\":\\\"64.5.3.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"LexoCorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":60,\\\"hackDifficulty\\\":60,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":757193064,\\\"moneyMax\\\":18929826600,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":658,\\\"serverGrowth\\\":64}},{\\\"name\\\":\\\"galactic-cyber\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"galactic-cyber\\\",\\\"ip\\\":\\\"38.6.3.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Galactic Cybersystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":63,\\\"hackDifficulty\\\":63,\\\"minDifficulty\\\":21,\\\"moneyAvailable\\\":792968377,\\\"moneyMax\\\":19824209425,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":842,\\\"serverGrowth\\\":74}},{\\\"name\\\":\\\"snap-fitness\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"snap-fitness\\\",\\\"ip\\\":\\\"8.1.5.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Snap Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":44,\\\"hackDifficulty\\\":44,\\\"minDifficulty\\\":15,\\\"moneyAvailable\\\":450000000,\\\"moneyMax\\\":11250000000,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":722,\\\"serverGrowth\\\":47}},{\\\"name\\\":\\\"omnia\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"omnia\\\",\\\"ip\\\":\\\"96.3.4.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Omnia Cybersystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":93,\\\"hackDifficulty\\\":93,\\\"minDifficulty\\\":31,\\\"moneyAvailable\\\":999576238,\\\"moneyMax\\\":24989405950,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":887,\\\"serverGrowth\\\":65}},{\\\"name\\\":\\\"icarus\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"icarus\\\",\\\"ip\\\":\\\"1.9.2.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Icarus Microsystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":92,\\\"hackDifficulty\\\":92,\\\"minDifficulty\\\":31,\\\"moneyAvailable\\\":977608164,\\\"moneyMax\\\":24440204100,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":898,\\\"serverGrowth\\\":88}},{\\\"name\\\":\\\"univ-energy\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"univ-energy\\\",\\\"ip\\\":\\\"70.1.0.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Universal Energy\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":83,\\\"hackDifficulty\\\":83,\\\"minDifficulty\\\":28,\\\"moneyAvailable\\\":1148991125,\\\"moneyMax\\\":28724778125,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":818,\\\"serverGrowth\\\":84}},{\\\"name\\\":\\\"zeus-med\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"zeus-med\\\",\\\"ip\\\":\\\"74.5.8.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Zeus Medical\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":81,\\\"hackDifficulty\\\":81,\\\"minDifficulty\\\":27,\\\"moneyAvailable\\\":1428264339,\\\"moneyMax\\\":35706608475,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":831,\\\"serverGrowth\\\":78}},{\\\"name\\\":\\\"infocomm\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"univ-energy\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"infocomm\\\",\\\"ip\\\":\\\"10.8.4.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"InfoComm\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":83,\\\"hackDifficulty\\\":83,\\\"minDifficulty\\\":28,\\\"moneyAvailable\\\":756025638,\\\"moneyMax\\\":18900640950,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":886,\\\"serverGrowth\\\":65}},{\\\"name\\\":\\\"applied-energetics\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"univ-energy\\\",\\\"infocomm\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"applied-energetics\\\",\\\"ip\\\":\\\"6.3.9.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Applied Energetics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":67,\\\"hackDifficulty\\\":67,\\\"minDifficulty\\\":22,\\\"moneyAvailable\\\":992265341,\\\"moneyMax\\\":24806633525,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":829,\\\"serverGrowth\\\":72}},{\\\"name\\\":\\\"fulcrumtech\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"univ-energy\\\",\\\"infocomm\\\",\\\"applied-energetics\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"fulcrumtech\\\",\\\"ip\\\":\\\"73.7.6.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Fulcrum Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":94,\\\"hackDifficulty\\\":94,\\\"minDifficulty\\\":31,\\\"moneyAvailable\\\":1404791207,\\\"moneyMax\\\":35119780175,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1245,\\\"serverGrowth\\\":86}},{\\\"name\\\":\\\"zb-def\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"zb-def\\\",\\\"ip\\\":\\\"48.8.1.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"ZB Defense Industries\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":57,\\\"hackDifficulty\\\":57,\\\"minDifficulty\\\":19,\\\"moneyAvailable\\\":1000333746,\\\"moneyMax\\\":25008343650,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":792,\\\"serverGrowth\\\":66}},{\\\"name\\\":\\\"nova-med\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"nova-med\\\",\\\"ip\\\":\\\"40.4.5.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Nova Medical\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":74,\\\"hackDifficulty\\\":74,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":1154437396,\\\"moneyMax\\\":28860934900,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":841,\\\"serverGrowth\\\":76}},{\\\"name\\\":\\\"run4theh111z\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"nova-med\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"run4theh111z\\\",\\\"ip\\\":\\\"53.8.2.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":512,\\\"organizationName\\\":\\\"The Runners\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":516,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"helios\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"nova-med\\\",\\\"run4theh111z\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"helios\\\",\\\"ip\\\":\\\"2.0.3.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":256,\\\"organizationName\\\":\\\"Helios Labs\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":94,\\\"hackDifficulty\\\":94,\\\"minDifficulty\\\":31,\\\"moneyAvailable\\\":711221500,\\\"moneyMax\\\":17780537500,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":838,\\\"serverGrowth\\\":79}},{\\\"name\\\":\\\"omnitek\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"nova-med\\\",\\\"run4theh111z\\\",\\\"helios\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"omnitek\\\",\\\"ip\\\":\\\"94.5.1.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":256,\\\"organizationName\\\":\\\"OmniTek Incorporated\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":91,\\\"hackDifficulty\\\":91,\\\"minDifficulty\\\":30,\\\"moneyAvailable\\\":17218191227,\\\"moneyMax\\\":430454780675,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":914,\\\"serverGrowth\\\":98}},{\\\"name\\\":\\\"4sigma\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"nova-med\\\",\\\"run4theh111z\\\",\\\"helios\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"4sigma\\\",\\\"ip\\\":\\\"20.3.8.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Four Sigma\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":61,\\\"hackDifficulty\\\":61,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":19982291051,\\\"moneyMax\\\":499557276275,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1232,\\\"serverGrowth\\\":93}},{\\\"name\\\":\\\".\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"nova-med\\\",\\\"run4theh111z\\\",\\\"helios\\\"],\\\"server\\\":{\\\"hostname\\\":\\\".\\\",\\\"ip\\\":\\\"84.4.3.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\".\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":511,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"b-and-a\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"nova-med\\\",\\\"run4theh111z\\\",\\\"helios\\\",\\\".\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"b-and-a\\\",\\\"ip\\\":\\\"50.5.0.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Bachman & Associates\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":83,\\\"hackDifficulty\\\":83,\\\"minDifficulty\\\":28,\\\"moneyAvailable\\\":25081195720,\\\"moneyMax\\\":627029893000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1042,\\\"serverGrowth\\\":61}},{\\\"name\\\":\\\"clarkinc\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"nova-med\\\",\\\"run4theh111z\\\",\\\"helios\\\",\\\".\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"clarkinc\\\",\\\"ip\\\":\\\"91.7.7.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Clarke Incorporated\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":48,\\\"hackDifficulty\\\":48,\\\"minDifficulty\\\":16,\\\"moneyAvailable\\\":21322093921,\\\"moneyMax\\\":533052348025,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1181,\\\"serverGrowth\\\":61}},{\\\"name\\\":\\\"megacorp\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"nova-med\\\",\\\"run4theh111z\\\",\\\"helios\\\",\\\".\\\",\\\"clarkinc\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"megacorp\\\",\\\"ip\\\":\\\"89.0.9.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"MegaCorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":42061842314,\\\"moneyMax\\\":1051546057850,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1230,\\\"serverGrowth\\\":99}},{\\\"name\\\":\\\"nwo\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"nova-med\\\",\\\"run4theh111z\\\",\\\"helios\\\",\\\"4sigma\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"nwo\\\",\\\"ip\\\":\\\"84.9.3.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"NWO\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":30524397926,\\\"moneyMax\\\":763109948150,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1142,\\\"serverGrowth\\\":94}},{\\\"name\\\":\\\"titan-labs\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"zb-def\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"titan-labs\\\",\\\"ip\\\":\\\"68.8.8.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Titan Laboratories\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":76,\\\"hackDifficulty\\\":76,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":764784297,\\\"moneyMax\\\":19119607425,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":823,\\\"serverGrowth\\\":61}},{\\\"name\\\":\\\"microdyne\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"zb-def\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"microdyne\\\",\\\"ip\\\":\\\"93.4.7.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Microdyne Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":68,\\\"hackDifficulty\\\":68,\\\"minDifficulty\\\":23,\\\"moneyAvailable\\\":572122332,\\\"moneyMax\\\":14303058300,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":843,\\\"serverGrowth\\\":81}},{\\\"name\\\":\\\"stormtech\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"zb-def\\\",\\\"microdyne\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"stormtech\\\",\\\"ip\\\":\\\"62.1.6.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Storm Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":79,\\\"hackDifficulty\\\":79,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":1143661600,\\\"moneyMax\\\":28591540000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":984,\\\"serverGrowth\\\":69}},{\\\"name\\\":\\\"vitalife\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"zb-def\\\",\\\"titan-labs\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"vitalife\\\",\\\"ip\\\":\\\"95.7.6.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"VitaLife\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":89,\\\"hackDifficulty\\\":89,\\\"minDifficulty\\\":30,\\\"moneyAvailable\\\":776366080,\\\"moneyMax\\\":19409152000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":889,\\\"serverGrowth\\\":70}},{\\\"name\\\":\\\"kuai-gong\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"zb-def\\\",\\\"titan-labs\\\",\\\"vitalife\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"kuai-gong\\\",\\\"ip\\\":\\\"77.1.5.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"KuaiGong International\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":98,\\\"hackDifficulty\\\":98,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":21272085228,\\\"moneyMax\\\":531802130700,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1075,\\\"serverGrowth\\\":96}},{\\\"name\\\":\\\"blade\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"zb-def\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"kuai-gong\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"blade\\\",\\\"ip\\\":\\\"24.1.3.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":256,\\\"organizationName\\\":\\\"Blade Industries\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":88,\\\"hackDifficulty\\\":88,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":38662100457,\\\"moneyMax\\\":966552511425,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":959,\\\"serverGrowth\\\":64}},{\\\"name\\\":\\\"powerhouse-fitness\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"zb-def\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"kuai-gong\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"powerhouse-fitness\\\",\\\"ip\\\":\\\"26.2.2.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Powerhouse Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":65,\\\"hackDifficulty\\\":65,\\\"minDifficulty\\\":22,\\\"moneyAvailable\\\":900000000,\\\"moneyMax\\\":22500000000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1097,\\\"serverGrowth\\\":54}},{\\\"name\\\":\\\"ecorp\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"zb-def\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"kuai-gong\\\",\\\"powerhouse-fitness\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"ecorp\\\",\\\"ip\\\":\\\"62.1.2.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"ECorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":64349610119,\\\"moneyMax\\\":1608740252975,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1296,\\\"serverGrowth\\\":99}},{\\\"name\\\":\\\"fulcrumassets\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"zb-def\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"kuai-gong\\\",\\\"powerhouse-fitness\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"fulcrumassets\\\",\\\"ip\\\":\\\"46.1.3.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Fulcrum Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":1000000,\\\"moneyMax\\\":25000000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1435,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"The-Cave\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"zb-def\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"kuai-gong\\\",\\\"powerhouse-fitness\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"The-Cave\\\",\\\"ip\\\":\\\"69.8.2.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Helios\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":925,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"deltaone\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"galactic-cyber\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"deltaone\\\",\\\"ip\\\":\\\"55.5.5.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"DeltaOne\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":79,\\\"hackDifficulty\\\":79,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":1313051535,\\\"moneyMax\\\":32826288375,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":819,\\\"serverGrowth\\\":60}},{\\\"name\\\":\\\"unitalife\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"galactic-cyber\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"unitalife\\\",\\\"ip\\\":\\\"46.7.1.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"UnitaLife Group\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":73,\\\"hackDifficulty\\\":73,\\\"minDifficulty\\\":24,\\\"moneyAvailable\\\":1011097471,\\\"moneyMax\\\":25277436775,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":814,\\\"serverGrowth\\\":78}},{\\\"name\\\":\\\"defcomm\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"defcomm\\\",\\\"ip\\\":\\\"41.7.4.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"DefComm\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":90,\\\"hackDifficulty\\\":90,\\\"minDifficulty\\\":30,\\\"moneyAvailable\\\":923952258,\\\"moneyMax\\\":23098806450,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":862,\\\"serverGrowth\\\":59}},{\\\"name\\\":\\\"solaris\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"solaris\\\",\\\"ip\\\":\\\"68.6.7.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Solaris Space Systems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":74,\\\"hackDifficulty\\\":74,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":717105115,\\\"moneyMax\\\":17927627875,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":809,\\\"serverGrowth\\\":75}},{\\\"name\\\":\\\"taiyang-digital\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"solaris\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"taiyang-digital\\\",\\\"ip\\\":\\\"29.8.1.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Taiyang Digital\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":71,\\\"hackDifficulty\\\":71,\\\"minDifficulty\\\":24,\\\"moneyAvailable\\\":860750496,\\\"moneyMax\\\":21518762400,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":919,\\\"serverGrowth\\\":78}},{\\\"name\\\":\\\"max-hardware\\\",\\\"lineage\\\":[\\\"joesguns\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"max-hardware\\\",\\\"ip\\\":\\\"54.1.5.4\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Max Hardware Store\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":15,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":10000000,\\\"moneyMax\\\":250000000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":80,\\\"serverGrowth\\\":30}},{\\\"name\\\":\\\"phantasy\\\",\\\"lineage\\\":[\\\"joesguns\\\",\\\"max-hardware\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"phantasy\\\",\\\"ip\\\":\\\"95.4.3.2\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Phantasy Club\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":20,\\\"hackDifficulty\\\":20,\\\"minDifficulty\\\":7,\\\"moneyAvailable\\\":24000000,\\\"moneyMax\\\":600000000,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":100,\\\"serverGrowth\\\":35}},{\\\"name\\\":\\\"johnson-ortho\\\",\\\"lineage\\\":[\\\"joesguns\\\",\\\"max-hardware\\\",\\\"phantasy\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"johnson-ortho\\\",\\\"ip\\\":\\\"69.5.5.0\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Johnson Orthopedics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":37,\\\"hackDifficulty\\\":37,\\\"minDifficulty\\\":12,\\\"moneyAvailable\\\":76057968,\\\"moneyMax\\\":1901449200,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":266,\\\"serverGrowth\\\":45}},{\\\"name\\\":\\\"CSEC\\\",\\\"lineage\\\":[\\\"foodnstuff\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"CSEC\\\",\\\"ip\\\":\\\"83.5.5.5\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":7,\\\"maxRam\\\":8,\\\"organizationName\\\":\\\"CyberSec\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":54,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"neo-net\\\",\\\"lineage\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"neo-net\\\",\\\"ip\\\":\\\"76.2.3.6\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Neo Nightclub Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":25,\\\"hackDifficulty\\\":25,\\\"minDifficulty\\\":8,\\\"moneyAvailable\\\":5000000,\\\"moneyMax\\\":125000000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":50,\\\"serverGrowth\\\":25}},{\\\"name\\\":\\\"omega-net\\\",\\\"lineage\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"omega-net\\\",\\\"ip\\\":\\\"40.7.0.6\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Omega Software\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":27,\\\"hackDifficulty\\\":27,\\\"minDifficulty\\\":9,\\\"moneyAvailable\\\":63950834,\\\"moneyMax\\\":1598770850,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":188,\\\"serverGrowth\\\":33}},{\\\"name\\\":\\\"the-hub\\\",\\\"lineage\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"neo-net\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"the-hub\\\",\\\"ip\\\":\\\"44.0.9.8\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":7,\\\"maxRam\\\":8,\\\"organizationName\\\":\\\"The Hub\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":35,\\\"hackDifficulty\\\":35,\\\"minDifficulty\\\":12,\\\"moneyAvailable\\\":186395250,\\\"moneyMax\\\":4659881250,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":285,\\\"serverGrowth\\\":46}},{\\\"name\\\":\\\"computek\\\",\\\"lineage\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"neo-net\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"computek\\\",\\\"ip\\\":\\\"53.1.0.7\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":true,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"CompuTek\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":64,\\\"hackDifficulty\\\":64,\\\"minDifficulty\\\":21,\\\"moneyAvailable\\\":224173417,\\\"moneyMax\\\":5604335425,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":3,\\\"requiredHackingSkill\\\":303,\\\"serverGrowth\\\":57}},{\\\"name\\\":\\\"crush-fitness\\\",\\\"lineage\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"neo-net\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"crush-fitness\\\",\\\"ip\\\":\\\"15.2.4.1\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Crush Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":39,\\\"hackDifficulty\\\":39,\\\"minDifficulty\\\":13,\\\"moneyAvailable\\\":53155022,\\\"moneyMax\\\":1328875550,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":243,\\\"serverGrowth\\\":30}},{\\\"name\\\":\\\"rothman-uni\\\",\\\"lineage\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"crush-fitness\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"rothman-uni\\\",\\\"ip\\\":\\\"95.1.6.7\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":true,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Rothman University\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":46,\\\"hackDifficulty\\\":46,\\\"minDifficulty\\\":15,\\\"moneyAvailable\\\":238740177,\\\"moneyMax\\\":5968504425,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":3,\\\"requiredHackingSkill\\\":380,\\\"serverGrowth\\\":40}},{\\\"name\\\":\\\"zb-institute\\\",\\\"lineage\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"crush-fitness\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"zb-institute\\\",\\\"ip\\\":\\\"48.2.8.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"ZB Institute of Technology\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":75,\\\"hackDifficulty\\\":75,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":813677611,\\\"moneyMax\\\":20341940275,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":731,\\\"serverGrowth\\\":80}},{\\\"name\\\":\\\"syscore\\\",\\\"lineage\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"crush-fitness\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"syscore\\\",\\\"ip\\\":\\\"57.5.9.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"SysCore Securities\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":71,\\\"hackDifficulty\\\":71,\\\"minDifficulty\\\":24,\\\"moneyAvailable\\\":449377570,\\\"moneyMax\\\":11234439250,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":585,\\\"serverGrowth\\\":66}},{\\\"name\\\":\\\"aevum-police\\\",\\\"lineage\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"crush-fitness\\\",\\\"syscore\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"aevum-police\\\",\\\"ip\\\":\\\"95.6.1.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Aevum Police Headquarters\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":72,\\\"hackDifficulty\\\":72,\\\"minDifficulty\\\":24,\\\"moneyAvailable\\\":369400451,\\\"moneyMax\\\":9235011275,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":415,\\\"serverGrowth\\\":47}},{\\\"name\\\":\\\"aerocorp\\\",\\\"lineage\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"crush-fitness\\\",\\\"syscore\\\",\\\"aevum-police\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"aerocorp\\\",\\\"ip\\\":\\\"92.2.8.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"AeroCorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":85,\\\"hackDifficulty\\\":85,\\\"minDifficulty\\\":28,\\\"moneyAvailable\\\":1037064022,\\\"moneyMax\\\":25926600550,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":911,\\\"serverGrowth\\\":55}},{\\\"name\\\":\\\"rho-construction\\\",\\\"lineage\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"crush-fitness\\\",\\\"rothman-uni\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"rho-construction\\\",\\\"ip\\\":\\\"87.6.8.3\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":true,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":63,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Rho Construction\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":44,\\\"hackDifficulty\\\":44,\\\"minDifficulty\\\":15,\\\"moneyAvailable\\\":518399425,\\\"moneyMax\\\":12959985625,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":3,\\\"requiredHackingSkill\\\":522,\\\"serverGrowth\\\":54}},{\\\"name\\\":\\\"I.I.I.I\\\",\\\"lineage\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"computek\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"I.I.I.I\\\",\\\"ip\\\":\\\"58.2.7.7\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":true,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"I.I.I.I\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":3,\\\"requiredHackingSkill\\\":358,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"alpha-ent\\\",\\\"lineage\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"computek\\\",\\\"I.I.I.I\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"alpha-ent\\\",\\\"ip\\\":\\\"33.5.0.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Alpha Enterprises\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":54,\\\"hackDifficulty\\\":54,\\\"minDifficulty\\\":18,\\\"moneyAvailable\\\":625550049,\\\"moneyMax\\\":15638751225,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":519,\\\"serverGrowth\\\":51}},{\\\"name\\\":\\\"millenium-fitness\\\",\\\"lineage\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"computek\\\",\\\"I.I.I.I\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"millenium-fitness\\\",\\\"ip\\\":\\\"31.1.8.6\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":true,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":63,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Millenium Fitness Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":53,\\\"hackDifficulty\\\":53,\\\"minDifficulty\\\":18,\\\"moneyAvailable\\\":250000000,\\\"moneyMax\\\":6250000000,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":3,\\\"requiredHackingSkill\\\":525,\\\"serverGrowth\\\":28}},{\\\"name\\\":\\\"global-pharm\\\",\\\"lineage\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"computek\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"global-pharm\\\",\\\"ip\\\":\\\"84.1.5.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Global Pharmaceuticals\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":77,\\\"hackDifficulty\\\":77,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":1508021188,\\\"moneyMax\\\":37700529700,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":779,\\\"serverGrowth\\\":81}}]\"}}],[\"data/memoryStarvedQueue.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/memoryStarvedQueue.txt\",\"text\":\"[[\\\"foodnstuff\\\",{\\\"name\\\":\\\"foodnstuff\\\",\\\"moneyThreshhold\\\":37500000,\\\"securityThreshholdTarget\\\":8,\\\"hackDifficulty\\\":3.012,\\\"moneyAvailable\\\":2032852.6052848387,\\\"minDifficulty\\\":3,\\\"pids\\\":[200666],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":3}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"sigma-cosmetics\\\",{\\\"name\\\":\\\"sigma-cosmetics\\\",\\\"moneyThreshhold\\\":43125000,\\\"securityThreshholdTarget\\\":8,\\\"hackDifficulty\\\":7.726,\\\"moneyAvailable\\\":2642845.74485087,\\\"minDifficulty\\\":3,\\\"pids\\\":[200652,200653,200654,200655,200656,200657,200658,200659,200660,200661,200662,200663,200664,200665],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":168},{\\\"machineToRunOn\\\":\\\"omega-net\\\",\\\"threads\\\":18},{\\\"machineToRunOn\\\":\\\"foodnstuff\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"sigma-cosmetics\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"joesguns\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"hong-fang-tea\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"harakiri-sushi\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"nectar-net\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"catalyst\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"I.I.I.I\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"CSEC\\\",\\\"threads\\\":4},{\\\"machineToRunOn\\\":\\\"the-hub\\\",\\\"threads\\\":4},{\\\"machineToRunOn\\\":\\\"n00dles\\\",\\\"threads\\\":2},{\\\"machineToRunOn\\\":\\\"neo-net\\\",\\\"threads\\\":1}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"joesguns\\\",{\\\"name\\\":\\\"joesguns\\\",\\\"moneyThreshhold\\\":46875000,\\\"securityThreshholdTarget\\\":10,\\\"hackDifficulty\\\":7.777999999999897,\\\"moneyAvailable\\\":37664325.01763674,\\\"minDifficulty\\\":5,\\\"pids\\\":[200690,200691,200692,200693,200694,200695,200696,200697],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":185},{\\\"machineToRunOn\\\":\\\"netlink\\\",\\\"threads\\\":18},{\\\"machineToRunOn\\\":\\\"summit-uni\\\",\\\"threads\\\":18},{\\\"machineToRunOn\\\":\\\"max-hardware\\\",\\\"threads\\\":18},{\\\"machineToRunOn\\\":\\\"phantasy\\\",\\\"threads\\\":18},{\\\"machineToRunOn\\\":\\\"neo-net\\\",\\\"threads\\\":17},{\\\"machineToRunOn\\\":\\\"zer0\\\",\\\"threads\\\":16},{\\\"machineToRunOn\\\":\\\"avmnite-02h\\\",\\\"threads\\\":4}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"nectar-net\\\",{\\\"name\\\":\\\"nectar-net\\\",\\\"moneyThreshhold\\\":51562500,\\\"securityThreshholdTarget\\\":12,\\\"hackDifficulty\\\":7,\\\"moneyAvailable\\\":29119799.498098552,\\\"minDifficulty\\\":7,\\\"pids\\\":[200622,200623,200624,200625,200626],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"rho-construction\\\",\\\"threads\\\":36},{\\\"machineToRunOn\\\":\\\"millenium-fitness\\\",\\\"threads\\\":36},{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":26},{\\\"machineToRunOn\\\":\\\"iron-gym\\\",\\\"threads\\\":18},{\\\"machineToRunOn\\\":\\\"zer0\\\",\\\"threads\\\":2}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"hong-fang-tea\\\",{\\\"name\\\":\\\"hong-fang-tea\\\",\\\"moneyThreshhold\\\":56250000,\\\"securityThreshholdTarget\\\":10,\\\"hackDifficulty\\\":10.10799999999999,\\\"moneyAvailable\\\":75000000,\\\"minDifficulty\\\":5,\\\"pids\\\":[200651],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":121}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"harakiri-sushi\\\",{\\\"name\\\":\\\"harakiri-sushi\\\",\\\"moneyThreshhold\\\":75000000,\\\"securityThreshholdTarget\\\":10,\\\"hackDifficulty\\\":5,\\\"moneyAvailable\\\":50912735.257875726,\\\"minDifficulty\\\":5,\\\"pids\\\":[200745,200746,200747],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"rothman-uni\\\",\\\"threads\\\":73},{\\\"machineToRunOn\\\":\\\"silver-helix\\\",\\\"threads\\\":36},{\\\"machineToRunOn\\\":\\\"avmnite-02h\\\",\\\"threads\\\":32}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"rho-construction\\\",{\\\"name\\\":\\\"rho-construction\\\",\\\"moneyThreshhold\\\":9719989218.75,\\\"securityThreshholdTarget\\\":20,\\\"hackDifficulty\\\":44,\\\"moneyAvailable\\\":518399425,\\\"minDifficulty\\\":15,\\\"pids\\\":[200378],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":3}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"catalyst\\\",{\\\"name\\\":\\\"catalyst\\\",\\\"moneyThreshhold\\\":6343078462.5,\\\"securityThreshholdTarget\\\":26,\\\"hackDifficulty\\\":64,\\\"moneyAvailable\\\":338297518,\\\"minDifficulty\\\":21,\\\"pids\\\":[200403],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":22}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"netlink\\\",{\\\"name\\\":\\\"netlink\\\",\\\"moneyThreshhold\\\":5156250000,\\\"securityThreshholdTarget\\\":32,\\\"hackDifficulty\\\":80,\\\"moneyAvailable\\\":275000000,\\\"minDifficulty\\\":27,\\\"pids\\\":[200404],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":4}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"summit-uni\\\",{\\\"name\\\":\\\"summit-uni\\\",\\\"moneyThreshhold\\\":4525764918.75,\\\"securityThreshholdTarget\\\":22,\\\"hackDifficulty\\\":50,\\\"moneyAvailable\\\":241374129,\\\"minDifficulty\\\":17,\\\"pids\\\":[200442],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":3}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"millenium-fitness\\\",{\\\"name\\\":\\\"millenium-fitness\\\",\\\"moneyThreshhold\\\":4687500000,\\\"securityThreshholdTarget\\\":23,\\\"hackDifficulty\\\":53,\\\"moneyAvailable\\\":250000000,\\\"minDifficulty\\\":18,\\\"pids\\\":[200497],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":3}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"rothman-uni\\\",{\\\"name\\\":\\\"rothman-uni\\\",\\\"moneyThreshhold\\\":4476378318.75,\\\"securityThreshholdTarget\\\":20,\\\"hackDifficulty\\\":46,\\\"moneyAvailable\\\":238740177,\\\"minDifficulty\\\":15,\\\"pids\\\":[200627],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":3}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"the-hub\\\",{\\\"name\\\":\\\"the-hub\\\",\\\"moneyThreshhold\\\":3494910937.5,\\\"securityThreshholdTarget\\\":17,\\\"hackDifficulty\\\":35,\\\"moneyAvailable\\\":186395250,\\\"minDifficulty\\\":12,\\\"pids\\\":[200698],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":3}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}]]\"}}],[\"data/contracts.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/contracts.txt\",\"text\":\"[{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-750531.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"3358\\\",53]},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-461484.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,0],[0,0,0,0,1,0,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,0],[0,0,0,0,1,0,1],[0,1,1,0,0,0,0],[0,0,1,0,0,0,0],[1,0,0,0,0,0,0]]},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-523040.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-2,-9,-2,-9,4,2,10,-5,-2,3,7,2,0,6,5,-7,8,-1,-8]},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-741432.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[111,[1,2,3,4,6,7,8,11,12,15]]},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-149047-NiteSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"01101011010010011111101000011100\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-55508.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":194455156},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-713464-BladeIndustries.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,-6,9,7,-4,8,0,-10,-10,-1,5,1,4,-1,9,1,6,-4,-4,6,8]},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-9550.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[2],[4,4],[9,6,8],[6,1,4,4],[3,3,1,5,5],[9,5,1,2,3,2],[4,4,4,3,1,2,1],[2,6,2,2,1,4,3,9],[8,7,3,3,6,7,5,7,4],[5,1,4,5,2,1,5,4,3,4]]},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-367378.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[7,[[1,3],[5,6],[2,4],[4,5],[2,3],[0,6]]]}]\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"scripts/coordinator-for-8.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15723.610000022141,\"ramUsage\":2.75,\"server\":\"home\",\"scriptKey\":\"scripts/coordinator-for-8.js*[]\",\"title\":\"scripts/coordinator-for-8.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.40999999999994,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"rho-construction\\\"]\",\"title\":\"scripts/hacking/weaken.js rho-construction\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.409999999999947,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"catalyst\\\"]\",\"title\":\"scripts/hacking/weaken.js catalyst\",\"threads\":22,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.409999999999947,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"netlink\\\"]\",\"title\":\"scripts/hacking/weaken.js netlink\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.409999999999954,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"summit-uni\\\"]\",\"title\":\"scripts/hacking/weaken.js summit-uni\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"millenium-fitness\\\"]\",\"title\":\"scripts/hacking/weaken.js millenium-fitness\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.810000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"nectar-net\\\"]\",\"title\":\"scripts/hacking/grow.js nectar-net\",\"threads\":26,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.810000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"rothman-uni\\\"]\",\"title\":\"scripts/hacking/weaken.js rothman-uni\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"scripts/hacking/weaken.js hong-fang-tea\",\"threads\":121,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"scripts/hacking/grow.js sigma-cosmetics\",\"threads\":168,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"joesguns\\\"]\",\"title\":\"scripts/hacking/grow.js joesguns\",\"threads\":185,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"the-hub\\\"]\",\"title\":\"scripts/hacking/weaken.js the-hub\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"scripts/contracts/contract-coordinator.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"ramUsage\":2.6,\"server\":\"home\",\"scriptKey\":\"scripts/contracts/contract-coordinator.js*[]\",\"title\":\"scripts/contracts/contract-coordinator.js \",\"threads\":1,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"62.1.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":64349610119,\"moneyMax\":1608740252975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1296,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"89.0.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":42061842314,\"moneyMax\":1051546057850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1230,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"50.5.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":25081195720,\"moneyMax\":627029893000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1042,\"serverGrowth\":61,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"24.1.3.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":38662100457,\"moneyMax\":966552511425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":959,\"serverGrowth\":64,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"84.9.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":30524397926,\"moneyMax\":763109948150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1142,\"serverGrowth\":94,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"91.7.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":21322093921,\"moneyMax\":533052348025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1181,\"serverGrowth\":61,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-523040.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-2,-9,-2,-9,4,2,10,-5,-2,3,7,2,0,6,5,-7,8,-1,-8],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"94.5.1.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":17218191227,\"moneyMax\":430454780675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":914,\"serverGrowth\":98,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"20.3.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":19982291051,\"moneyMax\":499557276275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1232,\"serverGrowth\":93,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"77.1.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":21272085228,\"moneyMax\":531802130700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1075,\"serverGrowth\":96,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"73.7.6.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":1404791207,\"moneyMax\":35119780175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1245,\"serverGrowth\":86,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"46.1.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1435,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"62.1.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1143661600,\"moneyMax\":28591540000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":984,\"serverGrowth\":69,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"41.7.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":923952258,\"moneyMax\":23098806450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":862,\"serverGrowth\":59,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"10.8.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":756025638,\"moneyMax\":18900640950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":886,\"serverGrowth\":65,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"2.0.3.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":711221500,\"moneyMax\":17780537500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":838,\"serverGrowth\":79,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"95.7.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":776366080,\"moneyMax\":19409152000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":889,\"serverGrowth\":70,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-461484.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,1,0,0],[0,0,0,0,1,0,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,0],[0,0,0,0,1,0,1],[0,1,1,0,0,0,0],[0,0,1,0,0,0,0],[1,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"1.9.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":977608164,\"moneyMax\":24440204100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":898,\"serverGrowth\":88,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"70.1.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1148991125,\"moneyMax\":28724778125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":818,\"serverGrowth\":84,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"68.8.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":764784297,\"moneyMax\":19119607425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":823,\"serverGrowth\":61,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"93.4.7.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":572122332,\"moneyMax\":14303058300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":843,\"serverGrowth\":81,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"29.8.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":860750496,\"moneyMax\":21518762400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":919,\"serverGrowth\":78,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-750531.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"3358\",53],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"38.6.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":792968377,\"moneyMax\":19824209425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":842,\"serverGrowth\":74,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"92.2.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1037064022,\"moneyMax\":25926600550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":911,\"serverGrowth\":55,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"96.3.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"snap-fitness\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":999576238,\"moneyMax\":24989405950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":887,\"serverGrowth\":65,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"48.8.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":1000333746,\"moneyMax\":25008343650,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":792,\"serverGrowth\":66,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"6.3.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":992265341,\"moneyMax\":24806633525,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":829,\"serverGrowth\":72,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"68.6.7.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":717105115,\"moneyMax\":17927627875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":809,\"serverGrowth\":75,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"55.5.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1313051535,\"moneyMax\":32826288375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":819,\"serverGrowth\":60,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"84.1.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1508021188,\"moneyMax\":37700529700,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":779,\"serverGrowth\":81,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"40.4.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1154437396,\"moneyMax\":28860934900,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":841,\"serverGrowth\":76,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"74.5.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1428264339,\"moneyMax\":35706608475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":831,\"serverGrowth\":78,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"46.7.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":1011097471,\"moneyMax\":25277436775,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":814,\"serverGrowth\":78,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"64.5.3.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":757193064,\"moneyMax\":18929826600,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":658,\"serverGrowth\":64,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-713464-BladeIndustries.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,-6,9,7,-4,8,0,-10,-10,-1,5,1,4,-1,9,1,6,-4,-4,6,8],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"87.6.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"rho-construction\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"rho-construction\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":518399425,\"moneyMax\":12959985625,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":522,\"serverGrowth\":54,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.810000000000002,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"nectar-net\\\"]\",\"title\":\"scripts/hacking/grow.js nectar-net\",\"threads\":36,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-9550.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[4,4],[9,6,8],[6,1,4,4],[3,3,1,5,5],[9,5,1,2,3,2],[4,4,4,3,1,2,1],[2,6,2,2,1,4,3,9],[8,7,3,3,6,7,5,7,4],[5,1,4,5,2,1,5,4,3,4]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"33.5.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":625550049,\"moneyMax\":15638751225,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":519,\"serverGrowth\":51,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"95.6.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"syscore\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":369400451,\"moneyMax\":9235011275,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":415,\"serverGrowth\":47,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"95.1.6.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"rothman-uni\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"rothman-uni\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":238740177,\"moneyMax\":5968504425,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":380,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"scripts/hacking/grow.js harakiri-sushi\",\"threads\":73,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-55508.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":194455156,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"48.2.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":813677611,\"moneyMax\":20341940275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":731,\"serverGrowth\":80,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"76.8.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"summit-uni\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"summit-uni\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":241374129,\"moneyMax\":6034353225,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":445,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"joesguns\\\"]\",\"title\":\"scripts/hacking/grow.js joesguns\",\"threads\":18,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"57.5.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":449377570,\"moneyMax\":11234439250,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":585,\"serverGrowth\":66,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"71.2.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"catalyst\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"catalyst\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":338297518,\"moneyMax\":8457437950,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":400,\"serverGrowth\":44,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"ramUsage\":1.75,\"server\":\"catalyst\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"scripts/hacking/grow.js sigma-cosmetics\",\"threads\":9,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"44.0.9.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"the-hub\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"the-hub\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":186395250,\"moneyMax\":4659881250,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":285,\"serverGrowth\":46,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"ramUsage\":1.75,\"server\":\"the-hub\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"scripts/hacking/grow.js sigma-cosmetics\",\"threads\":4,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"53.1.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":224173417,\"moneyMax\":5604335425,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":303,\"serverGrowth\":57,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"2.4.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"netlink\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"netlink\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":376,\"serverGrowth\":74,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"ramUsage\":1.75,\"server\":\"netlink\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"joesguns\\\"]\",\"title\":\"scripts/hacking/grow.js joesguns\",\"threads\":18,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-741432.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[111,[1,2,3,4,6,7,8,11,12,15]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"69.5.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":76057968,\"moneyMax\":1901449200,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":266,\"serverGrowth\":45,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"49.6.5.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"n00dles\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"n00dles\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"ramUsage\":1.75,\"server\":\"n00dles\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"scripts/hacking/grow.js sigma-cosmetics\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"47.5.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"foodnstuff\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"foodnstuff\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":3.024,\"minDifficulty\":3,\"moneyAvailable\":2034667.5682921994,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"scripts/hacking/grow.js sigma-cosmetics\",\"threads\":9,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"91.9.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"sigma-cosmetics\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":7.726,\"minDifficulty\":3,\"moneyAvailable\":2642845.74485087,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"scripts/hacking/grow.js sigma-cosmetics\",\"threads\":9,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"87.1.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"joesguns\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"joesguns\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":7.777999999999897,\"minDifficulty\":5,\"moneyAvailable\":37664325.01763674,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"scripts/hacking/grow.js sigma-cosmetics\",\"threads\":9,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"31.0.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"zer0\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"zer0\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.810000000000002,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"nectar-net\\\"]\",\"title\":\"scripts/hacking/grow.js nectar-net\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"joesguns\\\"]\",\"title\":\"scripts/hacking/grow.js joesguns\",\"threads\":16,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"24.3.2.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"nectar-net\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"nectar-net\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":29119799.498098552,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"scripts/hacking/grow.js sigma-cosmetics\",\"threads\":9,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"76.2.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"neo-net\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"neo-net\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"computek\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"scripts/hacking/grow.js sigma-cosmetics\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"joesguns\\\"]\",\"title\":\"scripts/hacking/grow.js joesguns\",\"threads\":17,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"26.1.5.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"silver-helix\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"silver-helix\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"zer0\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"scripts/hacking/grow.js harakiri-sushi\",\"threads\":36,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"98.3.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"hong-fang-tea\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"hong-fang-tea\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":10.10799999999999,\"minDifficulty\":5,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"scripts/hacking/grow.js sigma-cosmetics\",\"threads\":9,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"7.4.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"harakiri-sushi\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"harakiri-sushi\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":50912735.257875726,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"scripts/hacking/grow.js sigma-cosmetics\",\"threads\":9,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"95.4.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"phantasy\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"phantasy\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"ramUsage\":1.75,\"server\":\"phantasy\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"joesguns\\\"]\",\"title\":\"scripts/hacking/grow.js joesguns\",\"threads\":18,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"54.1.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"max-hardware\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"max-hardware\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"joesguns\\\"]\",\"title\":\"scripts/hacking/grow.js joesguns\",\"threads\":18,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-149047-NiteSec.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"01101011010010011111101000011100\",\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"40.7.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"omega-net\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"omega-net\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":27,\"hackDifficulty\":27,\"minDifficulty\":9,\"moneyAvailable\":63950834,\"moneyMax\":1598770850,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":188,\"serverGrowth\":33,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"scripts/hacking/grow.js sigma-cosmetics\",\"threads\":18,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"15.2.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":53155022,\"moneyMax\":1328875550,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":243,\"serverGrowth\":30,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"81.8.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"iron-gym\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"iron-gym\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.810000000000002,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"nectar-net\\\"]\",\"title\":\"scripts/hacking/grow.js nectar-net\",\"threads\":18,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-367378.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[7,[[1,3],[5,6],[2,4],[4,5],[2,3],[0,6]]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"31.1.8.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"millenium-fitness\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"millenium-fitness\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":525,\"serverGrowth\":28,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.810000000000002,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"nectar-net\\\"]\",\"title\":\"scripts/hacking/grow.js nectar-net\",\"threads\":36,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"26.2.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1097,\"serverGrowth\":54,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"8.1.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":722,\"serverGrowth\":47,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"53.8.2.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":516,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"58.2.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"I.I.I.I\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"I.I.I.I\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"computek\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":358,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"scripts/hacking/grow.js sigma-cosmetics\",\"threads\":9,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"28.4.3.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"avmnite-02h\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"avmnite-02h\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":215,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"joesguns\\\"]\",\"title\":\"scripts/hacking/grow.js joesguns\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"scripts/hacking/grow.js harakiri-sushi\",\"threads\":32,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"84.4.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":511,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"83.5.5.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"CSEC\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"CSEC\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":54,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"ramUsage\":1.75,\"server\":\"CSEC\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"scripts/hacking/grow.js sigma-cosmetics\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"69.8.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"40.2.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"39.2.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":8001,\"favor\":24.9826,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":20001,\"favor\":0.002,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":105.2516,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":10927.115027796059}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":86.4589,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":17866.16014078401}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Chongqing\",\"playerReputation\":37561.05485130788}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":13.4391,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":20.5415,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":5752.279029423212}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":35.4934,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":6589.702021873252}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":12341.538150388747,\"lastPrice\":12339.24399836675,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.43,\"b\":false,\"otlkMag\":18.396732021091164,\"otlkMagForecast\":30.966599596435305,\"cap\":125339131,\"spreadPerc\":0.4,\"shareTxForMovement\":61466,\"shareTxUntilMovement\":61466,\"totalShares\":113600000,\"maxShares\":22700000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":41827.616098674145,\"lastPrice\":41818.75612612714,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.49,\"b\":false,\"otlkMag\":19.654649070073265,\"otlkMagForecast\":31.639228757529434,\"cap\":737928834,\"spreadPerc\":0.1,\"shareTxForMovement\":81907,\"shareTxUntilMovement\":81907,\"totalShares\":74300000,\"maxShares\":14900000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":26133.11942501363,\"lastPrice\":26141.819984158923,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":14.492856207602431,\"otlkMagForecast\":64.74128493773371,\"cap\":79669236,\"spreadPerc\":0.4,\"shareTxForMovement\":31256,\"shareTxUntilMovement\":31256,\"totalShares\":87400000,\"maxShares\":17500000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":20373.178525476906,\"lastPrice\":20366.573957304456,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":11.068987964882655,\"otlkMagForecast\":60.12244911058431,\"cap\":230482419,\"spreadPerc\":0.3,\"shareTxForMovement\":48643,\"shareTxUntilMovement\":48643,\"totalShares\":84200000,\"maxShares\":16800000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":18874.581898866276,\"lastPrice\":18869.52344484416,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":12.013200395641265,\"otlkMagForecast\":61.4460834589977,\"cap\":848505658,\"spreadPerc\":0.5,\"shareTxForMovement\":35635,\"shareTxUntilMovement\":35635,\"totalShares\":50500000,\"maxShares\":10100000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":61071.294087257826,\"lastPrice\":61043.58038908643,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.05,\"b\":false,\"otlkMag\":16.47476508547463,\"otlkMagForecast\":30.507213081136214,\"cap\":483492639,\"spreadPerc\":0.3,\"shareTxForMovement\":69077,\"shareTxUntilMovement\":69077,\"totalShares\":26500000,\"maxShares\":5300000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":28304.44507290073,\"lastPrice\":28294.16866322299,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":true,\"otlkMag\":7.494313828025816,\"otlkMagForecast\":58.7443479708117,\"cap\":417904946,\"spreadPerc\":0.6,\"shareTxForMovement\":81515,\"shareTxUntilMovement\":81515,\"totalShares\":85200000,\"maxShares\":17000000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":69155.9746120937,\"lastPrice\":69193.94968466541,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.27,\"b\":false,\"otlkMag\":13.74160986826082,\"otlkMagForecast\":36.39104003169812,\"cap\":477848117,\"spreadPerc\":0.8,\"shareTxForMovement\":69046,\"shareTxUntilMovement\":16874,\"totalShares\":68500000,\"maxShares\":13700000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":27548.851237078492,\"lastPrice\":27558.976063930037,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":true,\"otlkMag\":7.492412250668163,\"otlkMagForecast\":57.91873173496878,\"cap\":100476701,\"spreadPerc\":0.3,\"shareTxForMovement\":64143,\"shareTxUntilMovement\":64143,\"totalShares\":55300000,\"maxShares\":11100000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":9780.40652756476,\"lastPrice\":9783.239855834678,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":8.199718395038072,\"otlkMagForecast\":58.50612724951333,\"cap\":155853909,\"spreadPerc\":0.7,\"shareTxForMovement\":100292,\"shareTxUntilMovement\":100292,\"totalShares\":62100000,\"maxShares\":12400000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":11998.212744568073,\"lastPrice\":12001.221658306002,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":8.959560869574005,\"otlkMagForecast\":58.43934179699245,\"cap\":215171655,\"spreadPerc\":0.4,\"shareTxForMovement\":84564,\"shareTxUntilMovement\":84564,\"totalShares\":78000000,\"maxShares\":15600000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":11901.74828330753,\"lastPrice\":11905.71075955031,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":6.565810728467352,\"otlkMagForecast\":43.89441633445852,\"cap\":286892670,\"spreadPerc\":0.6,\"shareTxForMovement\":105870,\"shareTxUntilMovement\":105870,\"totalShares\":73300000,\"maxShares\":14700000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":9592.616116200254,\"lastPrice\":9589.755090282348,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":8.456545288377772,\"otlkMagForecast\":43.72359816981634,\"cap\":196256776,\"spreadPerc\":1,\"shareTxForMovement\":98325,\"shareTxUntilMovement\":98325,\"totalShares\":58600000,\"maxShares\":11700000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":33999.411861535875,\"lastPrice\":33990.88762122565,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":9.856255207349005,\"otlkMagForecast\":37.94623728063859,\"cap\":176758854,\"spreadPerc\":0.5,\"shareTxForMovement\":60625,\"shareTxUntilMovement\":60625,\"totalShares\":31700000,\"maxShares\":6300000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":16913.606387318905,\"lastPrice\":16917.77485328979,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":7.2287649035701,\"otlkMagForecast\":56.01100486325115,\"cap\":333067631,\"spreadPerc\":0.5,\"shareTxForMovement\":101494,\"shareTxUntilMovement\":101494,\"totalShares\":45600000,\"maxShares\":9100000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":11989.268014903218,\"lastPrice\":11985.536757845655,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":5.086869429231037,\"otlkMagForecast\":53.077437066972905,\"cap\":49534230,\"spreadPerc\":0.6,\"shareTxForMovement\":107791,\"shareTxUntilMovement\":107791,\"totalShares\":54000000,\"maxShares\":10800000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":20368.435743285187,\"lastPrice\":20361.920724874126,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":8.22952004099613,\"otlkMagForecast\":58.19512957258925,\"cap\":320068072,\"spreadPerc\":0.4,\"shareTxForMovement\":57270,\"shareTxUntilMovement\":57270,\"totalShares\":29100000,\"maxShares\":5800000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":16469.818614820873,\"lastPrice\":16465.831700667764,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":9.1516001941852,\"otlkMagForecast\":39.437350292237454,\"cap\":365864526,\"spreadPerc\":1,\"shareTxForMovement\":105449,\"shareTxUntilMovement\":105449,\"totalShares\":40100000,\"maxShares\":8000000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":26540.22218844394,\"lastPrice\":26531.73307134282,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":2.500640566079553,\"otlkMagForecast\":54.30805234157902,\"cap\":462642429,\"spreadPerc\":0.5,\"shareTxForMovement\":84907,\"shareTxUntilMovement\":84907,\"totalShares\":25900000,\"maxShares\":5200000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":3431.9179971214503,\"lastPrice\":3435.6277253623994,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.5,\"b\":false,\"otlkMag\":6.99739907821313,\"otlkMagForecast\":41.29631130373391,\"cap\":120298507,\"spreadPerc\":1.2,\"shareTxForMovement\":18219,\"shareTxUntilMovement\":18219,\"totalShares\":91200000,\"maxShares\":18200000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":6246.855872832853,\"lastPrice\":6243.670302818488,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.18,\"b\":false,\"otlkMag\":6.596675484714933,\"otlkMagForecast\":44.128692691699214,\"cap\":93441596,\"spreadPerc\":0.6,\"shareTxForMovement\":60691,\"shareTxUntilMovement\":60691,\"totalShares\":58700000,\"maxShares\":11700000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":4307.924038888365,\"lastPrice\":4309.11614028326,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":2.31182695565701,\"otlkMagForecast\":50.65225243726561,\"cap\":86563009,\"spreadPerc\":1,\"shareTxForMovement\":84804,\"shareTxUntilMovement\":84804,\"totalShares\":44100000,\"maxShares\":8800000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":2725.3746272452,\"lastPrice\":2723.3022267169686,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.76,\"b\":true,\"otlkMag\":7.684703603551213,\"otlkMagForecast\":58.44284298627845,\"cap\":155009813,\"spreadPerc\":1.5,\"shareTxForMovement\":48851,\"shareTxUntilMovement\":48851,\"totalShares\":31300000,\"maxShares\":6300000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":10371.108322280645,\"lastPrice\":10363.535464028146,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.69,\"b\":true,\"otlkMag\":6.9562932437172025,\"otlkMagForecast\":53.966847680924175,\"cap\":35446794,\"spreadPerc\":0.5,\"shareTxForMovement\":37134,\"shareTxUntilMovement\":37134,\"totalShares\":34200000,\"maxShares\":6800000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":4996.5383934968895,\"lastPrice\":4994.530027950538,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.93,\"b\":true,\"otlkMag\":1.8911509514276252,\"otlkMagForecast\":54.44100826235501,\"cap\":29663262,\"spreadPerc\":1.1,\"shareTxForMovement\":111809,\"shareTxUntilMovement\":111809,\"totalShares\":31000000,\"maxShares\":6200000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":866.3758729813941,\"lastPrice\":867.6083176564998,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.29,\"b\":false,\"otlkMag\":9.277885939411163,\"otlkMagForecast\":39.71130245044992,\"cap\":66138352,\"spreadPerc\":1.4,\"shareTxForMovement\":51562,\"shareTxUntilMovement\":51562,\"totalShares\":15000000,\"maxShares\":3000000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":6763.109120962527,\"lastPrice\":6759.981641405944,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.07,\"b\":false,\"otlkMag\":5.714735068142172,\"otlkMagForecast\":45.7729888599294,\"cap\":157744257,\"spreadPerc\":0.7,\"shareTxForMovement\":50602,\"shareTxUntilMovement\":50602,\"totalShares\":7500000,\"maxShares\":1500000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":2994.738245852894,\"lastPrice\":2993.767412908067,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":5.227776573767284,\"otlkMagForecast\":53.3485854650813,\"cap\":4818633,\"spreadPerc\":0.6,\"shareTxForMovement\":103491,\"shareTxUntilMovement\":103491,\"totalShares\":15200000,\"maxShares\":3000000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2385.456124534001,\"lastPrice\":2383.2097408078566,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.18,\"b\":true,\"otlkMag\":6.00250955775443,\"otlkMagForecast\":52.27225825345377,\"cap\":66671100,\"spreadPerc\":0.9,\"shareTxForMovement\":68826,\"shareTxUntilMovement\":68826,\"totalShares\":10300000,\"maxShares\":2100000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":271.6595587562974,\"lastPrice\":271.31817954652234,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.91,\"b\":false,\"otlkMag\":6.183093674897193,\"otlkMagForecast\":45.11809175693965,\"cap\":6609382,\"spreadPerc\":0.9,\"shareTxForMovement\":31816,\"shareTxUntilMovement\":31816,\"totalShares\":31800000,\"maxShares\":6400000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1376.569176398114,\"lastPrice\":1377.2893689015295,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.21,\"b\":false,\"otlkMag\":12.80937805812642,\"otlkMagForecast\":33.14438597546242,\"cap\":16981774,\"spreadPerc\":0.7,\"shareTxForMovement\":70555,\"shareTxUntilMovement\":70555,\"totalShares\":113300000,\"maxShares\":22700000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":24446.22033268067,\"lastPrice\":24454.14786772335,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":7.54292651696522,\"otlkMagForecast\":57.700877781884415,\"cap\":68855501,\"spreadPerc\":0.9,\"shareTxForMovement\":138673,\"shareTxUntilMovement\":138673,\"totalShares\":23000000,\"maxShares\":4600000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":33060.01618598336,\"lastPrice\":33069.87937459079,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":9.685793713239795,\"otlkMagForecast\":60.64968374004296,\"cap\":488849679,\"spreadPerc\":0.3,\"shareTxForMovement\":112498,\"shareTxUntilMovement\":112498,\"totalShares\":21500000,\"maxShares\":4300000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":13,\"lastUpdate\":1689212562323,\"ticksUntilCycle\":3}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-5,\"y\":3,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"32","AllGangsSave":"","LastExportBonus":"1689196818917","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}