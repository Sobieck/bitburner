{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":313,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":7420595.769599094,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.28,\"hacking_speed\":1.28,\"hacking_money\":1.28,\"hacking_grow\":1.5104,\"hacking\":1.28,\"strength\":1.28,\"defense\":1.28,\"dexterity\":1.28,\"agility\":1.28,\"charisma\":1.3824,\"hacking_exp\":1.28,\"strength_exp\":1.28,\"defense_exp\":1.28,\"dexterity_exp\":1.28,\"agility_exp\":1.28,\"charisma_exp\":1.28,\"company_rep\":1.28,\"faction_rep\":1.28,\"crime_money\":1.28,\"crime_success\":1.28,\"hacknet_node_money\":1.28,\"hacknet_node_purchase_cost\":0.78125,\"hacknet_node_ram_cost\":0.78125,\"hacknet_node_core_cost\":0.78125,\"hacknet_node_level_cost\":0.78125,\"work_money\":1.3824,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":3,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"NiteSec\",\"Chongqing\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[],\"has4SData\":false,\"has4SDataTixApi\":true,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{\"Bachman & Associates\":\"Junior Software Engineer\",\"OmniTek Incorporated\":\"Junior Software Engineer\",\"Blade Industries\":\"Software Engineering Intern\",\"NWO\":\"Software Engineering Intern\",\"ECorp\":\"Software Engineering Intern\"},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"ECorp\",\"money\":715.9079699106514,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":389425125.82234,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":106197076074.19366,\"total\":-363.09203008934855,\"work\":0,\"servers\":-101580901563.10802,\"other\":-5005600000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":389425125.82234,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":106197076074.19366,\"total\":-363.09203008934855,\"work\":0,\"servers\":-101580901563.10802,\"other\":-5005600000,\"augmentations\":0}},\"playtimeSinceLastAug\":105158800,\"playtimeSinceLastBitnode\":105158800,\"lastAugReset\":1690131857373,\"lastNodeReset\":1690131857373,\"purchasedServers\":[\"CLOUD-000\"],\"scriptProdSinceLastAug\":460196520441.9723,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,3],[4,3],[8,2],[3,1]]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1686525459069},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1686525759083},{\"ID\":\"WORKOUT\",\"unlockedOn\":1686528279088},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1686532892094},{\"ID\":\"TRAVEL\",\"unlockedOn\":1686563653859},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1686567073861},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1686654552271},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1686667992269},{\"ID\":\"NITESEC\",\"unlockedOn\":1686679931301},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1686687177835},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1686697617844},{\"ID\":\"FROZE\",\"unlockedOn\":1686704316676},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1686746667786},{\"ID\":\"TOR\",\"unlockedOn\":1686746787787},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1686746893212},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1686762613218},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1686764833216},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1686767653216},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1686860173219},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1686862933218},{\"ID\":\"4S\",\"unlockedOn\":1686863833212},{\"ID\":\"DONATION\",\"unlockedOn\":1687005871880},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1687008391895},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1687017151898},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1687131964898},{\"ID\":\"SF1.1\",\"unlockedOn\":1687262446639},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1688063566853},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1688088406853},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1688429201871},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1688468232306},{\"ID\":\"SF4.1\",\"unlockedOn\":1688489952298},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1688562948355},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1688694948374},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1688720088407},{\"ID\":\"SF8.1\",\"unlockedOn\":1689334420195},{\"ID\":\"CORPORATION\",\"unlockedOn\":1689335320195},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1690127753231},{\"ID\":\"SF3.1\",\"unlockedOn\":1690131893170}],\"terminalCommandHistory\":[\"nano data/corporation.txt \",\"nano test.js \",\"run test.js \",\"nano data/corporation.txt \",\"free\",\"nano data/corporation.txt \",\"nano data/stockMarketReserveMoney.txt \",\"nano data/batchQueue.txt \",\"nano test.js \",\"run test.js \",\"nano data/corporation.txt \",\"run test.js \",\"nano data/corporation.txt \",\"run test.js \",\"gome\",\"home\",\"nano data/corporation.txt \",\"home\",\"nano test.js \",\"run test.js \",\"nano data/corporation.txt \",\"run test.js \",\"nano thing.txt \",\"free\",\"run scripts/coordinator.js \",\"nano data/ramToReserveOnHome.txt \",\"mem scripts/singularity/do-work.js \",\"nano data/ramToReserveOnHome.txt \",\"nano scripts/singularity/do-work\",\"nano scripts/singularity/do-work.js\",\"mem scripts/singularity/do-work\",\"mem scripts/singularity/do-work.js\",\"nano data/ramToReserveOnHome.txt \",\"mem scripts/singularity/do-job.js \",\"nano data/ramToReserveOnHome.txt \",\"mem scripts/stock/get-stock-quotes.js \",\"nano scripts/ramt\",\"nano data/ramToReserveOnHome.txt \",\"mem scripts/stock/invest-in-stocks.js \",\"nano data/latestQuotes.txt \",\"connect n00dles \",\"nano hack.js\",\"run hack.js \",\"rm hack.js \",\"home\",\"ls\",\"ls scripts/tools/ \",\"free\",\"nano data/stockMarketReserveMoney.txt \",\"nano data/latestQuotes.txt \"],\"lastUpdate\":1690237017018,\"lastSave\":1690216400549,\"totalPlaytime\":3715839800,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":true,\"cyclesWorked\":300799,\"factionWorkType\":\"hacking\",\"factionName\":\"NiteSec\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"40a77882039c0\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"43.3.1.6\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"corporation-management-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"Formulas.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/tools/delete-all-js.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    \\r\\n    const doNoDeleteFolders = [];\\r\\n\\r\\n    for (const textFile of ns.ls(\\\"home\\\", \\\".js\\\")) {\\r\\n        if(!doNoDeleteFolders.find(x => textFile.startsWith(x))){\\r\\n            ns.rm(textFile);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"scripts/tools/delete-all-js.js\",\"server\":\"home\"}}],[\"scripts/contracts/do.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const solverRegistry = [\\r\\n        new LzDecompression2Handler(),\\r\\n        new AlgorithmicStockTrading4Handler(),\\r\\n        new AlgorithmicStockTrading3Handler(),\\r\\n        new AlgorithmicStockTrading1Handler(),\\r\\n        new AlgorithmicStockTrading2Handler(),\\r\\n        new SpiralizeMatrixHandler(),\\r\\n        new Encryption1Handler(),\\r\\n        new Encryption2Handler(),\\r\\n    ]\\r\\n\\r\\n    const contracts = JSON.parse(ns.read(thisRoundsContractsFileName));\\r\\n    contracts\\r\\n        .forEach(contract => {\\r\\n            if (contract.attemptsLeft === 10 || contract.attemptsLeft === 5) {\\r\\n                const solver = solverRegistry.find(x => x.type === contract.type);\\r\\n                if (solver) {\\r\\n                    const result = solver.solve(contract.input);\\r\\n                    const success = ns.codingcontract.attempt(result, contract.name, contract.server);\\r\\n                    if (success === \\\"\\\") {\\r\\n                        const failuresContractsFileName = `contracts/failure/${contract.server}-${contract.name}-${contract.type.replaceAll(\\\" \\\", \\\"\\\")}.txt`;\\r\\n\\r\\n                        const saveThis = { contract, wrongResult: result };\\r\\n\\r\\n                        ns.write(failuresContractsFileName, JSON.stringify(saveThis), \\\"W\\\");\\r\\n\\r\\n                        ns.alert(`${contract.name} on ${contract.server} had a problem solving. You need to figure this out. Type: ${contract.type}`);\\r\\n                    } else {\\r\\n                        ns.toast(`Contract completed: ${success} Type: ${contract.type}`, \\\"success\\\", null);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        });\\r\\n}\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\";\\r\\n\\r\\nclass LzDecompression2Handler {\\r\\n    type = 'Compression II: LZ Decompression';\\r\\n\\r\\n    solve(input) {\\r\\n        return this.lzDecompression(input);\\r\\n    }\\r\\n\\r\\n    /// all need to be worked on in tests. These are just copies.\\r\\n    lzDecompression(stringToDecode) {\\r\\n        let decompressedString = '';\\r\\n        let startOfNextChunk = 0\\r\\n        let nextSectionCompressed = false;\\r\\n\\r\\n\\r\\n        while (startOfNextChunk < stringToDecode.length) {\\r\\n            const chunkLength = Number(stringToDecode[startOfNextChunk]);\\r\\n\\r\\n\\r\\n            if (chunkLength === 0) {\\r\\n                startOfNextChunk++;\\r\\n                nextSectionCompressed = !nextSectionCompressed;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (nextSectionCompressed) {\\r\\n                const nextCharacterInEncoded = parseInt(stringToDecode[startOfNextChunk + 1]);\\r\\n\\r\\n                const placesBack = nextCharacterInEncoded;\\r\\n                const startText = decompressedString.length - placesBack;\\r\\n                const endOfText = startText + chunkLength;\\r\\n\\r\\n                if (chunkLength <= nextCharacterInEncoded) {\\r\\n                    decompressedString += decompressedString.slice(startText, endOfText);\\r\\n                } else {\\r\\n                    let nextChunk = \\\"\\\";\\r\\n                    const partialChunk = decompressedString.slice(startText, endOfText);\\r\\n\\r\\n                    while (nextChunk.length < chunkLength) {\\r\\n                        if (nextChunk.length + partialChunk.length > chunkLength) {\\r\\n                            const howMuchLeftInChunk = chunkLength - nextChunk.length;\\r\\n                            nextChunk += partialChunk.slice(0, howMuchLeftInChunk)\\r\\n                        } else {\\r\\n                            nextChunk += partialChunk;\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    decompressedString += nextChunk;\\r\\n                }\\r\\n\\r\\n                startOfNextChunk += 2;\\r\\n                nextSectionCompressed = false;\\r\\n            } else {\\r\\n                const startText = startOfNextChunk + 1;\\r\\n                const endOfText = startText + chunkLength;\\r\\n                decompressedString += stringToDecode.slice(startText, endOfText);\\r\\n                startOfNextChunk = endOfText;\\r\\n                nextSectionCompressed = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        return decompressedString;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading1Handler {\\r\\n    type = 'Algorithmic Stock Trader I';\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = 1;\\r\\n        const stockPricesByDay = input;\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return new AlgorithmicStockTrading4Handler().tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading2Handler {\\r\\n    type = 'Algorithmic Stock Trader II';\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = input.length;\\r\\n        const stockPricesByDay = input;\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return new AlgorithmicStockTrading4Handler().tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading3Handler {\\r\\n    type = 'Algorithmic Stock Trader III';\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = 2;\\r\\n        const stockPricesByDay = input;\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return new AlgorithmicStockTrading4Handler().tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading4Handler {\\r\\n    type = 'Algorithmic Stock Trader IV';\\r\\n\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = input[0];\\r\\n        const stockPricesByDay = input[1];\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return this.tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n\\r\\n    tradeStock(maxNumberOfTrades, stockPricesByDay) {\\r\\n        if (maxNumberOfTrades === 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        let profitsPerTransaction = []\\r\\n\\r\\n        for (let i = stockPricesByDay.length - 1; i >= 1; i--) {\\r\\n            const priceToSeeIfHasNoVolitility = stockPricesByDay[i];\\r\\n\\r\\n            const yesterdaysPrice = stockPricesByDay[i - 1]\\r\\n            const tomorrowsPrice = stockPricesByDay[i + 1]\\r\\n\\r\\n            if (\\r\\n                (yesterdaysPrice <= priceToSeeIfHasNoVolitility && priceToSeeIfHasNoVolitility <= tomorrowsPrice) || // rising prices filter\\r\\n                (!tomorrowsPrice && yesterdaysPrice >= priceToSeeIfHasNoVolitility) || // end price\\r\\n                (yesterdaysPrice >= priceToSeeIfHasNoVolitility && priceToSeeIfHasNoVolitility >= tomorrowsPrice)) { // falling price filter\\r\\n                stockPricesByDay.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < stockPricesByDay.length; i++) {\\r\\n            const price = stockPricesByDay[i];\\r\\n            const potentialBuyPrice = stockPricesByDay[i - 1];\\r\\n            let potentialProfit = 0;\\r\\n\\r\\n            if (potentialBuyPrice) {\\r\\n                potentialProfit = price - potentialBuyPrice;\\r\\n            }\\r\\n\\r\\n            if (potentialProfit < 0) {\\r\\n                potentialProfit = 0;\\r\\n            }\\r\\n\\r\\n\\r\\n            profitsPerTransaction.push({ price, potentialProfit });\\r\\n        }\\r\\n\\r\\n        if (maxNumberOfTrades >= profitsPerTransaction.filter(x => x.potentialProfit > 0).length) {\\r\\n            return profitsPerTransaction\\r\\n                .reduce((acc, x) => acc + x.potentialProfit, 0);\\r\\n        }\\r\\n\\r\\n        const minProfit = Math.min(...profitsPerTransaction.filter(x => x.potentialProfit !== 0).map(x => x.potentialProfit));\\r\\n        const countOfMinProfits = profitsPerTransaction.filter(x => x.potentialProfit === minProfit).length;\\r\\n        const maxPrice = Math.max(...stockPricesByDay);\\r\\n        const arraysToWorkWith = [];\\r\\n\\r\\n        for (let i = 0; i < profitsPerTransaction.length; i++) {\\r\\n            const profitPerTranaction = profitsPerTransaction[i];\\r\\n\\r\\n            if (profitPerTranaction.potentialProfit === minProfit) {\\r\\n\\r\\n                const copyOfProfitsPerTransaction = profitsPerTransaction.map(x => x)\\r\\n                if (profitPerTranaction.price === maxPrice) {\\r\\n                    copyOfProfitsPerTransaction.splice(i - 1, 1);\\r\\n                } else {\\r\\n                    copyOfProfitsPerTransaction.splice(i, 1); // if there is a bigger price in the future, splice sell price. \\r\\n                }\\r\\n\\r\\n                arraysToWorkWith.push(copyOfProfitsPerTransaction.map(x => x.price));\\r\\n            }\\r\\n\\r\\n            if (arraysToWorkWith.length === countOfMinProfits) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        const potentialProfitsForAllTrades = []\\r\\n        for (const newArrayOfPrices of arraysToWorkWith) {\\r\\n            potentialProfitsForAllTrades.push(this.tradeStock(maxNumberOfTrades, newArrayOfPrices))\\r\\n        }\\r\\n\\r\\n        return Math.max(...potentialProfitsForAllTrades);\\r\\n\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass SpiralizeMatrixHandler {\\r\\n    type = \\\"Spiralize Matrix\\\";\\r\\n\\r\\n    solve(matrix) {\\r\\n        return this.solveRecursively(JSON.parse(JSON.stringify(matrix)));\\r\\n    }\\r\\n\\r\\n    solveRecursively(matrix, spiralOrderResult = []) {\\r\\n\\r\\n        if (matrix.length === 0) {\\r\\n            return spiralOrderResult;\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < matrix.length; i++) {\\r\\n            if (i === 0 || i === matrix.length - 1) {\\r\\n                let rowToEmpty = matrix[i];\\r\\n\\r\\n                if (i === matrix.length - 1 && i !== 0) {\\r\\n                    rowToEmpty.reverse()\\r\\n                }\\r\\n\\r\\n                for (let x = 0; x < rowToEmpty.length; x++) {\\r\\n                    const number = rowToEmpty[x];\\r\\n                    \\r\\n                    spiralOrderResult.push(number);\\r\\n                }\\r\\n\\r\\n                rowToEmpty.length = 0\\r\\n            } else {\\r\\n                let rowBeingUsed = matrix[i];\\r\\n                const number = rowBeingUsed.pop()\\r\\n\\r\\n                if(number){\\r\\n                    spiralOrderResult.push(number);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        for (let i = matrix.length - 1; i > -1; i--) {\\r\\n            if (matrix[i].length === 0) {\\r\\n                matrix.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (let i = matrix.length - 1; i > -1; i--) {\\r\\n            const row = matrix[i];\\r\\n            row.reverse();\\r\\n            spiralOrderResult.push(row.pop());\\r\\n            row.reverse();\\r\\n        }\\r\\n\\r\\n        return this.solveRecursively(matrix, spiralOrderResult)\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Encryption1Handler {\\r\\n    type = 'Encryption I: Caesar Cipher';\\r\\n\\r\\n    solve([string, shift]) {\\r\\n\\r\\n        let returnString = \\\"\\\";\\r\\n\\r\\n        if (string) {\\r\\n            for (const character of string) {\\r\\n                if (character === \\\" \\\") {\\r\\n                    returnString += \\\" \\\";\\r\\n                }\\r\\n                else {\\r\\n                    const charCode = character.charCodeAt(0);\\r\\n\\r\\n                    if (charCode) {\\r\\n                        let newCharCode = charCode - shift;\\r\\n\\r\\n                        if (newCharCode < 65) {\\r\\n                            const amountLessThan65 = 65 - newCharCode;\\r\\n                            newCharCode = 91 - amountLessThan65;\\r\\n                        }\\r\\n\\r\\n                        returnString += String.fromCharCode(newCharCode);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return returnString;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass Encryption2Handler {\\r\\n    type = 'Encryption II: Vigenère Cipher';\\r\\n\\r\\n    solve([plainText, key]) {\\r\\n\\r\\n        let encryptedText = \\\"\\\";\\r\\n\\r\\n        if(plainText){\\r\\n            let keyIndex = 0;\\r\\n\\r\\n            for (let i = 0; i < plainText.length; i++) {\\r\\n                const plainTextCharacter = plainText[i];\\r\\n\\r\\n                if(plainTextCharacter === \\\" \\\"){\\r\\n                    encryptedText += \\\" \\\";\\r\\n                } else {\\r\\n                    const keyCharCode = key[keyIndex].charCodeAt(0);\\r\\n                    const shift = keyCharCode - 65;\\r\\n\\r\\n                    const plainTextCode = plainTextCharacter.charCodeAt(0);\\r\\n                    let encryptedCharacterCode = plainTextCode + shift;\\r\\n\\r\\n                    if (encryptedCharacterCode > 90) {\\r\\n                        const amountMoreThan91 = encryptedCharacterCode - 91;\\r\\n                        encryptedCharacterCode = amountMoreThan91 + 65;\\r\\n                    }\\r\\n\\r\\n                    encryptedText += String.fromCharCode(encryptedCharacterCode);\\r\\n                }\\r\\n\\r\\n                \\r\\n                keyIndex++;\\r\\n                if(keyIndex >= key.length){\\r\\n                    keyIndex = 0;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return encryptedText;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/contracts/do.js\",\"server\":\"home\"}}],[\"scripts/contracts/get.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// let savedContractsFileNameForHuman;\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \\r\\n\\r\\nexport async function main(ns) {\\r\\n    const allContracts = [];\\r\\n\\r\\n    JSON\\r\\n        .parse(ns.read('../../data/enviroment.txt'))\\r\\n        .map(server => {\\r\\n            const hostName = server.name;\\r\\n            ns\\r\\n                .ls(hostName)\\r\\n                .filter(file => file.endsWith('.cct'))\\r\\n                .map(contract => {\\r\\n                    const cont = new Contract(\\r\\n                        hostName,\\r\\n                        contract,\\r\\n                        ns.codingcontract.getContractType(contract, hostName),\\r\\n                        ns.codingcontract.getNumTriesRemaining(contract, hostName)\\r\\n                    );\\r\\n\\r\\n                    allContracts.push(cont);\\r\\n                });\\r\\n        });\\r\\n    \\r\\n\\r\\n    ns.rm(thisRoundsContractsFileName);\\r\\n    ns.write(thisRoundsContractsFileName, JSON.stringify(allContracts), \\\"W\\\");\\r\\n}\\r\\n\\r\\nclass Contract {\\r\\n    constructor(server, name, type, attemptsLeft, input, description) {\\r\\n        this.server = server;\\r\\n        this.name = name;\\r\\n        this.type = type;\\r\\n        this.attemptsLeft = attemptsLeft;\\r\\n        this.input = input;\\r\\n        this.description = description;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/contracts/get.js\",\"server\":\"home\"}}],[\"scripts/contracts/populate-description.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const contracts = JSON.parse(ns.read(thisRoundsContractsFileName))\\r\\n\\r\\n    for (const contract of contracts) {\\r\\n        const hostName = contract.server;\\r\\n        const contractName = contract.name;\\r\\n        contract.description = ns.codingcontract.getDescription(contractName, hostName);\\r\\n    }\\r\\n\\r\\n    ns.rm(thisRoundsContractsFileName);\\r\\n    ns.write(thisRoundsContractsFileName, JSON.stringify(contracts), \\\"W\\\");\\r\\n}\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \",\"filename\":\"scripts/contracts/populate-description.js\",\"server\":\"home\"}}],[\"scripts/contracts/populate-input.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const contracts = JSON.parse(ns.read(thisRoundsContractsFileName))\\r\\n\\r\\n    for (const contract of contracts) {\\r\\n        const hostName = contract.server;\\r\\n        const contractName = contract.name;\\r\\n        contract.input = ns.codingcontract.getData(contractName, hostName);\\r\\n    }\\r\\n\\r\\n    ns.rm(thisRoundsContractsFileName);\\r\\n    ns.write(thisRoundsContractsFileName, JSON.stringify(contracts), \\\"W\\\");\\r\\n}\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \",\"filename\":\"scripts/contracts/populate-input.js\",\"server\":\"home\"}}],[\"scripts/contracts/save-contracts-for-thomas.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \\r\\nlet savedContractsFileNameForHuman;\\r\\n\\r\\nexport async function main(ns) {\\r\\n\\r\\n    let savedContracts;\\r\\n\\r\\n    const contractsFromThisRound = JSON.parse(ns.read(thisRoundsContractsFileName));\\r\\n\\r\\n    if(savedContractsFileNameForHuman){\\r\\n        savedContracts = JSON.parse(ns.read(savedContractsFileNameForHuman));\\r\\n    }\\r\\n\\r\\n    if (!savedContracts || contractsFromThisRound.length === 0 && savedContracts.length > 0){\\r\\n        const now = new Date();\\r\\n        savedContractsFileNameForHuman = `contracts/${now.toISOString()}.txt`\\r\\n    }\\r\\n\\r\\n    ns.rm(savedContractsFileNameForHuman);\\r\\n    ns.write(savedContractsFileNameForHuman, JSON.stringify(contractsFromThisRound), \\\"W\\\");\\r\\n}\",\"filename\":\"scripts/contracts/save-contracts-for-thomas.js\",\"server\":\"home\"}}],[\"scripts/corporations/start-company.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if(ns.corporation.hasCorporation()){\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if(moneyOnHome > 200_000_000_000){\\r\\n        ns.corporation.createCorporation(\\\"Gidget's Keiretsu\\\", true)\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\",\"filename\":\"scripts/corporations/start-company.js\",\"server\":\"home\"}}],[\"scripts/hacking/advanced-dispatch.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const nameOfrecordOfWhoIsBeingHacked = 'data/recordOfWhoIsBeingHacked.txt';\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\";\\r\\n\\r\\n    const hackScript = 'scripts/hacking/hack-until-worked.js';\\r\\n    const growScript = 'scripts/hacking/grow.js';\\r\\n    const weakenScript = 'scripts/hacking/weaken.js';\\r\\n\\r\\n    let memoryLimited = false;\\r\\n    if(ns.fileExists('data/ramObservations.txt') || ns.fileExists('buyOrUpgradeServerFlag.txt')){\\r\\n        memoryLimited = true;\\r\\n    }\\r\\n\\r\\n    const homeMemoryLimitations = JSON.parse(ns.read(\\\"data/ramToReserveOnHome.txt\\\"));\\r\\n\\r\\n    let batchTargets = [];\\r\\n\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        const batchQueue = JSON.parse(ns.read(batchQueuesFileName));\\r\\n        batchTargets = batchQueue.map(x => x[0]);\\r\\n    }\\r\\n\\r\\n    let recordOfWhoIsBeingHacked = new Map();\\r\\n\\r\\n    if (ns.fileExists(nameOfrecordOfWhoIsBeingHacked)) {\\r\\n        recordOfWhoIsBeingHacked = new Map(JSON.parse(ns.read(nameOfrecordOfWhoIsBeingHacked)));\\r\\n    }\\r\\n\\r\\n    for (const recordKey of recordOfWhoIsBeingHacked.keys()) {\\r\\n        const record = recordOfWhoIsBeingHacked.get(recordKey);\\r\\n        if (record.pid === 0) {\\r\\n            recordOfWhoIsBeingHacked.delete(recordKey);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n\\r\\n    const allHackedMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    let allMachinesByOrderOfValue = allHackedMachines\\r\\n        .filter(x => !x.server.purchasedByPlayer && !batchTargets.includes(x.name) && x.server.moneyMax > 0)\\r\\n        .sort((a, b) => b.server.moneyMax - a.server.moneyMax)\\r\\n        .map(x => new HackedRecord(\\r\\n            x.name,\\r\\n            x.server.moneyMax,\\r\\n            x.server.minDifficulty,\\r\\n            x.server.hackDifficulty,\\r\\n            x.server.moneyAvailable,\\r\\n        ))\\r\\n\\r\\n    if(memoryLimited){\\r\\n        allMachinesByOrderOfValue = allMachinesByOrderOfValue.slice(0, 15);\\r\\n    }\\r\\n\\r\\n    cleanProcessesAttackingBatchTarget(ns, recordOfWhoIsBeingHacked, batchTargets);\\r\\n    \\r\\n    cleanRecordOfWhoIsBeingHacked(ns, recordOfWhoIsBeingHacked);\\r\\n\\r\\n    const machinesNextInQueueToHack = getMachinesToHack(allMachinesByOrderOfValue, recordOfWhoIsBeingHacked, ns);\\r\\n\\r\\n    const hackQueue = [];\\r\\n    const growAndWeakenQueue = [];\\r\\n\\r\\n    machinesNextInQueueToHack.forEach(machineInQuestion => {\\r\\n        if (machineInQuestion.needsWeakening() || machineInQuestion.needsGrowing()) {\\r\\n            growAndWeakenQueue.push(machineInQuestion);\\r\\n        } else {\\r\\n            hackQueue.push(machineInQuestion);\\r\\n        }\\r\\n    });\\r\\n\\r\\n    const ramNeededForOneHackThread = ns.getScriptRam(hackScript);\\r\\n\\r\\n    hackQueue.forEach(target => {\\r\\n\\r\\n        let numberOfThreads = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable));\\r\\n        const ramNeeded = ramNeededForOneHackThread * numberOfThreads;\\r\\n        let machineToRunOn = getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations);\\r\\n\\r\\n        if (machineToRunOn && numberOfThreads > 0) {\\r\\n            ns.scp(hackScript, machineToRunOn.hostname);\\r\\n            const pid = ns.exec(hackScript, machineToRunOn.hostname, numberOfThreads, target.name);\\r\\n            if (pid !== 0) {\\r\\n                target.hacking();\\r\\n                target.machineRunningOn = machineToRunOn.hostname;\\r\\n                target.pid = pid;\\r\\n                recordOfWhoIsBeingHacked.set(target.name, target);\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n\\r\\n\\r\\n    const ramNeededForWeaken = ns.getScriptRam(weakenScript);\\r\\n    const ramNeededForGrow = ns.getScriptRam(growScript);\\r\\n    growAndWeakenQueue.map(target => {\\r\\n        let machineToRunOn;\\r\\n        let threadsNeeded;\\r\\n        let script;\\r\\n\\r\\n        if (target.needsGrowing()) {\\r\\n            target.growing();\\r\\n\\r\\n            script = growScript;\\r\\n            const serverToHack = getServer(ns, target.name, homeMemoryLimitations);\\r\\n            const player = ns.getPlayer();\\r\\n\\r\\n            if (ns.fileExists('Formulas.exe')) {\\r\\n                threadsNeeded = Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, 1));\\r\\n            } else {\\r\\n                threadsNeeded = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable)) * 5;\\r\\n\\r\\n                if (threadsNeeded === 0) {\\r\\n                    threadsNeeded = 5000;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            machineToRunOn = getMachineWithEnoughRam(ns, threadsNeeded * ramNeededForGrow, enviroment, homeMemoryLimitations);\\r\\n\\r\\n            if (!machineToRunOn) {\\r\\n                [threadsNeeded, machineToRunOn] = getMachineWithNumberOfThreads(ns, enviroment, threadsNeeded, ramNeededForGrow, homeMemoryLimitations);\\r\\n            }\\r\\n\\r\\n            if (machineToRunOn && machineToRunOn.cpuCores > 1 && ns.fileExists('Formulas.exe')) {\\r\\n                threadsNeeded = Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, machineToRunOn.cpuCores));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (target.needsWeakening()) {\\r\\n            target.weakening();\\r\\n\\r\\n            script = weakenScript;\\r\\n            const amountToWeaken = target.hackDifficulty - target.minDifficulty;\\r\\n\\r\\n            threadsNeeded = getNumberOfThreadsToWeaken(ns, 1, amountToWeaken);\\r\\n\\r\\n            machineToRunOn = getMachineWithEnoughRam(ns, threadsNeeded * ramNeededForWeaken, enviroment, homeMemoryLimitations);\\r\\n\\r\\n            if (!machineToRunOn) {\\r\\n                [threadsNeeded, machineToRunOn] = getMachineWithNumberOfThreads(ns, enviroment, threadsNeeded, ramNeededForWeaken, homeMemoryLimitations);\\r\\n            }\\r\\n\\r\\n            if (machineToRunOn && machineToRunOn.cpuCores > 1) {\\r\\n                threadsNeeded = getNumberOfThreadsToWeaken(ns, machineToRunOn.cpuCores, amountToWeaken);\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n\\r\\n        if (machineToRunOn && threadsNeeded > 0) {\\r\\n            ns.scp(script, machineToRunOn.hostname);\\r\\n            const pid = ns.exec(script, machineToRunOn.hostname, threadsNeeded, target.name);\\r\\n\\r\\n            if (pid !== 0) {\\r\\n                target.machineRunningOn = machineToRunOn.hostname;\\r\\n                target.pid = pid;\\r\\n\\r\\n                recordOfWhoIsBeingHacked.set(target.name, target);\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n\\r\\n    ns.rm(nameOfrecordOfWhoIsBeingHacked);\\r\\n    ns.write(nameOfrecordOfWhoIsBeingHacked, JSON.stringify(Array.from(recordOfWhoIsBeingHacked.entries()), \\\"W\\\"));\\r\\n\\r\\n    function cleanProcessesAttackingBatchTarget(ns, recordOfWhoIsBeingHacked, batchTargets) {\\r\\n        for (const machineHackin of recordOfWhoIsBeingHacked) {\\r\\n            const whoTheyHackin = machineHackin[0];\\r\\n\\r\\n            if (batchTargets.includes(whoTheyHackin)) {\\r\\n                ns.kill(recordOfWhoIsBeingHacked.get(whoTheyHackin).pid);\\r\\n                recordOfWhoIsBeingHacked.delete(whoTheyHackin);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getMachineWithNumberOfThreads(ns, enviroment, threads, ramCostPerThread, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n    const buyOrUpgradeServerFlag = 'buyOrUpgradeServerFlag.txt';\\r\\n    let originalAmountNeeded = ramCostPerThread * threads;\\r\\n\\r\\n    let globalMaxAmountNeeded = 0;\\r\\n\\r\\n    if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n        globalMaxAmountNeeded = JSON.parse(ns.read(buyOrUpgradeServerFlag));\\r\\n    }\\r\\n\\r\\n    if (originalAmountNeeded > globalMaxAmountNeeded) {\\r\\n        globalMaxAmountNeeded = originalAmountNeeded;\\r\\n        ns.rm(buyOrUpgradeServerFlag);\\r\\n        ns.write(buyOrUpgradeServerFlag, globalMaxAmountNeeded, \\\"W\\\");\\r\\n    }\\r\\n\\r\\n    while (threads > 0 && !machineToRunOn) {\\r\\n        threads--;\\r\\n\\r\\n        machineToRunOn = getMachineWithEnoughRam(ns, threads * ramCostPerThread, enviroment, homeMemoryLimitations)\\r\\n    }\\r\\n\\r\\n    return [threads, machineToRunOn];\\r\\n}\\r\\n\\r\\nfunction getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n\\r\\n    const allHackableMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    allHackableMachines.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const machinesWithRamAvailable = allHackableMachines\\r\\n        .filter(x => x.server.ramUsed < x.server.maxRam && x.server.maxRam !== 0);\\r\\n\\r\\n    const serversWithEnoughRam = machinesWithRamAvailable\\r\\n        .filter(x => (x.server.maxRam - x.server.ramUsed) > ramNeeded)\\r\\n        .sort((b, a) => b.server.maxRam - a.server.maxRam);\\r\\n\\r\\n    for (const potentialServerToRun of serversWithEnoughRam) {\\r\\n        const server = getServer(ns, potentialServerToRun.name, homeMemoryLimitations);\\r\\n        const freeRam = server.maxRam - server.ramUsed;\\r\\n        if (freeRam > ramNeeded) {\\r\\n            machineToRunOn = server;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machineToRunOn;\\r\\n}\\r\\n\\r\\n\\r\\nfunction getServer(ns, serverName, homeMemoryLimitations) {\\r\\n    const server = ns.getServer(serverName);\\r\\n\\r\\n    if (serverName === \\\"home\\\") {\\r\\n\\r\\n        let ramToReserve = homeMemoryLimitations.ramToReserve;\\r\\n\\r\\n        if(server.maxRam < ramToReserve){\\r\\n            ramToReserve = homeMemoryLimitations.ramToReserveInLimitedEnvironment;\\r\\n        }\\r\\n\\r\\n        server.maxRam -= ramToReserve;\\r\\n        server.ramUsed -= ramToReserve;\\r\\n\\r\\n        if (server.ramUsed < 0) {\\r\\n            server.ramUsed = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return server;\\r\\n}\\r\\n\\r\\nfunction getMachinesToHack(hackableMachinesInTheEnvironment, recordOfWhoIsBeingHacked, ns) {\\r\\n    const machinesNextInQueueToHack = [];\\r\\n    const namesOfMachinesBeingHacked = Array.from(recordOfWhoIsBeingHacked.keys());\\r\\n\\r\\n    for (const hackableMachine of hackableMachinesInTheEnvironment) {\\r\\n        if (!namesOfMachinesBeingHacked.includes(hackableMachine.name)) {\\r\\n            machinesNextInQueueToHack.push(hackableMachine);\\r\\n        } else {\\r\\n            const recordOfHackin = recordOfWhoIsBeingHacked.get(hackableMachine.name);\\r\\n            const moneyChange = recordOfHackin.moneyAvailable - hackableMachine.moneyAvailable;\\r\\n            const difficultyChange = recordOfHackin.hackDifficulty - hackableMachine.hackDifficulty;\\r\\n\\r\\n            if (moneyChange !== 0 || difficultyChange !== 0) {\\r\\n                machinesNextInQueueToHack.push(hackableMachine);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machinesNextInQueueToHack;\\r\\n}\\r\\n\\r\\nexport class HackedRecord {\\r\\n    constructor(name, maxMoney, minDifficulty, hackDifficulty, moneyAvailable) {\\r\\n        this.name = name;\\r\\n        this.moneyThreshhold = maxMoney * 0.75;\\r\\n        this.securityThreshholdTarget = minDifficulty + 5;\\r\\n        this.hackDifficulty = hackDifficulty;\\r\\n        this.moneyAvailable = moneyAvailable;\\r\\n        this.minDifficulty = minDifficulty;\\r\\n        this.machineRunningOn;\\r\\n        this.pid;\\r\\n\\r\\n        this.isWeakening = false;\\r\\n        this.isGrowing = false;\\r\\n        this.isHacking = false;\\r\\n    }\\r\\n\\r\\n    needsWeakening() {\\r\\n        return this.hackDifficulty > this.securityThreshholdTarget;\\r\\n    }\\r\\n\\r\\n    needsGrowing() {\\r\\n        return this.moneyAvailable < this.moneyThreshhold;\\r\\n    }\\r\\n\\r\\n    weakening() {\\r\\n        this.isWeakening = true;\\r\\n        this.isGrowing = false;\\r\\n        this.isHacking = false;\\r\\n    }\\r\\n\\r\\n    growing() {\\r\\n        this.isWeakening = false;\\r\\n        this.isGrowing = true;\\r\\n        this.isHacking = false;\\r\\n    }\\r\\n\\r\\n    hacking() {\\r\\n        this.isWeakening = false;\\r\\n        this.isGrowing = false;\\r\\n        this.isHacking = true;\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getNumberOfThreadsToWeaken(ns, cpuCores, amountToWeaken) {\\r\\n    let numberOfThreadsToWeaken = 0;\\r\\n    let foundNumberOfThreads = false;\\r\\n    while (!foundNumberOfThreads) {\\r\\n        numberOfThreadsToWeaken++;\\r\\n\\r\\n        const amountNumberOfThreadsWillWeaken = Math.ceil(ns.weakenAnalyze(numberOfThreadsToWeaken, cpuCores));\\r\\n        if (amountNumberOfThreadsWillWeaken > amountToWeaken) {\\r\\n            foundNumberOfThreads = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //add a small margin\\r\\n    numberOfThreadsToWeaken += 20;\\r\\n    return numberOfThreadsToWeaken;\\r\\n}\\r\\n\\r\\nfunction cleanRecordOfWhoIsBeingHacked(ns, recordOfWhoIsBeingHacked) {\\r\\n    for (const key of recordOfWhoIsBeingHacked.keys()) {\\r\\n        const record = recordOfWhoIsBeingHacked.get(key);\\r\\n        \\r\\n        if(!ns.isRunning(record.pid)){\\r\\n            recordOfWhoIsBeingHacked.delete(key);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/advanced-dispatch.js\",\"server\":\"home\"}}],[\"scripts/hacking/batch-dispatch.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let failuresThisRun = 0;\\r\\nlet successesThisRun = 0;\\r\\n\\r\\nlet lastTimeVisited = new Date();\\r\\nlet secondsBetweenVisits = [];\\r\\nlet lastRecordedToConsole = new Date();\\r\\n\\r\\nlet visitsToFunction = 0;\\r\\n\\r\\nlet countOfSuccesses = [];\\r\\nlet countOfFailures = [];\\r\\nlet averageErrorRateOver10Minutes = 1;\\r\\nlet errorRateAtWhichWeAllowNewThings = 0.1;\\r\\n\\r\\nexport async function main(ns) {\\r\\n    visitsToFunction++;\\r\\n\\r\\n    const buyOrUpgradeServerFlagFile = 'buyOrUpgradeServerFlag.txt';\\r\\n    const memoryConstrained = ns.fileExists('data/ramObservations.txt') || ns.fileExists(buyOrUpgradeServerFlagFile);\\r\\n\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\"\\r\\n\\r\\n    let batchQueueForDifferentTargets = new Map();\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        batchQueueForDifferentTargets = new Map(JSON.parse(ns.read(batchQueuesFileName)));\\r\\n    }\\r\\n\\r\\n    const homeMemoryLimitations = JSON.parse(ns.read(\\\"data/ramToReserveOnHome.txt\\\"));\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n\\r\\n    const playerServers = enviroment\\r\\n        .filter(x => x.server.purchasedByPlayer);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    playerServers.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const totalBoughtMemory = playerServers.reduce((acc, x) => acc + x.server.maxRam, 0);\\r\\n\\r\\n    const ramNeededForBatchesFile = \\\"data/ramNeededToStartBatches.txt\\\";\\r\\n    const memoryNeededForBatches = 105_000;\\r\\n\\r\\n    if (totalBoughtMemory < memoryNeededForBatches) {\\r\\n        const ramNeededToStartBatches = Math.round(memoryNeededForBatches - totalBoughtMemory);\\r\\n        ns.rm(ramNeededForBatchesFile);\\r\\n        ns.write(ramNeededForBatchesFile, ramNeededToStartBatches, \\\"W\\\");\\r\\n\\r\\n        if (visitsToFunction > 100) {\\r\\n            visitsToFunction = 0;\\r\\n            ns.toast(`Ram Needed to Start Batches: ${ramNeededToStartBatches}`, \\\"warning\\\", 180000)\\r\\n        }\\r\\n\\r\\n        ns.run('scripts/hacking/memory-starved-dispatch.js');\\r\\n        return;\\r\\n    } else {\\r\\n        ns.rm(ramNeededForBatchesFile);\\r\\n    }\\r\\n\\r\\n    const targetNames = Array.from(batchQueueForDifferentTargets.keys());\\r\\n    const player = ns.getPlayer();\\r\\n\\r\\n    giveBatchQueueStructure(targetNames, batchQueueForDifferentTargets);\\r\\n    cleanFinishedAndPoisonedJobsFromQueue(targetNames, batchQueueForDifferentTargets, ns);\\r\\n\\r\\n    const noMoreInvestingForEndGame = ns.fileExists(\\\"stopInvesting.txt\\\");\\r\\n\\r\\n    const anyBatchNotPrepping = targetNames\\r\\n        .map(x => batchQueueForDifferentTargets.get(x))\\r\\n        .filter(x => !x.prepStage)\\r\\n        .length > 0;\\r\\n\\r\\n\\r\\n    for (const nameOfTarget of targetNames) {\\r\\n        const targetServer = ns.getServer(nameOfTarget);\\r\\n        const batchForTarget = batchQueueForDifferentTargets.get(nameOfTarget);\\r\\n\\r\\n        if (!noMoreInvestingForEndGame) {\\r\\n            prepServerForBatching(targetServer, batchForTarget, ns, player, nameOfTarget, anyBatchNotPrepping);\\r\\n        }\\r\\n\\r\\n        createBatchesOfJobs(batchForTarget, ns, targetServer, player);\\r\\n    }\\r\\n\\r\\n    await executeJobs(ns, targetNames, batchQueueForDifferentTargets, player, enviroment, homeMemoryLimitations);\\r\\n    addNewTargetsToQueueIfNeeded(batchQueueForDifferentTargets, targetNames, ns, enviroment, player, noMoreInvestingForEndGame, homeMemoryLimitations);\\r\\n    adjustTimingsOrOutrightDeleteDependingOnReliability(ns, batchQueueForDifferentTargets, targetNames);\\r\\n\\r\\n    ns.rm(batchQueuesFileName);\\r\\n    ns.write(batchQueuesFileName, JSON.stringify(Array.from(batchQueueForDifferentTargets.entries()), \\\"W\\\"));\\r\\n\\r\\n    const total = failuresThisRun + successesThisRun;\\r\\n    const now = new Date();\\r\\n    const secondsSinceLastVisit = Math.abs(now.getTime() - lastTimeVisited.getTime()) / 1000;\\r\\n    lastTimeVisited = now;\\r\\n    if (secondsSinceLastVisit !== 0) {\\r\\n        secondsBetweenVisits.push(secondsSinceLastVisit);\\r\\n    }\\r\\n\\r\\n\\r\\n    const moneyWeHaveNow = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (now.getMinutes() !== lastRecordedToConsole.getMinutes() && total > 0) {\\r\\n        const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n\\r\\n        const errorRate = 1 - (successesThisRun / total);\\r\\n\\r\\n        if (errorRate > 0.03) {\\r\\n            ns.toast(`${timeStamp} Error Rate in batches ${errorRate.toLocaleString(undefined, { style: 'percent', minimumFractionDigits: 2 })}`, \\\"error\\\", 60000);\\r\\n        }\\r\\n\\r\\n        const averageTimeBetweenVisits = secondsBetweenVisits.reduce((acc, b) => acc + b, 0) / secondsBetweenVisits.length;\\r\\n\\r\\n        if (averageTimeBetweenVisits > 3) {\\r\\n            ns.toast(`${timeStamp} Average of ${averageTimeBetweenVisits.toFixed(2)} seconds between visits`, \\\"warning\\\", null)\\r\\n        }\\r\\n\\r\\n        const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n        let stockMarketReserveMoney = new ReserveForTrading();\\r\\n        if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n            stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n        }\\r\\n\\r\\n        const formatter = new Intl.NumberFormat('en-US', {\\r\\n            style: 'currency',\\r\\n            currency: 'USD',\\r\\n        });\\r\\n\\r\\n        const moneyFormatted = formatter.format(moneyWeHaveNow + stockMarketReserveMoney.moneyInvested);\\r\\n\\r\\n        let consoleUpdate = `${timeStamp} Money we have now: ${moneyFormatted} | Number of targeted server: ${String(targetNames.length).padStart(2, 0)}`;\\r\\n\\r\\n        if (memoryConstrained) {\\r\\n            consoleUpdate += \\\" | Memory Constrained\\\";\\r\\n        }\\r\\n\\r\\n        ns.tprint(consoleUpdate);\\r\\n\\r\\n        const reliabilityForBatchFile = 'data/reliabilityForEvery100Batches.txt';\\r\\n        let batchReliability = [];\\r\\n\\r\\n        if (ns.fileExists(reliabilityForBatchFile)) {\\r\\n            batchReliability = JSON.parse(ns.read(reliabilityForBatchFile));\\r\\n        }\\r\\n\\r\\n        batchReliability.push({ errorRate, averageTimeBetweenVisits, now, moneyWeHaveNow, numberOfTargetedServers: targetNames.length });\\r\\n\\r\\n\\r\\n        ns.rm(reliabilityForBatchFile);\\r\\n        ns.write(reliabilityForBatchFile, JSON.stringify(batchReliability), \\\"W\\\");\\r\\n\\r\\n\\r\\n        countOfFailures.push(failuresThisRun);\\r\\n        countOfSuccesses.push(successesThisRun);\\r\\n\\r\\n        if (countOfFailures.length > 10) {\\r\\n            countOfFailures.shift();\\r\\n        }\\r\\n\\r\\n        if (countOfSuccesses.length > 10) {\\r\\n            countOfSuccesses.shift();\\r\\n        }\\r\\n\\r\\n        const successesIn10Minutes = countOfSuccesses.reduce((acc, b) => acc + b, 0);\\r\\n        const failuresIn10Minutes = countOfFailures.reduce((acc, b) => acc + b, 0);\\r\\n        const totalIn10Minutes = successesIn10Minutes + failuresIn10Minutes;\\r\\n\\r\\n        averageErrorRateOver10Minutes = 1 - (successesIn10Minutes / totalIn10Minutes);\\r\\n\\r\\n        if (averageErrorRateOver10Minutes > errorRateAtWhichWeAllowNewThings) {\\r\\n            ns.toast(`${timeStamp} Error Rate over 10 minutes is: ${averageErrorRateOver10Minutes.toLocaleString(undefined, { style: 'percent', minimumFractionDigits: 2 })}`, \\\"error\\\", 15000);\\r\\n        }\\r\\n\\r\\n\\r\\n        failuresThisRun = 0;\\r\\n        successesThisRun = 0;\\r\\n        secondsBetweenVisits.length = 0;\\r\\n        lastRecordedToConsole = now;\\r\\n    }\\r\\n\\r\\n    if (moneyWeHaveNow > 1_000_000_000_000 ||\\r\\n        homeServer.maxRam - homeServer.ramUsed > 300000 ||\\r\\n        targetNames\\r\\n            .map(x => batchQueueForDifferentTargets.get(x))\\r\\n            .every(x => !x.targetMachineSaturatedWithAttacks)) {\\r\\n        if (!memoryConstrained) {\\r\\n            ns.run('scripts/hacking/advanced-dispatch.js');\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nclass BatchQueueForTarget {\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    targetMachineSaturatedWithAttacks = false;\\r\\n\\r\\n    prepStage = true;\\r\\n    weakeningDoneAfter;\\r\\n    successfulWeakening = false;\\r\\n    growDoneAfter;\\r\\n    successfulGrowing = false;\\r\\n    hackDoneAfter;\\r\\n    successfulHacking = false;\\r\\n\\r\\n    securityWeNeedToReduceAfterFullHack;\\r\\n    securityWeNeedToReduceAfterFullGrowth;\\r\\n    originalNumberOfThreadsForFullMoney;\\r\\n\\r\\n    successes = 0;\\r\\n    failures = 0;\\r\\n    successesInTheLastHour = 0;\\r\\n    failuresInTheLastHour = 0;\\r\\n    lastResetHour = 0\\r\\n\\r\\n    executionWindowSizeInSeconds = 4;\\r\\n\\r\\n    batchesQueue = [];\\r\\n\\r\\n    lastFailure;\\r\\n\\r\\n    getAllocatedMemory(machineRunningOn) {\\r\\n        return this.batchesQueue\\r\\n            .reduce((acc, x) => acc.concat(x.jobs), [])\\r\\n            .filter(x => x.machineRunningOn === machineRunningOn)\\r\\n            .reduce((acc, x) => acc + x, 0);\\r\\n    }\\r\\n\\r\\n    thereAreNoJobsRunningAfter() {\\r\\n        return Math.max(...this.batchesQueue.map(x => x.wholeBatchFinishsBefore()));\\r\\n    }\\r\\n}\\r\\n\\r\\nclass BatchOfJobs {\\r\\n    jobs = [];\\r\\n    //6 second window? 2 cycles seems like enough for each step.\\r\\n\\r\\n    startTime;\\r\\n    poisonedBatch = false;\\r\\n\\r\\n    wholeBatchFinishsBefore() {\\r\\n        return Math.max(...this.jobs.map(x => new Date(x.endBefore)))\\r\\n    }\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n}\\r\\n\\r\\nclass JobHasTo {\\r\\n    executing = false;\\r\\n    ramCost = 0;\\r\\n    machineRunningOn;\\r\\n    pid;\\r\\n    executedAt;\\r\\n    expectedEndTime;\\r\\n\\r\\n    firstLookStartedNowEndAt;\\r\\n\\r\\n    lastMissForDoneBeforeWindow;\\r\\n    firstMissForAfterWindow;\\r\\n\\r\\n    constructor(endAfter, endBefore, type) {\\r\\n        this.endAfter = endAfter;\\r\\n        this.endBefore = endBefore;\\r\\n        this.type = type;\\r\\n        // this.types = [\\\"grow\\\", \\\"hack\\\", \\\"weaken-after-hack\\\", \\\"weaken-after-grow\\\",\\r\\n        //     \\\"weaken-dynamic\\\", \\\"grow-dynamic\\\", \\\"hack-dynamic\\\"]\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction adjustTimingsOrOutrightDeleteDependingOnReliability(ns, batchQueueForDifferentTargets, targetNames) {\\r\\n    const currentTime = new Date();\\r\\n    let countOfDeleted = 0;\\r\\n\\r\\n    for (const nameOfTarget of targetNames) {\\r\\n        const queueOfBatches = batchQueueForDifferentTargets.get(nameOfTarget);\\r\\n        const currentHour = currentTime.getHours()\\r\\n\\r\\n        if (currentHour !== queueOfBatches.lastResetHour) {\\r\\n            if (queueOfBatches.failuresInTheLastHour === 0 && queueOfBatches.successesInTheLastHour > 0 && queueOfBatches.executionWindowSizeInSeconds > 2) {\\r\\n                queueOfBatches.executionWindowSizeInSeconds--;\\r\\n            }\\r\\n\\r\\n            const totalRunsThisHour = queueOfBatches.successesInTheLastHour + queueOfBatches.failuresInTheLastHour;\\r\\n            const ratioOfFailuresThisHour = 1 - (queueOfBatches.successesInTheLastHour / totalRunsThisHour);\\r\\n\\r\\n            if (ratioOfFailuresThisHour > 0.1) {\\r\\n                queueOfBatches.executionWindowSizeInSeconds++;\\r\\n            }\\r\\n\\r\\n\\r\\n            queueOfBatches.lastResetHour = currentHour;\\r\\n            queueOfBatches.successesInTheLastHour = 0;\\r\\n            queueOfBatches.failuresInTheLastHour = 0;\\r\\n\\r\\n            if (ratioOfFailuresThisHour > 0.9 && totalRunsThisHour > 10 && countOfDeleted < 2 && targetNames.length > 2) {\\r\\n                for (const batch of queueOfBatches.batchesQueue) {\\r\\n                    batch.jobs.map(x => {\\r\\n                        if (x.pid) {\\r\\n                            ns.kill(x.pid);\\r\\n                        }\\r\\n                    });\\r\\n\\r\\n                }\\r\\n\\r\\n                batchQueueForDifferentTargets.delete(nameOfTarget);\\r\\n                ns.tprint(`Deleted ${nameOfTarget} from batchQueue for failing too often. Ratio of Failure: ${ratioOfFailuresThisHour}. Total Runs: ${totalRunsThisHour}`);\\r\\n                countOfDeleted++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction createBatchesOfJobs(batchForTarget, ns, targetServer, player) {\\r\\n    if (batchForTarget.prepStage === false) {\\r\\n\\r\\n        if (batchForTarget.batchesQueue.length === 0 || batchForTarget.batchesQueue.every(x => new Date() > new Date(x.startTime))) {\\r\\n            const batch = new BatchOfJobs();\\r\\n\\r\\n            const secondsToPadEndTime = batchForTarget.executionWindowSizeInSeconds;\\r\\n            const msToPadStartTime = 1;\\r\\n\\r\\n            const noJobsRunningAfter = batchForTarget.thereAreNoJobsRunningAfter();\\r\\n\\r\\n            let noMoreJobsAfter = new Date(noJobsRunningAfter);\\r\\n\\r\\n            const defaultStartTime = getWeakenEndDate(ns, targetServer, player, batchForTarget.securityWeNeedToReduceAfterFullGrowth);\\r\\n\\r\\n            if (noJobsRunningAfter < 0 || defaultStartTime > noMoreJobsAfter) {\\r\\n\\r\\n                addSecondsToDate(defaultStartTime, secondsToPadEndTime);\\r\\n                const defaultEndTime = new Date(defaultStartTime);\\r\\n\\r\\n                noMoreJobsAfter = defaultEndTime;\\r\\n            }\\r\\n\\r\\n            const hackStart = createNewDataFromOldDateAndAddMilliseconds(noMoreJobsAfter, msToPadStartTime);\\r\\n            const hackEnd = createNewDataFromOldDateAndAddSeconds(hackStart, secondsToPadEndTime);\\r\\n\\r\\n            const weakenAfterhackStart = createNewDataFromOldDateAndAddMilliseconds(hackEnd, msToPadStartTime);\\r\\n            const weakenAfterHackEnd = createNewDataFromOldDateAndAddSeconds(weakenAfterhackStart, secondsToPadEndTime);\\r\\n\\r\\n            const growStart = createNewDataFromOldDateAndAddMilliseconds(weakenAfterHackEnd, msToPadStartTime);\\r\\n            const growEnd = createNewDataFromOldDateAndAddSeconds(growStart, secondsToPadEndTime);\\r\\n\\r\\n            const weakenAfterGrowStart = createNewDataFromOldDateAndAddMilliseconds(growEnd, msToPadStartTime);\\r\\n            const weakenAfterGrowEnd = createNewDataFromOldDateAndAddSeconds(weakenAfterGrowStart, secondsToPadEndTime);\\r\\n\\r\\n            // get them in the order they are executed. \\r\\n            batch.jobs.push(new JobHasTo(weakenAfterGrowStart, weakenAfterGrowEnd, \\\"weaken-after-grow\\\"));\\r\\n            batch.jobs.push(new JobHasTo(weakenAfterhackStart, weakenAfterHackEnd, \\\"weaken-after-hack\\\"));\\r\\n            batch.jobs.push(new JobHasTo(growStart, growEnd, \\\"grow\\\"));\\r\\n            batch.jobs.push(new JobHasTo(hackStart, hackEnd, \\\"hack\\\"));\\r\\n\\r\\n            batchForTarget.batchesQueue.push(batch);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function executeJobs(ns, targetNames, batchQueueForDifferentTargets, player, environment, homeMemoryLimitations) {\\r\\n    const hackScript = 'scripts/hacking/hack.js';\\r\\n    const growScript = 'scripts/hacking/grow.js';\\r\\n    const weakenScript = 'scripts/hacking/weaken.js';\\r\\n\\r\\n    const ramNeededForWeaken = ns.getScriptRam(weakenScript);\\r\\n    const ramNeededForGrow = ns.getScriptRam(growScript);\\r\\n    const ramNeededForHack = ns.getScriptRam(hackScript);\\r\\n\\r\\n    for (const nameOfTarget of targetNames) {\\r\\n        const batchForTarget = batchQueueForDifferentTargets.get(nameOfTarget);\\r\\n\\r\\n        for (let i = 0; i < batchForTarget.batchesQueue.length; i++) {\\r\\n            const batchOfJobs = batchForTarget.batchesQueue[i];\\r\\n\\r\\n            for (let y = 0; y < batchOfJobs.jobs.length; y++) {\\r\\n                const job = batchOfJobs.jobs[y];\\r\\n\\r\\n                if (job.executing === false) {\\r\\n\\r\\n                    const targetServer = ns.getServer(nameOfTarget);\\r\\n\\r\\n                    let machineToRunOn;\\r\\n                    let script;\\r\\n                    let numberOfThreads;\\r\\n                    let ramCost;\\r\\n                    let shouldExecute = false;\\r\\n\\r\\n                    if (job.type.startsWith(\\\"weaken\\\")) {\\r\\n                        let amountToWeaken = targetServer.hackDifficulty - targetServer.minDifficulty;\\r\\n\\r\\n                        if (job.type === \\\"weaken-after-hack\\\") {\\r\\n                            amountToWeaken = batchForTarget.securityWeNeedToReduceAfterFullHack;\\r\\n                        }\\r\\n\\r\\n                        if (job.type === \\\"weaken-after-grow\\\") {\\r\\n                            amountToWeaken = batchForTarget.securityWeNeedToReduceAfterFullGrowth;\\r\\n                        }\\r\\n\\r\\n                        const ifStartedNowWeakenDoneAt = getWeakenEndDate(ns, targetServer, player, amountToWeaken);\\r\\n                        shouldExecute = shouldWeExecute(job, ifStartedNowWeakenDoneAt, batchOfJobs, ns);\\r\\n\\r\\n                        if (shouldExecute === false) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        script = weakenScript;\\r\\n\\r\\n\\r\\n                        numberOfThreads = getNumberOfThreadsToWeaken(ns, 1, amountToWeaken);\\r\\n                        ramCost = ramNeededForWeaken * numberOfThreads;\\r\\n\\r\\n                        machineToRunOn = getMachineWithEnoughRam(ns, ramCost, environment, homeMemoryLimitations);\\r\\n\\r\\n                        if (machineToRunOn && machineToRunOn.cpuCores > 1) {\\r\\n                            numberOfThreads = getNumberOfThreadsToWeaken(ns, machineToRunOn.cpuCores, amountToWeaken);\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    if (job.type.startsWith(\\\"grow\\\")) {\\r\\n                        const ifStartedNowGrowDoneAt = getGrowEndDate(ns, targetServer, player);\\r\\n                        shouldExecute = shouldWeExecute(job, ifStartedNowGrowDoneAt, batchOfJobs, ns);\\r\\n\\r\\n                        if (shouldExecute === false) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        script = growScript;\\r\\n\\r\\n                        if (job.type !== \\\"grow-dynamic\\\") {\\r\\n                            targetServer.moneyAvailable = 0;\\r\\n                        }\\r\\n\\r\\n                        numberOfThreads = getGrowThreads(ns, targetServer, player, 1);\\r\\n                        ramCost = ramNeededForGrow * numberOfThreads;\\r\\n\\r\\n                        machineToRunOn = getMachineWithEnoughRam(ns, ramCost, environment, homeMemoryLimitations);\\r\\n\\r\\n                        if (machineToRunOn && machineToRunOn.cpuCores > 1) {\\r\\n                            numberOfThreads = getGrowThreads(ns, targetServer, player, machineToRunOn.cpuCores);\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    if (job.type.startsWith(\\\"hack\\\")) {\\r\\n                        const ifStartedNowHackDoneAt = getHackEndDate(ns, targetServer, player);\\r\\n                        shouldExecute = shouldWeExecute(job, ifStartedNowHackDoneAt, batchOfJobs, ns);\\r\\n\\r\\n                        if (shouldExecute === false) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        script = hackScript;\\r\\n\\r\\n                        if (job.type === \\\"hack\\\") {\\r\\n                            targetServer.moneyAvailable = targetServer.moneyMax;\\r\\n                        }\\r\\n\\r\\n\\r\\n                        numberOfThreads = getHackThreadsForTotalStealing(ns, nameOfTarget, targetServer);\\r\\n\\r\\n                        if (numberOfThreads === -1) {\\r\\n                            numberOfThreads = batchForTarget.originalNumberOfThreadsForFullMoney;\\r\\n                        }\\r\\n\\r\\n                        ramCost = ramNeededForHack * numberOfThreads;\\r\\n\\r\\n                        machineToRunOn = getMachineWithEnoughRam(ns, ramCost, environment, homeMemoryLimitations);\\r\\n                    }\\r\\n\\r\\n                    if (shouldExecute && machineToRunOn) {\\r\\n                        ns.scp(script, machineToRunOn.hostname);\\r\\n                        const pid = ns.exec(script, machineToRunOn.hostname, numberOfThreads, nameOfTarget);\\r\\n\\r\\n                        if (pid === 0) {\\r\\n                            ns.tprint(\\\"failed exec\\\")\\r\\n                        }\\r\\n\\r\\n                        job.ramCost = ramCost;\\r\\n                        job.executing = true;\\r\\n                        job.machineRunningOn = machineToRunOn.hostname;\\r\\n                        job.pid = pid;\\r\\n                        job.executedAt = new Date();\\r\\n\\r\\n                        if (!batchOfJobs.startTime) {\\r\\n                            batchOfJobs.startTime = new Date();\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction shouldWeExecute(job, ifStartedNowWeWouldBeDoneAtString, batchOfJobs, ns) {\\r\\n\\r\\n    const endBeforeDate = new Date(job.endBefore);\\r\\n    const endAfterDate = new Date(job.endAfter);\\r\\n    const ifStartedNowWeWouldBeDoneAt = new Date(ifStartedNowWeWouldBeDoneAtString)\\r\\n\\r\\n    if (!job.firstLookStartedNowEndAt) {\\r\\n        job.firstLookStartedNowEndAt = ifStartedNowWeWouldBeDoneAt;\\r\\n    }\\r\\n\\r\\n    if (endAfterDate > ifStartedNowWeWouldBeDoneAt) {\\r\\n        job.lastMissForDoneBeforeWindow = ifStartedNowWeWouldBeDoneAt;\\r\\n    }\\r\\n\\r\\n    if (ifStartedNowWeWouldBeDoneAt > endBeforeDate) {\\r\\n        if (!job.firstMissForAfterWindow) {\\r\\n            job.firstMissForAfterWindow = ifStartedNowWeWouldBeDoneAt;\\r\\n            batchOfJobs.poisonedBatch = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (endAfterDate < ifStartedNowWeWouldBeDoneAt && ifStartedNowWeWouldBeDoneAt < endBeforeDate) {\\r\\n        job.expectedEndTime = ifStartedNowWeWouldBeDoneAt;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n}\\r\\n\\r\\nfunction getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n\\r\\n    const allHackedMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    allHackedMachines.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const machinesWithRamAvailable = allHackedMachines\\r\\n        .filter(x => x.server.ramUsed < x.server.maxRam && x.server.maxRam !== 0);\\r\\n\\r\\n    const serversWithEnoughRam = machinesWithRamAvailable\\r\\n        .filter(x => (x.server.maxRam - x.server.ramUsed) > ramNeeded)\\r\\n        .sort((b, a) => b.server.maxRam - a.server.maxRam);\\r\\n\\r\\n    for (const potentialServerToRun of serversWithEnoughRam) {\\r\\n        const server = getServer(ns, potentialServerToRun.name, homeMemoryLimitations);\\r\\n        const freeRam = server.maxRam - server.ramUsed;\\r\\n        if (freeRam > ramNeeded) {\\r\\n            machineToRunOn = server;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (machineToRunOn === undefined) {\\r\\n        const buyOrUpgradeServerFlag = 'buyOrUpgradeServerFlag.txt';\\r\\n\\r\\n        let maxAmountNeeded = 0;\\r\\n        if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n            maxAmountNeeded = ns.read(buyOrUpgradeServerFlag);\\r\\n        }\\r\\n\\r\\n        if (maxAmountNeeded < ramNeeded) {\\r\\n            maxAmountNeeded = ramNeeded;\\r\\n            ns.rm(buyOrUpgradeServerFlag);\\r\\n            ns.write(buyOrUpgradeServerFlag, maxAmountNeeded, \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machineToRunOn;\\r\\n}\\r\\n\\r\\nfunction getServer(ns, serverName, homeMemoryLimitations) {\\r\\n    const server = ns.getServer(serverName);\\r\\n\\r\\n    if (serverName === \\\"home\\\") {\\r\\n\\r\\n        let ramToReserve = homeMemoryLimitations.ramToReserve;\\r\\n\\r\\n        if (server.maxRam < ramToReserve) {\\r\\n            ramToReserve = homeMemoryLimitations.ramToReserveInLimitedEnvironment;\\r\\n        }\\r\\n\\r\\n        server.maxRam -= ramToReserve;\\r\\n\\r\\n        const freeRam = server.maxRam - server.ramUsed\\r\\n\\r\\n        if (freeRam < 0) {\\r\\n            server.ramUsed = server.maxRam;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return server;\\r\\n}\\r\\n\\r\\nfunction prepServerForBatching(targetServer, batchForTarget, ns, player, nameOfTarget, anyBatchNotPrepping) {\\r\\n    const amountToWeaken = targetServer.hackDifficulty - targetServer.minDifficulty;\\r\\n    const serverHasMaxMoney = targetServer.moneyMax === targetServer.moneyAvailable;\\r\\n    const currentTime = new Date();\\r\\n\\r\\n    if (amountToWeaken === 0 && serverHasMaxMoney && batchForTarget.securityWeNeedToReduceAfterFullHack && batchForTarget.securityWeNeedToReduceAfterFullGrowth && batchForTarget.prepStage && batchForTarget.originalNumberOfThreadsForFullMoney) {\\r\\n\\r\\n        if (averageErrorRateOver10Minutes < errorRateAtWhichWeAllowNewThings || !anyBatchNotPrepping) {\\r\\n            batchForTarget.prepStage = false;\\r\\n            batchForTarget.targetMachineSaturatedWithAttacks = false;\\r\\n            ns.toast(`Added ${nameOfTarget} to in process batch attack.`, 'success')\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (batchForTarget.prepStage) {\\r\\n        batchForTarget.targetMachineSaturatedWithAttacks = false;\\r\\n\\r\\n        if (batchForTarget.successfulWeakening === false) {\\r\\n            if (currentTime > new Date(batchForTarget.weakeningDoneAfter) || !batchForTarget.weakeningDoneAfter) {\\r\\n                if (amountToWeaken !== 0) {\\r\\n                    let endDate = new Date();\\r\\n                    endDate = getWeakenEndDate(ns, targetServer, player, targetServer.hackDifficulty - targetServer.minDifficulty);\\r\\n                    addSecondsToDate(endDate, 10);\\r\\n\\r\\n                    const job = new JobHasTo(new Date(), endDate, \\\"weaken-dynamic\\\");\\r\\n                    const batchOfJobs = new BatchOfJobs();\\r\\n                    batchOfJobs.jobs.push(job);\\r\\n\\r\\n                    batchForTarget.batchesQueue.push(batchOfJobs);\\r\\n                    batchForTarget.weakeningDoneAfter = endDate;\\r\\n                } else if (amountToWeaken === 0) {\\r\\n                    batchForTarget.successfulWeakening = true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (batchForTarget.successfulWeakening && batchForTarget.successfulGrowing === false) {\\r\\n            if (currentTime > new Date(batchForTarget.growDoneAfter) || !batchForTarget.growDoneAfter) {\\r\\n\\r\\n                if (serverHasMaxMoney === false) {\\r\\n\\r\\n                    if (targetServer.moneyAvailable === 0) {\\r\\n                        const growThreads = getGrowThreads(ns, targetServer, player, 1);\\r\\n                        batchForTarget.securityWeNeedToReduceAfterFullGrowth = ns.growthAnalyzeSecurity(growThreads, nameOfTarget, 1);\\r\\n                    }\\r\\n\\r\\n                    let endDate = getGrowEndDate(ns, targetServer, player);\\r\\n                    addSecondsToDate(endDate, 10);\\r\\n\\r\\n                    const job = new JobHasTo(new Date(), endDate, \\\"grow-dynamic\\\");\\r\\n                    const batchOfJobs = new BatchOfJobs();\\r\\n                    batchOfJobs.jobs.push(job);\\r\\n\\r\\n                    batchForTarget.batchesQueue.push(batchOfJobs);\\r\\n                    batchForTarget.growDoneAfter = endDate;\\r\\n                }\\r\\n\\r\\n\\r\\n                if (serverHasMaxMoney) {\\r\\n                    batchForTarget.successfulGrowing = true;\\r\\n                    batchForTarget.successfulWeakening = false;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (batchForTarget.successfulGrowing && batchForTarget.successfulHacking === false && batchForTarget.successfulWeakening) {\\r\\n\\r\\n            if (currentTime > new Date(batchForTarget.hackDoneAfter) || !batchForTarget.hackDoneAfter) {\\r\\n                if (serverHasMaxMoney) {\\r\\n                    if (currentTime > new Date(batchForTarget.hackDoneAfter)) {\\r\\n\\r\\n                        batchForTarget.successfulWeakening = false;\\r\\n                        batchForTarget.successfulGrowing = false;\\r\\n                        batchForTarget.successfulHacking = false;\\r\\n                        batchForTarget.hackDoneAfter = undefined;\\r\\n\\r\\n                    } else {\\r\\n                        const hackThreads = getHackThreadsForTotalStealing(ns, nameOfTarget, targetServer);\\r\\n                        batchForTarget.securityWeNeedToReduceAfterFullHack = ns.hackAnalyzeSecurity(hackThreads, nameOfTarget);\\r\\n                        batchForTarget.originalNumberOfThreadsForFullMoney = hackThreads;\\r\\n\\r\\n                        let endDate = getHackEndDate(ns, targetServer, player);\\r\\n                        addSecondsToDate(endDate, 100);\\r\\n\\r\\n                        const job = new JobHasTo(new Date(), endDate, \\\"hack-dynamic\\\");\\r\\n                        const batchOfJobs = new BatchOfJobs();\\r\\n                        batchOfJobs.jobs.push(job);\\r\\n\\r\\n                        batchForTarget.batchesQueue.push(batchOfJobs);\\r\\n                        batchForTarget.hackDoneAfter = endDate;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (targetServer.moneyAvailable === 0) {\\r\\n                    batchForTarget.successfulGrowing = false;\\r\\n                    batchForTarget.successfulWeakening = false;\\r\\n                    batchForTarget.successfulHacking = true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nfunction giveBatchQueueStructure(targetNames, batchQueue) {\\r\\n    for (const target of targetNames) {\\r\\n        let targetObject = batchQueue.get(target);\\r\\n        targetObject = new BatchQueueForTarget(targetObject);\\r\\n\\r\\n        for (let i = 0; i < targetObject.batchesQueue.length; i++) {\\r\\n            targetObject.batchesQueue[i] = new BatchOfJobs(targetObject.batchesQueue[i]);\\r\\n        }\\r\\n\\r\\n        batchQueue.set(target, targetObject);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction cleanFinishedAndPoisonedJobsFromQueue(targetNames, batchQueue, ns) {\\r\\n\\r\\n    for (const target of targetNames) {\\r\\n        const batches = batchQueue.get(target);\\r\\n        const currentTime = new Date();\\r\\n\\r\\n        for (let i = batches.batchesQueue.length - 1; i > -1; i--) {\\r\\n            const batch = batches.batchesQueue[i];\\r\\n            let remove = false;\\r\\n\\r\\n            if (batch.wholeBatchFinishsBefore() < currentTime) {\\r\\n\\r\\n                if (batch.jobs.every(x => x.executing) === false) {\\r\\n                    batches.failures++;\\r\\n                    batches.failuresInTheLastHour++;\\r\\n                    batches.lastFailure = batch;\\r\\n                    failuresThisRun++;\\r\\n                } else {\\r\\n                    batches.successes++;\\r\\n                    batches.successesInTheLastHour++;\\r\\n                    successesThisRun++;\\r\\n                }\\r\\n\\r\\n                remove = true;\\r\\n                batches.targetMachineSaturatedWithAttacks = true;\\r\\n            }\\r\\n\\r\\n            if (batch.poisonedBatch) {\\r\\n                batches.failures++;\\r\\n                batches.failuresInTheLastHour++;\\r\\n                batches.lastFailure = batch;\\r\\n                failuresThisRun++;\\r\\n\\r\\n                remove = true;\\r\\n\\r\\n                batch.jobs.map(x => {\\r\\n                    if (x.pid) {\\r\\n                        ns.kill(x.pid);\\r\\n                    }\\r\\n                });\\r\\n            }\\r\\n\\r\\n            if (remove) {\\r\\n                batches.batchesQueue.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction addNewTargetsToQueueIfNeeded(batchQueue, targetNames, ns, enviroment, player, noMoreInvestingForEndGame, homeMemoryLimitations) {\\r\\n    const batchesAreSaturated = targetNames.map(x => batchQueue.get(x)).every(x => x.targetMachineSaturatedWithAttacks);\\r\\n    const over2andAHalfTrillionDollars = ns.getServerMoneyAvailable(\\\"home\\\") > 2_500_000_000_000;\\r\\n    const massiveRamOnHome = getServer(ns, \\\"home\\\", homeMemoryLimitations).maxRam > 400_000;\\r\\n\\r\\n    let addNewServerToAttack = false;\\r\\n\\r\\n    if (batchQueue.size < 15 && batchesAreSaturated && averageErrorRateOver10Minutes < errorRateAtWhichWeAllowNewThings && !noMoreInvestingForEndGame) {\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if (over2andAHalfTrillionDollars && batchQueue.size < 20) {\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if (over2andAHalfTrillionDollars && batchesAreSaturated && batchQueue.size < 50) {\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if(massiveRamOnHome && batchQueue.size < 50){\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if (batchQueue.size < 2 || addNewServerToAttack) {\\r\\n\\r\\n        const allHackedMachines = enviroment\\r\\n            .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n        const allMachinesByOrderOfValue = allHackedMachines\\r\\n            .filter(x => !x.server.purchasedByPlayer && x.server.moneyMax !== 0 && !targetNames.includes(x.name))\\r\\n            .sort((a, b) => b.server.moneyMax - a.server.moneyMax);\\r\\n\\r\\n        // only add machine if 90%+ chances of successfully hacking at minDifficulty. \\r\\n        let mostValuableMachine;\\r\\n        for (const hackPossibility of allMachinesByOrderOfValue) {\\r\\n            const server = ns.getServer(hackPossibility.name);\\r\\n            server.hackDifficulty = server.minDifficulty;\\r\\n            const chanceOfHackingAtMinDif = ns.formulas.hacking.hackChance(server, player);\\r\\n\\r\\n            if (chanceOfHackingAtMinDif > 0.8) {\\r\\n                mostValuableMachine = hackPossibility;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (mostValuableMachine) {\\r\\n            batchQueue.set(mostValuableMachine.name, new BatchQueueForTarget());\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getHackThreadsForTotalStealing(ns, theTarget, targetServer) {\\r\\n    return Math.ceil(ns.hackAnalyzeThreads(theTarget, targetServer.moneyAvailable));\\r\\n}\\r\\n\\r\\nfunction getGrowThreads(ns, serverToHack, player, cpuCores) {\\r\\n    return Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, cpuCores));\\r\\n}\\r\\n\\r\\nfunction createNewDataFromOldDateAndAddSeconds(date, secondsToAdd) {\\r\\n    const newDate = new Date(date);\\r\\n    addSecondsToDate(newDate, secondsToAdd);\\r\\n    return newDate;\\r\\n}\\r\\n\\r\\nfunction createNewDataFromOldDateAndAddMilliseconds(date, secondsToAdd) {\\r\\n    const newDate = new Date(date);\\r\\n    addMillisecondsToDate(newDate, secondsToAdd);\\r\\n    return newDate;\\r\\n}\\r\\n\\r\\n\\r\\nfunction addSecondsToDate(date, secondsToAdd) {\\r\\n    date.setSeconds(date.getSeconds() + secondsToAdd);\\r\\n}\\r\\n\\r\\nfunction addMillisecondsToDate(date, msToAdd) {\\r\\n    date.setMilliseconds(date.getMilliseconds() + msToAdd);\\r\\n}\\r\\n\\r\\nfunction getWeakenEndDate(ns, targetServer, player, difficultyToWeaken) {\\r\\n    let endDate = new Date();\\r\\n    targetServer.hackDifficulty = targetServer.minDifficulty + difficultyToWeaken;\\r\\n\\r\\n    const howLongToWeaken = ns.formulas.hacking.weakenTime(targetServer, player);\\r\\n\\r\\n    endDate.setMilliseconds(endDate.getMilliseconds() + howLongToWeaken);\\r\\n    return endDate;\\r\\n}\\r\\n\\r\\nfunction getGrowEndDate(ns, targetServer, player) {\\r\\n    let endDate = new Date();\\r\\n    targetServer.moneyAvailable = 0;\\r\\n    targetServer.hackDifficulty = targetServer.minDifficulty;\\r\\n\\r\\n    const howLongToGrow = ns.formulas.hacking.growTime(targetServer, player);\\r\\n\\r\\n    endDate.setMilliseconds(endDate.getMilliseconds() + howLongToGrow);\\r\\n    return endDate;\\r\\n}\\r\\n\\r\\nfunction getHackEndDate(ns, targetServer, player) {\\r\\n    let endDate = new Date();\\r\\n    targetServer.moneyAvailable = targetServer.moneyMax;\\r\\n    targetServer.hackDifficulty = targetServer.minDifficulty;\\r\\n\\r\\n    const howLongToHack = ns.formulas.hacking.hackTime(targetServer, player);\\r\\n\\r\\n    endDate.setMilliseconds(endDate.getMilliseconds() + howLongToHack);\\r\\n    return endDate;\\r\\n}\\r\\n\\r\\nfunction getNumberOfThreadsToWeaken(ns, cpuCores, amountToWeaken) {\\r\\n    let numberOfThreadsToWeaken = 0;\\r\\n    let foundNumberOfThreads = false;\\r\\n    while (!foundNumberOfThreads) {\\r\\n        numberOfThreadsToWeaken++;\\r\\n\\r\\n        const amountNumberOfThreadsWillWeaken = Math.ceil(ns.weakenAnalyze(numberOfThreadsToWeaken, cpuCores));\\r\\n        if (amountNumberOfThreadsWillWeaken > amountToWeaken) {\\r\\n            foundNumberOfThreads = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //add a small margin\\r\\n    numberOfThreadsToWeaken += 20;\\r\\n    return numberOfThreadsToWeaken;\\r\\n}\\r\\n\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    canSellAmountAndStillHaveReserve(amountToSell) {\\r\\n        return (this.moneyInvested - amountToSell) > this.capitalToReserveForTrading;\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = (moneyInvested + ns.getServerMoneyAvailable(\\\"home\\\")) * .75;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"batch-dispatch\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"batch-dispatch\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/hacking/batch-dispatch.js\",\"server\":\"home\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"home\"}}],[\"scripts/hacking/memory-starved-dispatch.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const hackScript = 'scripts/hacking/hack.js';\\r\\nconst growScript = 'scripts/hacking/grow.js';\\r\\nconst weakenScript = 'scripts/hacking/weaken.js';\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const memoryStarvedQueueFileName = 'data/memoryStarvedQueue.txt';\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\";\\r\\n\\r\\n    const homeMemoryLimitations = JSON.parse(ns.read(\\\"data/ramToReserveOnHome.txt\\\"));\\r\\n\\r\\n\\r\\n    let batchTargets = [];\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        const batchQueue = JSON.parse(ns.read(batchQueuesFileName));\\r\\n        batchTargets = batchQueue.map(x => x[0]);\\r\\n    }\\r\\n\\r\\n\\r\\n    let memoryStarvedQueue = new Map();\\r\\n    if (ns.fileExists(memoryStarvedQueueFileName)) {\\r\\n        memoryStarvedQueue = new Map(JSON.parse(ns.read(memoryStarvedQueueFileName)));\\r\\n    }\\r\\n\\r\\n    cleanProcessesAttackingBatchTarget(ns, memoryStarvedQueue, batchTargets);\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n    const allHackedMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    let allMachinesByOrderOfValue = allHackedMachines\\r\\n        .filter(x => !x.server.purchasedByPlayer && !batchTargets.includes(x.name) && x.server.moneyMax > 0)\\r\\n        .sort((a, b) => b.server.moneyMax - a.server.moneyMax)\\r\\n        .map(x => new HackedRecord(\\r\\n            x.name,\\r\\n            x.server.moneyMax,\\r\\n            x.server.minDifficulty,\\r\\n            x.server.hackDifficulty,\\r\\n            x.server.moneyAvailable,\\r\\n        ))\\r\\n\\r\\n    if (ns.getHackingLevel() < 250) {\\r\\n        allMachinesByOrderOfValue = allMachinesByOrderOfValue\\r\\n            .sort((a, b) => a.hackDifficulty - b.hackDifficulty)\\r\\n    }\\r\\n\\r\\n    seeIfWeNeedToDoNextStep(ns, memoryStarvedQueue);\\r\\n\\r\\n    const machinesNextInQueueToHack = getMachinesToHack(allMachinesByOrderOfValue, memoryStarvedQueue, ns);\\r\\n\\r\\n    const hackQueue = [];\\r\\n    const growAndWeakenQueue = [];\\r\\n\\r\\n    machinesNextInQueueToHack.forEach(machineInQuestion => {\\r\\n        if (machineInQuestion.needsWeakening() || machineInQuestion.needsGrowing()) {\\r\\n            growAndWeakenQueue.push(machineInQuestion);\\r\\n        } else {\\r\\n            hackQueue.push(machineInQuestion);\\r\\n        }\\r\\n    });\\r\\n\\r\\n    for (const target of hackQueue) {\\r\\n        let numberOfThreads = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable));\\r\\n\\r\\n        await executeScriptAcrossFleet(ns, hackScript, enviroment, homeMemoryLimitations, numberOfThreads, target, memoryStarvedQueue);\\r\\n    }\\r\\n\\r\\n    for (const target of growAndWeakenQueue) {\\r\\n        let threadsNeeded;\\r\\n        let script;\\r\\n\\r\\n        if (target.needsGrowing()) {\\r\\n\\r\\n            script = growScript;\\r\\n            const serverToHack = getServer(ns, target.name, homeMemoryLimitations);\\r\\n            const player = ns.getPlayer();\\r\\n\\r\\n            if (ns.fileExists('Formulas.exe')) {\\r\\n                threadsNeeded = Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, 1));\\r\\n            } else {\\r\\n                threadsNeeded = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable)) * 5;\\r\\n\\r\\n                if (threadsNeeded === 0) {\\r\\n                    threadsNeeded = 500;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (target.needsWeakening()) {\\r\\n            script = weakenScript;\\r\\n            const amountToWeaken = target.hackDifficulty - target.minDifficulty;\\r\\n\\r\\n            threadsNeeded = getNumberOfThreadsToWeaken(ns, 1, amountToWeaken);\\r\\n        }\\r\\n\\r\\n        await executeScriptAcrossFleet(ns, script, enviroment, homeMemoryLimitations, threadsNeeded, target, memoryStarvedQueue);\\r\\n    }\\r\\n\\r\\n    ns.rm(memoryStarvedQueueFileName);\\r\\n    ns.write(memoryStarvedQueueFileName, JSON.stringify(Array.from(memoryStarvedQueue.entries()), \\\"W\\\"));\\r\\n}\\r\\n\\r\\nasync function executeScriptAcrossFleet(ns, script, enviroment, homeMemoryLimitations, numberOfThreadsWanted, target, memoryStarvedQueue) {\\r\\n    const ramNeededForOneThread = ns.getScriptRam(script);\\r\\n\\r\\n    let numberOfThreadsLeft = numberOfThreadsWanted;\\r\\n    let serversExausted = false;\\r\\n\\r\\n    while (numberOfThreadsLeft > 0 && serversExausted === false) {\\r\\n        const result = getMachineWithNumberOfThreads(ns, enviroment, numberOfThreadsLeft, ramNeededForOneThread, homeMemoryLimitations);\\r\\n\\r\\n        if (!result.machineToRunOn || result.threads <= 0) {\\r\\n            serversExausted = true;\\r\\n        } else {\\r\\n            const machineToRunOn = result.machineToRunOn.hostname;\\r\\n            const threads = result.threads\\r\\n\\r\\n            ns.scp(script, machineToRunOn);\\r\\n            const pid = ns.exec(script, machineToRunOn, threads, target.name);\\r\\n\\r\\n            if (pid !== 0) {\\r\\n                target.pids.push(pid);\\r\\n                target.runningOn.push({ machineToRunOn, threads })\\r\\n            }\\r\\n\\r\\n            numberOfThreadsLeft -= threads;\\r\\n\\r\\n            memoryStarvedQueue.set(target.name, target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getMachineWithNumberOfThreads(ns, enviroment, threads, ramCostPerThread, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n    const buyOrUpgradeServerFlag = 'buyOrUpgradeServerFlag.txt';\\r\\n    let originalAmountNeeded = ramCostPerThread * threads;\\r\\n\\r\\n    let globalMaxAmountNeeded = 0;\\r\\n\\r\\n    if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n        globalMaxAmountNeeded = JSON.parse(ns.read(buyOrUpgradeServerFlag));\\r\\n    }\\r\\n\\r\\n    if (originalAmountNeeded > globalMaxAmountNeeded) {\\r\\n        globalMaxAmountNeeded = originalAmountNeeded;\\r\\n        ns.rm(buyOrUpgradeServerFlag);\\r\\n        ns.write(buyOrUpgradeServerFlag, globalMaxAmountNeeded, \\\"W\\\");\\r\\n    }\\r\\n\\r\\n    machineToRunOn = getMachineWithEnoughRam(ns, threads * ramCostPerThread, enviroment, homeMemoryLimitations);\\r\\n\\r\\n    while (threads > 0 && !machineToRunOn) {\\r\\n        threads--;\\r\\n\\r\\n        machineToRunOn = getMachineWithEnoughRam(ns, threads * ramCostPerThread, enviroment, homeMemoryLimitations);\\r\\n    }\\r\\n\\r\\n    return { threads, machineToRunOn };\\r\\n}\\r\\n\\r\\nfunction getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n\\r\\n    const allHackableMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    allHackableMachines.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const machinesWithRamAvailable = allHackableMachines\\r\\n        .filter(x => x.server.ramUsed < x.server.maxRam && x.server.maxRam !== 0);\\r\\n\\r\\n    const serversWithEnoughRam = machinesWithRamAvailable\\r\\n        .filter(x => (x.server.maxRam - x.server.ramUsed) > ramNeeded)\\r\\n        .sort((b, a) => b.server.maxRam - a.server.maxRam);\\r\\n\\r\\n    for (const potentialServerToRun of serversWithEnoughRam) {\\r\\n        const server = getServer(ns, potentialServerToRun.name, homeMemoryLimitations);\\r\\n\\r\\n        const freeRam = server.maxRam - server.ramUsed;\\r\\n        if (freeRam > ramNeeded) {\\r\\n            machineToRunOn = server;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machineToRunOn;\\r\\n}\\r\\n\\r\\n\\r\\nfunction getServer(ns, serverName, homeMemoryLimitations) {\\r\\n    const server = ns.getServer(serverName);\\r\\n\\r\\n    if (serverName === \\\"home\\\") {\\r\\n\\r\\n        let ramToReserve = homeMemoryLimitations.ramToReserve;\\r\\n\\r\\n        if (server.maxRam < ramToReserve) {\\r\\n            ramToReserve = homeMemoryLimitations.ramToReserveInLimitedEnvironment;\\r\\n        }\\r\\n\\r\\n        server.maxRam -= ramToReserve;\\r\\n\\r\\n        const freeRam = server.maxRam - server.ramUsed\\r\\n\\r\\n        if (freeRam < 0) {\\r\\n            server.ramUsed = server.maxRam;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return server;\\r\\n}\\r\\n\\r\\nfunction cleanProcessesAttackingBatchTarget(ns, memoryStarvedQueue, batchTargets) {\\r\\n    for (const machineBeingHacked of memoryStarvedQueue) {\\r\\n        const whoTheyHackin = machineBeingHacked[0];\\r\\n\\r\\n        if (batchTargets.includes(whoTheyHackin)) {\\r\\n            const hackinRecord = memoryStarvedQueue.get(whoTheyHackin);\\r\\n            for (const pid of hackinRecord.pids) {\\r\\n                ns.kill(pid);\\r\\n            }\\r\\n\\r\\n            memoryStarvedQueue.delete(whoTheyHackin);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nfunction getMachinesToHack(hackableMachinesInTheEnvironment, memoryStarvedQueue, ns) {\\r\\n    const machinesNextInQueueToHack = [];\\r\\n    const doNotAdd = [];\\r\\n\\r\\n    for (const hackableMachine of hackableMachinesInTheEnvironment) {\\r\\n        if (memoryStarvedQueue.has(hackableMachine.name)) {\\r\\n            const record = memoryStarvedQueue.get(hackableMachine.name);\\r\\n            if (record.readyForNextProcess) {\\r\\n                machinesNextInQueueToHack.push(hackableMachine);\\r\\n            }\\r\\n\\r\\n            doNotAdd.push(hackableMachine);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const hackableMachine of hackableMachinesInTheEnvironment) {\\r\\n        if (!doNotAdd.find(x => x.name === hackableMachine.name)) {\\r\\n            machinesNextInQueueToHack.push(hackableMachine);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machinesNextInQueueToHack;\\r\\n}\\r\\n\\r\\nexport class HackedRecord {\\r\\n    constructor(name, maxMoney, minDifficulty, hackDifficulty, moneyAvailable) {\\r\\n        this.name = name;\\r\\n        this.moneyThreshhold = maxMoney * 0.75;\\r\\n        this.securityThreshholdTarget = minDifficulty + 5;\\r\\n        this.hackDifficulty = hackDifficulty;\\r\\n        this.moneyAvailable = moneyAvailable;\\r\\n        this.minDifficulty = minDifficulty;\\r\\n        this.pids = [];\\r\\n\\r\\n        this.runningOn = [];\\r\\n\\r\\n        this.isHacking = false;\\r\\n        this.readyForNextProcess = false;\\r\\n    }\\r\\n\\r\\n    needsWeakening() {\\r\\n        return this.hackDifficulty > this.securityThreshholdTarget;\\r\\n    }\\r\\n\\r\\n    needsGrowing() {\\r\\n        return this.moneyAvailable < this.moneyThreshhold;\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getNumberOfThreadsToWeaken(ns, cpuCores, amountToWeaken) {\\r\\n    let numberOfThreadsToWeaken = 0;\\r\\n    let foundNumberOfThreads = false;\\r\\n    while (!foundNumberOfThreads) {\\r\\n        numberOfThreadsToWeaken++;\\r\\n\\r\\n        const amountNumberOfThreadsWillWeaken = Math.ceil(ns.weakenAnalyze(numberOfThreadsToWeaken, cpuCores));\\r\\n        if (amountNumberOfThreadsWillWeaken > amountToWeaken) {\\r\\n            foundNumberOfThreads = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //add a small margin\\r\\n    numberOfThreadsToWeaken += 20;\\r\\n    return numberOfThreadsToWeaken;\\r\\n}\\r\\n\\r\\nfunction seeIfWeNeedToDoNextStep(ns, recordOfWhoIsBeingHacked) {\\r\\n    for (const companyBeingHacked of recordOfWhoIsBeingHacked.keys()) {\\r\\n        const record = recordOfWhoIsBeingHacked.get(companyBeingHacked);\\r\\n\\r\\n        if (record.pids.every(x => !ns.isRunning(x))) {\\r\\n            if (record.isHacking) {\\r\\n                recordOfWhoIsBeingHacked.delete(companyBeingHacked)\\r\\n            } else {\\r\\n                record.readyForNextProcess = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/memory-starved-dispatch.js\",\"server\":\"home\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"home\"}}],[\"scripts/hacking/hack-until-worked.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n    let moneyStolen = 0;\\r\\n\\r\\n    while (moneyStolen === 0) {\\r\\n        moneyStolen = await ns.hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/hack-until-worked.js\",\"server\":\"home\"}}],[\"scripts/hacking/hack-all-machines.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const helpers = new Helpers(ns);\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n\\r\\n    const portsWeCanPop = helpers.numberOfPortsWeCanPop();\\r\\n    const currentHackingLevel = ns.getHackingLevel();\\r\\n\\r\\n    const allHackableMachines = enviroment\\r\\n        .filter(x => x.server.requiredHackingSkill < currentHackingLevel)\\r\\n        .filter(x => x.server.numOpenPortsRequired <= portsWeCanPop || x.server.purchasedByPlayer);\\r\\n\\r\\n    allHackableMachines\\r\\n        .filter(x => !x.server.hasAdminRights)\\r\\n        .map(x => helpers.hackMachine(x.name));\\r\\n}\\r\\n\\r\\nexport class Helpers {\\r\\n    constructor(ns) {\\r\\n        this.ns = ns;\\r\\n    }\\r\\n\\r\\n    hackMachine(hostname) {\\r\\n        if (this.fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n            this.ns.brutessh(hostname);\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"FTPCrack.exe\\\")) {\\r\\n            this.ns.ftpcrack(hostname);\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"relaySMTP.exe\\\")) {\\r\\n            this.ns.relaysmtp(hostname)\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"HTTPWorm.exe\\\")) {\\r\\n            this.ns.httpworm(hostname)\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"SQLInject.exe\\\")) {\\r\\n            this.ns.sqlinject(hostname)\\r\\n        }\\r\\n\\r\\n        this.ns.nuke(hostname);\\r\\n        this.ns.killall(hostname);\\r\\n    }\\r\\n\\r\\n    numberOfPortsWeCanPop() {\\r\\n        let portsWeCanPop = 0;\\r\\n        if (this.fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"FTPCrack.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"relaySMTP.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"HTTPWorm.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"SQLInject.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        return portsWeCanPop;\\r\\n    }\\r\\n\\r\\n    fileExists(fileName) {\\r\\n        return this.ns.fileExists(fileName, \\\"home\\\");\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/hack-all-machines.js\",\"server\":\"home\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"home\"}}],[\"scripts/investments/invest-in-nodes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const moneyToInvest = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (moneyToInvest < 1_000_000_000_000) {\\r\\n        return;\\r\\n    }\\r\\n    \\r\\n    let endDate = ns.args[0];\\r\\n\\r\\n    if (endDate === undefined){\\r\\n        endDate = new Date();\\r\\n        endDate.setHours(endDate.getHours() + 6);\\r\\n    } else {\\r\\n        const timeLeftInSeconds = (new Date(endDate) - new Date()) / 1000;\\r\\n        const conservativeTimeLeft = timeLeftInSeconds / 2;\\r\\n    \\r\\n        let numberPurchased = 0\\r\\n    \\r\\n        while(buyHacknetNodeIfAboveBreakeven(ns, conservativeTimeLeft)){\\r\\n            numberPurchased++;\\r\\n        }\\r\\n\\r\\n        if(numberPurchased != 0){\\r\\n            ns.tprint(\\\"Total nodes purchase: \\\", numberPurchased);\\r\\n        }        \\r\\n    }\\r\\n}\\r\\n\\r\\nfunction buyHacknetNodeIfAboveBreakeven(ns, secondsLeft) {\\r\\n    const productionMultiplier = 2.8991;\\r\\n    const upgradeCostMultiplier = 0.8700;\\r\\n\\r\\n    const fixedCostOfFullyUpgradedNode = 409_194_200 * upgradeCostMultiplier;\\r\\n    const variableCost = ns.hacknet.getPurchaseNodeCost();\\r\\n    const totalCost = variableCost + fixedCostOfFullyUpgradedNode;\\r\\n\\r\\n    const moneyToInvest = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (totalCost > moneyToInvest) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    const revPerSecond = 9172 * productionMultiplier;\\r\\n    const expectedValue = secondsLeft * revPerSecond;\\r\\n\\r\\n    if (expectedValue < totalCost) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    const indexOfNode = ns.hacknet.purchaseNode();\\r\\n    ns.hacknet.upgradeLevel(indexOfNode, 199);\\r\\n    ns.hacknet.upgradeRam(indexOfNode, 6);\\r\\n    ns.hacknet.upgradeCore(indexOfNode, 15);\\r\\n\\r\\n    return true;\\r\\n}\\r\\n\\r\\n\",\"filename\":\"scripts/investments/invest-in-nodes.js\",\"server\":\"home\"}}],[\"scripts/investments/purchase-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let countOfTriesToBuyServers = 0;\\r\\nlet countOfVisitsWithoutTryingToBuy = 0;\\r\\nconst beforeFormulasServerSpendFile = \\\"data/beforeFormulasServerSpend.txt\\\";\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const buyOrUpgradeServerFlag = \\\"../../buyOrUpgradeServerFlag.txt\\\";\\r\\n    const ramObservationsTextFile = '../../data/ramObservations.txt';\\r\\n    const typeRecord = \\\"../../data/typeOfServerPurchase.txt\\\";\\r\\n    \\r\\n    const stopInvestingFileName = \\\"stopInvesting.txt\\\";\\r\\n    if (ns.fileExists(stopInvestingFileName)) {\\r\\n        if (ns.fileExists(ramObservationsTextFile)) {\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let additionalRamNeeded = 0;\\r\\n    let ramObservations = [];\\r\\n    let type = new TypeOfPurchase();\\r\\n\\r\\n    if (ns.fileExists(ramObservationsTextFile)) {\\r\\n        countOfVisitsWithoutTryingToBuy++;\\r\\n    } else {\\r\\n        countOfVisitsWithoutTryingToBuy = 0;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n        countOfVisitsWithoutTryingToBuy = 0;\\r\\n    }\\r\\n\\r\\n    let tryToBuy = ns.fileExists(buyOrUpgradeServerFlag);\\r\\n\\r\\n    if (tryToBuy === false && countOfVisitsWithoutTryingToBuy < 300) {\\r\\n        tryToBuy = true;\\r\\n    }\\r\\n\\r\\n    if (tryToBuy === false) {\\r\\n        return;\\r\\n    } else {\\r\\n        countOfTriesToBuyServers++;\\r\\n\\r\\n        if (ns.fileExists(typeRecord)) {\\r\\n            const tempType = JSON.parse(ns.read(typeRecord));\\r\\n            type = new TypeOfPurchase(tempType);\\r\\n        }\\r\\n\\r\\n        if (!type.lastPurchaseDate) {\\r\\n            type.lastPurchaseDate = new Date();\\r\\n        }\\r\\n\\r\\n        if (ns.fileExists(ramObservationsTextFile)) {\\r\\n            ramObservations = JSON.parse(ns.read(ramObservationsTextFile));\\r\\n\\r\\n        }\\r\\n\\r\\n        if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n            const latestRamNeeded = JSON.parse(ns.read(buyOrUpgradeServerFlag));\\r\\n\\r\\n            ramObservations.push(latestRamNeeded);\\r\\n\\r\\n            ns.rm(buyOrUpgradeServerFlag);\\r\\n\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n            ns.write(ramObservationsTextFile, JSON.stringify(ramObservations), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        if (ramObservations.length === 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (ramObservations.length > 10 || countOfTriesToBuyServers > 300) {\\r\\n\\r\\n            additionalRamNeeded = Math.min(...ramObservations);\\r\\n\\r\\n            if (type.average) {\\r\\n                additionalRamNeeded = ramObservations.reduce((a, b) => a + b) / ramObservations.length;\\r\\n            }\\r\\n\\r\\n            if (ns.fileExists('Formulas.exe')) {\\r\\n                if (type.max) {\\r\\n                    additionalRamNeeded = Math.max(...ramObservations);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            const ramNeededForBatchesFile = \\\"data/ramNeededToStartBatches.txt\\\";\\r\\n            if (ns.fileExists(ramNeededForBatchesFile)) {\\r\\n                const ramNeededToStartBatches = Number(ns.read(ramNeededForBatchesFile));\\r\\n\\r\\n                if (ramNeededToStartBatches < additionalRamNeeded) {\\r\\n                    additionalRamNeeded = ramNeededToStartBatches;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (additionalRamNeeded === 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        let maxRam = 1048576;\\r\\n\\r\\n        const enviroment = JSON.parse(ns.read('../../data/enviroment.txt'));\\r\\n\\r\\n        const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n        let stockMarketReserveMoney = new ReserveForTrading();\\r\\n        if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n            stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n        }\\r\\n\\r\\n\\r\\n        const playerPurchasedServers = enviroment\\r\\n            .filter(x => x.server.purchasedByPlayer && x.server.maxRam < maxRam)\\r\\n            .sort((b, a) => a.server.maxRam - b.server.maxRam)\\r\\n\\r\\n        let upgradedOrPurchased = false;\\r\\n        if (playerPurchasedServers.length === 0) {\\r\\n            upgradedOrPurchased = purchaseServer(ns, maxRam, additionalRamNeeded, stockMarketReserveMoney);\\r\\n        } else {\\r\\n            const smallestPlayerPurchasedServer = playerPurchasedServers.pop();\\r\\n            upgradedOrPurchased = upgradeSmallMachine(ns, smallestPlayerPurchasedServer, maxRam, additionalRamNeeded, stockMarketReserveMoney);\\r\\n        }\\r\\n\\r\\n        if (upgradedOrPurchased) {\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n            type.changeType();\\r\\n            const now = new Date();\\r\\n            const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n            ns.toast(`${timeStamp} More than ${Math.round(additionalRamNeeded)} GB bought for server`, \\\"success\\\", 300000);\\r\\n        }\\r\\n\\r\\n        ns.rm(typeRecord);\\r\\n        ns.write(typeRecord, JSON.stringify(type), \\\"W\\\");\\r\\n        if (countOfTriesToBuyServers > 100) {\\r\\n            countOfTriesToBuyServers = 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction purchaseServer(ns, maxRam, additionalRamNeeded, stockMarketReserveMoney) {\\r\\n    let currentNumberOfPurchasedServers = ns.getPurchasedServers().length;\\r\\n    let ramToBuy = 64;\\r\\n\\r\\n    if (currentNumberOfPurchasedServers < ns.getPurchasedServerLimit()) {\\r\\n\\r\\n        let purchaseCost = ns.getPurchasedServerCost(ramToBuy);\\r\\n        let moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        if (moneyAvailable > purchaseCost) {\\r\\n\\r\\n            while (moneyAvailable > purchaseCost && ramToBuy < additionalRamNeeded) {\\r\\n\\r\\n                ramToBuy = ramToBuy * 2;\\r\\n\\r\\n                purchaseCost = ns.getPurchasedServerCost(ramToBuy);\\r\\n            }\\r\\n\\r\\n            if (ramToBuy > maxRam) {\\r\\n                ramToBuy = maxRam;\\r\\n            }\\r\\n            const canBuy = stockMarketReserveMoney.canSpend(ns, purchaseCost);\\r\\n\\r\\n            if (canBuy && ramToBuy > additionalRamNeeded) {\\r\\n                const hostname = \\\"CLOUD-\\\" + String(currentNumberOfPurchasedServers).padStart(3, '0')\\r\\n                ns.purchaseServer(hostname, ramToBuy);\\r\\n\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            if (countOfTriesToBuyServers > 100) {\\r\\n                ns.toast(\\\"Not enough money to buy new server\\\", \\\"warning\\\", 3000)\\r\\n                countOfTriesToBuyServers = 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n}\\r\\n\\r\\nfunction upgradeSmallMachine(ns, smallestPlayerPurchasedServer, maxRam, additionalRamNeeded, stockMarketReserveMoney) {\\r\\n\\r\\n    let ramToBuy = smallestPlayerPurchasedServer.server.maxRam * 2;\\r\\n\\r\\n    while (!(ramToBuy - smallestPlayerPurchasedServer.server.maxRam > additionalRamNeeded)) {\\r\\n        ramToBuy = ramToBuy * 2;\\r\\n    }\\r\\n\\r\\n    if (ramToBuy >= maxRam) {\\r\\n        ramToBuy = maxRam;\\r\\n    }\\r\\n\\r\\n    const costOfRamToBuy = ns.getPurchasedServerUpgradeCost(smallestPlayerPurchasedServer.name, ramToBuy);\\r\\n    const canSpendMoney = stockMarketReserveMoney.canSpend(ns, costOfRamToBuy);\\r\\n\\r\\n    if (canSpendMoney) {\\r\\n        ns.upgradePurchasedServer(smallestPlayerPurchasedServer.name, ramToBuy);\\r\\n\\r\\n        return true;\\r\\n    } else {\\r\\n        if (countOfTriesToBuyServers > 100) {\\r\\n            const now = new Date();\\r\\n            const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n            ns.toast(`${timeStamp} Too expensive to buy ${ramToBuy} $${Number((costOfRamToBuy).toFixed(2)).toLocaleString()}`, \\\"warning\\\", 300000);\\r\\n            countOfTriesToBuyServers = 0;\\r\\n        }\\r\\n\\r\\n        return purchaseServer(ns, maxRam, additionalRamNeeded, stockMarketReserveMoney);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nclass TypeOfPurchase {\\r\\n\\r\\n    max = false;\\r\\n    min = true;\\r\\n    average = false;\\r\\n    lastPurchaseDate = new Date();\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n\\r\\n    changeType() {\\r\\n\\r\\n        if (this.min) {\\r\\n            this.min = false;\\r\\n            this.average = true;\\r\\n            this.max = false;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (this.average) {\\r\\n            this.min = false;\\r\\n            this.average = false;\\r\\n            this.max = true;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (this.max) {\\r\\n            this.min = true;\\r\\n            this.average = false;\\r\\n            this.max = false;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        this.lastPurchaseDate = new Date();\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = moneyInvested / 2;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n// ns.tprint(`${canSpend} = ${moneyNeeded} < ${moneyOnHome} - ${moneyToSaveForTrading}`)\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            const debugInfor = {moneyOnHome, moneyNeeded, moneyToSaveForTrading, canSpend}\\r\\n            // ns.write(`data/canpuchase${new Date().toJSON().replaceAll(\\\".\\\", \\\"\\\")}.txt`, JSON.stringify(debugInfor), \\\"W\\\")\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"purchase-server\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"purchase-server\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/investments/purchase-server.js\",\"server\":\"home\"}}],[\"scripts/investments/invest-in-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const ramObservationsTextFile = '../../data/ramObservations.txt';\\r\\n    \\r\\n    const stopInvestingFileName = \\\"stopInvesting.txt\\\";\\r\\n    if (ns.fileExists(stopInvestingFileName)) {\\r\\n        if (ns.fileExists(ramObservationsTextFile)) {\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n    let stockMarketReserveMoney = new ReserveForTrading();\\r\\n    if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n        stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n    }\\r\\n\\r\\n    checkTor(ns, stockMarketReserveMoney);\\r\\n\\r\\n    if (stockMarketReserveMoney.capitalToReserveForTrading > 4_000_000_000) {\\r\\n        if (!ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n            checkTor(ns);\\r\\n            const formulasCost = ns.singularity.getDarkwebProgramCost(\\\"Formulas.exe\\\")\\r\\n            if(stockMarketReserveMoney.canSpend(ns, formulasCost)){\\r\\n                ns.singularity.purchaseProgram(\\\"Formulas.exe\\\");\\r\\n                ns.rm(ramObservationsTextFile);\\r\\n                ns.rm('../../buyOrUpgradeServerFlag.txt');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    purchaseProgram(ns, 50, \\\"BruteSSH.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 100, \\\"FTPCrack.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 250, \\\"relaySMTP.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 500, \\\"HTTPWorm.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 750, \\\"SQLInject.exe\\\", stockMarketReserveMoney);\\r\\n}\\r\\n\\r\\nfunction purchaseProgram(ns, atWhatHackingLevelToBuy, programToBuy, stockMarketReserveMoney) {\\r\\n    const playerHackingLevel = ns.getHackingLevel();\\r\\n    if (!ns.fileExists(programToBuy) && playerHackingLevel > atWhatHackingLevelToBuy && ns.hasTorRouter()) {\\r\\n\\r\\n        const cost = ns.singularity.getDarkwebProgramCost(programToBuy);\\r\\n\\r\\n        if(stockMarketReserveMoney.canSpend(ns, cost)){\\r\\n            ns.singularity.purchaseProgram(programToBuy);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction checkTor(ns, stockMarketReserveMoney) {\\r\\n    if (!ns.hasTorRouter() && stockMarketReserveMoney.canSpend(ns, 200_000)) {\\r\\n        ns.singularity.purchaseTor()\\r\\n    }\\r\\n}\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns){\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = moneyInvested / 2;\\r\\n        \\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if(this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit){\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded){\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if(moneyToSaveForTrading < 0){\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if(moneyToSaveForTrading > this.stockMarketReserveMoneyLimit){\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if(canSpend === false){\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"invest-in-programs\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount){\\r\\n\\r\\n        const nameOfRequest = \\\"invest-in-programs\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n\\r\\n        if(moneyRequestedPreviously){\\r\\n            if(moneyRequestedPreviously < amount){\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/investments/invest-in-programs.js\",\"server\":\"home\"}}],[\"scripts/singularity/backdoor-all-machines.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const backdooringFile = \\\"data/backdooring.txt\\\";\\r\\n// run on n00dles continuously? that way we can maybe avoid the annoyingness on home of it going to other machiens. \\r\\nexport async function main(ns) {\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n\\r\\n    if(ns.fileExists(backdooringFile)){\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const machinesToBackdoorFirst = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I.\\\", \\\"run4theh111z\\\"]\\r\\n\\r\\n    for(const machineName of machinesToBackdoorFirst){\\r\\n        if(await backdoorMachine(machineName, enviroment, ns)){\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const machineName of enviroment.map(x => x.name)) {\\r\\n        if(await backdoorMachine(machineName, enviroment, ns)){\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function backdoorMachine (machineName, enviroment, ns){\\r\\n    const serverWithLineage = enviroment.find(x => x.name === machineName)\\r\\n\\r\\n    if (serverWithLineage && !serverWithLineage.server.backdoorInstalled && serverWithLineage.server.hasAdminRights && !serverWithLineage.server.purchasedByPlayer) {\\r\\n        \\r\\n        ns.write(backdooringFile, JSON.stringify(new Date()), \\\"W\\\");\\r\\n        \\r\\n        for (const server of serverWithLineage.lineage) {\\r\\n            await ns.singularity.connect(server);\\r\\n        }\\r\\n\\r\\n        await ns.singularity.connect(serverWithLineage.name);\\r\\n        await ns.singularity.installBackdoor();\\r\\n        await ns.singularity.connect(\\\"home\\\");\\r\\n\\r\\n        ns.rm(backdooringFile);\\r\\n        return true;\\r\\n    } \\r\\n\\r\\n    return false;\\r\\n\\r\\n}\",\"filename\":\"scripts/singularity/backdoor-all-machines.js\",\"server\":\"home\"}}],[\"scripts/singularity/workout.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(false);\\r\\n    const includesHVMind = ownedAugmentations.includes(\\\"ECorp HVMind Implant\\\");\\r\\n\\r\\n    if (!includesHVMind) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    // if(getBuffForFaction(ns, \\\"The Covenant\\\", 850)){\\r\\n    //     return;\\r\\n    // } \\r\\n\\r\\n    if(getBuffForFaction(ns, \\\"Illuminati\\\", 1200)){\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n    if(currentWork && currentWork.type === \\\"CLASS\\\"){\\r\\n        ns.singularity.stopAction();\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\nfunction getBuffForFaction(ns, faction, targetForAttributes){\\r\\n    const player = ns.getPlayer();\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (!player.factions.includes(faction) && (!currentWork || currentWork.type === \\\"CLASS\\\")) {\\r\\n        \\r\\n        if(doExersizeIfAppropriate(player.skills.agility, currentWork, ns, 'agi', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        if(doExersizeIfAppropriate(player.skills.defense, currentWork, ns, 'def', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        if(doExersizeIfAppropriate(player.skills.strength, currentWork, ns, 'str', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        if(doExersizeIfAppropriate(player.skills.dexterity, currentWork, ns, 'dex', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction doExersizeIfAppropriate(skill, currentWork, ns, type, targetForAttributes) {\\r\\n    if (skill < targetForAttributes) {\\r\\n        if (!currentWork || currentWork.classType !== type) {\\r\\n            ns.singularity.travelToCity(\\\"Sector-12\\\");\\r\\n            ns.singularity.gymWorkout(\\\"powerhouse gym\\\", type, true);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/workout.js\",\"server\":\"home\"}}],[\"scripts/singularity/upgade-home-machine.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let visitedBefore = false;\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const ramObservationsTextFile = '../../data/ramObservations.txt';\\r\\n    const stopInvestingFileName = \\\"stopInvesting.txt\\\";\\r\\n    if (ns.fileExists(stopInvestingFileName)) {\\r\\n        if (ns.fileExists(ramObservationsTextFile)) {\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    visitedBefore = false;\\r\\n\\r\\n    await upgradeHomeRamOrCpu(ns, 11_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 100_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 30_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 100_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 1_000_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 10_000_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 100_000_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 1_000_000_000_000_000);\\r\\n}\\r\\n\\r\\nasync function upgradeHomeRamOrCpu(ns, moneyLimit) {\\r\\n    if (visitedBefore) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const ramUpgradeCost = ns.singularity.getUpgradeHomeRamCost();\\r\\n    const coreUpgradeCost = ns.singularity.getUpgradeHomeCoresCost();\\r\\n\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (moneyLimit < coreUpgradeCost && moneyLimit < ramUpgradeCost) {\\r\\n        return;\\r\\n    } else {\\r\\n        visitedBefore = true;\\r\\n    }\\r\\n\\r\\n    const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n    let stockMarketReserveMoney = new ReserveForTrading();\\r\\n    if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n        stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n    }\\r\\n\\r\\n    if (ramUpgradeCost < coreUpgradeCost) {\\r\\n\\r\\n        const moneyLeftOverForRam = moneyAvailable - ramUpgradeCost;\\r\\n\\r\\n        if (moneyLeftOverForRam > moneyLimit) {\\r\\n            if (stockMarketReserveMoney.canSpend(ns, ramUpgradeCost)) {\\r\\n                ns.singularity.upgradeHomeRam();\\r\\n                ns.toast(`Upgraded home ram`, \\\"success\\\", null);\\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n        }\\r\\n\\r\\n    } else {\\r\\n\\r\\n        const moneyLeftOverForCores = moneyAvailable - coreUpgradeCost;\\r\\n\\r\\n        if (moneyLeftOverForCores > moneyLimit) {\\r\\n            if (stockMarketReserveMoney.canSpend(ns, coreUpgradeCost)) {\\r\\n                ns.singularity.upgradeHomeCores()\\r\\n                ns.toast(`Upgraded home core`, \\\"success\\\", null);\\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = moneyInvested / 2;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"upgrade-home-machine\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"upgrade-home-machine\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/upgade-home-machine.js\",\"server\":\"home\"}}],[\"scripts/singularity/travel-to-get-augs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const ownedAugmentations = JSON.parse(ns.read(\\\"data/ownedAugs.txt\\\"));\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (moneyAvailable > 10_000_000 && notInAnyCityFaction(ns)) {\\r\\n\\r\\n        if (travelToGetUniqueAugments(ns, \\\"Neuregen Gene Modification\\\", \\\"Chongqing\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, 'PCMatrix', \\\"Aevum\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, 'CashRoot Starter Kit', \\\"Sector-12\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, \\\"DermaForce Particle Barrier\\\", \\\"Volhaven\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, \\\"NutriGen Implant\\\", \\\"New Tokyo\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, \\\"INFRARET Enhancement\\\", \\\"Ishima\\\", ownedAugmentations)) { return; }\\r\\n    }\\r\\n\\r\\n    const playersLocation = ns.getPlayer().city\\r\\n    if (moneyAvailable > 250_000_000) {\\r\\n        if (ns.singularity.getFactionRep(\\\"Tian Di Hui\\\") === 0 && playersLocation !== \\\"Chongqing\\\") {\\r\\n            ns.singularity.travelToCity(\\\"Chongqing\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction notInAnyCityFaction(ns){\\r\\n    const cityFactions = [\\\"Chongqing\\\", \\\"Aevum\\\", \\\"Sector-12\\\", \\\"Volhaven\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"];\\r\\n\\r\\n    for (const city of cityFactions) {\\r\\n        if(ns.singularity.getFactionRep(city)){\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n}\\r\\n\\r\\nfunction travelToGetUniqueAugments(ns, augmentWanted, city, ownedAugmentations) {\\r\\n    if (!ownedAugmentations.includes(augmentWanted)) {\\r\\n\\r\\n        const playersLocation = ns.getPlayer().city\\r\\n        if (ns.singularity.getFactionRep(city) === 0 && playersLocation !== city) {\\r\\n            ns.singularity.travelToCity(city);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\n\\r\\n\",\"filename\":\"scripts/singularity/travel-to-get-augs.js\",\"server\":\"home\"}}],[\"scripts/singularity/study-computer-science.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (player.factions.length === 0 && !currentWork) {\\r\\n        ns.singularity.universityCourse(\\\"Rothman University\\\", \\\"Computer Science\\\", true);\\r\\n        return;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/singularity/study-computer-science.js\",\"server\":\"home\"}}],[\"scripts/singularity/join-organziations.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const toJoinInOrderInWhichIWantToComplete = [\\r\\n        \\\"CyberSec\\\",\\r\\n        \\\"NiteSec\\\",\\r\\n        \\\"Chongqing\\\",\\r\\n        \\\"The Black Hand\\\",\\r\\n        \\\"Bachman & Associates\\\",\\r\\n        \\\"BitRunners\\\",\\r\\n        \\\"Daedalus\\\",\\r\\n        \\\"NWO\\\",\\r\\n        \\\"OmniTek Incorporated\\\",\\r\\n        \\\"Blade Industries\\\",\\r\\n        \\\"ECorp\\\",\\r\\n    // \\\"The Covenant\\\",\\r\\n        \\\"Illuminati\\\",\\r\\n        \\\"Aevum\\\",\\r\\n        \\\"Volhaven\\\",\\r\\n        \\\"New Tokyo\\\",\\r\\n        \\\"Ishima\\\",\\r\\n        \\\"Tian Di Hui\\\",\\r\\n        \\\"Netburners\\\",\\r\\n    ];\\r\\n\\r\\n    const companiesWeWantToBecomePartOf = [\\r\\n        \\\"Bachman & Associates\\\", \\r\\n        \\\"NWO\\\", \\r\\n        \\\"OmniTek Incorporated\\\", \\r\\n        \\\"Blade Industries\\\", \\r\\n        \\\"ECorp\\\"\\r\\n    ]; \\r\\n\\r\\n    const doNoWorkFor = [\\r\\n        \\\"Aevum\\\",\\r\\n        \\\"Volhaven\\\",\\r\\n        \\\"New Tokyo\\\",\\r\\n        \\\"Ishima\\\",\\r\\n        \\\"Tian Di Hui\\\",\\r\\n        \\\"Netburners\\\"\\r\\n    ];\\r\\n\\r\\n    const stopAtAugments = [\\r\\n        { final: true, faction: \\\"Chongqing\\\", augmentToStopAt: \\\"Neuregen Gene Modification\\\" },\\r\\n        { final: true, faction: \\\"NiteSec\\\", augmentToStopAt: \\\"Cranial Signal Processors - Gen III\\\" },\\r\\n        { final: true, faction: \\\"The Black Hand\\\", augmentToStopAt: \\\"Cranial Signal Processors - Gen IV\\\" },\\r\\n    ]\\r\\n\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    if (moneyAvailable > 150_000_000) {\\r\\n        toJoinInOrderInWhichIWantToComplete.push(\\\"Sector-12\\\");\\r\\n        doNoWorkFor.push(\\\"Sector-12\\\");\\r\\n    }\\r\\n\\r\\n    const factionInvitations = ns.singularity.checkFactionInvitations();\\r\\n\\r\\n    const organzations = { toJoinInOrderInWhichIWantToComplete, companiesWeWantToBecomePartOf, doNoWorkFor, stopAtAugments };\\r\\n\\r\\n    const organizationTextFileName = \\\"data/organizations.txt\\\";\\r\\n    ns.rm(organizationTextFileName);\\r\\n    ns.write(organizationTextFileName, JSON.stringify(organzations), \\\"W\\\");\\r\\n\\r\\n    for (const name of toJoinInOrderInWhichIWantToComplete) {\\r\\n        if (factionInvitations.includes(name)) {\\r\\n            await ns.singularity.joinFaction(name);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/singularity/join-organziations.js\",\"server\":\"home\"}}],[\"scripts/singularity/finish-round.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let incomePerHourEstimate;\\r\\nlet updatedMoneyEstimate = false;\\r\\n\\r\\nexport async function main(ns) {\\r\\n\\r\\n    if (!ns.stock.has4SDataTIXAPI() || !ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const factionToMaxFile = \\\"data/factionToMax.txt\\\";\\r\\n    const factionDonationFile = 'data/factionDonatation.txt'\\r\\n    const incomeEveryMinuteObservationsFile = 'data/incomeEveryMinuteForTheLast30Minutes.txt'\\r\\n\\r\\n    let factionToMax;\\r\\n\\r\\n    let incomeObservations = [];\\r\\n    const lastObservation = new Date();\\r\\n    let lastObservationRecordedMoney = new Date();\\r\\n\\r\\n    const formatter = new Intl.NumberFormat('en-US', {\\r\\n        style: 'currency',\\r\\n        currency: 'USD',\\r\\n    });\\r\\n\\r\\n    if (ns.fileExists(incomeEveryMinuteObservationsFile)) {\\r\\n        const incomePlusDateFromFile = JSON.parse(ns.read(incomeEveryMinuteObservationsFile));\\r\\n        incomeObservations = incomePlusDateFromFile.incomeObservations;\\r\\n        lastObservationRecordedMoney = new Date(incomePlusDateFromFile.lastObservation);\\r\\n    } else {\\r\\n        ns.write(incomeEveryMinuteObservationsFile, JSON.stringify({ incomeObservations, lastObservation }), \\\"W\\\");\\r\\n    }\\r\\n\\r\\n    if (lastObservationRecordedMoney.getMinutes() !== lastObservation.getMinutes()) {\\r\\n        let totalIncomeSinceAugInstall = 0\\r\\n\\r\\n        const moneySources = ns.getMoneySources();\\r\\n\\r\\n        for (let [key, value] of Object.entries(moneySources.sinceInstall)) {\\r\\n            if (key !== \\\"total\\\" && value > 0 && key !== \\\"stock\\\") {\\r\\n                totalIncomeSinceAugInstall += value;\\r\\n            }\\r\\n        }\\r\\n        incomeObservations.push(totalIncomeSinceAugInstall);\\r\\n\\r\\n        const totalIncome30MinutesAgo = incomeObservations[0];\\r\\n\\r\\n        const incomePerMinute = (totalIncomeSinceAugInstall - totalIncome30MinutesAgo) / incomeObservations.length;\\r\\n        incomePerHourEstimate = incomePerMinute * 60;\\r\\n        updatedMoneyEstimate = true;\\r\\n\\r\\n        if (incomeObservations.length > 30) {\\r\\n            incomeObservations.shift();\\r\\n        }\\r\\n\\r\\n        ns.rm(incomeEveryMinuteObservationsFile);\\r\\n        ns.write(incomeEveryMinuteObservationsFile, JSON.stringify({ incomeObservations, lastObservation }), \\\"W\\\");\\r\\n    } else {\\r\\n        updatedMoneyEstimate = false;\\r\\n    }\\r\\n\\r\\n    let analytics = new EndOfRoundAnalytics();\\r\\n    const endOfRoundAnalyticsFile = \\\"analytics/end-round.txt\\\";\\r\\n    if (ns.fileExists(endOfRoundAnalyticsFile)) {\\r\\n        analytics = JSON.parse(ns.read(endOfRoundAnalyticsFile));\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(factionToMaxFile) || ns.fileExists(factionDonationFile)) {\\r\\n        if (ns.fileExists(factionToMaxFile)) {\\r\\n            factionToMax = ns.read(factionToMaxFile);\\r\\n\\r\\n            if (!analytics.firstAssignFactionToMax) {\\r\\n                analytics.firstAssignFactionToMax = new Date();\\r\\n            }\\r\\n        } else {\\r\\n            factionToMax = ns.read(factionDonationFile);\\r\\n\\r\\n            if (!analytics.firstAssignFactionToMaxViaDonation) {\\r\\n                analytics.firstAssignFactionToMaxViaDonation = new Date();\\r\\n            }\\r\\n        }\\r\\n    } else {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (!analytics.factionsToMax.find(x => x.factionToMax === factionToMax)) {\\r\\n        const firstTime = new Date();\\r\\n        analytics.factionsToMax.push({ factionToMax, firstTime });\\r\\n    }\\r\\n\\r\\n    saveAnalytics(ns, analytics);\\r\\n\\r\\n    const player = ns.getPlayer();\\r\\n\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n\\r\\n    const mostRepExpensiveForEachFaction = [];\\r\\n    for (const faction of player.factions) {\\r\\n        const maximumAugRep = Math.max(...ns\\r\\n            .singularity\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n            .filter(x => !ownedAugmentations.includes(x))\\r\\n            .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n        if (maximumAugRep > 0) {\\r\\n            mostRepExpensiveForEachFaction.push({ faction, maximumAugRep });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const targetFaction = mostRepExpensiveForEachFaction\\r\\n        .filter(x => x.faction === factionToMax)\\r\\n        .pop();\\r\\n\\r\\n    setGoalAugment(ownedAugmentations, factionToMax, targetFaction, ns);\\r\\n\\r\\n    const currentFactionRep = ns.singularity.getFactionRep(targetFaction.faction);\\r\\n    const currentFactionFavor = ns.singularity.getFactionFavor(targetFaction.faction);\\r\\n\\r\\n    let targetRepForGettingToFavor = 700_000;\\r\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n        const favorGain = ns.singularity.getFactionFavorGain(targetFaction.faction);\\r\\n        if (favorGain + currentFactionFavor > 75) {\\r\\n            targetRepForGettingToFavor = currentFactionFavor;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (!analytics.firstEncounterOfRepTrigger) {\\r\\n        const repTrigger = populateRepTrigger(targetFaction, currentFactionRep, targetRepForGettingToFavor, ns, factionDonationFile, factionToMaxFile);\\r\\n        analytics.firstEncounterOfRepTrigger = repTrigger;\\r\\n        saveAnalytics(ns, analytics);\\r\\n    }\\r\\n\\r\\n    if (targetFaction.maximumAugRep < currentFactionRep || targetRepForGettingToFavor < currentFactionRep || (ns.fileExists(factionDonationFile) && !ns.fileExists(factionToMaxFile))) {\\r\\n\\r\\n        if (!analytics.repTrigger) {\\r\\n            const repTrigger = populateRepTrigger(targetFaction, currentFactionRep, targetRepForGettingToFavor, ns, factionDonationFile, factionToMaxFile);\\r\\n            analytics.repTrigger = repTrigger;\\r\\n            saveAnalytics(ns, analytics);\\r\\n        }\\r\\n\\r\\n        const factionsWithAugmentsToBuy =\\r\\n            mostRepExpensiveForEachFaction\\r\\n                .map(x => {\\r\\n                    {\\r\\n                        const faction = x.faction;\\r\\n                        const factionRep = ns.singularity.getFactionRep(faction);\\r\\n                        const factionAugmentsThatIDontOwnAndCanAfford = ns\\r\\n                            .singularity\\r\\n                            .getAugmentationsFromFaction(faction)\\r\\n                            .filter(y => y !== \\\"NeuroFlux Governor\\\")\\r\\n                            .filter(y => !ownedAugmentations.includes(y))\\r\\n                            .map(y => {\\r\\n                                return {\\r\\n                                    augmentName: y,\\r\\n                                    augmentationRepCost: ns.singularity.getAugmentationRepReq(y),\\r\\n                                    price: ns.singularity.getAugmentationPrice(y),\\r\\n                                    prereqs: ns.singularity.getAugmentationPrereq(y)\\r\\n                                }\\r\\n                            })\\r\\n                            .filter(y => y.augmentationRepCost < factionRep)\\r\\n                            .sort((a, b) => b.price - a.price);\\r\\n\\r\\n                        return {\\r\\n                            faction,\\r\\n                            factionRep,\\r\\n                            factionAugmentsThatIDontOwnAndCanAfford\\r\\n                        }\\r\\n                    }\\r\\n                });\\r\\n\\r\\n        const priceOfMostExpensiveAugment = Math.max(...factionsWithAugmentsToBuy.find(x => x.faction === targetFaction.faction).factionAugmentsThatIDontOwnAndCanAfford.map(x => x.price));\\r\\n\\r\\n\\r\\n        if (priceOfMostExpensiveAugment < 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // --------\\r\\n        // My augment script ranks every augment that hasn't been purchased by price, and then calculates how many of them I can buy (taking into account the 1.9x price increase per augment, and the additional 1.14x increase per NeuroFlux Governor level). \\r\\n\\r\\n        const purchasableAugments = new Map();\\r\\n\\r\\n        for (const factionWithAugments of factionsWithAugmentsToBuy) {\\r\\n            for (const augment of factionWithAugments.factionAugmentsThatIDontOwnAndCanAfford) {\\r\\n                if (purchasableAugments.has(augment.augmentName) === false) {\\r\\n                    const item = {\\r\\n                        augmentationRepCost: augment.augmentationRepCost,\\r\\n                        price: augment.price,\\r\\n                        prereqs: augment.prereqs,\\r\\n                        faction: factionWithAugments.faction\\r\\n                    }\\r\\n                    purchasableAugments.set(augment.augmentName, item)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        const augmentsLeft = Array.from(purchasableAugments.entries()).sort((a, b) => b[1].price - a[1].price);\\r\\n\\r\\n        const orderedAugments = []; // { factionName, augmentName, basePrice, multipledPrice}\\r\\n\\r\\n        function addPrereqs(prereqName) {\\r\\n            const augment = purchasableAugments.get(prereqName);\\r\\n\\r\\n            if (augment && !ownedAugmentations.find(x => x.augmentName === prereqName)) {\\r\\n\\r\\n                if (augment.prereqs.length > 0) {//it has prereqs, pass it into this. \\r\\n                    for (const prereq of augment.prereqs) {\\r\\n                        addPrereqs(prereq)\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (!orderedAugments.find(x => x.augmentName === prereqName)) {\\r\\n                    orderedAugments.push({ faction: augment.faction, augmentName: prereqName, basePrice: augment.price });\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (const augmentData of augmentsLeft) {\\r\\n            const augmentName = augmentData[0];\\r\\n            const augment = augmentData[1];\\r\\n\\r\\n            if (augment.prereqs.length > 0) {\\r\\n                for (const prereqName of augment.prereqs) {\\r\\n                    addPrereqs(prereqName);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (!orderedAugments.find(x => x.augmentName === augmentName)) {\\r\\n                orderedAugments.push({ faction: augment.faction, augmentName: augmentName, basePrice: augment.price, multipledPrice: 0 })\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        let priceMultipler = 1;\\r\\n\\r\\n        for (const augment of orderedAugments) {\\r\\n            augment.multipledPrice = augment.basePrice * priceMultipler;\\r\\n            priceMultipler *= 1.9;\\r\\n        }\\r\\n\\r\\n        const moneyNeededForAugments = orderedAugments.reduce((acc, x) => acc + x.multipledPrice, 0);\\r\\n\\r\\n        // make a pass for multiplied price\\r\\n\\r\\n        // (faction, augmentName)\\r\\n        // arrange with prereqs in mind\\r\\n        // then 1.9X the cost every purchase\\r\\n        // then figure out how many NeuroFlux governors we can buy with the rep, and then figure out how much that would cost. \\r\\n\\r\\n        // new order ->\\r\\n        // augments\\r\\n        // neuroflux\\r\\n        // computer\\r\\n        // if we have extra money, then we buy more neuroflux with purchased rep\\r\\n\\r\\n\\r\\n\\r\\n        /// ------\\r\\n\\r\\n\\r\\n        let buyAugmentsWhenWeHaveMoreThanThisMuchMoney = moneyNeededForAugments;\\r\\n\\r\\n        const estimatedIncomeForTheNextFourHours = incomePerHourEstimate * 4;\\r\\n\\r\\n        const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        const moneyFormatted = formatter.format(incomePerHourEstimate);\\r\\n\\r\\n        if (moneyFormatted !== \\\"$NaN\\\") {\\r\\n            const hoursTillInstall = Math.floor(buyAugmentsWhenWeHaveMoreThanThisMuchMoney / incomePerHourEstimate);\\r\\n            if (updatedMoneyEstimate) {\\r\\n                const now = new Date();\\r\\n                const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n\\r\\n                ns.toast(`${timeStamp} Income Per Hour Estimate: ${moneyFormatted}. ~Hours to install: ${hoursTillInstall}`, \\\"success\\\", 60000)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!analytics.firstEncoundedMoneyTrigger) {\\r\\n            const moneyTrigger = createMoneyTrigger(estimatedIncomeForTheNextFourHours, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, moneyAvailable, formatter);\\r\\n\\r\\n            analytics.firstEncoundedMoneyTrigger = moneyTrigger;\\r\\n            saveAnalytics(ns, analytics);\\r\\n        }\\r\\n\\r\\n        if (estimatedIncomeForTheNextFourHours > buyAugmentsWhenWeHaveMoreThanThisMuchMoney || moneyAvailable > buyAugmentsWhenWeHaveMoreThanThisMuchMoney) {\\r\\n\\r\\n            const stopInvestingFileName = \\\"stopInvesting.txt\\\";\\r\\n            if (!ns.fileExists(stopInvestingFileName)) {\\r\\n                ns.write(stopInvestingFileName, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, \\\"W\\\")\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            if (moneyAvailable > buyAugmentsWhenWeHaveMoreThanThisMuchMoney) {\\r\\n                const stopStockTradingFileName = \\\"stopTrading.txt\\\";\\r\\n                if (!ns.fileExists(stopStockTradingFileName)) {\\r\\n                    ns.write(stopStockTradingFileName, \\\"\\\", \\\"W\\\")\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                if (!analytics.moneyTrigger) {\\r\\n                    const moneyTrigger = createMoneyTrigger(estimatedIncomeForTheNextFourHours, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, moneyAvailable, formatter);\\r\\n\\r\\n                    analytics.moneyTrigger = moneyTrigger;\\r\\n                    saveAnalytics(ns, analytics);\\r\\n                }\\r\\n\\r\\n                for (const augment of orderedAugments) {\\r\\n                    purchaseAug(ns, augment, analytics);\\r\\n                }\\r\\n\\r\\n                upgradeHomeMachine(ns, analytics);\\r\\n\\r\\n                const factionsByRating = factionsWithAugmentsToBuy.sort((a, b) => b.factionRep - a.factionRep);\\r\\n\\r\\n                purchaseNeuroFluxGovernors(ns, factionsByRating[0].faction, analytics);\\r\\n\\r\\n                analytics.moneyLeft = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n                saveAnalytics(ns, analytics, true);\\r\\n\\r\\n                ns.singularity.installAugmentations('scripts/coordinator.js')\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    saveAnalytics(ns, analytics);\\r\\n}\\r\\n\\r\\nfunction createMoneyTrigger(estimatedIncomeForTheNextFourHours, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, moneyAvailable, formatter) {\\r\\n    const moneyTrigger = new MoneyTrigger();\\r\\n    moneyTrigger.estimatedIncomeTriggered = estimatedIncomeForTheNextFourHours > buyAugmentsWhenWeHaveMoreThanThisMuchMoney;\\r\\n    moneyTrigger.moneyIsGreaterThanTriggered = moneyAvailable > buyAugmentsWhenWeHaveMoreThanThisMuchMoney;\\r\\n\\r\\n    moneyTrigger.estimatedIncomeForTheNextFourHours = formatter.format(estimatedIncomeForTheNextFourHours);\\r\\n    moneyTrigger.moneyRightNow = formatter.format(moneyAvailable);\\r\\n    moneyTrigger.buyArgumentsWhenWeHave = formatter.format(buyAugmentsWhenWeHaveMoreThanThisMuchMoney);\\r\\n    return moneyTrigger;\\r\\n}\\r\\n\\r\\nfunction populateRepTrigger(targetFaction, currentFactionRep, targetRepForGettingToFavor, ns, factionDonationFile, factionToMaxFile) {\\r\\n    const repTrigger = new RepTrigger();\\r\\n    repTrigger.factionRepGreaterThanMaximumAug = targetFaction.maximumAugRep < currentFactionRep;\\r\\n    repTrigger.factionRepGreaterThanTargetToGetToFavorNeeded = targetRepForGettingToFavor < currentFactionRep;\\r\\n    repTrigger.factionDonationTrigger = ns.fileExists(factionDonationFile) && !ns.fileExists(factionToMaxFile);\\r\\n\\r\\n    repTrigger.maximumAugRepNeeded = targetFaction.maximumAugRep;\\r\\n    repTrigger.currentFactionRep = currentFactionRep;\\r\\n    repTrigger.targetRepForGettingToFavor = targetRepForGettingToFavor;\\r\\n    return repTrigger;\\r\\n}\\r\\n\\r\\nfunction saveAnalytics(ns, analytics, final = false) {\\r\\n    let endOfRoundAnalyticsFile = \\\"analytics/end-round.txt\\\";\\r\\n    ns.rm(endOfRoundAnalyticsFile);\\r\\n\\r\\n    if (final) {\\r\\n        const now = new Date()\\r\\n        const factionToMax = analytics.factionsToMax[analytics.factionsToMax.length - 1].factionToMax.replaceAll(' ', '');\\r\\n        endOfRoundAnalyticsFile = `analytics/${now.toISOString().split('T')[0]}-${String(now.getHours()).padStart(2, 0)}-${String(now.getMinutes()).padStart(2, 0)}-${factionToMax}-end-round.txt`;\\r\\n    }\\r\\n\\r\\n    analytics.lastSaved = new Date();\\r\\n    ns.write(endOfRoundAnalyticsFile, JSON.stringify(analytics), \\\"W\\\");\\r\\n}\\r\\n\\r\\nfunction setGoalAugment(ownedAugmentations, factionToMax, targetFaction, ns) {\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n\\r\\n    for (const stopAtAugment of organizations.stopAtAugments) {\\r\\n        const goalAugment = stopAtAugment.augmentToStopAt;\\r\\n        const goalFaction = stopAtAugment.faction;\\r\\n\\r\\n        if (!ownedAugmentations.includes(goalAugment) && factionToMax === goalFaction) {\\r\\n            targetFaction.maximumAugRep = ns.singularity.getAugmentationRepReq(goalAugment);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction purchaseNeuroFluxGovernors(ns, faction, analytics) {\\r\\n\\r\\n    const augmentName = \\\"NeuroFlux Governor\\\"\\r\\n\\r\\n    let price = ns.singularity.getAugmentationPrice(augmentName);\\r\\n    let moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    let augmentRepPrice = ns.singularity.getAugmentationRepReq(augmentName);\\r\\n    let factionRep = ns.singularity.getFactionRep(faction);\\r\\n\\r\\n    while (price < moneyAvailable) {\\r\\n        if (factionRep < augmentRepPrice) {\\r\\n            if (ns.singularity.getFactionFavor(faction) > 75 && ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n                const repNeeded = augmentRepPrice - factionRep;\\r\\n                let dollarsDonated = 0;\\r\\n                let purchasedRep = 0;\\r\\n                const player = ns.getPlayer();\\r\\n                while (repNeeded > purchasedRep) {\\r\\n                    dollarsDonated += 1_000_000;\\r\\n                    purchasedRep = ns.formulas.reputation.repFromDonation(dollarsDonated, player);\\r\\n                }\\r\\n\\r\\n                analytics.moneySpent.repPurchased += dollarsDonated;\\r\\n                ns.singularity.donateToFaction(faction, dollarsDonated);\\r\\n            } else {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        factionRep = ns.singularity.getFactionRep(faction);\\r\\n\\r\\n        if (factionRep > augmentRepPrice) {\\r\\n            analytics.moneySpent.fluxGovernors += price;\\r\\n            ns.singularity.purchaseAugmentation(faction, augmentName);\\r\\n        }\\r\\n\\r\\n        price = ns.singularity.getAugmentationPrice(augmentName);\\r\\n        moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n        augmentRepPrice = ns.singularity.getAugmentationRepReq(augmentName);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction upgradeHomeMachine(ns, analytics) {\\r\\n    const home = \\\"home\\\";\\r\\n    const ramCost = ns.singularity.getUpgradeHomeRamCost();\\r\\n    const coreCost = ns.singularity.getUpgradeHomeCoresCost();\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(home);\\r\\n    const orginalSpecs = ns.getServer(home);\\r\\n\\r\\n    if (ramCost > moneyAvailable && coreCost > moneyAvailable) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (ramCost > coreCost) {\\r\\n        analytics.moneySpent.homeCores += coreCost;\\r\\n        ns.singularity.upgradeHomeCores();\\r\\n    } else {\\r\\n        analytics.moneySpent.homeRam += ramCost;\\r\\n        ns.singularity.upgradeHomeRam();\\r\\n    }\\r\\n\\r\\n    const upgradedServer = ns.getServer(home);\\r\\n\\r\\n    analytics.amountOfRamIncrease += upgradedServer.maxRam - orginalSpecs.maxRam;\\r\\n    analytics.amountOfCoresIncrease += upgradedServer.cpuCores - orginalSpecs.cpuCores;\\r\\n\\r\\n    return upgradeHomeMachine(ns, analytics);\\r\\n}\\r\\n\\r\\nfunction purchaseAug(ns, augment, analytics) {\\r\\n    const ownedAugments = ns.singularity.getOwnedAugmentations(true);\\r\\n    const augmentName = augment.augmentName;\\r\\n\\r\\n    if (ownedAugments.includes(augmentName) === false) {\\r\\n        const augmentPrice = ns.singularity.getAugmentationPrice(augmentName);\\r\\n        const amountOfMoneyWeHave = ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n\\r\\n        if (augmentPrice < amountOfMoneyWeHave) {\\r\\n            analytics.moneySpent.augments += augmentPrice;\\r\\n            if (!analytics.augsBought) {\\r\\n                analytics.augsBought = [];\\r\\n            }\\r\\n            analytics.augsBought.push(augmentName)\\r\\n\\r\\n            ns.singularity.purchaseAugmentation(augment.faction, augmentName);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass EndOfRoundAnalytics {\\r\\n    firstStarted = new Date();\\r\\n\\r\\n\\r\\n    firstAssignFactionToMax;\\r\\n    firstAssignFactionToMaxViaDonation;\\r\\n\\r\\n    factionsToMax = [];\\r\\n\\r\\n    firstEncounterOfRepTrigger;\\r\\n    repTrigger;\\r\\n\\r\\n\\r\\n    firstEncoundedMoneyTrigger;\\r\\n    moneyTrigger;\\r\\n\\r\\n    augsBought = [];\\r\\n\\r\\n    amountOfRamIncrease\\r\\n    amountOfCoresIncrease\\r\\n\\r\\n    moneySpent = new MoneySpent();\\r\\n\\r\\n    moneyLeft = 0;\\r\\n    lastSaved;\\r\\n}\\r\\n\\r\\nclass MoneyTrigger {\\r\\n    estimatedIncomeTriggered;\\r\\n    moneyIsGreaterThanTriggered;\\r\\n\\r\\n    estimatedIncomeForTheNextFourHours;\\r\\n    moneyRightNow;\\r\\n    buyArgumentsWhenWeHave;\\r\\n\\r\\n    time = new Date();\\r\\n}\\r\\n\\r\\nclass MoneySpent {\\r\\n\\r\\n    augments = 0;\\r\\n    homeCores = 0;\\r\\n    homeRam = 0;\\r\\n    fluxGovernors = 0;\\r\\n    repPurchased = 0;\\r\\n}\\r\\n\\r\\nclass RepTrigger {\\r\\n\\r\\n    factionRepGreaterThanMaximumAug;\\r\\n    factionRepGreaterThanTargetToGetToFavorNeeded;\\r\\n    factionDonationTrigger;\\r\\n\\r\\n\\r\\n    maximumAugRepNeeded;\\r\\n    currentFactionRep;\\r\\n    targetRepForGettingToFavor;\\r\\n\\r\\n    time = new Date();\\r\\n}\",\"filename\":\"scripts/singularity/finish-round.js\",\"server\":\"home\"}}],[\"scripts/singularity/finish-bitnode.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(false);\\r\\n    const includesRedPill = ownedAugmentations.includes(\\\"The Red Pill\\\");\\r\\n    const currentHackingLevel = ns.getHackingLevel();\\r\\n    const endgameServer = \\\"w0r1d_d43m0n\\\";\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n    const serverWithLineage = enviroment.find(x => x.name === endgameServer);\\r\\n\\r\\n    if (includesRedPill && currentHackingLevel > serverWithLineage.server.requiredHackingSkill) {\\r\\n        if (serverWithLineage && serverWithLineage.server.hasAdminRights) {\\r\\n            for (const server of serverWithLineage.lineage) {\\r\\n                await ns.singularity.connect(server);\\r\\n            }\\r\\n\\r\\n            await ns.singularity.connect(endgameServer);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n\\r\\n\\r\\n        ns.singularity.destroyW0r1dD43m0n(3, 'scripts/coordinator.js'); // 3 (corps) - 8 passive - 5.1 (formula.exe + int passive) - 10 (new mechanic) \\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/finish-bitnode.js\",\"server\":\"home\"}}],[\"scripts/singularity/do-work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n\\r\\n    const factionToMaxFile = \\\"data/factionToMax.txt\\\";\\r\\n\\r\\n    let factionToMax;\\r\\n\\r\\n    if (ns.fileExists(factionToMaxFile)) {\\r\\n        factionToMax = ns.read(factionToMaxFile);\\r\\n    }\\r\\n\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const organizationsToJoinInTheOrderWeWantToComplete = organizations.toJoinInOrderInWhichIWantToComplete;\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavor = JSON.parse(ns.read(\\\"data/factionsWithAugsToBuyAndNotEnoughtFavor.txt\\\"))\\r\\n\\r\\n    for (const faction of organizationsToJoinInTheOrderWeWantToComplete) {\\r\\n        const factionInAugsMix = factionsWithAugsToBuyAndNotEnoughtFavor.find(x => x.faction === faction);\\r\\n\\r\\n        if (factionInAugsMix) {\\r\\n\\r\\n            const newFactionToMax = factionInAugsMix.faction;\\r\\n\\r\\n            if (factionToMax !== newFactionToMax) {\\r\\n                factionToMax = newFactionToMax;\\r\\n                ns.rm(factionToMaxFile);\\r\\n                ns.write(factionToMaxFile, factionToMax, \\\"W\\\");\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (currentWork && currentWork.type === \\\"CREATE_PROGRAM\\\") {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    for (const faction of organizationsToJoinInTheOrderWeWantToComplete) {\\r\\n\\r\\n        if (currentWork &&\\r\\n            currentWork.type === \\\"COMPANY\\\" &&\\r\\n            currentWork.companyName === faction &&\\r\\n            !player.factions.includes(faction)) {\\r\\n\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        if (currentWork &&\\r\\n            currentWork.type === \\\"CLASS\\\" &&\\r\\n            currentWork.classType === \\\"Leadership\\\" &&\\r\\n            factionToMax !== \\\"Chongqing\\\") {\\r\\n\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        const factionsAugs = factionsWithAugsToBuyAndNotEnoughtFavor.find(x => x.faction === faction);\\r\\n\\r\\n        if (!factionsAugs) {\\r\\n            continue;\\r\\n        }\\r\\n\\r\\n        const maxRepNeeded = factionsAugs.maximumAugRep;\\r\\n        const factionRep = ns.singularity.getFactionRep(faction);\\r\\n\\r\\n        if (maxRepNeeded > factionRep) {\\r\\n\\r\\n            if (!currentWork || currentWork.factionName !== faction) {\\r\\n                await ns.singularity.workForFaction(faction, \\\"hacking\\\", true);\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/do-work.js\",\"server\":\"home\"}}],[\"scripts/singularity/do-job.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const companiesWeWantToBecomePartOf = organizations.companiesWeWantToBecomePartOf;\\r\\n    const orderedFactions = organizations.toJoinInOrderInWhichIWantToComplete;\\r\\n\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (currentWork && currentWork.type === \\\"CREATE_PROGRAM\\\") {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let factionWeAreWorkingAtNow;\\r\\n    if (currentWork && currentWork.type === \\\"FACTION\\\") {\\r\\n        factionWeAreWorkingAtNow = currentWork.factionName;\\r\\n    }\\r\\n\\r\\n    if (currentWork && currentWork.type === \\\"COMPANY\\\") {\\r\\n        factionWeAreWorkingAtNow = currentWork.companyName;\\r\\n    }\\r\\n\\r\\n    const player = ns.getPlayer();\\r\\n    let company;\\r\\n\\r\\n    for (const potentialCompany of companiesWeWantToBecomePartOf) {\\r\\n        if (!player.factions.includes(potentialCompany)) {\\r\\n\\r\\n            if (!factionWeAreWorkingAtNow) {\\r\\n                company = potentialCompany;\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            for (const faction of orderedFactions) {\\r\\n                if (faction === potentialCompany) {\\r\\n                    company = potentialCompany;\\r\\n                    break;\\r\\n                }\\r\\n\\r\\n                if (faction === factionWeAreWorkingAtNow) {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (!company) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n\\r\\n    const positionInCompany = player.jobs[company];\\r\\n\\r\\n    if(!positionInCompany){\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const currentPositionInfo = ns.singularity.getCompanyPositionInfo(company, positionInCompany);\\r\\n    const nextPositionInfo = ns.singularity.getCompanyPositionInfo(company, currentPositionInfo.nextPosition);\\r\\n    const companyRep = ns.singularity.getCompanyRep(company);\\r\\n\\r\\n    if (nextPositionInfo.requiredReputation < companyRep && nextPositionInfo.requiredSkills.charisma > player.skills.charisma) {\\r\\n        if (!currentWork || currentWork.type !== \\\"CLASS\\\") {\\r\\n            ns.singularity.travelToCity(\\\"Sector-12\\\");\\r\\n            ns.singularity.universityCourse(\\\"Rothman University\\\", \\\"Leadership\\\", true);\\r\\n            return;\\r\\n        }\\r\\n    } else {\\r\\n        if (!currentWork || currentWork.type !== \\\"COMPANY\\\") {\\r\\n            ns.singularity.workForCompany(company, true);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/do-job.js\",\"server\":\"home\"}}],[\"scripts/singularity/create-early-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (!currentWork || currentWork.type !== \\\"CREATE_PROGRAM\\\") {\\r\\n        if (!ns.fileExists(\\\"FTPCrack.exe\\\")) {\\r\\n           ns.singularity.createProgram(\\\"FTPCrack.exe\\\", true);\\r\\n        }\\r\\n\\r\\n        if (!ns.fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n            ns.singularity.createProgram(\\\"BruteSSH.exe\\\", true);\\r\\n        }\\r\\n\\r\\n        // if (!ns.fileExists(\\\"relaySMTP.exe\\\")) {\\r\\n        //     ns.singularity.createProgram(\\\"relaySMTP.exe\\\", true);\\r\\n \\r\\n        //  }\\r\\n \\r\\n        //  if (!ns.fileExists(\\\"SQLInject.exe\\\")) {\\r\\n        //     ns.singularity.createProgram(\\\"SQLInject.exe\\\", true);\\r\\n        //  }\\r\\n\\r\\n        //  if (!ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\r\\n        //     ns.singularity.createProgram(\\\"HTTPWorm.exe\\\", true);\\r\\n \\r\\n        //  }\\r\\n \\r\\n        //  if (!ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n        //     ns.singularity.createProgram(\\\"Formulas.exe\\\", true);\\r\\n        //  }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/singularity/create-early-programs.js\",\"server\":\"home\"}}],[\"scripts/singularity/buy-rep.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (moneyAvailable > 10_000_000_000_000){\\r\\n        const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n        const player = ns.getPlayer();\\r\\n\\r\\n        const mostRepExpensiveForEachFaction = [];\\r\\n\\r\\n        for (const faction of player.factions) {\\r\\n            const maximumAugRep = Math.max(...ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction)\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .filter(x => {\\r\\n                    const prereqs = ns.singularity.getAugmentationPrereq(x);\\r\\n                    return prereqs.every(y => ownedAugmentations.includes(y));\\r\\n                })\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n    \\r\\n            const favor = ns.singularity.getFactionFavor(faction);\\r\\n    \\r\\n            if (maximumAugRep > 0 && favor > 75) {\\r\\n                mostRepExpensiveForEachFaction.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(mostRepExpensiveForEachFaction.length > 0){\\r\\n            for (const factionWithRep of mostRepExpensiveForEachFaction) {\\r\\n                \\r\\n                const currentFactionRep = ns.singularity.getFactionRep(factionWithRep.faction);\\r\\n                const repNeeded = factionWithRep.maximumAugRep - currentFactionRep;\\r\\n\\r\\n                if(repNeeded < 0){\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                let purchasedRep = 0;\\r\\n                let dollarsDonated = 0;\\r\\n\\r\\n                while(repNeeded > purchasedRep){\\r\\n                    dollarsDonated += 10_000_000;\\r\\n                    purchasedRep = ns.formulas.reputation.repFromDonation(dollarsDonated, player);\\r\\n                }\\r\\n\\r\\n                ns.singularity.donateToFaction(factionWithRep.faction, dollarsDonated);\\r\\n                \\r\\n                const fileToIndicateWeDonatedToFaction = \\\"data/factionDonatation.txt\\\";\\r\\n                ns.rm(fileToIndicateWeDonatedToFaction);\\r\\n                ns.write(fileToIndicateWeDonatedToFaction, factionWithRep.faction, \\\"W\\\");\\r\\n            }\\r\\n        }\\r\\n    }   \\r\\n}\",\"filename\":\"scripts/singularity/buy-rep.js\",\"server\":\"home\"}}],[\"scripts/stock/buy-4s.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\") \\r\\n\\r\\n    if (moneyAvailable > 26_000_000_000 && !ns.stock.has4SDataTIXAPI()) {\\r\\n        ns.stock.purchase4SMarketDataTixApi();\\r\\n    }\\r\\n}\",\"filename\":\"scripts/stock/buy-4s.js\",\"server\":\"home\"}}],[\"scripts/stock/populate-forecast.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const latestStockQuotesFile = \\\"data/latestQuotes.txt\\\";\\r\\n    const stockRecords = JSON.parse(ns.read(latestStockQuotesFile));\\r\\n\\r\\n    const hasS4DataTIXAPI = ns.stock.has4SDataTIXAPI();\\r\\n\\r\\n    if (hasS4DataTIXAPI) {\\r\\n        for (const stockRecord of stockRecords) {\\r\\n            stockRecord.volatility = ns.stock.getVolatility(stockRecord.symbol);\\r\\n            stockRecord.forecast = ns.stock.getForecast(stockRecord.symbol);\\r\\n            stockRecord.bias = Math.abs(stockRecord.forecast - .5);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.rm(latestStockQuotesFile);\\r\\n    ns.write(latestStockQuotesFile, JSON.stringify(stockRecords), \\\"W\\\")\\r\\n}\",\"filename\":\"scripts/stock/populate-forecast.js\",\"server\":\"home\"}}],[\"scripts/stock/invest-in-stocks.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let lastRecordedToConsole = new Date();\\r\\n\\r\\nexport async function main(ns) {\\r\\n\\r\\n    let historicalData = new Map();\\r\\n\\r\\n    const nameOfStockHistoricalData = \\\"../../data/stockHistory.txt\\\";\\r\\n    if (ns.fileExists(nameOfStockHistoricalData)) {\\r\\n        historicalData = new Map(JSON.parse(ns.read(nameOfStockHistoricalData)));\\r\\n    }\\r\\n\\r\\n    const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n    let stockMarketReserveMoney = new ReserveForTrading();\\r\\n    if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n        stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n    }\\r\\n\\r\\n    const latestStockQuotesFile = \\\"data/latestQuotes.txt\\\";\\r\\n    const stockRecords = JSON.parse(ns.read(latestStockQuotesFile));\\r\\n\\r\\n    SaveHistoricData(stockRecords, historicalData, ns, nameOfStockHistoricalData);\\r\\n\\r\\n    let moneyInvested = 0;\\r\\n    moneyInvested += stockRecords.reduce((sum, record) => sum += record.price * record.investedShares, 0);\\r\\n    moneyInvested += stockRecords.reduce((sum, record) => sum += (record.averageShortPrice * record.sharesShort) + ((record.averageShortPrice - record.price) * record.sharesShort), 0);\\r\\n\\r\\n    stockMarketReserveMoney.setMoneyInvested(moneyInvested, ns);\\r\\n\\r\\n    const moneyWeHaveNow = ns.getServerMoneyAvailable(\\\"home\\\") + stockMarketReserveMoney.moneyInvested;\\r\\n\\r\\n    const now = new Date();\\r\\n    const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n    const formatter = new Intl.NumberFormat('en-US', {\\r\\n        style: 'currency',\\r\\n        currency: 'USD',\\r\\n    });\\r\\n\\r\\n    if (now.getMinutes() !== lastRecordedToConsole.getMinutes() && !ns.fileExists(\\\"data/batchQueue.txt\\\")) { // && batches not running\\r\\n        const moneyFormatted = formatter.format(moneyWeHaveNow);\\r\\n\\r\\n        let consoleUpdate = `${timeStamp} Money we have now: ${moneyFormatted}`;\\r\\n\\r\\n        ns.tprint(consoleUpdate);\\r\\n\\r\\n        lastRecordedToConsole = now;\\r\\n    }\\r\\n\\r\\n    const nameOfLedger = \\\"../../data/salesLedger.txt\\\"\\r\\n    let ledger = [];\\r\\n\\r\\n    if (ns.fileExists(nameOfLedger)) {\\r\\n        ledger = JSON.parse(ns.read(nameOfLedger));\\r\\n    }\\r\\n\\r\\n    stockMarketReserveMoney.moneyRequested = new Map(Array.from(stockMarketReserveMoney.moneyRequested));\\r\\n    const reserveMoneyKeys = stockMarketReserveMoney.moneyRequested.keys();\\r\\n    let moneyRequested = 0;\\r\\n\\r\\n\\r\\n    for (const requestKey of reserveMoneyKeys) {\\r\\n        const moneyRequestedFromService = stockMarketReserveMoney.moneyRequested.get(requestKey);\\r\\n        stockMarketReserveMoney.moneyRequested.set(requestKey, moneyRequestedFromService);\\r\\n        moneyRequested += moneyRequestedFromService + 100_000;\\r\\n    }\\r\\n\\r\\n    stockMarketReserveMoney.moneyRequested = Array.from(stockMarketReserveMoney.moneyRequested);\\r\\n\\r\\n    if (moneyRequested === 0) {\\r\\n        stockMarketReserveMoney.countOfVisitedWithoutFillingRequest = 0;\\r\\n    }\\r\\n\\r\\n    let sellSharesToSatisfyMoneyDemands = false;\\r\\n    if (stockMarketReserveMoney.countOfVisitedWithoutFillingRequest > 90) {\\r\\n        sellSharesToSatisfyMoneyDemands = true;\\r\\n    }\\r\\n\\r\\n    const commission = 100_001;\\r\\n\\r\\n    const stopTradingExists = ns.fileExists(\\\"../../stopTrading.txt\\\");\\r\\n\\r\\n    for (const stock of stockRecords) {\\r\\n        let sharesToSell = 0;\\r\\n        let type = \\\"Short-Term Long Sale\\\";\\r\\n        let averagePrice = 0;\\r\\n        let coverShort = false;\\r\\n\\r\\n        if (stock.investedShares > 0) {\\r\\n            sharesToSell = stock.investedShares;\\r\\n            type = \\\"Short-Term Long Sale\\\";\\r\\n            averagePrice = stock.averagePrice;\\r\\n            coverShort = false;\\r\\n        }\\r\\n\\r\\n        if (stock.sharesShort > 0) {\\r\\n            sharesToSell = stock.sharesShort;\\r\\n            type = \\\"Short-Term Cover Short\\\";\\r\\n            averagePrice = stock.averageShortPrice;\\r\\n            coverShort = true;\\r\\n        }\\r\\n\\r\\n        if (sellSharesToSatisfyMoneyDemands && sharesToSell > 0) {\\r\\n            if (stockMarketReserveMoney.canSellAmountAndStillHaveReserve(moneyRequested)) {\\r\\n                sharesToSell = Math.ceil(moneyRequested / stock.bid) + 5\\r\\n\\r\\n                if (sharesToSell > stock.investedShares && stock.investedShares !== 0) {\\r\\n                    sharesToSell = stock.investedShares;\\r\\n                }\\r\\n\\r\\n                if (sharesToSell > stock.sharesShort && stock.sharesShort !== 0) {\\r\\n                    sharesToSell = stock.sharesShort;\\r\\n                }\\r\\n            } else {\\r\\n                sellSharesToSatisfyMoneyDemands = false;\\r\\n                stockMarketReserveMoney.countOfVisitedWithoutFillingRequest = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (sharesToSell > 0) {\\r\\n            if ((stock.sellTrend && coverShort === false) || stopTradingExists || sellSharesToSatisfyMoneyDemands || (stock.coverShortTrend && coverShort)) {\\r\\n                let salePrice;\\r\\n                if (coverShort) {\\r\\n                    salePrice = ns.stock.sellShort(stock.symbol, sharesToSell);\\r\\n                } else {\\r\\n                    salePrice = ns.stock.sellStock(stock.symbol, sharesToSell);\\r\\n                }\\r\\n\\r\\n                stockMarketReserveMoney.moneyInvested -= salePrice * sharesToSell;\\r\\n\\r\\n                if(stockMarketReserveMoney.moneyInvested < 0){\\r\\n                    stockMarketReserveMoney.moneyInvested = 0;\\r\\n                }\\r\\n\\r\\n                ledger.push(new LedgerItem(\\r\\n                    stock.symbol,\\r\\n                    salePrice,\\r\\n                    averagePrice,\\r\\n                    sharesToSell,\\r\\n                    type,\\r\\n                    stock.forecast\\r\\n                ))\\r\\n\\r\\n                if (sellSharesToSatisfyMoneyDemands) {\\r\\n                    stockMarketReserveMoney.moneyRequested = [];\\r\\n                    sellSharesToSatisfyMoneyDemands = false;\\r\\n                    ns.toast(`${timeStamp} Sold ${formatter.format(moneyRequested)} for money request.`, \\\"success\\\", null)\\r\\n                }\\r\\n\\r\\n                if (stopTradingExists) {\\r\\n                    ns.toast(\\\"Stopped trading\\\", \\\"success\\\", null)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.rm(nameOfLedger);\\r\\n    ns.write(nameOfLedger, JSON.stringify(ledger), \\\"W\\\");\\r\\n\\r\\n    const liquidCash = ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n\\r\\n    let moneyAvailable = liquidCash - commission - moneyRequested;\\r\\n\\r\\n    if (stockMarketReserveMoney.capitalToReserveForTrading > stockMarketReserveMoney.moneyInvested) {\\r\\n        moneyAvailable = liquidCash - commission;\\r\\n    }\\r\\n\\r\\n    if (moneyAvailable > 5_000_000_000 && !ns.stock.has4SDataTIXAPI()) {\\r\\n        moneyAvailable = 5_000_000_000;\\r\\n    }\\r\\n\\r\\n    const onlyInvestIfWeHaveMoreThan = 12_000_000;\\r\\n\\r\\n    if (moneyAvailable > onlyInvestIfWeHaveMoreThan && !stopTradingExists) {\\r\\n        let stocksToTrade = stockRecords\\r\\n            .filter(stock =>\\r\\n                (stock.sellShortTrend && stock.maxShares !== stock.sharesShort) ||\\r\\n                (stock.buyTrend && stock.investedShares !== stock.maxShares))\\r\\n            .sort((a, b) => b.volatility - a.volatility);\\r\\n\\r\\n        if (!ns.stock.has4SDataTIXAPI()) {\\r\\n            stocksToTrade = stockRecords\\r\\n                .filter(stock =>\\r\\n                    (stock.sellShortTrend && stock.sharesShort === 0) ||\\r\\n                    (stock.buyTrend && stock.investedShares === 0))\\r\\n                .sort((a, b) => b.magnitudeOfSignal - a.magnitudeOfSignal);\\r\\n        }\\r\\n\\r\\n        if (stocksToTrade.length > 0) {\\r\\n            const stockToLookAt = stocksToTrade[0];\\r\\n\\r\\n            let sharesToBuy = 0;\\r\\n            const ticker = stockToLookAt.symbol;\\r\\n\\r\\n            if (stockToLookAt.buyTrend) {\\r\\n                sharesToBuy = Math.round(moneyAvailable / stockToLookAt.ask);\\r\\n\\r\\n                const totalSharesAfterBuy = sharesToBuy + stockToLookAt.investedShares;\\r\\n\\r\\n                if (stockToLookAt.maxShares < totalSharesAfterBuy) {\\r\\n                    sharesToBuy = stockToLookAt.maxShares - stockToLookAt.investedShares;\\r\\n                }\\r\\n\\r\\n                ns.stock.buyStock(ticker, sharesToBuy);\\r\\n            }\\r\\n\\r\\n            if (stockToLookAt.sellShortTrend) {\\r\\n                sharesToBuy = Math.round(moneyAvailable / stockToLookAt.bid);\\r\\n\\r\\n                const totalSharesAfterBuy = sharesToBuy + stockToLookAt.sharesShort;\\r\\n\\r\\n                if (stockToLookAt.maxShares < totalSharesAfterBuy) {\\r\\n                    sharesToBuy = stockToLookAt.maxShares - stockToLookAt.sharesShort;\\r\\n                }\\r\\n\\r\\n                ns.stock.buyShort(ticker, sharesToBuy);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.rm(stockMarketReserveMoneyFile);\\r\\n    ns.write(stockMarketReserveMoneyFile, JSON.stringify(stockMarketReserveMoney), \\\"W\\\");\\r\\n}\\r\\n\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    canSellAmountAndStillHaveReserve(amountToSell) {\\r\\n        return (this.moneyInvested - amountToSell) > this.capitalToReserveForTrading;\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = (moneyInvested + ns.getServerMoneyAvailable(\\\"home\\\")) * .75;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"invest-in-stocks\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"invest-in-stocks\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nclass LedgerItem {\\r\\n\\r\\n    constructor(symbol, price, averagePurchasePrice, shares, type, forecastAtSale) {\\r\\n        const formatter = new Intl.NumberFormat('en-US', {\\r\\n            style: 'currency',\\r\\n            currency: 'USD',\\r\\n        });\\r\\n\\r\\n        let numberProfit = (price - averagePurchasePrice) * shares;\\r\\n\\r\\n        if (type === \\\"Short-Term Cover Short\\\") {\\r\\n            numberProfit = (averagePurchasePrice - price) * shares;\\r\\n        }\\r\\n\\r\\n        this.date = new Date().toLocaleString();\\r\\n        this.symbol = symbol;\\r\\n        this.price = price;\\r\\n        this.averagePurchasePrice = averagePurchasePrice;\\r\\n        this.profit = formatter.format(numberProfit);\\r\\n        this.profitPercent = (numberProfit / (shares * averagePurchasePrice)).toLocaleString(undefined, { style: 'percent', minimumFractionDigits: 2 });\\r\\n        this.shares = shares;\\r\\n        this.type = type;\\r\\n        this.forecastAtSale = forecastAtSale;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass StockHistoricData {\\r\\n    shortTermRecords = [];\\r\\n    longTermRecords = [];\\r\\n    recentTicksOfPrices = [];\\r\\n\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    addRecord(record, ns) {\\r\\n        this.shortTermRecords.push(record);\\r\\n        this.recentTicksOfPrices.push(record.price);\\r\\n\\r\\n        if (this.recentTicksOfPrices.length === 21) {\\r\\n            record.countOfNegative = 0;\\r\\n            record.countOfPositive = 0;\\r\\n            record.magnitudeOfSignal = 0;\\r\\n\\r\\n            let lastPrice;\\r\\n            for (const price of this.recentTicksOfPrices) {\\r\\n                if (lastPrice) {\\r\\n                    if (lastPrice < price) {\\r\\n                        record.countOfPositive++;\\r\\n                    }\\r\\n\\r\\n                    if (lastPrice > price) {\\r\\n                        record.countOfNegative++;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                lastPrice = price;\\r\\n            }\\r\\n\\r\\n            this.recentTicksOfPrices.shift();\\r\\n        }\\r\\n\\r\\n        const hasOracle = ns.stock.has4SDataTIXAPI();\\r\\n\\r\\n\\r\\n        if (!hasOracle) {\\r\\n            if (record.countOfPositive >= 16) {\\r\\n                record.buyTrend = true;\\r\\n                record.magnitudeOfSignal = record.countOfPositive;\\r\\n            }\\r\\n\\r\\n            if (record.countOfPositive <= 12 && record.investedShares > 0) {\\r\\n                record.sellTrend = true;\\r\\n            }\\r\\n\\r\\n            if (record.countOfNegative >= 16) {\\r\\n                record.sellShortTrend = true;\\r\\n                record.magnitudeOfSignal = record.countOfNegative;\\r\\n            }\\r\\n\\r\\n            if (record.countOfNegative <= 12 && record.sharesShort > 0) {\\r\\n                record.coverShortTrend = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (hasOracle) {\\r\\n            if (record.forecast > 0.6) {\\r\\n                record.buyTrend = true;\\r\\n            }\\r\\n\\r\\n            if (record.forecast < 0.5 && record.investedShares > 0) {\\r\\n                record.sellTrend = true;\\r\\n            }\\r\\n\\r\\n            if (0.4 > record.forecast) {\\r\\n                record.sellShortTrend = true;\\r\\n            }\\r\\n\\r\\n            if (0.5 < record.forecast && record.sharesShort > 0) {\\r\\n                record.coverShortTrend = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    storeLongTerm() {\\r\\n        const newLongTermStock = new Stock(\\r\\n            this.shortTermRecords[0].symbol,\\r\\n            this.shortTermRecords.map(x => x.bid).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            this.shortTermRecords.map(x => x.ask).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            this.shortTermRecords.map(x => x.price).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            this.shortTermRecords[0].maxShares,\\r\\n            [\\r\\n                this.shortTermRecords.map(x => x.investedShares).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n                this.shortTermRecords.map(x => x.averagePrice).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n                this.shortTermRecords.map(x => x.sharesShort).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n                this.shortTermRecords.map(x => x.averageShortPrice).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            ]\\r\\n        );\\r\\n\\r\\n        newLongTermStock.volatility = this.shortTermRecords[0].volatility;\\r\\n        newLongTermStock.forecast = this.shortTermRecords.map(x => x.forecast).reduce((a, b) => a + b) / this.shortTermRecords.length;\\r\\n\\r\\n        newLongTermStock.bias = Math.max(...this.shortTermRecords.map(x => x.bias));\\r\\n\\r\\n        this.longTermRecords.push(newLongTermStock);\\r\\n\\r\\n        this.shortTermRecords.length = 0;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Stock {\\r\\n    constructor(symbol, bid, ask, price, maxShares, position = {}, dateObserved = new Date()) {\\r\\n        this.symbol = symbol;\\r\\n        this.bid = bid;\\r\\n        this.ask = ask;\\r\\n        this.price = price;\\r\\n        this.maxShares = maxShares;\\r\\n        this.investedShares = position[0];\\r\\n        this.averagePrice = position[1];\\r\\n        this.sharesShort = position[2];\\r\\n        this.averageShortPrice = position[3];\\r\\n        this.dateObserved = dateObserved.toLocaleString();\\r\\n    }\\r\\n\\r\\n    volatility;\\r\\n    forecast;\\r\\n\\r\\n    buyTrend = false;\\r\\n    sellTrend = false;\\r\\n    sellShortTrend = false;\\r\\n    coverShortTrend = false;\\r\\n\\r\\n}\\r\\n\\r\\nfunction SaveHistoricData(stockRecords, historicalData, ns, nameOfStockHistoricalData) {\\r\\n    stockRecords.map(x => {\\r\\n        if (historicalData.has(x.symbol)) {\\r\\n            const data = historicalData.get(x.symbol);\\r\\n\\r\\n            if (data.shortTermRecords[data.shortTermRecords.length - 1]?.price !== x.price) {\\r\\n                const record = new StockHistoricData(data);\\r\\n                record.addRecord(x, ns);\\r\\n\\r\\n                if (record.shortTermRecords.length >= 100) {\\r\\n                    record.storeLongTerm();\\r\\n                }\\r\\n\\r\\n                historicalData.set(x.symbol, record);\\r\\n            }\\r\\n\\r\\n        } else {\\r\\n            const stockHistoryData = new StockHistoricData();\\r\\n            stockHistoryData.addRecord(x, ns);\\r\\n            historicalData.set(x.symbol, stockHistoryData);\\r\\n        }\\r\\n    });\\r\\n\\r\\n    ns.rm(nameOfStockHistoricalData);\\r\\n    ns.write(nameOfStockHistoricalData, JSON.stringify(Array.from(historicalData.entries()), \\\"W\\\"));\\r\\n}\\r\\n\",\"filename\":\"scripts/stock/invest-in-stocks.js\",\"server\":\"home\"}}],[\"scripts/stock/get-stock-quotes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const stockRecords = ns.stock\\r\\n        .getSymbols()\\r\\n        .map(x => new Stock(\\r\\n            x,\\r\\n            ns.stock.getBidPrice(x),\\r\\n            ns.stock.getAskPrice(x),\\r\\n        ));\\r\\n\\r\\n    const latestStockQuotesFile = \\\"data/latestQuotes.txt\\\";\\r\\n    ns.rm(latestStockQuotesFile);\\r\\n    ns.write(latestStockQuotesFile, JSON.stringify(stockRecords), \\\"W\\\")\\r\\n}\\r\\n\\r\\n\\r\\nclass Stock {\\r\\n    constructor(symbol, bid, ask, dateObserved = new Date()) {\\r\\n        this.symbol = symbol;\\r\\n        this.bid = bid;\\r\\n        this.ask = ask;\\r\\n        this.dateObserved = dateObserved.toLocaleString();\\r\\n    }\\r\\n\\r\\n    volatility;\\r\\n    forecast;\\r\\n\\r\\n    buyTrend = false;\\r\\n    sellTrend = false;\\r\\n    sellShortTrend = false;\\r\\n    coverShortTrend = false;\\r\\n\\r\\n}\",\"filename\":\"scripts/stock/get-stock-quotes.js\",\"server\":\"home\"}}],[\"scripts/tools/manually-end-round.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const player = ns.getPlayer();\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n\\r\\n    const formatter = new Intl.NumberFormat('en-US', {\\r\\n        style: 'currency',\\r\\n        currency: 'USD',\\r\\n    });\\r\\n\\r\\n    let totalToSpend = 0;\\r\\n\\r\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n        const factionsThatNeedDonating = [];\\r\\n\\r\\n        for (const faction of player.factions) {\\r\\n            const maximumAugRep = Math.max(...ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction)\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .filter(x => {\\r\\n                    const prereqs = ns.singularity.getAugmentationPrereq(x);\\r\\n                    return prereqs.every(y => ownedAugmentations.includes(y));\\r\\n                })\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n            const favor = ns.singularity.getFactionFavor(faction);\\r\\n\\r\\n            if (maximumAugRep > 0 && favor >= 0) {\\r\\n                factionsThatNeedDonating.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (factionsThatNeedDonating.length > 0) {\\r\\n            for (const factionWithRep of factionsThatNeedDonating) {\\r\\n                let dollarsDonated = 0;\\r\\n\\r\\n                const currentFactionRep = ns.singularity.getFactionRep(factionWithRep.faction);\\r\\n                const repNeeded = factionWithRep.maximumAugRep - currentFactionRep;\\r\\n\\r\\n                if (repNeeded < 0) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                let purchasedRep = 0;\\r\\n\\r\\n                while (repNeeded > purchasedRep) {\\r\\n                    dollarsDonated += 10_000_000;\\r\\n                    purchasedRep = ns.formulas.reputation.repFromDonation(dollarsDonated, player);\\r\\n                }\\r\\n\\r\\n                ns.toast(`${factionWithRep.faction}`, 'success', null)\\r\\n                ns.toast(`Money needed for donations: ${formatter.format(dollarsDonated)}`, \\\"success\\\", null)\\r\\n\\r\\n                totalToSpend += dollarsDonated;\\r\\n\\r\\n                if (ns.args[0] === \\\"donate\\\") {\\r\\n                    ns.singularity.donateToFaction(factionWithRep.faction, dollarsDonated);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    const mostRepExpensiveForEachFaction = [];\\r\\n    for (const faction of player.factions) {\\r\\n        const maximumAugRep = Math.max(...ns\\r\\n            .singularity\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n            .filter(x => !ownedAugmentations.includes(x))\\r\\n            .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n        if (maximumAugRep > 0) {\\r\\n            mostRepExpensiveForEachFaction.push({ faction, maximumAugRep });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const factionsWithAugmentsToBuy =\\r\\n        mostRepExpensiveForEachFaction\\r\\n            .map(x => {\\r\\n                {\\r\\n                    const faction = x.faction;\\r\\n                    const factionRep = ns.singularity.getFactionRep(faction);\\r\\n                    const factionAugmentsThatIDontOwnAndCanAfford = ns\\r\\n                        .singularity\\r\\n                        .getAugmentationsFromFaction(faction)\\r\\n                        .filter(y => y !== \\\"NeuroFlux Governor\\\")\\r\\n                        .filter(y => !ownedAugmentations.includes(y))\\r\\n                        .map(y => {\\r\\n                            return {\\r\\n                                augmentName: y,\\r\\n                                augmentationRepCost: ns.singularity.getAugmentationRepReq(y),\\r\\n                                price: ns.singularity.getAugmentationPrice(y),\\r\\n                                prereqs: ns.singularity.getAugmentationPrereq(y)\\r\\n                            }\\r\\n                        })\\r\\n                        .filter(y => y.augmentationRepCost < factionRep)\\r\\n                        .sort((a, b) => b.price - a.price);\\r\\n\\r\\n                    return {\\r\\n                        faction,\\r\\n                        factionRep,\\r\\n                        factionAugmentsThatIDontOwnAndCanAfford\\r\\n                    }\\r\\n                }\\r\\n            });\\r\\n\\r\\n\\r\\n\\r\\n    const purchasableAugments = new Map();\\r\\n\\r\\n    for (const factionWithAugments of factionsWithAugmentsToBuy) {\\r\\n        for (const augment of factionWithAugments.factionAugmentsThatIDontOwnAndCanAfford) {\\r\\n            if (purchasableAugments.has(augment.augmentName) === false) {\\r\\n                const item = {\\r\\n                    augmentationRepCost: augment.augmentationRepCost,\\r\\n                    price: augment.price,\\r\\n                    prereqs: augment.prereqs,\\r\\n                    faction: factionWithAugments.faction\\r\\n                }\\r\\n                purchasableAugments.set(augment.augmentName, item)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const augmentsLeft = Array.from(purchasableAugments.entries()).sort((a, b) => b[1].price - a[1].price);\\r\\n\\r\\n    const orderedAugments = []; // { factionName, augmentName, basePrice, multipledPrice}\\r\\n\\r\\n    function addPrereqs(prereqName) {\\r\\n        const augment = purchasableAugments.get(prereqName);\\r\\n\\r\\n        if (augment && !ownedAugmentations.find(x => x.augmentName === prereqName)) {\\r\\n\\r\\n            if (augment.prereqs.length > 0) {//it has prereqs, pass it into this. \\r\\n                for (const prereq of augment.prereqs) {\\r\\n                    addPrereqs(prereq)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (!orderedAugments.find(x => x.augmentName === prereqName)) {\\r\\n                orderedAugments.push({ faction: augment.faction, augmentName: prereqName, basePrice: augment.price });\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const augmentData of augmentsLeft) {\\r\\n        const augmentName = augmentData[0];\\r\\n        const augment = augmentData[1];\\r\\n\\r\\n        if (augment.prereqs.length > 0) {\\r\\n            for (const prereqName of augment.prereqs) {\\r\\n                addPrereqs(prereqName);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!orderedAugments.find(x => x.augmentName === augmentName)) {\\r\\n            orderedAugments.push({ faction: augment.faction, augmentName: augmentName, basePrice: augment.price, multipledPrice: 0 })\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    let priceMultipler = 1;\\r\\n\\r\\n    for (const augment of orderedAugments) {\\r\\n        augment.multipledPrice = augment.basePrice * priceMultipler;\\r\\n        priceMultipler *= 1.9;\\r\\n    }\\r\\n\\r\\n    const moneyNeededForAugments = orderedAugments.reduce((acc, x) => acc + x.multipledPrice, 0);\\r\\n\\r\\n    totalToSpend += moneyNeededForAugments;\\r\\n\\r\\n    const moneyFormatted = formatter.format(moneyNeededForAugments);\\r\\n\\r\\n    if (ns.args[0] === \\\"finish\\\") {\\r\\n        for (const augment of orderedAugments) {\\r\\n            purchaseAug(ns, augment);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.toast(`Money needed for augs: ${moneyFormatted}`, 'success', null)\\r\\n\\r\\n    ns.toast(`Total Needed: ${formatter.format(totalToSpend)}`, 'success', null)\\r\\n\\r\\n    ns.rm('orderedAugments.txt')\\r\\n    ns.write(\\\"orderedAugments.txt\\\", JSON.stringify(orderedAugments), \\\"W\\\")\\r\\n\\r\\n}\\r\\n\\r\\nfunction purchaseAug(ns, augment) {\\r\\n    const ownedAugments = ns.singularity.getOwnedAugmentations(true);\\r\\n    const augmentName = augment.augmentName;\\r\\n\\r\\n    if (ownedAugments.includes(augmentName) === false) {\\r\\n        const augmentPrice = ns.singularity.getAugmentationPrice(augmentName);\\r\\n        const amountOfMoneyWeHave = ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n\\r\\n        if (augmentPrice < amountOfMoneyWeHave) {\\r\\n            ns.singularity.purchaseAugmentation(augment.faction, augmentName);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/tools/manually-end-round.js\",\"server\":\"home\"}}],[\"scripts/tools/delete-job-from-batch-queue.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n    const targetName = ns.args[0];\\r\\n\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\"\\r\\n\\r\\n    let batchQueueForDifferentTargets = new Map();\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        batchQueueForDifferentTargets = new Map(JSON.parse(ns.read(batchQueuesFileName)));\\r\\n    }\\r\\n\\r\\n    const target = batchQueueForDifferentTargets.get(targetName);\\r\\n\\r\\n    for (const batch of target.batchesQueue) {\\r\\n        batch.jobs.map(x => {\\r\\n            if (x.pid) {\\r\\n                ns.kill(x.pid);\\r\\n            }\\r\\n        });\\r\\n    };\\r\\n\\r\\n    batchQueueForDifferentTargets.delete(targetName);\\r\\n\\r\\n    ns.rm(batchQueuesFileName);\\r\\n    ns.write(batchQueuesFileName, JSON.stringify(Array.from(batchQueueForDifferentTargets.entries()), \\\"W\\\"));\\r\\n\\r\\n}\\r\\n\",\"filename\":\"scripts/tools/delete-job-from-batch-queue.js\",\"server\":\"home\"}}],[\"scripts/clean.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"//run scripts/clean.js \\r\\nexport async function main(ns) {\\r\\n    let newMachine = false;\\r\\n\\r\\n    if (ns.args[0] === \\\"new\\\") {\\r\\n        newMachine = true;\\r\\n    }\\r\\n\\r\\n    \\r\\n    if (!newMachine) {\\r\\n        ns.killall(\\\"home\\\", true);\\r\\n\\r\\n        const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n        enviroment\\r\\n            .filter(x => x.server.hasAdminRights)\\r\\n            .map(target => {\\r\\n                ns.killall(target.name);\\r\\n            })\\r\\n    }\\r\\n\\r\\n    const doNoDeleteFolders = [\\\"analytics\\\", \\\"contracts\\\"]\\r\\n\\r\\n\\r\\n    for (const textFile of ns.ls(\\\"home\\\", \\\".txt\\\")) {\\r\\n        if(!doNoDeleteFolders.find(x => textFile.startsWith(x))){\\r\\n            ns.rm(textFile);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/clean.js\",\"server\":\"home\"}}],[\"scripts/scan.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n/// run scripts/scan.js dispatchScript\\r\\nexport async function main(ns) {\\r\\n    const dispatchScript = ns.args[0];\\r\\n\\r\\n    if (dispatchScript === undefined){\\r\\n        ns.tprint(\\\"Must define dispatch script for scan.\\\")\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const result = new dataMonger(ns).scanEnvironment();\\r\\n\\r\\n    ns.rm('data/enviroment.txt')\\r\\n    ns.write('data/enviroment.txt', JSON.stringify(result), \\\"W\\\")\\r\\n\\r\\n    ns.run(dispatchScript)\\r\\n}\\r\\n\\r\\nexport class dataMonger {\\r\\n    constructor(ns) {\\r\\n        this.ns = ns;\\r\\n    }\\r\\n\\r\\n    scanEnvironment(machineToScan = \\\"home\\\", serversToScan = [], scannedServers = [], result = []) {\\r\\n        if (serversToScan.length === 0 && machineToScan !== \\\"home\\\") {\\r\\n            return result;\\r\\n        }\\r\\n\\r\\n        let lineage = result\\r\\n            .find(x => x.name === machineToScan)\\r\\n            ?.lineage\\r\\n            .map(x => x); // so we aren't using a reference\\r\\n\\r\\n        const scan = this.ns\\r\\n            .scan(machineToScan)\\r\\n            .map(x => new ServerNode(\\r\\n                machineToScan,\\r\\n                this.ns.getServer(x),\\r\\n                lineage\\r\\n            ));\\r\\n\\r\\n        scan.forEach(x => {\\r\\n            if (!scannedServers.includes(x.name) && !serversToScan.includes(x.name)) {\\r\\n                serversToScan.push(x.name);\\r\\n                result.push(x);\\r\\n            }\\r\\n        });\\r\\n\\r\\n        scannedServers.push(machineToScan);\\r\\n        machineToScan = serversToScan.pop();\\r\\n        return this.scanEnvironment(machineToScan, serversToScan, scannedServers, result);\\r\\n    }\\r\\n}\\r\\n\\r\\nclass ServerNode {\\r\\n    constructor(parentsName, server, lineage = []) {\\r\\n        this.name = server.hostname;\\r\\n        this.lineage = lineage\\r\\n        if (parentsName !== \\\"home\\\" && this.lineage !== undefined) {\\r\\n            if (!this.lineage.includes(parentsName)) {\\r\\n                this.lineage.push(parentsName)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.server = server;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/scan.js\",\"server\":\"home\"}}],[\"scripts/precalculate-important-data.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n  const notImportantScriptsForEarlyGame = [\\r\\n    \\\"scripts/singularity/finish-bitnode.js\\\", \\r\\n    \\\"scripts/singularity/finish-round.js\\\", \\r\\n    \\\"scripts/singularity/buy-rep.js\\\",\\r\\n    \\\"scripts/hacking/batch-dispatch.js\\\",\\r\\n    \\\"scripts/tools/manually-end-round.js\\\",\\r\\n  ];\\r\\n\\r\\n  const notImportantFolder = \\\"scripts/corporations/\\\"\\r\\n\\r\\n  const scriptsThatWeRun = JSON.parse(ns.read('data/scriptsToRun.txt'));\\r\\n\\r\\n  scriptsThatWeRun.push(\\\"scripts/coordinator.js\\\");\\r\\n\\r\\n  const orderedScriptsByRamUsage = scriptsThatWeRun\\r\\n    .map(x => new ScriptRam(ns.getScriptRam(x), x))\\r\\n    .sort((a, b) => b.ram - a.ram);\\r\\n\\r\\n  const mostExpensiveScript = orderedScriptsByRamUsage[0];\\r\\n  const coordinator = orderedScriptsByRamUsage.find(x => x.name === \\\"scripts/coordinator.js\\\");\\r\\n  const ramToReserve = coordinator.ram + mostExpensiveScript.ram + 1;\\r\\n\\r\\n  const earlyGameScriptsUsage = orderedScriptsByRamUsage\\r\\n    .filter(x => !notImportantScriptsForEarlyGame.includes(x.name))\\r\\n    .filter(x => !x.name.startsWith(notImportantFolder));\\r\\n\\r\\n  const mostExpensiveEarlyGame = earlyGameScriptsUsage[0];\\r\\n  const ramToReserveInLimitedEnvironment = coordinator.ram + mostExpensiveEarlyGame.ram + 1;\\r\\n  const earlyGameLimiter = mostExpensiveEarlyGame.name;\\r\\n\\r\\n  const ramReserveFile = 'data/ramToReserveOnHome.txt';\\r\\n\\r\\n\\r\\n  ns.rm(ramReserveFile);\\r\\n  ns.write(ramReserveFile, JSON.stringify({ramToReserve, ramToReserveInLimitedEnvironment, earlyGameLimiter}), \\\"W\\\");\\r\\n\\r\\n  const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n\\r\\n  const ownedAugsTextFileName = \\\"data/ownedAugs.txt\\\";\\r\\n  ns.rm(ownedAugsTextFileName);\\r\\n  ns.write(ownedAugsTextFileName, JSON.stringify(ownedAugmentations), \\\"W\\\");\\r\\n  \\r\\n}\\r\\n\\r\\nclass ScriptRam {\\r\\n  constructor(ram, name) {\\r\\n    this.ram = ram;\\r\\n    this.name = name;\\r\\n  }\\r\\n}\",\"filename\":\"scripts/precalculate-important-data.js\",\"server\":\"home\"}}],[\"scripts/coordinator.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const loopEveryXSeconds = 2;\\r\\n    const sleepTotalOfXMS = loopEveryXSeconds * 1000;\\r\\n    let dispatchScript = 'scripts/hacking/memory-starved-dispatch.js';\\r\\n\\r\\n    let runClean = true;\\r\\n    if (ns.args[0] === 'old') {\\r\\n        runClean = false;\\r\\n    }\\r\\n\\r\\n    if (runClean) {\\r\\n        ns.run('scripts/clean.js', 1, \\\"new\\\");\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n\\r\\n    ns.run('scripts/script-registry.js')\\r\\n\\r\\n    await ns.sleep(200);\\r\\n\\r\\n    ns.run('scripts/precalculate-important-data.js')\\r\\n\\r\\n    await ns.sleep(200);\\r\\n\\r\\n    const scriptsFile = 'data/scriptsToRun.txt';\\r\\n\\r\\n    while (true) {\\r\\n\\r\\n        let scriptsToRun = JSON.parse(ns.read(scriptsFile));\\r\\n\\r\\n        let numberOfScripts = scriptsToRun.length + 1;\\r\\n\\r\\n        let individualSleepAmount = sleepTotalOfXMS / numberOfScripts;\\r\\n\\r\\n        if (ns.fileExists('Formulas.exe')) {\\r\\n            dispatchScript = 'scripts/hacking/batch-dispatch.js'\\r\\n        }\\r\\n\\r\\n        ns.run(\\\"scripts/scan.js\\\", 1, dispatchScript);\\r\\n        await ns.sleep(individualSleepAmount);\\r\\n\\r\\n        for (const script of scriptsToRun) {\\r\\n            ns.run(script);\\r\\n            await ns.sleep(individualSleepAmount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"filename\":\"scripts/coordinator.js\",\"server\":\"home\"}}],[\"scripts/script-registry.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    let scriptsToRun = [];\\r\\n\\r\\n    const basicScripts = [\\r\\n        'scripts/hacking/hack-all-machines.js',\\r\\n        'scripts/precalculate-important-data.js',\\r\\n        'scripts/script-registry.js',\\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(basicScripts);\\r\\n\\r\\n    const stockScripts = [\\r\\n        'scripts/stock/get-stock-quotes.js',\\r\\n        'scripts/stock/second-part-of-quotes.js',\\r\\n        'scripts/stock/populate-forecast.js',\\r\\n        'scripts/stock/invest-in-stocks.js',\\r\\n        'scripts/stock/buy-4s.js',\\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(stockScripts);\\r\\n\\r\\n    const contractScripts = [\\r\\n        'scripts/contracts/get.js',\\r\\n        'scripts/contracts/populate-input.js',\\r\\n        'scripts/contracts/populate-description.js',\\r\\n        'scripts/contracts/do.js',\\r\\n        'scripts/contracts/save-contracts-for-thomas.js',\\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(contractScripts);\\r\\n\\r\\n    const singularityScripts = [\\r\\n        'scripts/singularity/apply-to-jobs.js',\\r\\n        'scripts/singularity/do-work-get-augments.js',\\r\\n        'scripts/singularity/backdoor-all-machines.js',\\r\\n        'scripts/singularity/join-organziations.js',\\r\\n        'scripts/singularity/do-work.js',\\r\\n        'scripts/singularity/finish-round.js',\\r\\n        'scripts/singularity/finish-bitnode.js',\\r\\n        'scripts/singularity/study-computer-science.js',\\r\\n        'scripts/singularity/create-early-programs.js',\\r\\n        'scripts/singularity/do-job.js',\\r\\n        'scripts/singularity/buy-rep.js',\\r\\n        'scripts/singularity/workout.js',\\r\\n        'scripts/singularity/upgade-home-machine.js',\\r\\n        'scripts/singularity/travel-to-get-augs.js',\\r\\n    ];\\r\\n    \\r\\n    scriptsToRun = scriptsToRun.concat(singularityScripts);\\r\\n\\r\\n    const investmentScripts = [\\r\\n        'scripts/investments/invest-in-nodes.js',\\r\\n        'scripts/investments/purchase-server.js',\\r\\n        'scripts/investments/invest-in-programs.js',\\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(investmentScripts);\\r\\n\\r\\n    const corporateScripts = [\\r\\n        'scripts/corporations/invest.js',\\r\\n        'scripts/corporations/start-company.js',\\r\\n        'scripts/corporations/get-corporate-info.js',\\r\\n        'scripts/corporations/add-supporting-material.js',\\r\\n        'scripts/corporations/upgrade-offices.js',\\r\\n        'scripts/corporations/upgrade-warehouse.js',\\r\\n        'scripts/corporations/expand.js',\\r\\n        'scripts/corporations/product-management.js',\\r\\n        'scripts/corporations/research.js',\\r\\n        'scripts/corporations/tea-party.js',\\r\\n        'scripts/corporations/adjust-prices-export.js',\\r\\n        'scripts/corporations/get-investments.js',\\r\\n        'scripts/corporations/bribe-factions.js',\\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(corporateScripts);\\r\\n    \\r\\n    const scriptsFile = 'data/scriptsToRun.txt';\\r\\n    ns.rm(scriptsFile);\\r\\n    ns.write(scriptsFile, JSON.stringify(scriptsToRun), \\\"W\\\");\\r\\n}\",\"filename\":\"scripts/script-registry.js\",\"server\":\"home\"}}],[\"test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  const moneyThing = 0;\\n        const gidgetsSmokes = \\\"Gidget's Smokes\\\";\\n    const city = \\\"Aevum\\\"\\n\\n  const thing = ns.corporation.getConstants();\\n\\nconst array =[]\\n  for (const upgrade of thing.industryNames) {\\n    array.push(ns.corporation.getIndustryData(upgrade));\\n  }\\n  \\n  ns.write(\\\"thing.txt\\\", JSON.stringify(array), \\\"W\\\")\\n\\n  const formatter = new Intl.NumberFormat('en-US', {\\n    style: 'currency',\\n    currency: 'USD',\\n  });\\n  const formattedMoneyThing = formatter.format(moneyThing);\\n\\nns.tprint(thing);\\n\\n}\",\"filename\":\"test.js\",\"server\":\"home\"}}],[\"scripts/corporations/get-corporate-info.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let lastRecorded = new Date();\\r\\n\\r\\nexport async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporationFileName = 'data/corporation.txt';\\r\\n    const constants = ns.corporation.getConstants();\\r\\n    let corporation = ns.corporation.getCorporation();\\r\\n    const divisions = [];\\r\\n\\r\\n    const rawMaterialProducers = [\\r\\n        { producer: \\\"Gidget's Farm\\\", materials: [\\\"Food\\\", \\\"Plants\\\"] },\\r\\n        { producer: \\\"Chemist Gidget's Lab\\\", materials: [ \\\"Chemicals\\\" ] }\\r\\n    ];\\r\\n\\r\\n    for (const divisionName of corporation.divisions) {\\r\\n        let division = ns.corporation.getDivision(divisionName)\\r\\n        division.offices = [];\\r\\n        division.productObjects = [];\\r\\n\\r\\n        for (const city of division.cities) {\\r\\n            let office = ns.corporation.getOffice(division.name, city)\\r\\n\\r\\n            if (ns.corporation.hasWarehouse(division.name, city)) {\\r\\n                office.warehouse = ns.corporation.getWarehouse(division.name, city);\\r\\n            }\\r\\n\\r\\n            division.offices.push(office);\\r\\n        }\\r\\n\\r\\n        for (const productName of division.products) {\\r\\n            division.productObjects.push(ns.corporation.getProduct(divisionName, \\\"Aevum\\\", productName));\\r\\n        }\\r\\n\\r\\n        division.materials = [];\\r\\n        const rawMaterialsProducer = rawMaterialProducers.find(x => x.producer === divisionName);\\r\\n        if(rawMaterialsProducer){\\r\\n        \\r\\n            for (const material of rawMaterialsProducer.materials) {\\r\\n                division.materials.push(ns.corporation.getMaterial(divisionName, \\\"Aevum\\\", material));\\r\\n            }            \\r\\n        }\\r\\n\\r\\n        divisions.push(division);\\r\\n    }\\r\\n\\r\\n    const corporationData = { constants, corporation, divisions };\\r\\n\\r\\n    ns.rm(corporationFileName);\\r\\n    ns.write(corporationFileName, JSON.stringify(corporationData), \\\"W\\\");\\r\\n\\r\\n\\r\\n    const now = new Date();\\r\\n    const formatter = new Intl.NumberFormat('en-US', {\\r\\n        style: 'currency',\\r\\n        currency: 'USD',\\r\\n    });\\r\\n\\r\\n    if (now.getHours() !== lastRecorded.getHours()) { // && batches not running\\r\\n        let snapshots = [];\\r\\n\\r\\n        const snapshotsFileName = \\\"data/corporateSnapshots.txt\\\";\\r\\n        if(ns.fileExists(snapshotsFileName)){\\r\\n            snapshots = JSON.parse(ns.read(snapshotsFileName));\\r\\n        }\\r\\n\\r\\n        corporation.profit = formatter.format(corporation.revenue - corporation.expenses);\\r\\n        corporation.funds = formatter.format(corporation.funds);\\r\\n        corporation.revenue = formatter.format(corporation.revenue);\\r\\n        corporation.expenses = formatter.format(corporation.expenses);\\r\\n        corporation.sharePrice = formatter.format(corporation.sharePrice);\\r\\n        corporation.snapshotTime = now;\\r\\n\\r\\n\\r\\n        snapshots.push({ corporation, divisions });\\r\\n        \\r\\n        ns.rm(snapshotsFileName);\\r\\n        ns.write(snapshotsFileName, JSON.stringify(snapshots), \\\"W\\\");\\r\\n\\r\\n        lastRecorded = now;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/get-corporate-info.js\",\"server\":\"home\"}}],[\"scripts/corporations/initial-expand.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const gidgetsFarm = \\\"Gidget's Farm\\\";\\r\\n    const industry = \\\"Agriculture\\\";\\r\\n\\r\\n    if (corporation.divisions.length === 0) {\\r\\n        ns.corporation.expandIndustry(industry, gidgetsFarm);\\r\\n    }\\r\\n\\r\\n    const smartSupplyName = \\\"Smart Supply\\\";\\r\\n    if (!ns.corporation.hasUnlock(smartSupplyName)) {\\r\\n        ns.corporation.purchaseUnlock(smartSupplyName);\\r\\n    }\\r\\n\\r\\n    const division = ns.corporation.getDivision(gidgetsFarm);\\r\\n\\r\\n    for (let [key, city] of Object.entries(ns.enums.CityName)) {\\r\\n        if (!division.cities.includes(city)) {\\r\\n            ns.corporation.expandCity(gidgetsFarm, city);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (let city of division.cities) {\\r\\n        if (!ns.corporation.hasWarehouse(gidgetsFarm, city)) {\\r\\n            ns.corporation.purchaseWarehouse(gidgetsFarm, city);\\r\\n        }\\r\\n\\r\\n        const warehouse = ns.corporation.getWarehouse(division.name, city);\\r\\n\\r\\n        if (warehouse.smartSupplyEnabled === false) {\\r\\n            ns.corporation.setSmartSupply(gidgetsFarm, city, true);\\r\\n            ns.corporation.setSmartSupplyOption(gidgetsFarm, city, \\\"Water\\\", \\\"leftovers\\\");\\r\\n            ns.corporation.setSmartSupplyOption(gidgetsFarm, city, \\\"Chemicals\\\", \\\"leftovers\\\");\\r\\n        }\\r\\n\\r\\n        const percentUsedOfWarehouse = warehouse.sizeUsed / warehouse.size;\\r\\n\\r\\n        if (warehouse.size < 300 && percentUsedOfWarehouse > 0.5){\\r\\n            ns.corporation.upgradeWarehouse(gidgetsFarm, city);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (let city of division.cities) {\\r\\n        const office = ns.corporation.getOffice(gidgetsFarm, city);\\r\\n\\r\\n        if (office.numEmployees < 3) {\\r\\n            ns.corporation.hireEmployee(gidgetsFarm, city, \\\"Operations\\\");\\r\\n            ns.corporation.hireEmployee(gidgetsFarm, city, \\\"Engineer\\\");\\r\\n            ns.corporation.hireEmployee(gidgetsFarm, city, \\\"Business\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (division.numAdVerts === 0) {\\r\\n        ns.corporation.hireAdVert(gidgetsFarm);\\r\\n    }\\r\\n\\r\\n    const initialUpgrades = [\\r\\n        \\\"FocusWires\\\",\\r\\n        \\\"Neural Accelerators\\\",\\r\\n        \\\"Speech Processor Implants\\\",\\r\\n        \\\"Nuoptimal Nootropic Injector Implants\\\",\\r\\n        \\\"Smart Factories\\\",\\r\\n    ];\\r\\n\\r\\n    for (const upgrade of initialUpgrades) {\\r\\n        const upgradeLevel = ns.corporation.getUpgradeLevel(upgrade);\\r\\n        const upgradeCost = ns.corporation.getUpgradeLevelCost(upgrade);\\r\\n\\r\\n        const reserve = 10_000_000_000;\\r\\n        const fundsLessReserve = ns.corporation.getCorporation().funds - reserve;\\r\\n\\r\\n        if (upgradeLevel < 2 && upgradeCost < fundsLessReserve) {\\r\\n            ns.corporation.levelUpgrade(upgrade);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    const thingsToUpgrade = [\\r\\n        \\\"Smart Factories\\\",\\r\\n        \\\"Smart Storage\\\",\\r\\n    ]\\r\\n\\r\\n    if (corporation.funds > 200_000_000_000 && profit > 1_000_000) {\\r\\n\\r\\n        for (const upgrade of thingsToUpgrade) {\\r\\n            const level = ns.corporation.getUpgradeLevel(upgrade);\\r\\n            if(level < 10){\\r\\n                ns.corporation.levelUpgrade(upgrade);\\r\\n            }\\r\\n        }      \\r\\n    }\\r\\n\\r\\n    if (corporation.funds > 200_000_000_000) {\\r\\n\\r\\n        const employeeGoals = [\\r\\n            { type: \\\"Operations\\\", number: 2 },\\r\\n            { type: \\\"Engineer\\\", number: 2 },\\r\\n            { type: \\\"Business\\\", number: 1 },\\r\\n            { type: \\\"Management\\\", number: 2 },\\r\\n            { type: \\\"Research & Development\\\", number: 2 }\\r\\n        ];\\r\\n\\r\\n        for (const city of division.cities) {\\r\\n            const office = ns.corporation.getOffice(gidgetsFarm, city);\\r\\n\\r\\n            if (office.size < 9) {\\r\\n                ns.corporation.upgradeOfficeSize(gidgetsFarm, city, 3);\\r\\n            }\\r\\n\\r\\n            for (let [type, numberOfEmployees] of Object.entries(office.employeeJobs)) {\\r\\n                const goal = employeeGoals.find(x => x.type === type);\\r\\n\\r\\n                if (goal) {\\r\\n                    if (numberOfEmployees < goal.number) {\\r\\n                        ns.corporation.hireEmployee(gidgetsFarm, city, type);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (corporation.funds > 40_000_000_000 && profit > 1_000_000) {\\r\\n        for (const city of division.cities) {\\r\\n            const warehouse = ns.corporation.getWarehouse(gidgetsFarm, city);\\r\\n\\r\\n            if (warehouse.size < 4_200){\\r\\n                ns.corporation.upgradeWarehouse(gidgetsFarm, city);\\r\\n            }\\r\\n        }   \\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/initial-expand.js\",\"server\":\"home\"}}],[\"scripts/corporations/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/upgrade.js\",\"server\":\"home\"}}],[\"scripts/corporations/add-supporting-material.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const materialGoalsGoals = [];\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    for (const divisionName of corporation.divisions.filter(x => x.name !== \\\"Gidget's Import/Export\\\")) {\\r\\n        const materialGoals = [];\\r\\n\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n        const allMaterials = [\\r\\n            { name: \\\"Water\\\", factorName: \\\"waterFactor\\\" },\\r\\n            { name: \\\"Hardware\\\", factorName: \\\"hardwareFactor\\\" },\\r\\n            { name: \\\"AI Cores\\\", factorName: \\\"aiCoreFactor\\\" },\\r\\n            { name: \\\"Robots\\\", factorName: \\\"robotFactor\\\" },\\r\\n            { name: \\\"Real Estate\\\", factorName: \\\"realEstateFactor\\\" },\\r\\n            // { name: \\\"Ore\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Minerals\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Food\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Plants\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Metal\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Chemicals\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Drugs\\\", factorName: \\\"\\\" },\\r\\n        ];\\r\\n\\r\\n        const materialsToBuy = [];\\r\\n\\r\\n        const industryInformation = ns.corporation.getIndustryData(division.type);\\r\\n        const itemsInIndustry = Object.entries(industryInformation);\\r\\n\\r\\n        let sumOfAllMaterialsFactors = 0;\\r\\n\\r\\n        for (const material of allMaterials) {\\r\\n            const materialImprovesProduction = itemsInIndustry.find(x => x[0] === material.factorName);\\r\\n\\r\\n            if (materialImprovesProduction) {\\r\\n                const materialData = ns.corporation.getMaterialData(material.name);\\r\\n\\r\\n                const factor = materialImprovesProduction[1];\\r\\n                sumOfAllMaterialsFactors += factor;\\r\\n\\r\\n                const size = materialData.size;\\r\\n                const name = material.name;\\r\\n                materialsToBuy.push({ name, factor, size });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        let fillXPercentOfWarehouseWithMultiplerMaterial = 0.8; // 0.5 was 789k profit 0.4 500k .6 was 402k\\r\\n\\r\\n        if(division.type === \\\"Chemical\\\"){\\r\\n            fillXPercentOfWarehouseWithMultiplerMaterial = 0.8;\\r\\n        }\\r\\n\\r\\n        for (const city of division.cities) {\\r\\n            const warehouse = ns.corporation.getWarehouse(divisionName, city);\\r\\n            const amountToFillWithMultipliers = warehouse.size * fillXPercentOfWarehouseWithMultiplerMaterial;\\r\\n\\r\\n            for (let material of materialsToBuy) {\\r\\n                const percentOf = material.factor / sumOfAllMaterialsFactors;\\r\\n                const spaceToFill = Math.floor(amountToFillWithMultipliers * percentOf);\\r\\n                const countToBuy = Math.floor(spaceToFill / material.size);\\r\\n\\r\\n                const materialInWarehouse = ns.corporation.getMaterial(divisionName, city, material.name);\\r\\n\\r\\n                let amountToBuy = 0;\\r\\n                if (materialInWarehouse.stored < (countToBuy * .95)) {\\r\\n                    if (countToBuy < 200) {\\r\\n                        ns.corporation.bulkPurchase(divisionName, city, material.name, countToBuy);\\r\\n                    } else {\\r\\n                        amountToBuy = Math.floor(countToBuy / 20);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                ns.corporation.buyMaterial(divisionName, city, material.name, amountToBuy)\\r\\n\\r\\n                let amountToSell = 0;\\r\\n                const freeSpacePercent = (warehouse.size - warehouse.sizeUsed) / warehouse.size\\r\\n                if (freeSpacePercent < 0.1 && materialInWarehouse.stored > countToBuy) {\\r\\n                    amountToSell = materialInWarehouse.stored - countToBuy;\\r\\n                    if (amountToSell > 30) {\\r\\n                        amountToSell = 30;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                ns.corporation.sellMaterial(divisionName, city, material.name, amountToSell, \\\"MP\\\");\\r\\n\\r\\n                material.countToBuy = countToBuy;\\r\\n                material.spaceToFill = spaceToFill;\\r\\n\\r\\n                const materialInGoals = materialGoals.find(x => x.name === material.name);\\r\\n\\r\\n                if (!materialInGoals) {\\r\\n                    materialGoals.push(material);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        materialGoalsGoals.push(materialGoals);\\r\\n    }\\r\\n\\r\\n    // ns.rm(\\\"stuff.txt\\\");\\r\\n    // ns.write(\\\"stuff.txt\\\", JSON.stringify(materialGoalsGoals), \\\"W\\\");\\r\\n}\",\"filename\":\"scripts/corporations/add-supporting-material.js\",\"server\":\"home\"}}],[\"scripts/corporations/upgrade-offices.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const capitalReserve = 400_000_000_000;\\r\\n    const liquidFunds = corporation.funds;\\r\\n    const investableAmount = liquidFunds - capitalReserve;\\r\\n\\r\\n    const employeeRatio = [\\r\\n        { type: \\\"Operations\\\", number: 2 },\\r\\n        { type: \\\"Engineer\\\", number: 2 },\\r\\n        { type: \\\"Business\\\", number: 1 },\\r\\n        { type: \\\"Management\\\", number: 2 },\\r\\n        { type: \\\"Research & Development\\\", number: 2 }\\r\\n    ];\\r\\n\\r\\n    const aevumEmployeeRatio = [\\r\\n        { type: \\\"Operations\\\", number: 1 },\\r\\n        { type: \\\"Engineer\\\", number: 1 },\\r\\n        { type: \\\"Business\\\", number: 1 },\\r\\n        { type: \\\"Management\\\", number: 1 },\\r\\n        { type: \\\"Research & Development\\\", number: 1 }\\r\\n    ];\\r\\n\\r\\n    for (const divisionName of corporation.divisions.filter(x => x.name !== \\\"Gidget's Import/Export\\\")) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        for (let [key, city] of Object.entries(ns.enums.CityName)) {\\r\\n            if (!division.cities.includes(city)) {\\r\\n                ns.corporation.expandCity(divisionName, city);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (division.makesProducts) {\\r\\n            const aevum = \\\"Aevum\\\";\\r\\n            const aevumOffice = ns.corporation.getOffice(divisionName, aevum);\\r\\n            const aevumHeadCount = aevumOffice.numEmployees;\\r\\n\\r\\n            const ishima = \\\"Ishima\\\";\\r\\n            const ishimaHeadCount = ns.corporation.getOffice(divisionName, ishima).numEmployees;\\r\\n\\r\\n            const expandOtherOffices = aevumHeadCount - ishimaHeadCount > 69;\\r\\n            const expandAevum = !expandOtherOffices;\\r\\n\\r\\n            if  (aevumHeadCount < 5){\\r\\n                const countNeeded = 5 - aevumOffice.size;\\r\\n                ns.corporation.upgradeOfficeSize(divisionName, aevum, countNeeded)\\r\\n            }\\r\\n\\r\\n            if (expandAevum) {\\r\\n                const costToExpand = ns.corporation.getOfficeSizeUpgradeCost(divisionName, aevum, 5);\\r\\n\\r\\n                let aevumHeadCountMax = ns.corporation.getUpgradeLevel(\\\"Wilson Analytics\\\") * 18;\\r\\n\\r\\n                if (aevumHeadCountMax < 90) {\\r\\n                    aevumHeadCountMax = 90;\\r\\n                }\\r\\n\\r\\n                if (costToExpand < investableAmount && aevumHeadCount < aevumHeadCountMax) {\\r\\n                    ns.corporation.upgradeOfficeSize(divisionName, aevum, 5);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            hireEmployees(aevumOffice, aevumEmployeeRatio, ns, divisionName);\\r\\n\\r\\n\\r\\n            const citiesWithOfficesWhoArentAevum = division.cities.filter(city => city !== aevum);\\r\\n\\r\\n            if (expandOtherOffices) {\\r\\n                const costToExpand = ns.corporation.getOfficeSizeUpgradeCost(divisionName, ishima, 9) * 5;\\r\\n\\r\\n                if (costToExpand < investableAmount) {\\r\\n                    for (const city of citiesWithOfficesWhoArentAevum) {\\r\\n                        ns.corporation.upgradeOfficeSize(divisionName, city, 9);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            for (const city of citiesWithOfficesWhoArentAevum) {\\r\\n                const office = ns.corporation.getOffice(divisionName, city);\\r\\n                hireEmployees(office, employeeRatio, ns, divisionName);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!division.makesProducts) {\\r\\n            const profit = division.lastCycleRevenue - division.lastCycleExpenses;\\r\\n\\r\\n            const constants = [\\r\\n                { minProfit: 0, officeSizeGoal: 6, minLiquidFunds: 20_000_000_000 },\\r\\n                { minProfit: 10_000_000, officeSizeGoal: 18, minLiquidFunds: 400_000_000_000 },\\r\\n                { minLoss: -500_000, officeSizeGoal: 32, minLiquidFunds: 10_000_000_000_000 },\\r\\n                { minLoss: -900_000, officeSizeGoal: 64, minLiquidFunds: 10_000_000_000_000 },\\r\\n            ]\\r\\n\\r\\n            for (const constant of constants) {\\r\\n                for (const city of division.cities) {\\r\\n                    const office = ns.corporation.getOffice(divisionName, city);\\r\\n\\r\\n                    let sizeNeeded = 0;\\r\\n\\r\\n                    if (profit > constant.minProfit && liquidFunds > constant.minLiquidFunds) {\\r\\n                        sizeNeeded = constant.officeSizeGoal - office.size;\\r\\n                    }\\r\\n\\r\\n                    if(profit < constant.minLoss && liquidFunds > constant.minLiquidFunds){\\r\\n                        sizeNeeded = constant.officeSizeGoal - office.size;\\r\\n                    }\\r\\n\\r\\n                    if (sizeNeeded > 0) {\\r\\n                        ns.corporation.upgradeOfficeSize(divisionName, city, sizeNeeded);\\r\\n                    }\\r\\n\\r\\n                    hireEmployees(office, employeeRatio, ns, divisionName)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction hireEmployees(office, employeeJobsGoals, ns, divisionName) {\\r\\n    if (office.size === office.numEmployees) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let employeesInRatio = 0;\\r\\n    for (const goal of employeeJobsGoals) {\\r\\n        employeesInRatio += goal.number;\\r\\n    }\\r\\n\\r\\n    for (let [type, numberOfEmployees] of Object.entries(office.employeeJobs)) {\\r\\n        const goal = employeeJobsGoals.find(x => x.type === type);\\r\\n\\r\\n        if (goal) {\\r\\n            const percent = goal.number / employeesInRatio;\\r\\n            const requiredEmployeeNumber = percent * office.size;\\r\\n\\r\\n            if (numberOfEmployees < requiredEmployeeNumber) {\\r\\n                ns.corporation.hireEmployee(divisionName, office.city, type);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/upgrade-offices.js\",\"server\":\"home\"}}],[\"scripts/corporations/level-upgrades.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n}\",\"filename\":\"scripts/corporations/level-upgrades.js\",\"server\":\"home\"}}],[\"scripts/corporations/upgrade-warehouse.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const capitalReserve = 40_000_000_000;\\r\\n\\r\\n\\r\\n    for (const divisionName of corporation.divisions.filter(x => x !== \\\"Gidget's Import/Export\\\")) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        const industryData = ns.corporation.getIndustryData(division.type); \\r\\n\\r\\n        for (let city of division.cities) {\\r\\n            if (!ns.corporation.hasWarehouse(divisionName, city)) {\\r\\n                ns.corporation.purchaseWarehouse(divisionName, city);\\r\\n            }\\r\\n\\r\\n            const warehouse = ns.corporation.getWarehouse(division.name, city);\\r\\n\\r\\n            ns.corporation.setSmartSupply(divisionName, city, true);\\r\\n\\r\\n            for (let [material, value] of Object.entries(industryData.requiredMaterials)) {\\r\\n                ns.corporation.setSmartSupplyOption(divisionName, city, material, \\\"leftovers\\\");\\r\\n            }\\r\\n\\r\\n            const percentUsedOfWarehouse = warehouse.sizeUsed / warehouse.size;\\r\\n            const warehouseUpgradeCost = ns.corporation.getUpgradeWarehouseCost(divisionName, city);\\r\\n\\r\\n            const moneyLeft = corporation.funds - warehouseUpgradeCost;\\r\\n            const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n            if (warehouse.size < 300 && percentUsedOfWarehouse > 0.5){\\r\\n                ns.corporation.upgradeWarehouse(divisionName, city);\\r\\n            }\\r\\n\\r\\n            if (warehouse.size < 2000 && percentUsedOfWarehouse > 0.5 && moneyLeft > capitalReserve && profit > 100) { \\r\\n                ns.corporation.upgradeWarehouse(divisionName, city);\\r\\n            }\\r\\n\\r\\n            if (warehouse.size < 6000 && percentUsedOfWarehouse > 0.5 && moneyLeft > capitalReserve && profit > 800_000) { \\r\\n                ns.corporation.upgradeWarehouse(divisionName, city);\\r\\n            }\\r\\n\\r\\n            if(division.type === \\\"Chemical\\\" && warehouse.size < 8000 && percentUsedOfWarehouse > 0.8 && moneyLeft > capitalReserve && profit > 1_000_000){\\r\\n                ns.corporation.upgradeWarehouse(divisionName, city);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/upgrade-warehouse.js\",\"server\":\"home\"}}],[\"scripts/corporations/expand-to-tobacco.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const gidgetsSmokes = \\\"Gidget's Smokes\\\";\\r\\n    const industry = \\\"Tobacco\\\";\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    if (corporation.divisions.length > 0 && corporation.funds > 750_000_000_000 && !corporation.divisions.includes(gidgetsSmokes)) {\\r\\n        ns.corporation.expandIndustry(industry, gidgetsSmokes);\\r\\n        const division = ns.corporation.getDivision(gidgetsSmokes);\\r\\n\\r\\n        const otherEmployeeGoals = [\\r\\n            { type: \\\"Operations\\\", number: 2 },\\r\\n            { type: \\\"Engineer\\\", number: 2 },\\r\\n            { type: \\\"Business\\\", number: 1 },\\r\\n            { type: \\\"Management\\\", number: 2 },\\r\\n            { type: \\\"Research & Development\\\", number: 2 }\\r\\n        ];\\r\\n\\r\\n        for (let [key, city] of Object.entries(ns.enums.CityName)) {\\r\\n            if (!division.cities.includes(city)) {\\r\\n                ns.corporation.expandCity(gidgetsSmokes, city);\\r\\n            }\\r\\n\\r\\n            const office = ns.corporation.getOffice(gidgetsSmokes, city);\\r\\n\\r\\n            if (office.size < 9) {\\r\\n                ns.corporation.upgradeOfficeSize(gidgetsSmokes, city, 3);\\r\\n            }\\r\\n\\r\\n            for (let [type, numberOfEmployees] of Object.entries(office.employeeJobs)) {\\r\\n                const goal = otherEmployeeGoals.find(x => x.type === type);\\r\\n\\r\\n                if (goal) {\\r\\n                    if (numberOfEmployees < goal.number) {\\r\\n                        ns.corporation.hireEmployee(gidgetsSmokes, city, type);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/expand-to-tobacco.js\",\"server\":\"home\"}}],[\"scripts/corporations/product-management.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const profitPerSecond = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    const divisionsProductNames = new Map();\\r\\n\\r\\n    if (corporation.divisions.includes(\\\"Gidget's Smokes\\\")){\\r\\n        divisionsProductNames.set(\\\"Gidget's Smokes\\\", { division: \\\"Gidget's Smokes\\\", productNames: [\\\"These Smokes Probably Won't Kill U v.\\\", \\\"These Smokes WILL Kill You v.\\\", \\\"This Leaf is Highly Addictive v.\\\", \\\"Behold, the bringer of Death v.\\\", \\\"You will live so fast and DIE young if you smoke these v.\\\"] });\\r\\n    }\\r\\n\\r\\n    if (corporation.divisions.includes(\\\"Gidget's Computers & Hardware\\\")){\\r\\n        divisionsProductNames.set(\\\"Gidget's Computers & Hardware\\\", { division: \\\"Gidget's Computers & Hardware\\\", productNames: [\\\"Desktop Computer v.\\\", \\\"Router v.\\\", \\\"Laptop Computer v.\\\", \\\"Smart Phone v.\\\", \\\"Computer Monitor v.\\\"] });\\r\\n    }\\r\\n\\r\\n    const includedDivisions = Array.from(divisionsProductNames.keys());\\r\\n\\r\\n    for (const divisionName of includedDivisions) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n        const divisionConstants = divisionsProductNames.get(divisionName);\\r\\n\\r\\n        const products = [];\\r\\n        let oneDeveloping = false;\\r\\n\\r\\n        for (const productName of division.products) {\\r\\n            const product = ns.corporation.getProduct(divisionName, \\\"Aevum\\\", productName);\\r\\n\\r\\n            if (product.developmentProgress < 100) {\\r\\n                oneDeveloping = true;\\r\\n            }\\r\\n\\r\\n            products.push(product);\\r\\n        }\\r\\n\\r\\n        let mimimumSpend = 1_000_000_000;\\r\\n\\r\\n        if(profitPerSecond > mimimumSpend){\\r\\n            mimimumSpend = profitPerSecond;\\r\\n        }\\r\\n\\r\\n        if (division.products.length < division.maxProducts && !oneDeveloping) {\\r\\n            const productName = divisionConstants.productNames[division.products.length];\\r\\n            ns.corporation.makeProduct(divisionName, \\\"Aevum\\\", productName + 1, mimimumSpend, mimimumSpend);\\r\\n        }\\r\\n\\r\\n        if (division.products.length === division.maxProducts && !oneDeveloping) {\\r\\n\\r\\n            const lowestRatedProduct = products\\r\\n                .sort((a, b) => b.rating - a.rating)\\r\\n                .pop();\\r\\n\\r\\n            ns.corporation.discontinueProduct(divisionName, lowestRatedProduct.name);\\r\\n\\r\\n            const splitName = lowestRatedProduct.name.split(\\\"v.\\\");\\r\\n\\r\\n            ns.corporation.makeProduct(divisionName, \\\"Aevum\\\", `${splitName[0]}v.${Number(splitName[1]) + 1}`, mimimumSpend, mimimumSpend);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/corporations/product-management.js\",\"server\":\"home\"}}],[\"scripts/corporations/invest.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const capitalReserve = 400_000_000_000;\\r\\n    const liquidFunds = corporation.funds;\\r\\n    const investableAmount = liquidFunds - capitalReserve;\\r\\n\\r\\n    initialUpgrades(corporation, ns);\\r\\n\\r\\n    if (investableAmount < 0 || corporation.divisions.length === 0) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const upgradeGoals = [\\r\\n        { name: \\\"FocusWires\\\", goalLvl: 20, topPriority: true },\\r\\n        { name: \\\"Neural Accelerators\\\", goalLvl: 20, topPriority: true },\\r\\n        { name: \\\"Speech Processor Implants\\\", goalLvl: 20, topPriority: true },\\r\\n        { name: \\\"Nuoptimal Nootropic Injector Implants\\\", goalLvl: 20, topPriority: true },\\r\\n        { name: \\\"Wilson Analytics\\\", goalLvl: 20, topPriority: false }, // if this was top it would take forever to get to the less important ones.\\r\\n        { name: \\\"DreamSense\\\", goalLvl: 14, topPriority: false },\\r\\n        { name: \\\"ABC SalesBots\\\", goalLvl: 20, topPriority: false },\\r\\n        { name: \\\"Project Insight\\\", goalLvl: 14, topPriority: false },\\r\\n        { name: \\\"Smart Storage\\\", goalLvl: 20, topPriority: false },\\r\\n        { name: \\\"Smart Factories\\\", goalLvl: 20, topPriority: false },\\r\\n    ]\\r\\n\\r\\n    let cheapestUpgrade;\\r\\n\\r\\n    if (investableAmount > 5_000_000_000_000_000) {\\r\\n        if (!ns.corporation.hasUnlock(\\\"Shady Accounting\\\")) {\\r\\n            ns.corporation.purchaseUnlock(\\\"Shady Accounting\\\");\\r\\n        }\\r\\n\\r\\n        if (!ns.corporation.hasUnlock(\\\"Government Partnership\\\")) {\\r\\n            ns.corporation.purchaseUnlock(\\\"Government Partnership\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const upgrade of upgradeGoals) {\\r\\n        if (cheapestUpgrade && cheapestUpgrade.topPriority && upgrade.topPriority === false) {\\r\\n            continue;\\r\\n        }\\r\\n\\r\\n        upgrade.cost = ns.corporation.getUpgradeLevelCost(upgrade.name);\\r\\n        upgrade.currentLvl = ns.corporation.getUpgradeLevel(upgrade.name);\\r\\n        upgrade.atGoal = upgrade.currentLvl >= upgrade.goalLvl;\\r\\n        upgrade.upgradeType = true;\\r\\n\\r\\n        if (!cheapestUpgrade || cheapestUpgrade.cost > upgrade.cost) {\\r\\n            if (!upgrade.atGoal) {\\r\\n                cheapestUpgrade = upgrade;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const divisionName of corporation.divisions.filter(x => x !== \\\"Gidget's Import/Export\\\")) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        if (division.numAdVerts === 0) {\\r\\n            ns.corporation.hireAdVert(divisionName);\\r\\n        }\\r\\n\\r\\n        if (division.makesProducts) {\\r\\n            const cost = ns.corporation.getHireAdVertCost(divisionName);\\r\\n\\r\\n            if (!cheapestUpgrade || cheapestUpgrade.cost > cost) {\\r\\n                cheapestUpgrade = { adVertType: true, division: divisionName, cost };\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (!cheapestUpgrade) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (investableAmount > cheapestUpgrade.cost) {\\r\\n        if (cheapestUpgrade.adVertType) {\\r\\n            if (ns.corporation.getHireAdVertCost(cheapestUpgrade.division) === cheapestUpgrade.cost) {\\r\\n                ns.corporation.hireAdVert(cheapestUpgrade.division);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (cheapestUpgrade.upgradeType) {\\r\\n            if (ns.corporation.getUpgradeLevelCost(cheapestUpgrade.name) === cheapestUpgrade.cost) {\\r\\n                ns.corporation.levelUpgrade(cheapestUpgrade.name);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction initialUpgrades(corporation, ns) {\\r\\n    const initialUpgrades = [\\r\\n        \\\"FocusWires\\\",\\r\\n        \\\"Neural Accelerators\\\",\\r\\n        \\\"Speech Processor Implants\\\",\\r\\n        \\\"Nuoptimal Nootropic Injector Implants\\\",\\r\\n        \\\"Smart Factories\\\",\\r\\n    ];\\r\\n\\r\\n    const smartSupplyName = \\\"Smart Supply\\\";\\r\\n    if (!ns.corporation.hasUnlock(smartSupplyName)) {\\r\\n        ns.corporation.purchaseUnlock(smartSupplyName);\\r\\n    }\\r\\n\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    if(profit > 100_000){\\r\\n        for (const upgrade of initialUpgrades) {\\r\\n            const upgradeLevel = ns.corporation.getUpgradeLevel(upgrade);\\r\\n            const upgradeCost = ns.corporation.getUpgradeLevelCost(upgrade);\\r\\n    \\r\\n            const reserve = 10_000_000_000;\\r\\n            const fundsLessReserve = ns.corporation.getCorporation().funds - reserve;\\r\\n    \\r\\n            if (upgradeLevel < 2 && upgradeCost < fundsLessReserve) {\\r\\n                ns.corporation.levelUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const thingsToUpgrade = [\\r\\n        \\\"Smart Factories\\\",\\r\\n        \\\"Smart Storage\\\",\\r\\n    ]\\r\\n\\r\\n    if (corporation.funds > 200_000_000_000 && profit > 1_000_000) {\\r\\n        for (const upgrade of thingsToUpgrade) {\\r\\n            const level = ns.corporation.getUpgradeLevel(upgrade);\\r\\n            if (level < 10) {\\r\\n                ns.corporation.levelUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/invest.js\",\"server\":\"home\"}}],[\"scripts/corporations/research.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const researchGoals = [\\r\\n        { name: \\\"Hi-Tech R&D Laboratory\\\", prereqs: [] },\\r\\n        { name: \\\"Market-TA.II\\\", prereqs: [\\\"Market-TA.I\\\"] },\\r\\n        { name: \\\"uPgrade: Capacity.I\\\", prereqs: [\\\"uPgrade: Fulcrum\\\"], productOnly: true},\\r\\n        { name: \\\"uPgrade: Capacity.II\\\", prereqs: [], productOnly: true},\\r\\n        { name: \\\"Drones - Assembly\\\", prereqs: [ \\\"Drones\\\"] },\\r\\n        { name: \\\"Self-Correcting Assemblers\\\", prereqs: []}\\r\\n    ];\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    for (const divisionName of corporation.divisions.filter(x => x !== \\\"Gidget's Import/Export\\\")) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        let totalSpent = 0;\\r\\n        for (const research of researchGoals) {\\r\\n            if(research.productOnly && division.makesProducts === false){\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            let cost = ns.corporation.getResearchCost(divisionName, research.name);\\r\\n\\r\\n            for (const prereqName of research.prereqs) {\\r\\n                cost += ns.corporation.getResearchCost(divisionName, prereqName);\\r\\n            }\\r\\n\\r\\n            if (ns.corporation.hasResearched(divisionName, research.name)) {\\r\\n                totalSpent += cost;\\r\\n                continue;\\r\\n            }           \\r\\n\\r\\n            const researchPointsToSpend = division.researchPoints;\\r\\n\\r\\n            if ((cost * 2) + totalSpent < researchPointsToSpend) {\\r\\n                for (const prereqName of research.prereqs) {\\r\\n                    ns.corporation.research(divisionName, prereqName)\\r\\n                }\\r\\n\\r\\n                ns.corporation.research(divisionName, research.name);\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/research.js\",\"server\":\"home\"}}],[\"scripts/corporations/coffee-party.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const divisionsToOperateOn = corporation.divisions.filter(divisionName => divisionName !== \\\"Gidget's Farm\\\");\\r\\n\\r\\n    for (const divisionName of divisionsToOperateOn) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        for(const city of division.cities){\\r\\n            const office = ns.corporation.getOffice(divisionName);\\r\\n\\r\\n            if (office.avgEnergy < 20){\\r\\n                ns.corporation.buyTea(divisionName, city);\\r\\n            }\\r\\n\\r\\n            if(office.avgMoral < 20) {\\r\\n                ns.corporation.throwParty(divisionName, city, 50_000);\\r\\n            }            \\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/coffee-party.js\",\"server\":\"home\"}}],[\"scripts/corporations/tea-party.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const corporateProfits = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    const divisionalCorporateProfitsFile = \\\"data/divisionalCorporateProfits.txt\\\";\\r\\n    let divisionalCorporateProfits = new Map();\\r\\n    if (ns.fileExists(divisionalCorporateProfitsFile)) {\\r\\n        divisionalCorporateProfits = new Map(JSON.parse(ns.read(divisionalCorporateProfitsFile)));\\r\\n    }\\r\\n\\r\\n    for (const divisionName of corporation.divisions.filter(x => x !== \\\"Gidget's Import/Export\\\")) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        const divisionalProfitsLastCycle = division.lastCycleRevenue - division.lastCycleExpenses;\\r\\n\\r\\n        let divisionProfitsRecord;\\r\\n\\r\\n        if (divisionalCorporateProfits.has(divisionName)) {\\r\\n            divisionProfitsRecord = divisionalCorporateProfits.get(divisionName);\\r\\n        } else {\\r\\n            divisionProfitsRecord = { sumOfProfitsInThisAccountingPeriod: 0, count: 0, lastProfit: 0, teaPartyCost: 0, partyEffect: [] };\\r\\n        }\\r\\n\\r\\n        if (divisionProfitsRecord.lastProfit !== divisionalProfitsLastCycle) {\\r\\n            divisionProfitsRecord.count++;\\r\\n            divisionProfitsRecord.sumOfProfitsInThisAccountingPeriod += divisionalProfitsLastCycle;\\r\\n            divisionProfitsRecord.lastProfit = divisionalProfitsLastCycle;\\r\\n\\r\\n            let employeeCount = 0;\\r\\n            let morales = [];\\r\\n            let energies = [];\\r\\n\\r\\n            for (const city of division.cities) {\\r\\n                const office = ns.corporation.getOffice(divisionName, city);\\r\\n\\r\\n                morales.push(office.avgMorale);\\r\\n                energies.push(office.avgEnergy);\\r\\n\\r\\n                employeeCount += office.numEmployees;\\r\\n            }\\r\\n\\r\\n            const averageMorale = averageArray(morales);\\r\\n            const averageEnergy = averageArray(energies);\\r\\n\\r\\n            const teaCostPerHead = 500_000;\\r\\n            divisionProfitsRecord.teaPartyCost = employeeCount * teaCostPerHead;\\r\\n\\r\\n            let minimumMoraleAndEnergy = 70;\\r\\n            if (corporateProfits > 1_000_000_000_000){\\r\\n                minimumMoraleAndEnergy = 95;\\r\\n            }\\r\\n\\r\\n            const divisionIsStrugglingAndWeAreProfitableAndHaveMoney = (averageMorale < minimumMoraleAndEnergy || averageEnergy < minimumMoraleAndEnergy) && corporateProfits > 5_000_000 && corporation.funds > 100_000_000_000;\\r\\n\\r\\n\\r\\n            const divisionalProfitsCanSustain = divisionProfitsRecord.sumOfProfitsInThisAccountingPeriod > divisionProfitsRecord.teaPartyCost;\\r\\n            const shouldTreatOurEmployees = divisionalProfitsCanSustain || divisionIsStrugglingAndWeAreProfitableAndHaveMoney\\r\\n\\r\\n            if (shouldTreatOurEmployees) {\\r\\n                const goal = 95;\\r\\n\\r\\n                let tea = false;\\r\\n                let party = false;\\r\\n\\r\\n                if (averageEnergy <= averageMorale) {\\r\\n                    if (averageEnergy < goal) {\\r\\n                        tea = true;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (averageMorale < averageEnergy) {\\r\\n                    if (averageMorale < goal) {\\r\\n                        party = true;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                let effects = [];\\r\\n\\r\\n                for (const city of division.cities) {\\r\\n                    if (party) {\\r\\n                        const effect = ns.corporation.throwParty(divisionName, city, teaCostPerHead);\\r\\n                        effects.push(effect);\\r\\n                    }\\r\\n\\r\\n                    if (tea) {\\r\\n                        const effect = ns.corporation.buyTea(divisionName, city);\\r\\n                        effects.push(effect);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (party) {\\r\\n                    divisionProfitsRecord.partyEffect = recordEffectiveness(averageMorale, effects, divisionProfitsRecord.partyEffect);\\r\\n                }\\r\\n\\r\\n                resetProfitRecord(divisionProfitsRecord);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        divisionalCorporateProfits.set(divisionName, divisionProfitsRecord);\\r\\n    }\\r\\n\\r\\n    ns.rm(divisionalCorporateProfitsFile);\\r\\n    ns.write(divisionalCorporateProfitsFile, JSON.stringify(Array.from(divisionalCorporateProfits.entries()), \\\"W\\\"));\\r\\n}\\r\\n\\r\\nfunction recordEffectiveness(average, effects, array) {\\r\\n    const mapToWorkOn = new Map(array);\\r\\n\\r\\n    const averageBracket = Math.floor(average / 10);\\r\\n    const averageEffect = averageArray(effects);\\r\\n    let newAverageOverTime;\\r\\n\\r\\n    if (mapToWorkOn.has(averageBracket)) {\\r\\n        let previousEffect = mapToWorkOn.get(averageBracket);\\r\\n        previousEffect += averageEffect;\\r\\n        newAverageOverTime = previousEffect / 2;\\r\\n    } else {\\r\\n        newAverageOverTime = averageEffect;\\r\\n    }\\r\\n\\r\\n    mapToWorkOn.set(averageBracket, newAverageOverTime);\\r\\n\\r\\n   return Array.from(mapToWorkOn);\\r\\n}\\r\\n\\r\\nfunction averageArray(array) {\\r\\n    return array.reduce((acc, x) => acc + x, 0) / array.length;\\r\\n}\\r\\n\\r\\nfunction resetProfitRecord(divisionProfitsRecord) {\\r\\n    divisionProfitsRecord.count = 0;\\r\\n    divisionProfitsRecord.sumOfProfitsInThisAccountingPeriod = 0;\\r\\n}\\r\\n\",\"filename\":\"scripts/corporations/tea-party.js\",\"server\":\"home\"}}],[\"scripts/corporations/import-export.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const divisionName = \\\"Gidget's Import/Export\\\";\\r\\n    const unlocksNeeded = [\\r\\n        \\\"Export\\\",\\r\\n        \\\"Market Research - Demand\\\",\\r\\n    ]\\r\\n\\r\\n    const materialNames = [\\r\\n        \\\"Water\\\",\\r\\n        \\\"Ore\\\",\\r\\n        \\\"Minerals\\\",\\r\\n        \\\"Food\\\",\\r\\n        \\\"Plants\\\",\\r\\n        \\\"Metal\\\",\\r\\n        \\\"Hardware\\\",\\r\\n        \\\"Chemicals\\\",\\r\\n        \\\"Drugs\\\",\\r\\n        \\\"Robots\\\",\\r\\n        \\\"AI Cores\\\",\\r\\n        \\\"Real Estate\\\"\\r\\n    ]\\r\\n\\r\\n    for (const unlockName of unlocksNeeded) {\\r\\n        if (!ns.corporation.hasUnlock(unlockName)) {\\r\\n            ns.corporation.purchaseUnlock(unlockName);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (corporation.divisions.includes(divisionName)) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        for (let [key, city] of Object.entries(ns.enums.CityName)) {\\r\\n            if (!division.cities.includes(city)) {\\r\\n                ns.corporation.expandCity(divisionName, city);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (let city of division.cities) {\\r\\n            if (!ns.corporation.hasWarehouse(divisionName, city)) {\\r\\n                ns.corporation.purchaseWarehouse(divisionName, city);\\r\\n            }\\r\\n\\r\\n            const warehouse = ns.corporation.getWarehouse(divisionName, city);\\r\\n\\r\\n            if (warehouse.smartSupplyEnabled) {\\r\\n                ns.corporation.setSmartSupply(divisionName, city, false);\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        let allMaterials = [];\\r\\n\\r\\n        for (const materialName of materialNames) {\\r\\n            let materials = []\\r\\n\\r\\n            let lowestPrice;\\r\\n            let highestPrice;\\r\\n\\r\\n            for (let city of division.cities) {\\r\\n                let materialFromCity = ns.corporation.getMaterial(divisionName, city, materialName);\\r\\n                materialFromCity.city = city;\\r\\n                materials.push(materialFromCity);\\r\\n\\r\\n                if (!lowestPrice || lowestPrice > materialFromCity.marketPrice) {\\r\\n                    lowestPrice = materialFromCity.marketPrice;\\r\\n                }\\r\\n\\r\\n                if (!highestPrice || highestPrice < materialFromCity.marketPrice) {\\r\\n                    highestPrice = materialFromCity.marketPrice;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            for (const materialFromCity of materials) {\\r\\n                materialFromCity.delta = materialFromCity.marketPrice - lowestPrice;\\r\\n            }\\r\\n\\r\\n            const delta = highestPrice - lowestPrice;\\r\\n            materials = materials.sort((a, b) => b.marketPrice - a.marketPrice);\\r\\n\\r\\n            allMaterials.push({ materials, delta });\\r\\n        }\\r\\n\\r\\n        allMaterials = allMaterials.sort((a, b) => b.delta - a.delta);\\r\\n\\r\\n        const materialsToImportExport = allMaterials.filter(x => x.delta > 500);\\r\\n\\r\\n        // if all stored === 0, then do another round\\r\\n        for (const materialToImportExport of materialsToImportExport) {\\r\\n            const exportOrders = []\\r\\n            // ns.tprint(materialToImportExport);\\r\\n            const inventoryCount = materialToImportExport.materials.reduce((acc, b) => acc + b.stored, 0);\\r\\n\\r\\n            if (inventoryCount > 0) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            for (const materialFromCity of materialToImportExport.materials) {\\r\\n                const materialName = materialFromCity.name;\\r\\n\\r\\n                for (const exportMaterial of materialFromCity.exports) {\\r\\n                    ns.corporation.cancelExportMaterial(divisionName, materialFromCity.city, divisionName, exportMaterial.city, materialName);\\r\\n                }\\r\\n\\r\\n                if (materialFromCity.delta > 0) {\\r\\n                    ns.corporation.sellMaterial(divisionName, materialFromCity.city, materialName, \\\"MAX\\\", \\\"MP\\\");\\r\\n\\r\\n                    if (materialFromCity.delta > 500) {\\r\\n                        exportOrders.push({ city: materialFromCity.city, demand: materialFromCity.demand });\\r\\n                    }\\r\\n                } else {\\r\\n                    ns.corporation.sellMaterial(divisionName, materialFromCity.city, materialName, 0, 0);\\r\\n\\r\\n                    let purchaseAmount = 0;\\r\\n                    for (const exportOrder of exportOrders) {\\r\\n                        ns.corporation.exportMaterial(divisionName, materialFromCity.city, divisionName, exportOrder.city, materialName, exportOrder.demand);\\r\\n                        purchaseAmount += exportOrder.demand;\\r\\n                    }\\r\\n\\r\\n                    const materialData = ns.corporation.getMaterialData(materialName); // {\\\"name\\\":\\\"Real Estate\\\",\\\"size\\\":0.005,\\\"demandBase\\\":50,\\\"demandRange\\\":[5,99],\\\"competitionBase\\\":50,\\\"competitionRange\\\":[25,75],\\\"baseCost\\\":80000,\\\"maxVolatility\\\":1.5,\\\"baseMarkup\\\":1.5}\\r\\n\\r\\n                    const spaceNeeded = purchaseAmount * materialData.size;\\r\\n\\r\\n                    const warehouse = ns.corporation.getWarehouse(divisionName, materialFromCity.city);\\r\\n                    const freeSpace = warehouse.size - warehouse.sizeUsed;\\r\\n\\r\\n                    if (freeSpace > spaceNeeded) {\\r\\n                        ns.corporation.bulkPurchase(divisionName, materialFromCity.city, materialName, purchaseAmount);\\r\\n                    } else {\\r\\n                        ns.corporation.upgradeWarehouse(divisionName, materialFromCity.city);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/import-export.js\",\"server\":\"home\"}}],[\"scripts/corporations/adjust-prices-export.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    if (corporation.state !== \\\"START\\\") {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const gidgetsFarm = \\\"Gidget's Farm\\\";\\r\\n    const gidgetsSmokes = \\\"Gidget's Smokes\\\";\\r\\n    const chemist = \\\"Chemist Gidget's Lab\\\";\\r\\n    const water = \\\"Gidget's Municipal Water\\\";\\r\\n    const hardware = \\\"Gidget's Computers & Hardware\\\";\\r\\n    const metal = \\\"Gidget's Metallurgy\\\";\\r\\n    const mining = \\\"Gidget's Land Destroyer\\\";\\r\\n\\r\\n    const divisionalTies = [\\r\\n        {\\r\\n            name: gidgetsFarm, materialsSold: [\\\"Food\\\", \\\"Plants\\\"], exports: [\\r\\n                { importer: gidgetsSmokes, material: \\\"Plants\\\" },\\r\\n                { importer: chemist, material: \\\"Plants\\\" }\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: chemist, materialsSold: [\\\"Chemicals\\\"], exports: [\\r\\n                { importer: gidgetsFarm, material: \\\"Chemicals\\\" }\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: water, materialsSold: [\\\"Water\\\"], exports: [\\r\\n                { importer: gidgetsFarm, material: \\\"Water\\\" },\\r\\n                { importer: chemist, material: \\\"Water\\\" },\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: hardware, materialsSold: [\\\"Hardware\\\"], exports: [\\r\\n                { importer: water, material: \\\"Hardware\\\" },\\r\\n                { importer: mining, material: \\\"Hardware\\\" },\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: metal, materialsSold: [\\\"Metal\\\"], exports: [\\r\\n                { importer: hardware, material: \\\"Metal\\\" },\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: mining, materialsSold: [\\\"Ore\\\", \\\"Minerals\\\"], exports: [\\r\\n                    { importer: metal, material: \\\"Ore\\\" },\\r\\n                ]\\r\\n        },\\r\\n    ]\\r\\n\\r\\n    const rawMaterialProducers = [];\\r\\n    const importExportRelationships = [];\\r\\n\\r\\n    for (const division of divisionalTies) {\\r\\n        if (corporation.divisions.includes(division.name)) {\\r\\n            rawMaterialProducers.push({ producer: division.name, materials: division.materialsSold });\\r\\n            for (const EXPORT of division.exports) {\\r\\n                if(corporation.divisions.includes(EXPORT.importer)){\\r\\n                    importExportRelationships.push({ exporter: division.name, importer: EXPORT.importer, material: EXPORT.material });\\r\\n                }                \\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const divisionName of corporation.divisions.filter(x => x.name !== \\\"Gidget's Import/Export\\\")) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        const divisionHasExportRelationship = importExportRelationships.find(x => x.exporter === divisionName);\\r\\n\\r\\n        const exportRelationships = importExportRelationships.filter(x => x.exporter === divisionName);\\r\\n\\r\\n        for (const exportRelationship of exportRelationships) {\\r\\n            for (const city of division.cities) {\\r\\n                ns.corporation.cancelExportMaterial(exportRelationship.exporter, city, exportRelationship.importer, city, exportRelationship.material);\\r\\n                ns.corporation.exportMaterial(exportRelationship.exporter, city, exportRelationship.importer, city, exportRelationship.material, \\\"-(IPROD)\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (const productName of division.products) {\\r\\n            if (ns.corporation.hasResearched(divisionName, \\\"Market-TA.II\\\")) {\\r\\n                ns.corporation.setProductMarketTA2(divisionName, productName, true);\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            for (const city of division.cities) {\\r\\n                const product = ns.corporation.getProduct(divisionName, city, productName);\\r\\n\\r\\n                if (product.developmentProgress !== 100) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                if (product.desiredSellPrice === 0) {\\r\\n                    let mostExpensivePrice = 0;\\r\\n\\r\\n                    for (const productNameForPrice of division.products) {\\r\\n                        const product = ns.corporation.getProduct(divisionName, city, productNameForPrice);\\r\\n                        if (product.desiredSellPrice === 0) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        let price = product.desiredSellPrice;\\r\\n\\r\\n                        if (isNaN(price)) {\\r\\n                            price = Number(price.split(')')[1]);\\r\\n                        }\\r\\n\\r\\n                        if (price > mostExpensivePrice) {\\r\\n                            mostExpensivePrice = price;\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    if (mostExpensivePrice === 0) {\\r\\n                        mostExpensivePrice = product.productionCost * 2;\\r\\n                    }\\r\\n\\r\\n                    ns.corporation.sellProduct(divisionName, city, productName, \\\"MAX\\\", `${mostExpensivePrice}`, false)\\r\\n                } else {\\r\\n                    if (product.stored === 0) {\\r\\n                        const priceToSet = adjustPriceUp(product.desiredSellPrice, product.productionCost);\\r\\n\\r\\n                        ns.corporation.sellProduct(divisionName, city, productName, \\\"MAX\\\", priceToSet, false)\\r\\n                    }\\r\\n\\r\\n                    if (product.stored > 20) {\\r\\n                        const priceToSet = adjustPriceDown(product.desiredSellPrice, product.productionCost);\\r\\n\\r\\n                        ns.corporation.sellProduct(divisionName, city, productName, \\\"MAX\\\", priceToSet, false);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        const rawMaterialProducer = rawMaterialProducers.find(x => x.producer === divisionName);\\r\\n\\r\\n        if (rawMaterialProducer) {\\r\\n            for (const city of division.cities) {\\r\\n                for (const materialName of rawMaterialProducer.materials) {\\r\\n\\r\\n                    const material = ns.corporation.getMaterial(divisionName, city, materialName);\\r\\n\\r\\n                    const warehouse = ns.corporation.getWarehouse(divisionName, city);\\r\\n\\r\\n                    const percentUsed = warehouse.sizeUsed / warehouse.size;\\r\\n\\r\\n                    if (ns.corporation.hasResearched(divisionName, \\\"Market-TA.II\\\") && material.stored === 0) {\\r\\n                        ns.corporation.setMaterialMarketTA2(divisionName, city, materialName, true);\\r\\n                        continue;\\r\\n                    } else if (ns.corporation.hasResearched(divisionName, \\\"Market-TA.II\\\") && percentUsed < 0.8) {\\r\\n                        ns.corporation.setMaterialMarketTA2(divisionName, city, materialName, true);\\r\\n                        continue;\\r\\n                    } else if (ns.corporation.hasResearched(divisionName, \\\"Market-TA.II\\\")) {\\r\\n                        ns.corporation.setMaterialMarketTA2(divisionName, city, materialName, false);\\r\\n                    }\\r\\n\\r\\n                    const marketPrice = material.marketPrice;\\r\\n\\r\\n                    if (material.desiredSellPrice === 0 || material.desiredSellPrice === \\\"MP\\\" || material.desiredSellPrice === \\\"MP+5\\\") {\\r\\n                        ns.corporation.sellMaterial(divisionName, city, material.name, \\\"MAX\\\", marketPrice);\\r\\n                    } else {\\r\\n                        if (material.stored === 0) {\\r\\n                            const priceToSet = adjustPriceUp(material.desiredSellPrice, marketPrice);\\r\\n                            ns.corporation.sellMaterial(divisionName, city, material.name, \\\"MAX\\\", priceToSet);\\r\\n                        }\\r\\n\\r\\n                        if (material.stored > 20) {\\r\\n                            const priceToSet = adjustPriceDown(material.desiredSellPrice, marketPrice);\\r\\n\\r\\n                            ns.corporation.sellMaterial(divisionName, city, material.name, \\\"MAX\\\", priceToSet);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction adjustPriceUp(oldPrice, marketPrice) {\\r\\n\\r\\n    if (isNaN(oldPrice)) {\\r\\n        const adjuster = Number(oldPrice.split(')')[1]);\\r\\n        oldPrice = adjuster + marketPrice;\\r\\n    }\\r\\n\\r\\n    let newPrice = 0;\\r\\n    if (oldPrice >= 0) {\\r\\n        if (oldPrice > 100) {\\r\\n            newPrice = oldPrice * 1.05;\\r\\n        } else {\\r\\n            newPrice = oldPrice + 10;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (oldPrice < 0) {\\r\\n        newPrice = 10;\\r\\n    }\\r\\n\\r\\n    if (newPrice <= 0) {\\r\\n        return oldPrice;\\r\\n    }\\r\\n\\r\\n    return newPrice;\\r\\n}\\r\\n\\r\\nfunction adjustPriceDown(oldPrice, marketPrice) {\\r\\n\\r\\n    if (isNaN(oldPrice)) {\\r\\n        const adjuster = Number(oldPrice.split(')')[1]);\\r\\n        oldPrice = adjuster + marketPrice;\\r\\n    }\\r\\n\\r\\n    let newPrice = 0;\\r\\n    if (oldPrice >= 0) {\\r\\n        if (oldPrice > 100) {\\r\\n            newPrice = oldPrice * 0.97;\\r\\n        } else {\\r\\n            newPrice = oldPrice - 5;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (oldPrice < 0) {\\r\\n        newPrice = 10;\\r\\n    }\\r\\n\\r\\n    if (newPrice <= 0) {\\r\\n        return oldPrice;\\r\\n    }\\r\\n\\r\\n    return newPrice;\\r\\n}\\r\\n\",\"filename\":\"scripts/corporations/adjust-prices-export.js\",\"server\":\"home\"}}],[\"scripts/corporations/go-public.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    if (profit > 200_000_000 && corporation.public === false){\\r\\n        ns.corporation.goPublic(0);\\r\\n    }\\r\\n\\r\\n    if(corporation.public && corporation.dividendRate !== .01){\\r\\n        ns.corporation.issueDividends(.01);\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/go-public.js\",\"server\":\"home\"}}],[\"scripts/corporations/get-investments.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    // ns.tprint(ns.corporation.getInvestmentOffer())\\r\\n\\r\\n    ///{\\\"funds\\\":96283140000,\\\"shares\\\":100000000,\\\"round\\\":1}\\r\\n\\r\\n    const investmentWeWillTake = [\\r\\n        { round: 1, investment: 1_000_000_000_000 },\\r\\n        { round: 2, investment: 3_000_000_000_000 },\\r\\n    ]\\r\\n\\r\\n    const investmentOffer = ns.corporation.getInvestmentOffer();\\r\\n\\r\\n    if (corporation.public === false) {\\r\\n        for (const minimumInvestment of investmentWeWillTake) {\\r\\n            if(investmentOffer.round === minimumInvestment.round && investmentOffer.funds > minimumInvestment.investment) {\\r\\n                ns.corporation.acceptInvestmentOffer();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (profit > 200_000_000 && corporation.public === false) {\\r\\n        ns.corporation.goPublic(0);\\r\\n    }\\r\\n\\r\\n    if (corporation.public && corporation.dividendRate !== .01 && !ns.corporation.hasUnlock(\\\"Government Partnership\\\")) {\\r\\n        ns.corporation.issueDividends(.01);\\r\\n    }\\r\\n\\r\\n    if (corporation.public && corporation.dividendRate !== .5 && ns.corporation.hasUnlock(\\\"Government Partnership\\\")) {\\r\\n        ns.corporation.issueDividends(.5);\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/get-investments.js\",\"server\":\"home\"}}],[\"scripts/corporations/expand.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const divisionsGoal = [\\r\\n        // { order: 0, fundsNeeded: 100_000_000_000, name: \\\"Gidget's Import/Export\\\", industry: \\\"Agriculture\\\", profitNeeded: 0 },\\r\\n        { order: 0, fundsNeeded: 0, name: \\\"Gidget's Farm\\\", industry: \\\"Agriculture\\\", profitNeeded: 0 },\\r\\n        { order: 1, fundsNeeded: 300_000_000_000, name: \\\"Gidget's Smokes\\\",  industry: \\\"Tobacco\\\", profitNeeded: 2_000_000 },\\r\\n        { order: 2, fundsNeeded: 2_000_000_000_000, name: \\\"Chemist Gidget's Lab\\\", industry: \\\"Chemical\\\", profitNeeded: 2_000_000_000 },\\r\\n        { order: 3, fundsNeeded: 3_000_000_000_000, name: \\\"Gidget's Municipal Water\\\", industry: \\\"Water Utilities\\\", profitNeeded: 10_000_000_000 },\\r\\n        { order: 4, fundsNeeded: 100_000_000_000_000, name: \\\"Gidget's Computers & Hardware\\\", industry: \\\"Computer Hardware\\\", profitNeeded: 1_000_000_000_000 },\\r\\n        { order: 5, fundsNeeded: 200_000_000_000_000, name: \\\"Gidget's Metallurgy\\\", industry: \\\"Refinery\\\", profitNeeded: 2_000_000_000_000 }, \\r\\n        { order: 6, fundsNeeded: 300_000_000_000_000, name: \\\"Gidget's Land Destroyer\\\", industry: \\\"Mining\\\", profitNeeded: 3_000_000_000_000 },\\r\\n    ]\\r\\n\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n    for (const divisionGoal of divisionsGoal) {\\r\\n        if (corporation.divisions.length === divisionGoal.order && corporation.funds > divisionGoal.fundsNeeded && !corporation.divisions.includes(divisionGoal.name) && profit >= divisionGoal.profitNeeded) {\\r\\n            ns.corporation.expandIndustry(divisionGoal.industry, divisionGoal.name);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/expand.js\",\"server\":\"home\"}}],[\"scripts/corporations/bribe-factions.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let corporation = ns.corporation.getCorporation();\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    if(profit > 1_000_000_000_000){\\r\\n        const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n        const player = ns.getPlayer();\\r\\n\\r\\n        const mostRepExpensiveForEachFaction = [];\\r\\n\\r\\n        for (const faction of player.factions) {\\r\\n            const maximumAugRep = Math.max(...ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction)\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .filter(x => {\\r\\n                    const prereqs = ns.singularity.getAugmentationPrereq(x);\\r\\n                    return prereqs.every(y => ownedAugmentations.includes(y));\\r\\n                })\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n    \\r\\n            if (maximumAugRep > 0) {\\r\\n                mostRepExpensiveForEachFaction.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(mostRepExpensiveForEachFaction.length > 0){\\r\\n            for (const factionWithRep of mostRepExpensiveForEachFaction) {\\r\\n                \\r\\n                let currentFactionRep = ns.singularity.getFactionRep(factionWithRep.faction);\\r\\n                const repNeeded = factionWithRep.maximumAugRep - currentFactionRep;\\r\\n                \\r\\n                corporation = ns.corporation.getCorporation();\\r\\n                const capitalReserve = 400_000_000_000;\\r\\n                const liquidFunds = corporation.funds;\\r\\n                const investableAmount = liquidFunds - capitalReserve;\\r\\n\\r\\n                const amountToDonate = 1_000_000_000_000;\\r\\n                \\r\\n                let amountSpent = amountToDonate;\\r\\n                while(currentFactionRep < repNeeded && investableAmount > amountSpent){\\r\\n\\r\\n                    ns.corporation.bribe(factionWithRep.faction, amountToDonate)\\r\\n                    \\r\\n                    amountSpent += amountToDonate;\\r\\n                    currentFactionRep = ns.singularity.getFactionRep(factionWithRep.faction);           \\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"scripts/corporations/bribe-factions.js\",\"server\":\"home\"}}],[\"scripts/singularity/do-work-get-augs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const player = ns.getPlayer();\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const organizationsToJoinInTheOrderWeWantToComplete = organizations.toJoinInOrderInWhichIWantToComplete;\\r\\n    const ownedAugmentations = JSON.parse(ns.read(\\\"data/ownedAugs.txt\\\"));\\r\\n\\r\\n    const doNoWorkFor = organizations.doNoWorkFor;\\r\\n    const stopAtAugments = organizations.stopAtAugments;\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavor = [];\\r\\n\\r\\n    for (const faction of organizationsToJoinInTheOrderWeWantToComplete) {\\r\\n        if (player.factions.includes(faction) && !doNoWorkFor.includes(faction)) {\\r\\n\\r\\n            let augmentsForFaction = ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction);\\r\\n\\r\\n            let stopAtAugmentForFaction = stopAtAugments\\r\\n                .find(x => x.faction === faction);\\r\\n\\r\\n            if (stopAtAugmentForFaction) {\\r\\n                if (ownedAugmentations.includes(stopAtAugmentForFaction.augmentToStopAt) && stopAtAugmentForFaction.final) {\\r\\n                    augmentsForFaction = [];\\r\\n                } else if (ownedAugmentations.includes(stopAtAugmentForFaction.augmentToStopAt) && !stopAtAugmentForFaction.final) {\\r\\n                    augmentsForFaction = augmentsForFaction;\\r\\n                } else {\\r\\n                    augmentsForFaction = augmentsForFaction.filter(x => x === stopAtAugmentForFaction.augmentToStopAt);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            const maximumAugRep = Math.max(...augmentsForFaction\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n            const favor = ns.singularity.getFactionFavor(faction);\\r\\n\\r\\n            if (maximumAugRep > 0 && favor < 75) {\\r\\n                factionsWithAugsToBuyAndNotEnoughtFavor.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavorFile = 'data/factionsWithAugsToBuyAndNotEnoughtFavor.txt';\\r\\n    ns.rm(factionsWithAugsToBuyAndNotEnoughtFavorFile);\\r\\n    ns.write(factionsWithAugsToBuyAndNotEnoughtFavorFile, JSON.stringify(factionsWithAugsToBuyAndNotEnoughtFavor), \\\"W\\\");\\r\\n}\",\"filename\":\"scripts/singularity/do-work-get-augs.js\",\"server\":\"home\"}}],[\"scripts/singularity/do-work-get-augments.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n\\r\\n    const ownedAugmentations = JSON.parse(ns.read(\\\"data/ownedAugs.txt\\\"));\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const organizationsToJoinInTheOrderWeWantToComplete = organizations.toJoinInOrderInWhichIWantToComplete;\\r\\n    const doNoWorkFor = organizations.doNoWorkFor;\\r\\n    const stopAtAugments = organizations.stopAtAugments;\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavor = [];\\r\\n\\r\\n    for (const faction of organizationsToJoinInTheOrderWeWantToComplete) {\\r\\n        if (player.factions.includes(faction) && !doNoWorkFor.includes(faction)) {\\r\\n\\r\\n            let augmentsForFaction = ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction);\\r\\n\\r\\n            let stopAtAugmentForFaction = stopAtAugments\\r\\n                .find(x => x.faction === faction);\\r\\n\\r\\n            if (stopAtAugmentForFaction) {\\r\\n                if (ownedAugmentations.includes(stopAtAugmentForFaction.augmentToStopAt) && stopAtAugmentForFaction.final) {\\r\\n                    augmentsForFaction = [];\\r\\n                } else if (ownedAugmentations.includes(stopAtAugmentForFaction.augmentToStopAt) && !stopAtAugmentForFaction.final) {\\r\\n                    augmentsForFaction = augmentsForFaction;\\r\\n                } else {\\r\\n                    augmentsForFaction = augmentsForFaction.filter(x => x === stopAtAugmentForFaction.augmentToStopAt);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            const maximumAugRep = Math.max(...augmentsForFaction\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n            const favor = ns.singularity.getFactionFavor(faction);\\r\\n\\r\\n            if (maximumAugRep > 0 && favor < 75) {\\r\\n                factionsWithAugsToBuyAndNotEnoughtFavor.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavorFile = \\\"data/factionsWithAugsToBuyAndNotEnoughtFavor.txt\\\";\\r\\n    ns.rm(factionsWithAugsToBuyAndNotEnoughtFavorFile);\\r\\n    ns.write(factionsWithAugsToBuyAndNotEnoughtFavorFile, JSON.stringify(factionsWithAugsToBuyAndNotEnoughtFavor), \\\"W\\\");\\r\\n\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/do-work-get-augments.js\",\"server\":\"home\"}}],[\"scripts/singularity/apply-to-jobs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const companiesWeWantToBecomePartOf = organizations.companiesWeWantToBecomePartOf;\\r\\n\\r\\n    for (const companyName of companiesWeWantToBecomePartOf) {\\r\\n        ns.singularity.applyToCompany(companyName, \\\"software\\\");\\r\\n    }\\r\\n}\",\"filename\":\"scripts/singularity/apply-to-jobs.js\",\"server\":\"home\"}}],[\"scripts/stock/second-part-of-quotes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const latestStockQuotesFile = \\\"data/latestQuotes.txt\\\";\\r\\n    const stockRecords = JSON.parse(ns.read(latestStockQuotesFile));\\r\\n\\r\\n    for (const quote of stockRecords) {\\r\\n        quote.price = ns.stock.getPrice(quote.symbol);\\r\\n        quote.maxShares = ns.stock.getMaxShares(quote.symbol);\\r\\n\\r\\n        const position = ns.stock.getPosition(quote.symbol);\\r\\n        quote.investedShares = position[0];\\r\\n        quote.averagePrice = position[1];\\r\\n        quote.sharesShort = position[2];\\r\\n        quote.averageShortPrice = position[3];\\r\\n    }\\r\\n\\r\\n\\r\\n    ns.rm(latestStockQuotesFile);\\r\\n    ns.write(latestStockQuotesFile, JSON.stringify(stockRecords), \\\"W\\\")\\r\\n}\",\"filename\":\"scripts/stock/second-part-of-quotes.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"CLOUD-000\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"analytics/2023-07-07-11-15-Bachman&Associates-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-07-11-15-Bachman&Associates-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-07T15:01:39.037Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-07T15:01:39.037Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Bachman & Associates\\\",\\\"firstTime\\\":\\\"2023-07-07T15:01:39.037Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":333650.9080521832,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-07T15:01:39.037Z\\\"},\\\"moneySpent\\\":{\\\"augments\\\":0,\\\"homeCores\\\":23730468750000,\\\"homeRam\\\":31587660778186.953,\\\"fluxGovernors\\\":0,\\\"augment\\\":null},\\\"lastSaved\\\":\\\"2023-07-07T16:15:57.700Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":375000.40990502154,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-07T16:10:26.619Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$108,452,850,558,874.11\\\",\\\"moneyRightNow\\\":\\\"$103,101,209,025,358.40\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T16:10:26.620Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$108,452,850,558,874.11\\\",\\\"moneyRightNow\\\":\\\"$103,681,640,147,085.58\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T16:10:30.684Z\\\"},\\\"augsBought\\\":[\\\"SmartJaw\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"FocusWire\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"CashRoot Starter Kit\\\",\\\"Nanofiber Weave\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\"]}\"}}],[\"analytics/2023-07-07-14-03-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-07-14-03-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-07T16:19:40.262Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-07T16:19:40.262Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-07T16:19:40.262Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-07T16:19:40.262Z\\\"},\\\"augsBought\\\":[\\\"Neural Accelerator\\\"],\\\"moneySpent\\\":{\\\"augments\\\":0,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0,\\\"augment\\\":null},\\\"lastSaved\\\":\\\"2023-07-07T19:03:34.187Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":207528.18490936968,\\\"targetRepForGettingToFavor\\\":207510.3723,\\\"time\\\":\\\"2023-07-07T19:03:30.139Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$11,781,091,031,741.60\\\",\\\"moneyRightNow\\\":\\\"$1,303,091,345,518.27\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T19:03:30.139Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$11,781,091,031,741.60\\\",\\\"moneyRightNow\\\":\\\"$2,544,403,997,543.49\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T19:03:34.186Z\\\"}}\"}}],[\"analytics/2023-07-08-19-48-Daedalus-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-19-48-Daedalus-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-07T19:06:59.469Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-07T19:06:59.469Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-07T19:06:59.470Z\\\"},{\\\"factionToMax\\\":\\\"Daedalus\\\",\\\"firstTime\\\":\\\"2023-07-07T21:55:21.354Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-07T19:06:59.470Z\\\"},\\\"augsBought\\\":[\\\"PCMatrix\\\",\\\"Synfibril Muscle\\\"],\\\"moneySpent\\\":{\\\"augments\\\":4137500000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0},\\\"lastSaved\\\":\\\"2023-07-08T00:48:28.885Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":32865.1277346334,\\\"targetRepForGettingToFavor\\\":21865.9969,\\\"time\\\":\\\"2023-07-07T19:21:42.026Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$20,200,143,877,934.50\\\",\\\"moneyRightNow\\\":\\\"$3,911,461,428,002.28\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$225,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T20:39:02.138Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$20,200,143,877,934.50\\\",\\\"moneyRightNow\\\":\\\"$4,117,056,489,229.67\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$225,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T20:39:06.169Z\\\"},\\\"moneyLeft\\\":7852910581520.66}\"}}],[\"analytics/2023-07-08-22-54-NWO-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-22-54-NWO-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T01:27:34.503Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T01:27:34.503Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-08T01:27:34.503Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T01:27:34.503Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"BitRunners Neurolink\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Synthetic Heart\\\",\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"DermaForce Particle Barrier\\\",\\\"The Red Pill\\\"],\\\"moneySpent\\\":{\\\"augments\\\":501848779077.36707,\\\"homeCores\\\":0,\\\"homeRam\\\":99817008059070.77,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":75733371162620.36,\\\"lastSaved\\\":\\\"2023-07-08T03:54:59.353Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":462501.05086586776,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T03:54:55.304Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$526,824,656,393,874.44\\\",\\\"moneyRightNow\\\":\\\"$251,999,971,224,510.60\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$18,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T03:54:55.304Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$526,824,656,393,874.44\\\",\\\"moneyRightNow\\\":\\\"$253,602,470,575,079.72\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$18,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T03:54:59.351Z\\\"}}\"}}],[\"analytics/2023-07-08-00-56-OmniTekIncorporated-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-00-56-OmniTekIncorporated-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T04:26:57.384Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T04:26:57.384Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"OmniTek Incorporated\\\",\\\"firstTime\\\":\\\"2023-07-08T04:26:57.384Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":15.124617264295333,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T04:26:57.384Z\\\"},\\\"augsBought\\\":[\\\"Hydroflame Left Arm\\\",\\\"Xanipher\\\",\\\"PC Direct-Neural Interface\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"Combat Rib III\\\",\\\"Augmented Targeting III\\\",\\\"NutriGen Implant\\\"],\\\"moneySpent\\\":{\\\"augments\\\":2534418700549.75,\\\"homeCores\\\":177978515625000,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":280042565488.5333,\\\"lastSaved\\\":\\\"2023-07-08T05:56:46.954Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":462548.0785199993,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T05:56:42.882Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$505,066,407,135,123.06\\\",\\\"moneyRightNow\\\":\\\"$180,386,298,617,236.44\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$375,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T05:56:42.883Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$505,066,407,135,123.06\\\",\\\"moneyRightNow\\\":\\\"$181,269,916,019,448.78\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$375,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T05:56:46.945Z\\\"}}\"}}],[\"analytics/2023-07-08-02-29-BladeIndustries-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-02-29-BladeIndustries-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T06:21:45.808Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T06:21:45.808Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Blade Industries\\\",\\\"firstTime\\\":\\\"2023-07-08T06:21:45.808Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T06:21:45.809Z\\\"},\\\"augsBought\\\":[\\\"OmniTek InfoLoad\\\",\\\"HyperSight Corneal Implant\\\",\\\"INFRARET Enhancement\\\"],\\\"moneySpent\\\":{\\\"augments\\\":8208300000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":70843557655495.1,\\\"lastSaved\\\":\\\"2023-07-08T07:29:39.410Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":462652.03280345845,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T07:29:35.219Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$572,996,898,778,520.20\\\",\\\"moneyRightNow\\\":\\\"$140,624,600,817,489.31\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T07:29:35.219Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$572,996,898,778,520.20\\\",\\\"moneyRightNow\\\":\\\"$143,621,626,658,752.25\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T07:29:39.320Z\\\"}}\"}}],[\"contracts/2023-07-08T15:46:33.989Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-08T15:46:33.989Z.txt\",\"text\":\"[{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-301865-NiteSec.cct\\\",\\\"type\\\":\\\"Spiralize Matrix\\\",\\\"attemptsLeft\\\":9},{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-605082-ECorp.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-715836-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-574766-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-546533.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-207182.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-562846-Chongqing.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-147112-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10}]\"}}],[\"analytics/2023-07-08-10-55-CyberSec-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-10-55-CyberSec-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T07:45:28.397Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T07:45:28.397Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"ECorp\\\",\\\"firstTime\\\":\\\"2023-07-08T07:45:28.397Z\\\"},{\\\"factionToMax\\\":\\\"CyberSec\\\",\\\"firstTime\\\":\\\"2023-07-08T15:55:34.597Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1625000,\\\"currentFactionRep\\\":7.83489646900019,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T07:45:28.397Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Neurotrainer II\\\",\\\"BitWire\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neurotrainer I\\\"],\\\"moneySpent\\\":{\\\"augments\\\":2927417203.1,\\\"homeCores\\\":0,\\\"homeRam\\\":132545749.31540185,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":76065861.37635517,\\\"lastSaved\\\":\\\"2023-07-08T15:55:38.636Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":18750,\\\"currentFactionRep\\\":19144.520172309567,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-08T15:55:34.597Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$3,136,028,813.79\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,250,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T15:55:34.597Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$3,136,028,813.79\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,250,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T15:55:38.627Z\\\"}}\"}}],[\"contracts/failure/unitalife-contract-457057-BachmanAssociates.cct-AlgorithmicStockTraderIV.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/unitalife-contract-457057-BachmanAssociates.cct-AlgorithmicStockTraderIV.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-457057-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[2,[104,1,164,22,87,58,184,182,187,31,33,15,132,75,200,78,154]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [2, [104,67,1,164,22,87,58,118,184,182,187,31,33,15,132,75,200,78,154,61]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},\\\"wrongResult\\\":348}\"}}],[\"contracts/2023-07-08T16:02:50.327Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-08T16:02:50.327Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-287914-ECorp.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,3,2,4,0,0,3,2,4,3,2,1,4,3,3,1,2,1,5,6,2,4,2,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,2,4,0,0,3,2,4,3,2,1,4,3,3,1,2,1,5,6,2,4,2,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"max-hardware\\\",\\\"name\\\":\\\"contract-489132.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"5ddddddddM0C1ag3juL3juL3jQaVwdNEQdNGShqNEQdNGSrBfBf2rBfBr1OvIK6r1OvIa\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 5ddddddddM0C1ag3juL3juL3jQaVwdNEQdNGShqNEQdNGSrBfBf2rBfBr1OvIK6r1OvIa\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-522441-TianDiHui.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,7],\\\"description\\\":\\\"You are in a grid with 8 rows and 7 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 7]\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-895014-CyberSec.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[2,7,-9,5,4,-8,-10,-5,4,-6,-4,0,6,10,-3,6,2,-8,-1,6,-3,-10,-3,8,6,-2,-8,2,3,-4,0,0,9,-9,-8,5,4,4],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 2,7,-9,5,4,-8,-10,-5,4,-6,-4,0,6,10,-3,6,2,-8,-1,6,-3,-10,-3,8,6,-2,-8,2,3,-4,0,0,9,-9,-8,5,4,4\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-875528.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[11,9],\\\"description\\\":\\\"You are in a grid with 11 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [11, 9]\\\"},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-125441.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[147,[1,2,4,5,7,8,10,11,12]],\\\"description\\\":\\\"How many different distinct ways can the number 147 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,7,8,10,11,12]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-338676.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[149,[2,3,4,6,9,11,12,13,14]],\\\"description\\\":\\\"How many different distinct ways can the number 149 be written as a sum of integers contained in the set:\\\\n\\\\n [2,3,4,6,9,11,12,13,14]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-265891-TheBlackHand.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0],[1,0,0,0],[0,0,0,0],[1,0,1,0],[0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,\\\\n1,0,0,0,\\\\n0,0,0,0,\\\\n1,0,1,0,\\\\n0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-457057-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[2,[104,67,1,164,22,87,58,118,184,182,187,31,33,15,132,75,200,78,154,61]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [2, [104,67,1,164,22,87,58,118,184,182,187,31,33,15,132,75,200,78,154,61]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-98816-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[8,[[1,3],[3,5],[6,7],[4,5],[1,7],[4,7],[2,7],[2,5]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [8,[[1,3],[3,5],[6,7],[4,5],[1,7],[4,7],[2,7],[2,5]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 7. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-852569.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0],[1,0,0,0,0,0],[0,1,0,0,0,0],[0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,\\\\n1,0,0,0,0,0,\\\\n0,1,0,0,0,0,\\\\n0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-193066-Chongqing.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[3],[4,8],[1,6,7],[3,8,3,9],[1,3,6,1,2],[4,4,7,8,8,1],[1,4,3,6,1,4,6],[1,9,8,7,9,9,4,3],[3,2,1,2,1,8,4,2,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,8,3,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,3,6,1,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,4,7,8,8,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,4,3,6,1,4,6],\\\\n&nbsp;&nbsp;&nbsp;[1,9,8,7,9,9,4,3],\\\\n&nbsp;&nbsp;[3,2,1,2,1,8,4,2,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-774587-TianDiHui.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[8,0,1,5,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 8,0,1,5,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-321076.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[12,[[7,11],[1,8],[2,9],[2,8],[1,2],[0,4],[0,3],[2,3],[5,8],[3,5],[4,7],[1,6],[9,10],[4,10],[6,8],[3,10],[0,1],[7,8]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [12,[[7,11],[1,8],[2,9],[2,8],[1,2],[0,4],[0,3],[2,3],[5,8],[3,5],[4,7],[1,6],[9,10],[4,10],[6,8],[3,10],[0,1],[7,8]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 11. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-885023.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,1,0,1,0,1,1,1,0],[0,0,1,1,1,1,0,0,1],[0,1,0,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-450371-NWO.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"zzzzzzzzzzVVVVVVVVVff66666dddddd3Dxjjjjjjjjjjjll3nMIEooooooooooIrrQQ3333333333GGGGG220\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; zzzzzzzzzzVVVVVVVVVff66666dddddd3Dxjjjjjjjjjjjll3nMIEooooooooooIrrQQ3333333333GGGGG220\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-409303-CyberSec.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"koU6koU6koU8koU6ko66SU6ko66Sko66SkoSkoSkoSkXSkoSkoSkXSkoSXSkoSXSuKvMuK5CCCCCCZA\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; koU6koU6koU8koU6ko66SU6ko66Sko66SkoSkoSkoSkXSkoSkoSkXSkoSXSkoSXSuKvMuK5CCCCCCZA\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-741436-TianDiHui.cct\\\",\\\"type\\\":\\\"Spiralize Matrix\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[[41,7],[46,49],[18,23],[1,16],[46,1],[49,27]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a 2D matrix, return the elements of the matrix as an array in spiral order:\\\\n\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[41, 7]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[46,49]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[18,23]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 1,16]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[46, 1]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[49,27]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;]\\\\n\\\\nHere is an example of what spiral order should be:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1, 2, 3]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4, 5, 6]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7, 8, 9]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;]\\\\n\\\\n Answer: [1, 2, 3, 6, 9, 8 ,7, 4, 5]\\\\n\\\\n Note that the matrix will not always be square:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,&nbsp;&nbsp;2,&nbsp;&nbsp;3,&nbsp;&nbsp;4]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,&nbsp;&nbsp;6,&nbsp;&nbsp;7,&nbsp;&nbsp;8]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,&nbsp;10,&nbsp;11,&nbsp;12]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;]\\\\n\\\\n Answer: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-481575.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[10,10,2,4,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 10,10,2,4,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-926552.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"ppppppppD6ggxxxxxxxxWk88uVVqdddddddHHH811EEE00WWyy333NvvvvvvvWWWWWWWWWA88iii\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; ppppppppD6ggxxxxxxxxWk88uVVqdddddddHHH811EEE00WWyy333NvvvvvvvWWWWWWWWWA88iii\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-550315.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":59,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 59 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-895133.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,2,3,1,0,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,2,3,1,0,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-858682.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[197,[1,2,4,5,6,10,12,13]],\\\"description\\\":\\\"How many different distinct ways can the number 197 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,6,10,12,13]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-938387.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":8,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 8 be written as a sum of at least two positive integers?\\\"}]\"}}],[\"analytics/2023-07-09-05-42-NiteSec-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-09-05-42-NiteSec-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T16:31:11.237Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T16:31:11.237Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NiteSec\\\",\\\"firstTime\\\":\\\"2023-07-08T16:31:11.237Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-08T16:31:11.237Z\\\"},\\\"augsBought\\\":[\\\"Cranial Signal Processors - Gen III\\\",\\\"DataJack\\\",\\\"Neuregen Gene Modification\\\",\\\"Neural-Retention Enhancement\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Speech Processor Implant\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"Speech Enhancement\\\",\\\"Wired Reflexes\\\"],\\\"moneySpent\\\":{\\\"augments\\\":20381378226.862747,\\\"homeCores\\\":7500000000,\\\"homeRam\\\":14539978074.787807,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":12810898749.805788,\\\"lastSaved\\\":\\\"2023-07-09T10:42:24.377Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":112505.95319020352,\\\"targetRepForGettingToFavor\\\":274320.6381,\\\"time\\\":\\\"2023-07-09T04:32:21.711Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$25,622,206,359.90\\\",\\\"moneyRightNow\\\":\\\"$5,243,979,923.03\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$55,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-09T04:32:21.712Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$37,197,430,004.03\\\",\\\"moneyRightNow\\\":\\\"$55,232,255,051.46\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$55,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-09T10:42:24.369Z\\\"}}\"}}],[\"contracts/failure/blade-contract-989459-Sector12.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/blade-contract-989459-Sector12.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-989459-Sector12.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[179,52,138,20,181,47,87,38,133,124,174,123,169,54,138],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":256}\"}}],[\"contracts/2023-07-09T10:42:27.655Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-09T10:42:27.655Z.txt\",\"text\":\"[{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-306430.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,3,0,2,0,0,4,0,5,0,7,9,4,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,3,0,2,0,0,4,0,5,0,7,9,4,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-93220.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":596871453,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 596871453?\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-688654.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-610288.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 12. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-908915-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,0,1,0,0],[1,0,0,0,1],[0,0,0,1,1],[0,0,1,0,0],[0,1,0,1,0],[0,0,0,1,0],[1,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,1,0,0,\\\\n1,0,0,0,1,\\\\n0,0,0,1,1,\\\\n0,0,1,0,0,\\\\n0,1,0,1,0,\\\\n0,0,0,1,0,\\\\n1,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-225615.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-876968-BitRunners.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"251150140129\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 251150140129\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-793514-NWO.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-308718.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-726515.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-206621.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(((())(aa\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (((())(aa\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-517629.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,1,0,1],[0,0,0,0,1,1,1,1],[1,0,0,0,0,1,1,0],[0,0,0,0,0,0,0,0],[0,1,0,1,1,1,0,0],[0,1,1,0,1,0,0,0],[0,1,0,0,1,0,0,0],[1,0,0,1,0,0,1,0],[1,1,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,0,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-989459-Sector12.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-248819.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[7],[3,4],[1,2,9],[1,8,8,1],[4,7,4,6,4],[9,3,4,6,9,3]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,2,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,8,8,1],\\\\n&nbsp;&nbsp;&nbsp;[4,7,4,6,4],\\\\n&nbsp;&nbsp;[9,3,4,6,9,3]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-759274-BladeIndustries.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[197,[1,3,4,6,7,8,9,10,13,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 197 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,6,7,8,9,10,13,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-755946-Aevum.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-239892.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1110100011010100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1110100011010100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-650735.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-923111.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,0,1,1,1,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,0,1,0,0,\\\\n0,0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,1,0,1,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,\\\\n0,0,1,1,1,0,0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-140416.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-149794.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[17,[4,5,6,7,8,10,11,12,13,14]],\\\"description\\\":\\\"How many different distinct ways can the number 17 be written as a sum of integers contained in the set:\\\\n\\\\n [4,5,6,7,8,10,11,12,13,14]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-95536.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":21,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 21 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-389211.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-80334.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-204128.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[3,3,10,0,0,0,4,0,6,0,4,10],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,10,0,0,0,4,0,6,0,4,10\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-90930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[7,11],\\\"description\\\":\\\"You are in a grid with 7 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [7, 11]\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-693793.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-188719-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[84,[2,5,6,7,8,9,10,12,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 84 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,7,8,9,10,12,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-889582.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":42771,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 42771 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-18930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[5,14],\\\"description\\\":\\\"You are in a grid with 5 rows and 14 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [5, 14]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-53463.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"12010722233\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 12010722233\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"}]\"}}],[\"contracts/2023-07-10T11:30:35.720Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T11:30:35.720Z.txt\",\"text\":\"[{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-306430.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,3,0,2,0,0,4,0,5,0,7,9,4,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,3,0,2,0,0,4,0,5,0,7,9,4,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-93220.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":596871453,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 596871453?\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-688654.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-610288.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 12. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-908915-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,0,1,0,0],[1,0,0,0,1],[0,0,0,1,1],[0,0,1,0,0],[0,1,0,1,0],[0,0,0,1,0],[1,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,1,0,0,\\\\n1,0,0,0,1,\\\\n0,0,0,1,1,\\\\n0,0,1,0,0,\\\\n0,1,0,1,0,\\\\n0,0,0,1,0,\\\\n1,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-225615.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-876968-BitRunners.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"251150140129\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 251150140129\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-793514-NWO.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-308718.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-726515.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-206621.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(((())(aa\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (((())(aa\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-517629.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,1,0,1],[0,0,0,0,1,1,1,1],[1,0,0,0,0,1,1,0],[0,0,0,0,0,0,0,0],[0,1,0,1,1,1,0,0],[0,1,1,0,1,0,0,0],[0,1,0,0,1,0,0,0],[1,0,0,1,0,0,1,0],[1,1,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,0,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-989459-Sector12.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-248819.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[7],[3,4],[1,2,9],[1,8,8,1],[4,7,4,6,4],[9,3,4,6,9,3]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,2,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,8,8,1],\\\\n&nbsp;&nbsp;&nbsp;[4,7,4,6,4],\\\\n&nbsp;&nbsp;[9,3,4,6,9,3]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-759274-BladeIndustries.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[197,[1,3,4,6,7,8,9,10,13,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 197 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,6,7,8,9,10,13,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-755946-Aevum.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-239892.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1110100011010100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1110100011010100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-650735.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-923111.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,0,1,1,1,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,0,1,0,0,\\\\n0,0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,1,0,1,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,\\\\n0,0,1,1,1,0,0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-140416.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-149794.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[17,[4,5,6,7,8,10,11,12,13,14]],\\\"description\\\":\\\"How many different distinct ways can the number 17 be written as a sum of integers contained in the set:\\\\n\\\\n [4,5,6,7,8,10,11,12,13,14]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-95536.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":21,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 21 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-389211.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-80334.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-204128.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[3,3,10,0,0,0,4,0,6,0,4,10],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,10,0,0,0,4,0,6,0,4,10\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-90930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[7,11],\\\"description\\\":\\\"You are in a grid with 7 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [7, 11]\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-693793.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-188719-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[84,[2,5,6,7,8,9,10,12,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 84 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,7,8,9,10,12,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-889582.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":42771,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 42771 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-18930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[5,14],\\\"description\\\":\\\"You are in a grid with 5 rows and 14 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [5, 14]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-53463.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"12010722233\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 12010722233\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"}]\"}}],[\"contracts/2023-07-10T11:32:16.363Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T11:32:16.363Z.txt\",\"text\":\"[{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-977017-BitRunners.cct\\\",\\\"type\\\":\\\"Encryption II: Vigenère Cipher\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"FLASHMEDIAMOUSELOGINDEBUG\\\",\\\"MACINTOSH\\\"],\\\"description\\\":\\\"Vigenère cipher is a type of polyalphabetic substitution. It uses  the Vigenère square to encrypt and decrypt plaintext with a keyword.\\\\n\\\\n &nbsp;&nbsp;Vigenère square:\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----------------------------------------------------\\\\n &nbsp;&nbsp;&nbsp;&nbsp; A | A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \\\\n &nbsp;&nbsp;&nbsp;&nbsp; B | B C D E F G H I J K L M N O P Q R S T U V W X Y Z A \\\\n &nbsp;&nbsp;&nbsp;&nbsp; C | C D E F G H I J K L M N O P Q R S T U V W X Y Z A B\\\\n &nbsp;&nbsp;&nbsp;&nbsp; D | D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\\\\n &nbsp;&nbsp;&nbsp;&nbsp; E | E F G H I J K L M N O P Q R S T U V W X Y Z A B C D\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...\\\\n &nbsp;&nbsp;&nbsp;&nbsp; Y | Y Z A B C D E F G H I J K L M N O P Q R S T U V W X\\\\n &nbsp;&nbsp;&nbsp;&nbsp; Z | Z A B C D E F G H I J K L M N O P Q R S T U V W X Y\\\\n\\\\n For encryption each letter of the plaintext is paired with the corresponding letter of a repeating keyword. For example, the plaintext DASHBOARD is encrypted with the keyword LINUX:\\\\n &nbsp;&nbsp; Plaintext: DASHBOARD\\\\n &nbsp;&nbsp; Keyword:&nbsp;&nbsp;&nbsp;LINUXLINU\\\\n So, the first letter D is paired with the first letter of the key L. Therefore, row D and column L of the  Vigenère square are used to get the first cipher letter O. This must be repeated for the whole ciphertext.\\\\n\\\\n You are given an array with two elements:\\\\n &nbsp;&nbsp;[\\\\\\\"FLASHMEDIAMOUSELOGINDEBUG\\\\\\\", \\\\\\\"MACINTOSH\\\\\\\"]\\\\n The first element is the plaintext, the second element is the keyword.\\\\n\\\\n Return the ciphertext as uppercase string.\\\"}]\"}}],[\"contracts/2023-07-10T12:00:27.917Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T12:00:27.917Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-872924-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11000000100000010111100101110010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11000000100000010111100101110010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-358562-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[124,[2,5,6,9,10,11,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 124 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-373303.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,1],[6,1,7],[2,7,1,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[3,1],\\\\n&nbsp;&nbsp;&nbsp;[6,1,7],\\\\n&nbsp;&nbsp;[2,7,1,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-959133.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0],[0,0,1,0,0,1,0,0],[0,0,0,0,1,1,1,0],[0,0,1,0,1,0,1,0],[1,0,0,1,0,0,0,0],[0,0,0,1,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,1],[1,0,1,0,0,0,0,0],[1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-769367.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,8],\\\"description\\\":\\\"You are in a grid with 9 rows and 8 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [9, 8]\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-633776.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":915078480,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 915078480?\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-310837.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-806259.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010100000000000100000100000111101001011001001110100101110000010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010100000000000100000100000111101001011001001110100101110000010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-545916-BitRunners.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,1,1,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-691109-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"}]\"}}],[\"contracts/failure/fulcrumtech-contract-772507-NiteSec.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/fulcrumtech-contract-772507-NiteSec.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-772507-NiteSec.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[129,63,116,46,105,9,146,49,190,102,143,96,122,89,173,62,178],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 129,121,121,63,116,108,46,105,9,146,49,190,102,115,143,116,96,122,95,89,173,62,178\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":278}\"}}],[\"contracts/2023-07-10T22:53:06.799Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T22:53:06.799Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-872924-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11000000100000010111100101110010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11000000100000010111100101110010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-310546-NiteSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0110000000010000\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0110000000010000' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-358562-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[124,[2,5,6,9,10,11,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 124 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-373303.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,1],[6,1,7],[2,7,1,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[3,1],\\\\n&nbsp;&nbsp;&nbsp;[6,1,7],\\\\n&nbsp;&nbsp;[2,7,1,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-959133.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0],[0,0,1,0,0,1,0,0],[0,0,0,0,1,1,1,0],[0,0,1,0,1,0,1,0],[1,0,0,1,0,0,0,0],[0,0,0,1,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,1],[1,0,1,0,0,0,0,0],[1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-373990-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100000000000000100000000000000000111011110101110011000111010001\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100000000000000100000000000000000111011110101110011000111010001' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-772507-NiteSec.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[129,121,121,63,116,108,46,105,9,146,49,190,102,115,143,116,96,122,95,89,173,62,178],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 129,121,121,63,116,108,46,105,9,146,49,190,102,115,143,116,96,122,95,89,173,62,178\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-769367.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,8],\\\"description\\\":\\\"You are in a grid with 9 rows and 8 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [9, 8]\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-633776.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":915078480,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 915078480?\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-310837.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-719753-Sector12.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"2515122107\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 2515122107\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-806259.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010100000000000100000100000111101001011001001110100101110000010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010100000000000100000100000111101001011001001110100101110000010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-387600-BladeIndustries.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[51,[1,3,4,5,6,7,8,9]],\\\"description\\\":\\\"How many different distinct ways can the number 51 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,5,6,7,8,9]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-545916-BitRunners.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,1,1,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-691109-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"}]\"}}],[\"analytics/2023-07-11-02-27-Bachman&Associates-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-02-27-Bachman&Associates-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-09T10:51:29.538Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-09T10:51:29.538Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"The Black Hand\\\",\\\"firstTime\\\":\\\"2023-07-09T10:51:29.539Z\\\"},{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-10T11:30:36.002Z\\\"},{\\\"factionToMax\\\":\\\"Bachman & Associates\\\",\\\"firstTime\\\":\\\"2023-07-10T20:03:02.082Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":175000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-09T10:51:29.539Z\\\"},\\\"augsBought\\\":[\\\"SmartJaw\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"FocusWire\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"Neuroreceptor Management Implant\\\",\\\"Nanofiber Weave\\\"],\\\"moneySpent\\\":{\\\"augments\\\":22646728750,\\\"homeCores\\\":23730468750000,\\\"homeRam\\\":31587660778186.953,\\\"fluxGovernors\\\":57032927790864.44},\\\"moneyLeft\\\":12203039917625.707,\\\"lastSaved\\\":\\\"2023-07-11T07:27:30.663Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":175000,\\\"currentFactionRep\\\":162129.75593228705,\\\"targetRepForGettingToFavor\\\":162120.6286,\\\"time\\\":\\\"2023-07-09T18:56:46.726Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$56,926,395,005.04\\\",\\\"moneyRightNow\\\":\\\"$6,976,811,949.53\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-09T18:56:46.726Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$286,650,154,139.07\\\",\\\"moneyRightNow\\\":\\\"$300,169,387,386.01\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-10T08:59:23.830Z\\\"},\\\"amountOfRamIncrease\\\":null,\\\"amountOfCoresIncrease\\\":null}\"}}],[\"contracts/2023-07-11T07:27:33.925Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T07:27:33.925Z.txt\",\"text\":\"[{\\\"server\\\":\\\"crush-fitness\\\",\\\"name\\\":\\\"contract-703070-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a))()aa)))())))a))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a))()aa)))())))a))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-760582-NWO.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[19,26],[5,11],[23,33],[18,24],[16,24],[4,6],[19,23],[19,20],[15,22],[17,24],[23,26],[18,28],[11,14],[3,5],[14,17],[23,24]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[19,26],[5,11],[23,33],[18,24],[16,24],[4,6],[19,23],[19,20],[15,22],[17,24],[23,26],[18,28],[11,14],[3,5],[14,17],[23,24]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-660870-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,-5,1,9,9,0,5,-3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,-5,1,9,9,0,5,-3\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-657153-CyberSec.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")())()()(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )())()()(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"}]\"}}],[\"analytics/2023-07-11-07-24-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-07-24-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T10:42:16.637Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T10:42:16.638Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-11T10:42:16.638Z\\\"},{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-11T10:46:46.120Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-11T10:42:16.638Z\\\"},\\\"augsBought\\\":[\\\"Neural Accelerator\\\"],\\\"moneySpent\\\":{\\\"augments\\\":1750000000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":4554283656849.052,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":1755961103764.4956,\\\"lastSaved\\\":\\\"2023-07-11T12:24:47.532Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1000000,\\\"currentFactionRep\\\":78668.58510156769,\\\"targetRepForGettingToFavor\\\":78604.3905,\\\"time\\\":\\\"2023-07-11T11:26:08.909Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$74,796,262,687,719.81\\\",\\\"moneyRightNow\\\":\\\"$5,775,539,522,926.99\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T12:24:43.465Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$74,796,262,687,719.81\\\",\\\"moneyRightNow\\\":\\\"$6,311,994,760,613.55\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T12:24:47.531Z\\\"}}\"}}],[\"contracts/2023-07-11T12:24:50.788Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T12:24:50.788Z.txt\",\"text\":\"[{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-294274.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"27278324\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 27278324\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-34323.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,1,0,6,4,3,2,1,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,1,0,6,4,3,2,1,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-156862.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[3,3,8,10,9,5,2,0,9,0,5,10,10,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,8,10,9,5,2,0,9,0,5,10,10,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-330757.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010100001111101\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010100001111101' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"}]\"}}],[\"analytics/2023-07-11-12-29-Daedalus-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-12-29-Daedalus-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T12:24:51.094Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T12:24:51.094Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-11T12:24:51.094Z\\\"},{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-11T12:29:47.178Z\\\"},{\\\"factionToMax\\\":\\\"Daedalus\\\",\\\"firstTime\\\":\\\"2023-07-11T15:04:35.038Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T12:24:51.094Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"BitRunners Neurolink\\\",\\\"Synfibril Muscle\\\",\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"DermaForce Particle Barrier\\\"],\\\"moneySpent\\\":{\\\"augments\\\":27917957472.5,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":91422048319347.48,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":41005533440689.86,\\\"lastSaved\\\":\\\"2023-07-11T17:29:31.733Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1000000,\\\"currentFactionRep\\\":45618.14880600499,\\\"targetRepForGettingToFavor\\\":13348.8089,\\\"time\\\":\\\"2023-07-11T12:48:04.959Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$12,712,609,677,232.98\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T14:27:37.793Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$13,879,516,076,246.31\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T14:27:41.820Z\\\"}}\"}}],[\"contracts/2023-07-11T17:29:34.923Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T17:29:34.923Z.txt\",\"text\":\"[{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-978804-BladeIndustries.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":36677,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 36677 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"analytics/2023-07-11-13-33-NWO-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-13-33-NWO-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T17:29:35.209Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T17:29:35.209Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-11T17:29:35.209Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T17:29:35.209Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Synthetic Heart\\\",\\\"NutriGen Implant\\\",\\\"The Red Pill\\\"],\\\"moneySpent\\\":{\\\"augments\\\":102280939975,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":33234729138126.324,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":27397945380899.656,\\\"lastSaved\\\":\\\"2023-07-11T18:33:24.220Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":188501.26059445622,\\\"targetRepForGettingToFavor\\\":125.34820000000002,\\\"time\\\":\\\"2023-07-11T17:53:45.496Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$438,057,836,945,340.10\\\",\\\"moneyRightNow\\\":\\\"$58,736,735,518,839.44\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$102,280,939,975.00\\\",\\\"time\\\":\\\"2023-07-11T18:33:20.148Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$438,057,836,945,340.10\\\",\\\"moneyRightNow\\\":\\\"$60,734,955,459,000.98\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$102,280,939,975.00\\\",\\\"time\\\":\\\"2023-07-11T18:33:24.219Z\\\"}}\"}}],[\"analytics/2023-07-11-15-02-OmniTekIncorporated-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-15-02-OmniTekIncorporated-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T18:52:58.390Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T18:52:58.390Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"OmniTek Incorporated\\\",\\\"firstTime\\\":\\\"2023-07-11T18:52:58.390Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T18:52:58.391Z\\\"},\\\"augsBought\\\":[\\\"Hydroflame Left Arm\\\",\\\"Xanipher\\\",\\\"PC Direct-Neural Interface\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"Combat Rib III\\\",\\\"Augmented Targeting III\\\",\\\"INFRARET Enhancement\\\"],\\\"moneySpent\\\":{\\\"augments\\\":2536876847832,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":158008228467501.8,\\\"repPurchased\\\":1011071000000},\\\"moneyLeft\\\":3118364148690.9688,\\\"lastSaved\\\":\\\"2023-07-11T20:02:57.795Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":462635.4572515714,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-11T20:02:53.557Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$569,163,675,385,318.20\\\",\\\"moneyRightNow\\\":\\\"$163,160,637,846,968.20\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$2,536,876,847,832.00\\\",\\\"time\\\":\\\"2023-07-11T20:02:53.557Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$569,163,675,385,318.20\\\",\\\"moneyRightNow\\\":\\\"$164,674,540,464,024.78\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$2,536,876,847,832.00\\\",\\\"time\\\":\\\"2023-07-11T20:02:57.609Z\\\"}}\"}}],[\"contracts/2023-07-11T18:33:27.509Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T18:33:27.509Z.txt\",\"text\":\"[{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-315110.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"640193486\\\",65],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 640193486\\\\n\\\\n You are also given a target number of 65. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"640193486\\\\\\\", 65]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"}]\"}}],[\"analytics/2023-07-11-16-04-BladeIndustries-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-16-04-BladeIndustries-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T20:16:37.898Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T20:16:37.898Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Blade Industries\\\",\\\"firstTime\\\":\\\"2023-07-11T20:16:37.898Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T20:16:37.899Z\\\"},\\\"augsBought\\\":[\\\"OmniTek InfoLoad\\\",\\\"HyperSight Corneal Implant\\\"],\\\"moneySpent\\\":{\\\"augments\\\":8100000000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":85747668719937.4,\\\"repPurchased\\\":4751786000000},\\\"moneyLeft\\\":13842981133569.93,\\\"lastSaved\\\":\\\"2023-07-11T21:04:19.385Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":462578.8960435048,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-11T21:04:14.492Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$530,007,418,535,109.50\\\",\\\"moneyRightNow\\\":\\\"$102,174,957,837,653.20\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$8,100,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T21:04:14.492Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$530,007,418,535,109.50\\\",\\\"moneyRightNow\\\":\\\"$104,350,535,853,507.34\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$8,100,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T21:04:18.527Z\\\"}}\"}}],[\"contracts/2023-07-11T21:04:22.607Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T21:04:22.607Z.txt\",\"text\":\"[{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-461331.cct\\\",\\\"type\\\":\\\"Compression II: LZ Decompression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"5QFg8D941R640269V6p8o0r4N989p8ok5ZyGC04NHYU621B92079\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following LZ-encoded string:\\\\n &nbsp; &nbsp; 5QFg8D941R640269V6p8o0r4N989p8ok5ZyGC04NHYU621B92079\\\\n Decode it and output the original string.\\\\n\\\\n Example: decoding '5aaabb450723abb' chunk-by-chunk\\\\n &nbsp; &nbsp; 5aaabb &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;aaabb\\\\n &nbsp; &nbsp; 5aaabb45 &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;aaabbaaab\\\\n &nbsp; &nbsp; 5aaabb450 &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;aaabbaaab\\\\n &nbsp; &nbsp; 5aaabb45072 &nbsp; &nbsp; &nbsp;-> &nbsp;aaabbaaababababa\\\\n &nbsp; &nbsp; 5aaabb450723abb &nbsp;-> &nbsp;aaabbaaababababaabb\\\"}]\"}}],[\"contracts/2023-07-11T22:03:07.982Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T22:03:07.982Z.txt\",\"text\":\"[{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-708430-Sector12.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-444562.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,1,0],[0,1,1,0,0,0,0,1,0,1,0,1],[0,0,1,1,0,0,0,1,0,1,0,0],[0,0,1,0,1,0,0,0,0,1,0,0],[0,0,0,0,0,1,1,1,0,0,1,1],[0,0,1,1,1,1,1,1,0,0,0,0],[0,1,0,0,1,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0,0,1,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1,1,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,1,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"}]\"}}],[\"contracts/2023-07-12T00:04:23.916Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-12T00:04:23.916Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-729164-TianDiHui.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[2],[7,6],[8,8,1],[2,7,3,5],[6,7,2,3,2],[1,5,3,1,3,1],[7,3,6,1,2,5,5],[2,4,9,7,5,9,9,9],[6,4,4,5,1,7,5,7,3],[6,4,8,1,7,8,7,6,7,5],[2,8,2,9,2,4,6,1,4,7,5]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,8,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,3,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,7,2,3,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,5,3,1,3,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,3,6,1,2,5,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,4,9,7,5,9,9,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[6,4,4,5,1,7,5,7,3],\\\\n&nbsp;&nbsp;&nbsp;[6,4,8,1,7,8,7,6,7,5],\\\\n&nbsp;&nbsp;[2,8,2,9,2,4,6,1,4,7,5]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-336770-NWO.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[3],[6,7],[8,1,4],[6,9,3,1],[8,4,5,6,3]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[8,1,4],\\\\n&nbsp;&nbsp;&nbsp;[6,9,3,1],\\\\n&nbsp;&nbsp;[8,4,5,6,3]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-723216-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,5,1,4,7,8,3,0,9,0,3,9,1,10,0,1,5,0,0,0,8,6,10,3,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,5,1,4,7,8,3,0,9,0,3,9,1,10,0,1,5,0,0,0,8,6,10,3,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-176172-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"88599944\\\",-84],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 88599944\\\\n\\\\n You are also given a target number of -84. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"88599944\\\\\\\", -84]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"the-hub\\\",\\\"name\\\":\\\"contract-271928.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"884220150\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 884220150\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"the-hub\\\",\\\"name\\\":\\\"contract-512438-Sector12.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1100101010011111\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1100101010011111' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-627073-TheBlackHand.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"280206263\\\",22],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 280206263\\\\n\\\\n You are also given a target number of 22. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"280206263\\\\\\\", 22]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-804374.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[1,10,3,0,1,6,0,10,0,10,9,1,6,3,1,0,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,10,3,0,1,6,0,10,0,10,9,1,6,3,1,0,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-713319-ECorp.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0],[0,1],[1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,\\\\n0,1,\\\\n1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"omnia\\\",\\\"name\\\":\\\"contract-939274.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":75,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 75 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"omnia\\\",\\\"name\\\":\\\"contract-95916.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[6,0,9,7,8,8,4,3,4,7,0,6,10,3,6,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 6,0,9,7,8,8,4,3,4,7,0,6,10,3,6,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-512616.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((a(a))()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((a(a))()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-142431-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,10],[11,16],[21,23],[24,29]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,10],[11,16],[21,23],[24,29]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-8446-NiteSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100000010000100111011101110101110011110111001110111000110011101\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100000010000100111011101110101110011110111001110111000110011101' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"global-pharm\\\",\\\"name\\\":\\\"contract-202045.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[2,5],[6,13],[15,22],[7,9],[15,16],[25,29]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[2,5],[6,13],[15,22],[7,9],[15,16],[25,29]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-778253.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,3,0,3,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,0,3,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-708430-Sector12.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-868385-ECorp.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"4811648251\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 4811648251\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-941799-NiteSec.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,6,1,9,5,2,10,5,6,3,7,2,3,7,7,3,1,6,1,5,9,0,4,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,6,1,9,5,2,10,5,6,3,7,2,3,7,7,3,1,6,1,5,9,0,4,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-670821.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[9,8],[5,3,1],[6,3,2,3],[8,3,8,4,7],[6,8,6,3,5,9],[1,6,2,8,3,1,3],[1,5,8,2,6,5,8,4],[6,1,4,2,4,7,1,6,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,3,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,3,2,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,3,8,4,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,8,6,3,5,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,6,2,8,3,1,3],\\\\n&nbsp;&nbsp;&nbsp;[1,5,8,2,6,5,8,4],\\\\n&nbsp;&nbsp;[6,1,4,2,4,7,1,6,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-348053-NWO.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,1,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,0,1,0,\\\\n0,0,0,0,1,0,0,\\\\n0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-585222-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1100101000010101\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1100101000010101' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-101786-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1110000010001011011111101001000001101110001101010000110101011100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1110000010001011011111101001000001101110001101010000110101011100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-111223.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[0,2,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,2,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-288053-BladeIndustries.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,2,1,2,3,0,5,4,1,1,2,3,1,0,0,1,4,3,3,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,2,1,2,3,0,5,4,1,1,2,3,1,0,0,1,4,3,3,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-367042.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"()(a))(a)aaa)((a(((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ()(a))(a)aaa)((a(((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-867548-ECorp.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[12,[[6,10],[0,6],[8,11],[6,8],[0,2],[4,11],[0,1],[1,5],[7,11],[0,9],[8,9],[2,7],[6,7],[4,9],[3,9]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [12,[[6,10],[0,6],[8,11],[6,8],[0,2],[4,11],[0,1],[1,5],[7,11],[0,9],[8,9],[2,7],[6,7],[4,9],[3,9]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 11. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-275073.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":155085324086,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 155085324086 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-444562.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,1,0],[0,1,1,0,0,0,0,1,0,1,0,1],[0,0,1,1,0,0,0,1,0,1,0,0],[0,0,1,0,1,0,0,0,0,1,0,0],[0,0,0,0,0,1,1,1,0,0,1,1],[0,0,1,1,1,1,1,1,0,0,0,0],[0,1,0,0,1,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0,0,1,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1,1,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,1,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"}]\"}}],[\"contracts/2023-07-12T21:20:44.230Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-12T21:20:44.230Z.txt\",\"text\":\"[{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-750531.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"3358\\\",53],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 3358\\\\n\\\\n You are also given a target number of 53. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"3358\\\\\\\", 53]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-461484.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,0],[0,0,0,0,1,0,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,0],[0,0,0,0,1,0,1],[0,1,1,0,0,0,0],[0,0,1,0,0,0,0],[1,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-523040.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-2,-9,-2,-9,4,2,10,-5,-2,3,7,2,0,6,5,-7,8,-1,-8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -2,-9,-2,-9,4,2,10,-5,-2,3,7,2,0,6,5,-7,8,-1,-8\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-741432.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[111,[1,2,3,4,6,7,8,11,12,15]],\\\"description\\\":\\\"How many different distinct ways can the number 111 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,3,4,6,7,8,11,12,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-149047-NiteSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"01101011010010011111101000011100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '01101011010010011111101000011100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-55508.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":194455156,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 194455156?\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-713464-BladeIndustries.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,-6,9,7,-4,8,0,-10,-10,-1,5,1,4,-1,9,1,6,-4,-4,6,8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,-6,9,7,-4,8,0,-10,-10,-1,5,1,4,-1,9,1,6,-4,-4,6,8\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-9550.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[2],[4,4],[9,6,8],[6,1,4,4],[3,3,1,5,5],[9,5,1,2,3,2],[4,4,4,3,1,2,1],[2,6,2,2,1,4,3,9],[8,7,3,3,6,7,5,7,4],[5,1,4,5,2,1,5,4,3,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,6,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,1,4,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,3,1,5,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,5,1,2,3,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,4,4,3,1,2,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[2,6,2,2,1,4,3,9],\\\\n&nbsp;&nbsp;&nbsp;[8,7,3,3,6,7,5,7,4],\\\\n&nbsp;&nbsp;[5,1,4,5,2,1,5,4,3,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-367378.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[7,[[1,3],[5,6],[2,4],[4,5],[2,3],[0,6]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [7,[[1,3],[5,6],[2,4],[4,5],[2,3],[0,6]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 6. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"}]\"}}],[\"contracts/2023-07-13T01:43:07.575Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-13T01:43:07.575Z.txt\",\"text\":\"[{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-313731.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[13,15],[2,12],[5,9],[5,14],[3,12],[5,8],[10,15],[11,15],[23,27],[16,25],[10,18],[9,11],[19,21],[13,15],[11,20],[21,23],[15,20]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[13,15],[2,12],[5,9],[5,14],[3,12],[5,8],[10,15],[11,15],[23,27],[16,25],[10,18],[9,11],[19,21],[13,15],[11,20],[21,23],[15,20]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-579159-NWO.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a()a))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a()a))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-922188.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"10170141214\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 10170141214\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-202147-Aevum.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"91119053\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 91119053\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-33073.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":97,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 97 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-158550.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"724124252400\\\",-100],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 724124252400\\\\n\\\\n You are also given a target number of -100. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"724124252400\\\\\\\", -100]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-409368-ECorp.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0000000010011001\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0000000010011001' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-613982-Aevum.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,1,1],[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,0,0,0],[0,0,0,1,0,0,0,0,0,0],[1,1,0,0,0,0,1,0,1,0],[0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,\\\\n0,1,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,1,0,0,1,1,\\\\n0,0,0,0,0,0,0,0,0,1,\\\\n0,0,0,0,0,0,0,0,0,1,\\\\n0,0,0,0,0,0,1,0,0,0,\\\\n0,0,0,1,0,0,0,0,0,0,\\\\n1,1,0,0,0,0,1,0,1,0,\\\\n0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-193179.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"yYDDDDDDDDDDDDDDGGrrrrQQQQQQQQQQQQQqqGGHHpHHppkWWoooooooooooooaaaggggggFF\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; yYDDDDDDDDDDDDDDGGrrrrQQQQQQQQQQQQQqqGGHHpHHppkWWoooooooooooooaaaggggggFF\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-454624.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":81239038,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 81239038?\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-670555.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":486152158932188,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 486152158932188 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-915610-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[9],[3,7],[1,3,1],[1,2,5,6],[6,9,9,4,8],[7,4,1,8,6,5],[6,8,5,2,5,5,3],[6,6,2,6,3,9,4,9],[6,3,4,8,5,5,4,6,7],[6,3,5,1,4,9,1,4,6,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,3,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,2,5,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,9,9,4,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,4,1,8,6,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,8,5,2,5,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[6,6,2,6,3,9,4,9],\\\\n&nbsp;&nbsp;&nbsp;[6,3,4,8,5,5,4,6,7],\\\\n&nbsp;&nbsp;[6,3,5,1,4,9,1,4,6,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"}]\"}}],[\"contracts/2023-07-13T11:39:25.939Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-13T11:39:25.939Z.txt\",\"text\":\"[]\"}}],[\"contracts/2023-07-13T12:06:58.738Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-13T12:06:58.738Z.txt\",\"text\":\"[{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-782097.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[7,[[0,5],[3,4],[2,4],[1,6],[3,5],[4,6],[1,4],[0,1]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [7,[[0,5],[3,4],[2,4],[1,6],[3,5],[4,6],[1,4],[0,1]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 6. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-773336.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,1,1,0],[0,0,0,0,1,0,1,1],[1,0,0,0,1,0,0,0],[0,0,0,1,0,0,1,0],[0,0,0,0,0,1,0,1],[0,0,0,0,0,1,1,0],[0,1,1,0,0,0,0,1],[0,0,0,0,0,1,0,0],[1,0,0,0,0,0,0,0],[1,0,1,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-432225-CyberSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":23,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 23 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-410663.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[3],[1,9],[5,4,4],[9,7,8,5],[2,2,3,8,2],[9,8,4,6,5,8],[8,1,1,7,6,5,3],[1,5,1,2,7,7,8,4],[6,2,3,2,9,9,1,5,3],[9,6,3,3,4,2,7,9,7,6],[4,2,2,3,1,5,9,6,3,4,5],[6,3,8,1,9,7,7,9,1,6,8,5]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,7,8,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,2,3,8,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,8,4,6,5,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,1,1,7,6,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,5,1,2,7,7,8,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,2,3,2,9,9,1,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[9,6,3,3,4,2,7,9,7,6],\\\\n&nbsp;&nbsp;&nbsp;[4,2,2,3,1,5,9,6,3,4,5],\\\\n&nbsp;&nbsp;[6,3,8,1,9,7,7,9,1,6,8,5]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"netlink\\\",\\\"name\\\":\\\"contract-795996-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":73,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 73 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-391770-TheBlackHand.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,0,1,0],[0,0,1,0,1,0,1,0,0],[0,0,0,1,0,0,1,0,0],[0,0,0,1,1,1,0,1,1],[0,0,1,0,1,1,0,1,0],[0,1,1,0,1,0,0,0,0],[1,1,0,1,0,1,1,0,1],[0,1,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,1,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,0,1,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-440346.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[15,22],[5,12],[13,21]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[15,22],[5,12],[13,21]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"nwo\\\",\\\"name\\\":\\\"contract-593748-NiteSec.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"666RB6666R1lbVoooooooooFiqXWXi68O5iANQyv4BRCCD4vXClee3MRmMoe3MRmRmR\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 666RB6666R1lbVoooooooooFiqXWXi68O5iANQyv4BRCCD4vXClee3MRmMoe3MRmRmR\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-178512-ECorp.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[0,1,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,0,1,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,1,0,\\\\n0,1,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-195663.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[1,0,0,4,2,7,6,3,5,5,10,10,3,0,9,7,10,2,0,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,0,0,4,2,7,6,3,5,5,10,10,3,0,9,7,10,2,0,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-233152.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[13,3],\\\"description\\\":\\\"You are in a grid with 13 rows and 3 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [13, 3]\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-510847-BladeIndustries.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"()((a((a(a)())(a()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ()((a((a(a)())(a()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-632773.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[23,29],[14,20],[24,30],[4,11],[4,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[23,29],[14,20],[24,30],[4,11],[4,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"}]\"}}],[\"contracts/2023-07-13T23:55:09.875Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-13T23:55:09.875Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-968783-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[72,[2,7,9,10,11,12,13,14,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 72 be written as a sum of integers contained in the set:\\\\n\\\\n [2,7,9,10,11,12,13,14,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-401139.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"MNFQerwPERzhONkIylMk83cIylMk83caaaauGSlk8QkMi6FmnFdgji6Fm73\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; MNFQerwPERzhONkIylMk83cIylMk83caaaauGSlk8QkMi6FmnFdgji6Fm73\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-151497-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11000000000000001010100100001111\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11000000000000001010100100001111' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-21990.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":41,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 41 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-377673.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[8,1,6,3,6,0,0,10,8,0,2,6,1,1,2,4,0,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 8,1,6,3,6,0,0,10,8,0,2,6,1,1,2,4,0,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-242228-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":33283024047570444,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 33283024047570444 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"contracts/2023-07-14T11:18:31.118Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-14T11:18:31.118Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-968783-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[72,[2,7,9,10,11,12,13,14,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 72 be written as a sum of integers contained in the set:\\\\n\\\\n [2,7,9,10,11,12,13,14,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-401139.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"MNFQerwPERzhONkIylMk83cIylMk83caaaauGSlk8QkMi6FmnFdgji6Fm73\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; MNFQerwPERzhONkIylMk83cIylMk83caaaauGSlk8QkMi6FmnFdgji6Fm73\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-307979.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-6,-3,-2,0,-8,-6,-9,-8,2,2,-4,-2,-5,-9,-1,-1,1,1,9,-10,-10,-4,-5,-9,9,2,-10,-3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -6,-3,-2,0,-8,-6,-9,-8,2,2,-4,-2,-5,-9,-1,-1,1,1,9,-10,-10,-4,-5,-9,9,2,-10,-3\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-170537-ECorp.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[0,4,8,0,1,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,4,8,0,1,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-395864.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"A55jrr6vvJJm00000055BBTTT66UDnnneeeeeeGGGGGGGGGimmVGGJJJJJJJJJJJJJhmYYYYYYYYYYll66FFeennk\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; A55jrr6vvJJm00000055BBTTT66UDnnneeeeeeGGGGGGGGGimmVGGJJJJJJJJJJJJJhmYYYYYYYYYYll66FFeennk\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-151497-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11000000000000001010100100001111\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11000000000000001010100100001111' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-424542-NWO.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[16,[1,3,4,5,7,9,10,11]],\\\"description\\\":\\\"How many different distinct ways can the number 16 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,5,7,9,10,11]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-21990.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":41,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 41 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-855488.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,6,2,0,2,1,2,3,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,6,2,0,2,1,2,3,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-377673.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[8,1,6,3,6,0,0,10,8,0,2,6,1,1,2,4,0,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 8,1,6,3,6,0,0,10,8,0,2,6,1,1,2,4,0,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-216499.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[5,9],\\\"description\\\":\\\"You are in a grid with 5 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [5, 9]\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-242228-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":33283024047570444,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 33283024047570444 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"contracts/2023-07-14T11:23:56.906Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-14T11:23:56.906Z.txt\",\"text\":\"[{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-243939.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[11,11],\\\"description\\\":\\\"You are in a grid with 11 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [11, 11]\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-912092.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,15],[14,15],[1,2],[7,15],[25,30],[7,14],[13,21],[18,22],[14,16],[23,27],[12,14],[21,24],[15,17],[4,13],[8,17],[16,17],[17,24],[2,10],[19,28]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,15],[14,15],[1,2],[7,15],[25,30],[7,14],[13,21],[18,22],[14,16],[23,27],[12,14],[21,24],[15,17],[4,13],[8,17],[16,17],[17,24],[2,10],[19,28]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"}]\"}}],[\"contracts/2023-07-14T12:44:38.173Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-14T12:44:38.173Z.txt\",\"text\":\"[{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-48939-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[26,[1,3,5,8,10,11,15,16,17]],\\\"description\\\":\\\"How many different distinct ways can the number 26 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,5,8,10,11,15,16,17]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-470979.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"2209419733\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 2209419733\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-234597.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[5,8],[1,1,1],[2,8,3,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[5,8],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1],\\\\n&nbsp;&nbsp;[2,8,3,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-448836-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"66hhhhhhhhhhhhhh22YttttttttttttDD666666666666CCKTxxxxxx2\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 66hhhhhhhhhhhhhh22YttttttttttttDD666666666666CCKTxxxxxx2\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-558999-NWO.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1110100010011110000011110010100011001110000000011010011111100101\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1110100010011110000011110010100011001110000000011010011111100101' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-190826.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(())a)())a)((a)()()(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (())a)())a)((a)()()(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-480856-CyberSec.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,5,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,5,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"}]\"}}],[\"analytics/2023-07-14-13-42-Chongqing-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-14-13-42-Chongqing-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T21:37:36.719Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T21:37:36.719Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"CyberSec\\\",\\\"firstTime\\\":\\\"2023-07-11T21:37:36.719Z\\\"},{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-14T02:08:45.834Z\\\"},{\\\"factionToMax\\\":\\\"Chongqing\\\",\\\"firstTime\\\":\\\"2023-07-14T12:31:21.811Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":18750,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T21:37:36.720Z\\\"},\\\"augsBought\\\":[\\\"Neurotrainer I\\\"],\\\"moneySpent\\\":{\\\"augments\\\":4000000,\\\"homeCores\\\":0,\\\"homeRam\\\":100683790.34535334,\\\"fluxGovernors\\\":124980102.68536004,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":21525525.99539931,\\\"lastSaved\\\":\\\"2023-07-14T18:42:23.498Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1250000,\\\"currentFactionRep\\\":1318070.89911256,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-14T11:18:31.206Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$3,672.06\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$2,509,649,050,250.00\\\",\\\"time\\\":\\\"2023-07-14T11:18:31.207Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$251,189,419.03\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$4,000,000.00\\\",\\\"time\\\":\\\"2023-07-14T18:42:23.494Z\\\"},\\\"amountOfRamIncrease\\\":null,\\\"amountOfCoresIncrease\\\":null}\"}}],[\"contracts/failure/defcomm-contract-100448.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/defcomm-contract-100448.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-100448.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[152,38,124,58,150,20,97],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 152,38,124,112,58,135,150,20,97,44,5\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":178}\"}}],[\"contracts/2023-07-14T17:49:59.207Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-14T17:49:59.207Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-950777-Chongqing.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[14,11],\\\"description\\\":\\\"You are in a grid with 14 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [14, 11]\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-92525-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"5149180136\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 5149180136\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-536552-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Xcxhhhhhhhhhh6uh6uhT6HV8V8V8V8V8tIV8V8tI8t5idt00l0H00lA0l0H00lARlARlARlA\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Xcxhhhhhhhhhh6uh6uhT6HV8V8V8V8V8tIV8V8tI8t5idt00l0H00lA0l0H00lARlARlARlA\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-58197.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[14,20],[13,18],[19,21],[17,25],[21,26],[5,11],[21,27],[15,25],[13,14],[2,12],[16,20]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[14,20],[13,18],[19,21],[17,25],[21,26],[5,11],[21,27],[15,25],[13,14],[2,12],[16,20]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-324718-Chongqing.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,7,4,1,3,3,2,1,4,2,1,4,2,0,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,7,4,1,3,3,2,1,4,2,1,4,2,0,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-512878-TheBlackHand.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[24,26],[18,21],[2,10],[7,11],[9,13],[16,23]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[24,26],[18,21],[2,10],[7,11],[9,13],[16,23]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-349696-BladeIndustries.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[2,9,4,0,1,4,0,2,0,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,9,4,0,1,4,0,2,0,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-43533-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"()(a))((()(()))))))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ()(a))((()(()))))))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-177119-Chongqing.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,3,2,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,2,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-72852.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":95,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 95 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-743761-TheBlackHand.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":9273759208585,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 9273759208585 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-210549-TianDiHui.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((()a((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((()a((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-16187.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":61,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 61 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-53046.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"oMMMhd3xnWCxnWCxnWWCxnWzc13m3m3m0Q7lb7m3Uh3Uh3eeeeeeeeemcKeeemcKL6KeeXMe7e6IEqemumum\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; oMMMhd3xnWCxnWCxnWWCxnWzc13m3m3m0Q7lb7m3Uh3Uh3eeeeeeeeemcKeeemcKL6KeeXMe7e6IEqemumum\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-712707.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[11,3],\\\"description\\\":\\\"You are in a grid with 11 rows and 3 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [11, 3]\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-684196-TianDiHui.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[8],[1,5],[5,6,3],[5,7,4,9],[4,8,7,6,9],[8,4,1,9,9,6],[2,7,2,8,1,1,1],[7,8,8,5,5,1,8,7],[4,2,4,2,1,2,9,2,3],[1,4,7,4,4,4,4,4,1,9]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,6,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,4,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,8,7,6,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,4,1,9,9,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,2,8,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,8,8,5,5,1,8,7],\\\\n&nbsp;&nbsp;&nbsp;[4,2,4,2,1,2,9,2,3],\\\\n&nbsp;&nbsp;[1,4,7,4,4,4,4,4,1,9]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-449584.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,9,8,9,0,6,2,1,10,0,6,6,5,9,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,9,8,9,0,6,2,1,10,0,6,6,5,9,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-100448.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[152,38,124,112,58,135,150,20,97,44,5],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 152,38,124,112,58,135,150,20,97,44,5\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-438064.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11011101010011011011100011010111\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11011101010011011011100011010111' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-511574-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11101010000000000000100100011110\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11101010000000000000100100011110' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-819392.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"BaJqIBE7eIBE7eIBE70170QgZ8QG0UH1VE1uX0UH1VE1uXFKHB67cR67cR67cR6cwwwwwR6\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; BaJqIBE7eIBE7eIBE70170QgZ8QG0UH1VE1uX0UH1VE1uXFKHB67cR67cR67cR6cwwwwwR6\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-204399.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":17,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 17 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-748358-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":359879067,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 359879067?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-482287.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,-7,-4,10,-8,6,-9,-2,0,6],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,-7,-4,10,-8,6,-9,-2,0,6\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-268040.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,1,1,2,2,5,1,0,4,1,1,2,4,2,2,4,4,0,6,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,1,1,2,2,5,1,0,4,1,1,2,4,2,2,4,4,0,6,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-386141-CyberSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":1726876013836,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 1726876013836 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-558415-NiteSec.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"6RjtC6RjtC6RjtZC6OpbtZC6OpNbtZC6OpNeqBqpCpONeqBqpDVjpD2vwWh7FwWh7FwWh7h7FwWh7h\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 6RjtC6RjtC6RjtZC6OpbtZC6OpNbtZC6OpNeqBqpCpONeqBqpDVjpD2vwWh7FwWh7FwWh7h7FwWh7h\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"}]\"}}],[\"contracts/2023-07-15T15:33:56.046Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-15T15:33:56.046Z.txt\",\"text\":\"[{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-342582.cct\\\",\\\"type\\\":\\\"Encryption I: Caesar Cipher\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"CLOUD MEDIA MACRO LOGIN LINUX\\\",14],\\\"description\\\":\\\"Caesar cipher is one of the simplest encryption technique. It is a type of substitution cipher in which each letter in the plaintext  is replaced by a letter some fixed number of positions down the alphabet. For example, with a left shift of 3, D would be replaced by A,  E would become B, and A would become X (because of rotation).\\\\n\\\\n You are given an array with two elements:\\\\n &nbsp;&nbsp;[\\\\\\\"CLOUD MEDIA MACRO LOGIN LINUX\\\\\\\", 14]\\\\n The first element is the plaintext, the second element is the left shift value.\\\\n\\\\n Return the ciphertext as uppercase string. Spaces remains the same.\\\"}]\"}}],[\"contracts/2023-07-15T15:58:32.433Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-15T15:58:32.433Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-913737-TianDiHui.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"166255161155\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 166255161155\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-350855-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-4,1,-9,-10,-8,1,-10,7,-8,5,10,7,-3,5,1,-10,9,-9,-5,2,0,-1,5,5,0,-5,-6,10],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -4,1,-9,-10,-8,1,-10,7,-8,5,10,7,-3,5,1,-10,9,-9,-5,2,0,-1,5,5,0,-5,-6,10\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-293360.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[9,6],[7,5,3],[5,3,4,2],[8,4,8,9,1],[9,6,1,5,7,3],[4,2,4,1,4,1,3],[8,1,3,4,8,8,2,7],[4,7,2,2,8,8,7,4,4],[1,4,3,6,6,1,4,1,5,8],[3,9,7,6,9,1,5,3,8,5,7],[6,6,6,9,4,6,5,6,1,2,5,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,3,4,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,4,8,9,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,6,1,5,7,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,2,4,1,4,1,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,1,3,4,8,8,2,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,7,2,2,8,8,7,4,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,4,3,6,6,1,4,1,5,8],\\\\n&nbsp;&nbsp;&nbsp;[3,9,7,6,9,1,5,3,8,5,7],\\\\n&nbsp;&nbsp;[6,6,6,9,4,6,5,6,1,2,5,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-781131.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0],[0,1,0,0,0,1,1,1,0,1],[0,0,0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,1],[0,1,0,0,1,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,1,0,0,0,0,0,\\\\n0,1,0,0,0,1,1,1,0,1,\\\\n0,0,0,0,0,0,1,1,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,1,1,\\\\n0,1,0,0,1,0,0,0,0,0,\\\\n0,0,0,1,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-915824.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[10,16],[1,9],[7,13],[5,12],[7,10],[1,7],[11,14],[23,31],[16,24]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[10,16],[1,9],[7,13],[5,12],[7,10],[1,7],[11,14],[23,31],[16,24]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-925739.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[3,10],[6,16],[21,26],[23,25],[12,17],[9,14],[3,8],[18,22],[13,22],[20,22],[12,19],[12,21]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[3,10],[6,16],[21,26],[23,25],[12,17],[9,14],[3,8],[18,22],[13,22],[20,22],[12,19],[12,21]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"}]\"}}],[\"contracts/failure/catalyst-contract-299807-TianDiHui.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/catalyst-contract-299807-TianDiHui.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-299807-TianDiHui.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[27,101,17,115,9,135,64,195,189,196],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 27,70,101,47,17,115,9,135,64,195,189,196,174,11,8\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":258}\"}}],[\"contracts/failure/syscore-contract-62815-OmniTekIncorporated.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/syscore-contract-62815-OmniTekIncorporated.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-62815-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[17,186,44,129,73,176,46,194,37,196,97,174,102,159,143,193,92,172,75,165,10,108],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 17,186,55,44,51,129,73,176,46,194,91,37,48,157,196,133,113,97,150,174,163,102,159,143,172,193,92,124,170,172,165,149,75,99,165,10,108,49\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":328}\"}}],[\"contracts/2023-07-16T00:10:02.517Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-16T00:10:02.517Z.txt\",\"text\":\"[{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-497299-Sector12.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"aA64ZN0A64az0A64az0A62w0A62w0eYC62wYCNMY3666666sX0d5tttttttKdputtYgaputtYgaoSuty\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; aA64ZN0A64az0A64az0A62w0A62w0eYC62wYCNMY3666666sX0d5tttttttKdputtYgaputtYgaoSuty\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-62815-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[17,186,55,44,51,129,73,176,46,194,91,37,48,157,196,133,113,97,150,174,163,102,159,143,172,193,92,124,170,172,165,149,75,99,165,10,108,49],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 17,186,55,44,51,129,73,176,46,194,91,37,48,157,196,133,113,97,150,174,163,102,159,143,172,193,92,124,170,172,165,149,75,99,165,10,108,49\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-744706.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[168,[1,3,4,6,7,8,9,10,13,14,15,19]],\\\"description\\\":\\\"How many different distinct ways can the number 168 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,6,7,8,9,10,13,14,15,19]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-343293-Aevum.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,0,8,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,0,8,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-928249-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"21246484\\\",37],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 21246484\\\\n\\\\n You are also given a target number of 37. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"21246484\\\\\\\", 37]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-882299.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[8],[1,4],[4,4,9]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[8],\\\\n&nbsp;&nbsp;&nbsp;[1,4],\\\\n&nbsp;&nbsp;[4,4,9]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-751483-NWO.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"LgzLzLzLzLzLBOyzLB8OvisLB8O8O8O8O8Oq7dC48jNxpxpxpxpxpxpxxpxpXxpXxpXxpXHZXxpXxpX\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; LgzLzLzLzLzLBOyzLB8OvisLB8O8O8O8O8Oq7dC48jNxpxpxpxpxpxpxxpxpXxpXxpXxpXHZXxpXxpX\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-327756.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"ggggggggjjjjjjjjjCCCCCCCCCC7IIiiVVVVVttttttttttttuXXjjjjddyyyyyyyyQQQQ\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; ggggggggjjjjjjjjjCCCCCCCCCC7IIiiVVVVVttttttttttttuXXjjjjddyyyyyyyyQQQQ\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-297619.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[33,[1,3,4,6,7,8,12,14,15,19]],\\\"description\\\":\\\"How many different distinct ways can the number 33 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,6,7,8,12,14,15,19]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-500495.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,7],[5,7,4],[2,2,8,1],[5,2,5,1,1],[5,4,1,2,2,6],[1,4,5,7,6,1,6],[7,8,3,7,9,3,6,7],[7,2,6,4,4,1,4,6,7],[4,1,8,4,4,9,1,6,4,2],[9,5,2,3,8,7,4,4,4,2,9],[1,1,1,8,8,7,6,1,2,5,3,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,2,8,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,2,5,1,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,1,2,2,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,4,5,7,6,1,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,8,3,7,9,3,6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,2,6,4,4,1,4,6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,1,8,4,4,9,1,6,4,2],\\\\n&nbsp;&nbsp;&nbsp;[9,5,2,3,8,7,4,4,4,2,9],\\\\n&nbsp;&nbsp;[1,1,1,8,8,7,6,1,2,5,3,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-563784-BitRunners.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a))())a((a)a()a(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a))())a((a)a()a(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-975255.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"6683199557\\\",38],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 6683199557\\\\n\\\\n You are also given a target number of 38. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"6683199557\\\\\\\", 38]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-445487-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"ZZZZZmllllll88jjJwggggggdddMxc0111111111AAAA22222222227SSvp66qqqqqggnnDiiVVI\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; ZZZZZmllllll88jjJwggggggdddMxc0111111111AAAA22222222227SSvp66qqqqqggnnDiiVVI\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-96034.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":45,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 45 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-979969-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"39738\\\",64],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 39738\\\\n\\\\n You are also given a target number of 64. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"39738\\\\\\\", 64]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-299807-TianDiHui.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[27,70,101,47,17,115,9,135,64,195,189,196,174,11,8],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 27,70,101,47,17,115,9,135,64,195,189,196,174,11,8\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"}]\"}}],[\"analytics/2023-07-16-07-01-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-16-07-01-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-14T18:42:29.092Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-14T18:42:29.092Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Chongqing\\\",\\\"firstTime\\\":\\\"2023-07-14T18:42:29.093Z\\\"},{\\\"factionToMax\\\":\\\"NiteSec\\\",\\\"firstTime\\\":\\\"2023-07-14T19:25:47.953Z\\\"},{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-16T00:08:31.564Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":37500,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-14T18:42:29.093Z\\\"},\\\"augsBought\\\":[\\\"BitRunners Neurolink\\\",\\\"Artificial Bio-neural Network Implant\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"PCMatrix\\\",\\\"Neural Accelerator\\\",\\\"Neuroreceptor Management Implant\\\",\\\"CashRoot Starter Kit\\\",\\\"Nanofiber Weave\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Nuoptimal Nootropic Injector Implant\\\"],\\\"moneySpent\\\":{\\\"augments\\\":216402166430.733,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":695822032676.5732,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":124475476249.71924,\\\"lastSaved\\\":\\\"2023-07-16T12:01:43.917Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":112500.98808245687,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-15T07:50:20.980Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$4,889,904,294.25\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$21,378,646,141.86\\\",\\\"time\\\":\\\"2023-07-15T07:50:20.981Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$1,036,699,675,357.03\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$216,402,166,430.73\\\",\\\"time\\\":\\\"2023-07-16T12:01:43.912Z\\\"}}\"}}],[\"contracts/2023-07-16T12:01:46.791Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-16T12:01:46.791Z.txt\",\"text\":\"[{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-247364-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[144,20,5,28,21,119,82,182,65,121,95,5,138,140,90,143,191,73,181,131,13,136,2,145,160,65,99,117,98,187,164,135,2,98,188,25,15,142,107,84,119,127],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 144,20,5,28,21,119,82,182,65,121,95,5,138,140,90,143,191,73,181,131,13,136,2,145,160,65,99,117,98,187,164,135,2,98,188,25,15,142,107,84,119,127\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"}]\"}}],[\"contracts/2023-07-16T13:38:32.194Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-16T13:38:32.194Z.txt\",\"text\":\"[{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-47298.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,-8,-10,2,-7,6,-10,3,4,5,-1,2,-9,6,-7,-6,-6,8,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 4,-8,-10,2,-7,6,-10,3,4,5,-1,2,-9,6,-7,-6,-6,8,-7\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-118250.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010000000000000000000000001001111100111011001111010010000101011\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010000000000000000000000001001111100111011001111010010000101011' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-837393-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[5,0,0,5,0,6,4,0,2,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 5,0,0,5,0,6,4,0,2,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-313690.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[1,3,3,3,5,5,2,3,2,1,0,1,4,1,5,0,3,1,1,2,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,3,3,3,5,5,2,3,2,1,0,1,4,1,5,0,3,1,1,2,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-676548-CyberSec.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")(())()aa))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )(())()aa))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-116290.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,4,6,-6,0,6,-8,-7,-1,7,8,-4,-9,9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,4,6,-6,0,6,-8,-7,-1,7,8,-4,-9,9\\\"}]\"}}],[\"contracts/failure/aevum-police-contract-796033-BladeIndustries.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/aevum-police-contract-796033-BladeIndustries.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-796033-BladeIndustries.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[168,20,198,32,156,13,106,17,148,85,196,76,152,109,190,78,182,11,96,65,148,73,192,44,197,3,147,115,130],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":359}\"}}],[\"contracts/failure/phantasy-contract-768611.cct-AlgorithmicStockTraderI.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/phantasy-contract-768611.cct-AlgorithmicStockTraderI.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-768611.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader I\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[44,148,32,191,62,135,29,79,33,122,36,122,7,116,4,128,28,123,6,163,138,154,34,174,151,157],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89\\\\n\\\\n Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\\"},\\\"wrongResult\\\":159}\"}}],[\"contracts/2023-07-16T20:19:53.413Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-16T20:19:53.413Z.txt\",\"text\":\"[{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-768611.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader I\\\",\\\"attemptsLeft\\\":4,\\\"input\\\":[44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89\\\\n\\\\n Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\\"},{\\\"server\\\":\\\"crush-fitness\\\",\\\"name\\\":\\\"contract-687545.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,1,0,0,0,0,1,1,1,0],[0,0,0,1,1,0,0,1,1,0,0],[0,0,0,1,0,0,1,0,1,1,0],[0,1,0,0,0,1,0,1,0,0,1],[1,1,0,1,0,0,0,0,1,1,0],[0,0,0,1,0,1,0,1,0,1,1],[0,0,1,1,1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1],[1,1,0,1,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,1,0,0,0,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,1,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,1,0,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,1,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-939391.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"62285191\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 62285191\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-972324.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"NNNNNNNNNNNNNNPYYYYYYYY2nnnggw4WWWWWWW66666666666666eeQQKKEEERRP535tt\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; NNNNNNNNNNNNNNPYYYYYYYY2nnnggw4WWWWWWW66666666666666eeQQKKEEERRP535tt\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-697251.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[7,2,8,5,4,3,0,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 7,2,8,5,4,3,0,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-202226.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":637990270,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 637990270?\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-558172.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)a)(()()()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)a)(()()()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-218953-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((((a))a()))()((((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((((a))a()))()((((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-796033-BladeIndustries.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-845127-BachmanAssociates.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":1625456266023211,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 1625456266023211 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"contracts/failure/run4theh111z-contract-988917.cct-AlgorithmicStockTraderIV.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/run4theh111z-contract-988917.cct-AlgorithmicStockTraderIV.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-988917.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,[71,149,42,177,70,119,53,125,21,101,37,117,81,133,83,128,84,105]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [3, [71,129,131,149,117,42,177,72,70,119,80,53,113,125,21,101,61,37,40,117,81,106,133,83,128,84,105]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},\\\"wrongResult\\\":295}\"}}],[\"contracts/2023-07-17T04:41:28.605Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-17T04:41:28.605Z.txt\",\"text\":\"[{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-43393.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,1,0,0,0,0,0],[0,0,1,0,1,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,1,0,0,0,0,0,\\\\n0,0,1,0,1,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-768611.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader I\\\",\\\"attemptsLeft\\\":4,\\\"input\\\":[44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89\\\\n\\\\n Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\\"},{\\\"server\\\":\\\"crush-fitness\\\",\\\"name\\\":\\\"contract-687545.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,1,0,0,0,0,1,1,1,0],[0,0,0,1,1,0,0,1,1,0,0],[0,0,0,1,0,0,1,0,1,1,0],[0,1,0,0,0,1,0,1,0,0,1],[1,1,0,1,0,0,0,0,1,1,0],[0,0,0,1,0,1,0,1,0,1,1],[0,0,1,1,1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1],[1,1,0,1,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,1,0,0,0,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,1,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,1,0,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,1,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-939391.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"62285191\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 62285191\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-972324.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"NNNNNNNNNNNNNNPYYYYYYYY2nnnggw4WWWWWWW66666666666666eeQQKKEEERRP535tt\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; NNNNNNNNNNNNNNPYYYYYYYY2nnnggw4WWWWWWW66666666666666eeQQKKEEERRP535tt\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-697251.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[7,2,8,5,4,3,0,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 7,2,8,5,4,3,0,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-202226.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":637990270,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 637990270?\\\"},{\\\"server\\\":\\\"max-hardware\\\",\\\"name\\\":\\\"contract-129622.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"71934678\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 71934678\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-558172.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)a)(()()()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)a)(()()()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-218953-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((((a))a()))()((((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((((a))a()))()((((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-157685-CyberSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11100110000001001111011110000011\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11100110000001001111011110000011' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-796033-BladeIndustries.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-274937-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":675368096,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 675368096?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-21596.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[13,[[6,9],[3,12],[0,8],[2,9],[10,12],[1,3],[4,11],[0,10],[7,9],[2,7],[7,11],[5,9],[4,5],[10,11],[8,11],[2,3],[9,12],[6,8],[1,7],[3,11],[1,4],[0,3],[3,5]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [13,[[6,9],[3,12],[0,8],[2,9],[10,12],[1,3],[4,11],[0,10],[7,9],[2,7],[7,11],[5,9],[4,5],[10,11],[8,11],[2,3],[9,12],[6,8],[1,7],[3,11],[1,4],[0,3],[3,5]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 12. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-659175-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,1,1,0,0],[0,0,0,0,0,0,1,0,0],[0,1,0,0,0,1,0,0,0],[1,0,1,0,0,0,0,0,0],[1,0,1,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-988917.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[3,[71,129,131,149,117,42,177,72,70,119,80,53,113,125,21,101,61,37,40,117,81,106,133,83,128,84,105]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [3, [71,129,131,149,117,42,177,72,70,119,80,53,113,125,21,101,61,37,40,117,81,106,133,83,128,84,105]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-960938-NWO.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-8,-4,10,-10,-7,5,1,1,0],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -8,-4,10,-10,-7,5,1,1,0\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-845127-BachmanAssociates.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":1625456266023211,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 1625456266023211 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"analytics/2023-07-17-06-06-Daedalus-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-17-06-06-Daedalus-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-16T15:53:06.295Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-16T15:53:06.295Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Bachman & Associates\\\",\\\"firstTime\\\":\\\"2023-07-16T15:53:06.295Z\\\"},{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-17T01:31:18.498Z\\\"},{\\\"factionToMax\\\":\\\"Daedalus\\\",\\\"firstTime\\\":\\\"2023-07-17T04:41:47.261Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":0.46197959594147,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-16T15:53:06.295Z\\\"},\\\"augsBought\\\":[\\\"Hydroflame Left Arm\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Xanipher\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\",\\\"The Red Pill\\\"],\\\"moneySpent\\\":{\\\"augments\\\":3024870935197.57,\\\"homeCores\\\":3164062500000,\\\"homeRam\\\":9996095182970.555,\\\"fluxGovernors\\\":712114491862.0477,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":164737053720.6671,\\\"lastSaved\\\":\\\"2023-07-17T11:06:19.607Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":2500000,\\\"currentFactionRep\\\":2500111.4825186455,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-17T11:06:15.484Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$9,434,446,404,033.54\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$3,024,870,935,197.57\\\",\\\"time\\\":\\\"2023-07-17T11:06:15.484Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$17,061,880,163,750.84\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$3,024,870,935,197.57\\\",\\\"time\\\":\\\"2023-07-17T11:06:19.605Z\\\"},\\\"amountOfRamIncrease\\\":null,\\\"amountOfCoresIncrease\\\":null}\"}}],[\"contracts/2023-07-17T11:06:22.474Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-17T11:06:22.474Z.txt\",\"text\":\"[]\"}}],[\"contracts/failure/zer0-contract-752976-Chongqing.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/zer0-contract-752976-Chongqing.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-752976-Chongqing.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[79,180,45,175,10,141,24,186,19,194,44,191,25,190,33,200,11,91,37,176,31,50,35,191],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 79,180,111,45,175,35,10,141,104,80,64,24,72,186,19,94,118,138,194,44,191,25,190,33,200,11,91,37,176,176,31,50,35,191,114,95\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":357}\"}}],[\"contracts/failure/icarus-contract-151400.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/icarus-contract-151400.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-151400.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,169,49,195,51,185,20,161,31,159,45,191,44,165,7,158,16,199,3,162,70,139,1,185],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 8,39,169,89,49,95,195,51,55,185,183,20,117,161,31,144,159,45,170,191,44,165,156,101,7,103,158,106,105,26,16,143,199,118,71,5,3,73,92,162,70,139,1,15,185\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":376}\"}}],[\"contracts/2023-07-17T11:37:10.279Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-17T11:37:10.279Z.txt\",\"text\":\"[{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-466235-CyberSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":12,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 12 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-114396-BladeIndustries.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-10,-4,-5,-4,-8,9,0,1,1,-2,3,6,7,3,-4,-7,5,-8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -10,-4,-5,-4,-8,9,0,1,1,-2,3,6,7,3,-4,-7,5,-8\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-170562.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":203303262363,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 203303262363 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-617759.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,3],\\\"description\\\":\\\"You are in a grid with 4 rows and 3 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [4, 3]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-668090.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[2,11],[21,28],[3,7],[3,5]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[2,11],[21,28],[3,7],[3,5]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-752976-Chongqing.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[79,180,111,45,175,35,10,141,104,80,64,24,72,186,19,94,118,138,194,44,191,25,190,33,200,11,91,37,176,176,31,50,35,191,114,95],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 79,180,111,45,175,35,10,141,104,80,64,24,72,186,19,94,118,138,194,44,191,25,190,33,200,11,91,37,176,176,31,50,35,191,114,95\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-982890-CyberSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[13,11],\\\"description\\\":\\\"You are in a grid with 13 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [13, 11]\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-700283-TianDiHui.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":65,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 65 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-879575-NWO.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[24,30],[4,13],[3,7],[3,13],[15,22],[7,16]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[24,30],[4,13],[3,7],[3,13],[15,22],[7,16]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-139555.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"X2yt0amgB78Y78Y78kY78kY78kY00000RaRuvrbbbbbbbbrbiiiiiiiiiiDirdp\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; X2yt0amgB78Y78Y78kY78kY78kY00000RaRuvrbbbbbbbbrbiiiiiiiiiiDirdp\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-507336.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":177120045,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 177120045 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-284449.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"2715148182\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 2715148182\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"nwo\\\",\\\"name\\\":\\\"contract-853005-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[10,0,5,8,0,0,8,5,0,0,7,9,0,8,10,7,10,9,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 10,0,5,8,0,0,8,5,0,0,7,9,0,8,10,7,10,9,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"nwo\\\",\\\"name\\\":\\\"contract-945507-BladeIndustries.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,4,0,2,10,0,10,6,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,4,0,2,10,0,10,6,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-78126.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[11,18],[12,21],[4,13],[2,6],[22,26],[10,19],[3,11],[17,23],[4,6],[10,12],[17,22],[15,23],[24,27],[21,30],[15,17],[6,11],[15,21]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[11,18],[12,21],[4,13],[2,6],[22,26],[10,19],[3,11],[17,23],[4,6],[10,12],[17,22],[15,23],[24,27],[21,30],[15,17],[6,11],[15,21]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-180242.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[9,18],[25,27],[24,30],[16,17],[25,31],[4,14],[13,17],[25,27],[25,29],[16,21],[14,19],[24,34],[21,30],[18,22]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[9,18],[25,27],[24,30],[16,17],[25,31],[4,14],[13,17],[25,27],[25,29],[16,21],[14,19],[24,34],[21,30],[18,22]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-129080.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[7,10,0,10,10,10,7,0,5,0,10,6,7,0,5,8,9,6,0,1,7,5,5,0,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 7,10,0,10,10,10,7,0,5,0,10,6,7,0,5,8,9,6,0,1,7,5,5,0,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"the-hub\\\",\\\"name\\\":\\\"contract-183995.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"59391098\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 59391098\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-151400.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[8,39,169,89,49,95,195,51,55,185,183,20,117,161,31,144,159,45,170,191,44,165,156,101,7,103,158,106,105,26,16,143,199,118,71,5,3,73,92,162,70,139,1,15,185],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 8,39,169,89,49,95,195,51,55,185,183,20,117,161,31,144,159,45,170,191,44,165,156,101,7,103,158,106,105,26,16,143,199,118,71,5,3,73,92,162,70,139,1,15,185\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"}]\"}}],[\"analytics/2023-07-18-19-23-CyberSec-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-18-19-23-CyberSec-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-17T15:01:59.454Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-17T15:01:59.454Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"CyberSec\\\",\\\"firstTime\\\":\\\"2023-07-17T15:01:59.454Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":56250,\\\"currentFactionRep\\\":9575.57211897485,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-17T15:01:59.454Z\\\"},\\\"augsBought\\\":[\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"BitWire\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neurotrainer I\\\",\\\"Wired Reflexes\\\"],\\\"moneySpent\\\":{\\\"augments\\\":1527220125,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":105853232.25,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":180990271.22235352,\\\"lastSaved\\\":\\\"2023-07-18T00:23:57.041Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":56250,\\\"currentFactionRep\\\":56366.304164084075,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-18T00:17:40.293Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$417,766,412.90\\\",\\\"moneyRightNow\\\":\\\"$15,180.11\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,527,220,125.00\\\",\\\"time\\\":\\\"2023-07-18T00:17:40.297Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$427,568,338.06\\\",\\\"moneyRightNow\\\":\\\"$1,814,063,628.47\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,527,220,125.00\\\",\\\"time\\\":\\\"2023-07-18T00:23:57.034Z\\\"}}\"}}],[\"contracts/2023-07-18T00:23:59.915Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-18T00:23:59.915Z.txt\",\"text\":\"[]\"}}],[\"contracts/failure/joesguns-contract-665303-BachmanAssociates.cct-AlgorithmicStockTraderIV.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/joesguns-contract-665303-BachmanAssociates.cct-AlgorithmicStockTraderIV.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-665303-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,[27,130,53,133,11,164,19,177,78,176,28,137,108,178,11,165,55,138,84,100,14,124,6,159,46,161,2,122]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [9, [27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},\\\"wrongResult\\\":1216}\"}}],[\"contracts/2023-07-18T11:38:52.713Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-18T11:38:52.713Z.txt\",\"text\":\"[{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-665303-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[9,[27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [9, [27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-351757-TianDiHui.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[153,[2,5,6,9,10,11,14,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 153 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,14,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-839291-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":78,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 78 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-872421.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"9909267137\\\",40],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 9909267137\\\\n\\\\n You are also given a target number of 40. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"9909267137\\\\\\\", 40]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-984796-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[37,[5,6,8,9,11,12,13,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 37 be written as a sum of integers contained in the set:\\\\n\\\\n [5,6,8,9,11,12,13,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"}]\"}}],[\"contracts/2023-07-19T01:25:07.967Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-19T01:25:07.967Z.txt\",\"text\":\"[{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-665303-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[9,[27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [9, [27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-351757-TianDiHui.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[153,[2,5,6,9,10,11,14,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 153 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,14,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-839291-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":78,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 78 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-872421.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"9909267137\\\",40],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 9909267137\\\\n\\\\n You are also given a target number of 40. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"9909267137\\\\\\\", 40]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-984796-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[37,[5,6,8,9,11,12,13,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 37 be written as a sum of integers contained in the set:\\\\n\\\\n [5,6,8,9,11,12,13,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"}]\"}}],[\"contracts/2023-07-19T11:36:24.027Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-19T11:36:24.027Z.txt\",\"text\":\"[{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-281744.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,9,4,10,-4,1,8,3,-5,10,-10,2,-10,-1,10,8,1,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 8,9,4,10,-4,1,8,3,-5,10,-10,2,-10,-1,10,8,1,-5\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-665303-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[9,[27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [9, [27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-351757-TianDiHui.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[153,[2,5,6,9,10,11,14,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 153 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,14,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-800650-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"355877\\\",8],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 355877\\\\n\\\\n You are also given a target number of 8. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"355877\\\\\\\", 8]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-839291-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":78,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 78 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-280659-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"p4zroASVvUEuOp7BC5vrN1rKSMIKSMIKSMWSH7w6RsI5AQXaawRwntUtUtUtUtcJty2dUtcJfty2mtzty\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; p4zroASVvUEuOp7BC5vrN1rKSMIKSMIKSMWSH7w6RsI5AQXaawRwntUtUtUtUtcJty2dUtcJfty2mtzty\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-872421.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"9909267137\\\",40],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 9909267137\\\\n\\\\n You are also given a target number of 40. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"9909267137\\\\\\\", 40]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-984796-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[37,[5,6,8,9,11,12,13,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 37 be written as a sum of integers contained in the set:\\\\n\\\\n [5,6,8,9,11,12,13,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"}]\"}}],[\"analytics/2023-07-19-12-48-Chongqing-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-19-12-48-Chongqing-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-18T12:23:04.481Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-18T12:23:04.481Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Chongqing\\\",\\\"firstTime\\\":\\\"2023-07-18T12:23:04.481Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":0.0538667088,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-18T12:23:04.481Z\\\"},\\\"augsBought\\\":[\\\"Neuralstimulator\\\",\\\"Neuregen Gene Modification\\\",\\\"Speech Processor Implant\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"Speech Enhancement\\\"],\\\"moneySpent\\\":{\\\"augments\\\":13703262375,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":4830547361.117641,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":1096928387.9418674,\\\"lastSaved\\\":\\\"2023-07-19T17:48:45.411Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":206240.08301470877,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-19T11:36:24.281Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$4,160,871,565.61\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$12,090,540,000.00\\\",\\\"time\\\":\\\"2023-07-19T11:36:24.283Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$877,193,741.98\\\",\\\"moneyRightNow\\\":\\\"$19,630,738,124.06\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$13,703,262,375.00\\\",\\\"time\\\":\\\"2023-07-19T17:48:45.405Z\\\"}}\"}}],[\"contracts/2023-07-19T17:48:48.121Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-19T17:48:48.121Z.txt\",\"text\":\"[{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-482557.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0],[0,0,0,0,0,0,1],[0,0,0,1,0,1,0],[0,1,0,1,1,0,0],[0,1,0,1,0,0,0],[0,0,0,0,0,0,0],[1,0,0,0,1,0,0],[1,0,0,0,1,0,0],[1,0,1,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-928339.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[2,7],[1,6,8],[6,6,2,3],[9,3,9,2,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,6,8],\\\\n&nbsp;&nbsp;&nbsp;[6,6,2,3],\\\\n&nbsp;&nbsp;[9,3,9,2,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-683482-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"429563\\\",88],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 429563\\\\n\\\\n You are also given a target number of 88. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"429563\\\\\\\", 88]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-101955-CyberSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[1,0,0,0,0],[0,0,0,1,0],[0,0,0,0,0],[0,0,1,1,0],[1,0,0,0,0],[1,1,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n1,0,0,0,0,\\\\n0,0,0,1,0,\\\\n0,0,0,0,0,\\\\n0,0,1,1,0,\\\\n1,0,0,0,0,\\\\n1,1,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"max-hardware\\\",\\\"name\\\":\\\"contract-363580.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((a(a)aaaa(a()))(a(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((a(a)aaaa(a()))(a(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-686649-ECorp.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,0,0,0],[0,1,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,1,0,0,0,0,\\\\n0,1,0,0,0,0,1,0,0,\\\\n0,0,0,0,0,0,0,1,0,\\\\n0,0,0,0,0,1,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,1,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,1,0,0,0,0,0,0,1,\\\\n0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-580876.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")((((a(())a()))aa\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )((((a(())a()))aa\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-833725-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0],[0,0,1,0,1,1,0],[0,0,0,0,0,1,0],[0,1,1,0,1,0,0],[0,0,0,0,0,1,1],[1,1,1,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-969263-CyberSec.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,0,0,0,0,1],[0,0,0,0,0,1,1,1,0,1,1],[0,0,0,0,0,1,0,0,0,0,0],[0,1,1,0,0,0,0,0,0,0,0],[1,1,1,0,0,1,0,0,0,0,1],[0,0,1,1,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0],[0,1,0,1,0,1,1,0,1,1,0],[1,0,0,0,1,0,0,0,0,0,0],[0,1,0,1,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,0,0,1,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,1,1,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-584719.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[1,0,3,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,0,3,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-860676.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,1],[0,0,0,1,0,1],[0,0,1,0,0,1],[0,0,1,1,0,0],[0,0,1,0,0,1],[0,0,0,0,0,0],[0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-90682-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0110000010010000\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0110000010010000' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-951732.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[1,2],[25,26],[6,7],[18,19],[19,21],[11,18],[17,19],[23,30]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[1,2],[25,26],[6,7],[18,19],[19,21],[11,18],[17,19],[23,30]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-875972.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[27,[1,4,6,7,9,10,11,12,13]],\\\"description\\\":\\\"How many different distinct ways can the number 27 be written as a sum of integers contained in the set:\\\\n\\\\n [1,4,6,7,9,10,11,12,13]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-795055-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[19,28],[20,29],[15,16],[12,14],[3,7],[15,19],[12,16]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[19,28],[20,29],[15,16],[12,14],[3,7],[15,19],[12,16]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"stormtech\\\",\\\"name\\\":\\\"contract-600398-ECorp.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"AqLFevqLFcp7oyIwFcp7oyXpcp7NIBrTH6xlI6xlI6xl5ljxlexxle2zIGbibibibM02Qj4qiwdaMQ6M\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; AqLFevqLFcp7oyIwFcp7oyXpcp7NIBrTH6xlI6xlI6xl5ljxlexxle2zIGbibibibM02Qj4qiwdaMQ6M\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-576645-NiteSec.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[8,[[1,5],[2,5],[5,6],[5,7],[1,3],[0,3],[5,6],[4,7],[2,3],[2,4],[1,4]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [8,[[1,5],[2,5],[5,6],[5,7],[1,3],[0,3],[5,6],[4,7],[2,3],[2,4],[1,4]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 7. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-495044.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[3,9],[3,12],[20,22],[23,25],[23,31],[12,17],[13,16],[4,11],[10,19]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[3,9],[3,12],[20,22],[23,25],[23,31],[12,17],[13,16],[4,11],[10,19]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-15650-CyberSec.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[2,5,9,3,8,7,4,0,10,5,9,5,7,10,5,3,8,2,9,10,7,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,5,9,3,8,7,4,0,10,5,9,5,7,10,5,3,8,2,9,10,7,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-313946-BladeIndustries.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[13,5],\\\"description\\\":\\\"You are in a grid with 13 rows and 5 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [13, 5]\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-523738-TheBlackHand.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"52204140202\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 52204140202\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-202598-CyberSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[175,[3,4,5,6,7,9,10,12,15]],\\\"description\\\":\\\"How many different distinct ways can the number 175 be written as a sum of integers contained in the set:\\\\n\\\\n [3,4,5,6,7,9,10,12,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-39560.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[14,10],\\\"description\\\":\\\"You are in a grid with 14 rows and 10 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [14, 10]\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-808154-CyberSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":31,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 31 be written as a sum of at least two positive integers?\\\"}]\"}}],[\"analytics/2023-07-20-04-20-NiteSec-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-20-04-20-NiteSec-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-19T18:25:41.782Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-19T18:25:41.782Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NiteSec\\\",\\\"firstTime\\\":\\\"2023-07-19T18:25:41.782Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":150000,\\\"currentFactionRep\\\":0.4850529923899739,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-19T18:25:41.782Z\\\"},\\\"augsBought\\\":[\\\"Cranial Signal Processors - Gen III\\\",\\\"Neural-Retention Enhancement\\\",\\\"Embedded Netburner Module\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Neurotrainer II\\\"],\\\"moneySpent\\\":{\\\"augments\\\":16882762650,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":735604102.0243528,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":242492867.6541854,\\\"lastSaved\\\":\\\"2023-07-20T09:20:20.822Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":150000,\\\"currentFactionRep\\\":150002.03570172685,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-20T07:31:58.717Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$493,779,692.90\\\",\\\"moneyRightNow\\\":\\\"$5,517,622,556.06\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$16,882,762,650.00\\\",\\\"time\\\":\\\"2023-07-20T07:31:58.717Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$410,032,490.32\\\",\\\"moneyRightNow\\\":\\\"$17,860,859,619.68\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$16,882,762,650.00\\\",\\\"time\\\":\\\"2023-07-20T09:20:20.814Z\\\"}}\"}}],[\"contracts/2023-07-20T09:20:23.522Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-20T09:20:23.522Z.txt\",\"text\":\"[{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-160196.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[16,19],[4,8],[19,27],[14,20],[9,11],[14,24],[18,22]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[16,19],[4,8],[19,27],[14,20],[9,11],[14,24],[18,22]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-198363.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"EHGiHGSFzoYvTdfvrLZyTdfvrvrvrvrvrvrvrekmvrekmvreowtlrlrlrlrlrlslrlIlslr\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; EHGiHGSFzoYvTdfvrLZyTdfvrvrvrvrvrvrvrekmvrekmvreowtlrlrlrlrlrlslrlIlslr\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-551996.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[7],[7,9],[3,6,2],[5,7,8,1],[8,9,5,6,6],[6,5,6,1,3,9]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,6,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[5,7,8,1],\\\\n&nbsp;&nbsp;&nbsp;[8,9,5,6,6],\\\\n&nbsp;&nbsp;[6,5,6,1,3,9]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-185836-CyberSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,7],\\\"description\\\":\\\"You are in a grid with 9 rows and 7 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [9, 7]\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-203937-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":81,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 81 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-646201-CyberSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[12,4],\\\"description\\\":\\\"You are in a grid with 12 rows and 4 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [12, 4]\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-726800-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[0,7,3,4,3,3,3,4,1,0,3,1,0,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,7,3,4,3,3,3,4,1,0,3,1,0,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-814551.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"wwwwwwwfPPGGGGGGcHHgMMhhooE8IIMmPPPPPPPPPPPPM0kkSSSSSSSSSS7777777777777yyyyyyzzzzzzzzz\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; wwwwwwwfPPGGGGGGcHHgMMhhooE8IIMmPPPPPPPPPPPPM0kkSSSSSSSSSS7777777777777yyyyyyzzzzzzzzz\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-184215.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,1,0,0,0,1,1],[1,0,0,0,0,0,1,1,1,1,0,0],[0,0,0,0,0,1,0,1,1,1,1,1],[0,0,0,0,1,1,0,0,0,1,0,0],[0,0,0,0,1,1,0,1,1,1,0,0],[0,0,1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,1,0,0],[0,1,0,0,0,1,1,1,1,0,1,0],[0,0,0,0,1,0,0,1,0,0,0,0],[0,0,0,1,1,0,0,0,0,0,1,1],[0,1,1,0,0,0,0,0,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,1,0,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,1,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,1,1,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,0,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,1,1,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,1,0,0,0,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-698434-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":470074817,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 470074817?\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-113752.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((()a))(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((()a))(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-509231.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[15,22],[16,21],[21,31],[4,6]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[15,22],[16,21],[21,31],[4,6]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-153104.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[193,[2,3,4,5,7,8,9,10,13]],\\\"description\\\":\\\"How many different distinct ways can the number 193 be written as a sum of integers contained in the set:\\\\n\\\\n [2,3,4,5,7,8,9,10,13]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-283509.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":86,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 86 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-424311-BitRunners.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[11,[[4,7],[0,2],[7,8],[3,6],[0,10],[2,3],[8,9],[5,9],[6,9],[2,7],[6,9],[2,9],[6,7],[1,7],[9,10]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [11,[[4,7],[0,2],[7,8],[3,6],[0,10],[2,3],[8,9],[5,9],[6,9],[2,7],[6,9],[2,9],[6,7],[1,7],[9,10]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 10. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-290448-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"qcgqcYvNfpYUha6ha6ha6hlb42Bee3wiywywyfViywywyfVibuIbP0kVibuIQrVkVibebebebebebveWQeWQeWQeWJeW\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; qcgqcYvNfpYUha6ha6ha6hlb42Bee3wiywywyfViywywyfVibuIbP0kVibuIQrVkVibebebebebebveWQeWQeWQeWJeW\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-758844.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"22832320932\\\",81],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 22832320932\\\\n\\\\n You are also given a target number of 81. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"22832320932\\\\\\\", 81]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"omnia\\\",\\\"name\\\":\\\"contract-180064.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[120,[1,2,4,5,7,8,9,10,11,12]],\\\"description\\\":\\\"How many different distinct ways can the number 120 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,7,8,9,10,11,12]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-775664.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,1,0,0,0,0,0,0,1],[0,1,0,0,0,0,1,0,1,1],[0,0,0,0,1,0,0,1,0,0],[0,1,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,1,1,1],[0,1,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,1],[0,1,0,1,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,1],[0,1,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,1,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,0,0,0,0,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"}]\"}}],[\"analytics/2023-07-21-03-35-TheBlackHand-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-21-03-35-TheBlackHand-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-20T13:19:37.890Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-20T13:19:37.890Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"The Black Hand\\\",\\\"firstTime\\\":\\\"2023-07-20T13:19:37.890Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-20T13:19:37.891Z\\\"},\\\"augsBought\\\":[\\\"Enhanced Myelin Sheathing\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"The Black Hand\\\",\\\"DataJack\\\",\\\"Social Negotiation Assistant (S.N.A)\\\"],\\\"moneySpent\\\":{\\\"augments\\\":26784039000,\\\"homeCores\\\":0,\\\"homeRam\\\":475182451795.6437,\\\"fluxGovernors\\\":670881065159.001,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":159955728162.7616,\\\"lastSaved\\\":\\\"2023-07-21T08:35:25.556Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":375012.4444733313,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-21T08:32:58.201Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$44,332,067,495.85\\\",\\\"moneyRightNow\\\":\\\"$836,033,121.15\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$26,784,039,000.00\\\",\\\"time\\\":\\\"2023-07-21T08:32:58.201Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$49,129,547,840.44\\\",\\\"moneyRightNow\\\":\\\"$1,332,803,284,117.41\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$26,784,039,000.00\\\",\\\"time\\\":\\\"2023-07-21T08:35:25.555Z\\\"},\\\"amountOfRamIncrease\\\":null,\\\"amountOfCoresIncrease\\\":null}\"}}],[\"contracts/failure/nectar-net-contract-394118-BitRunners.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/nectar-net-contract-394118-BitRunners.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-394118-BitRunners.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[83,18,162,4,95,11,195,119,187,88,196,1,159,29,59,17,164,79,89,61,177,49,170],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 83,18,162,4,46,95,11,119,195,120,119,187,88,196,77,1,159,129,29,59,17,164,79,89,61,109,127,177,49,84,170\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":350}\"}}],[\"contracts/2023-07-21T08:35:28.271Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-21T08:35:28.271Z.txt\",\"text\":\"[{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-704097.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,0,5,0,8,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,0,5,0,8,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-999646.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100000011101010100010011011010101001111011100111111100010011110\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100000011101010100010011011010101001111011100111111100010011110' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-797194-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,0,0,1,0],[0,1,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,1,0],[0,1,1,0,1,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,0,\\\\n0,0,0,0,0,0,1,0,1,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n0,1,1,0,1,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-605259.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":66,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 66 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-36453-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2,0,8,-2,-7,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,2,0,8,-2,-7,-7\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-305165.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":72,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 72 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-771627.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":11,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 11 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-678006.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"W0i1EEEEEE6z0z6yCCxz0z6yCCxzN3yCx2Cx2Cx2CsLhx2Cx2CsLhNzigs0777777777SFNUWSFNUWSFNUFNUPW0FNU\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; W0i1EEEEEE6z0z6yCCxz0z6yCCxzN3yCx2Cx2Cx2CsLhx2Cx2CsLhNzigs0777777777SFNUWSFNUWSFNUFNUPW0FNU\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-202243-TheBlackHand.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"663317949728\\\",63],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 663317949728\\\\n\\\\n You are also given a target number of 63. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"663317949728\\\\\\\", 63]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-813507-BitRunners.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"95163141220\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 95163141220\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-314967.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":668710506,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 668710506?\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-620424.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":50,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 50 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-273352.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"469324190930\\\",79],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 469324190930\\\\n\\\\n You are also given a target number of 79. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"469324190930\\\\\\\", 79]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-294288-BitRunners.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0000101001010001\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0000101001010001' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-524316-ECorp.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[7,17],[5,12],[5,14],[4,11],[8,18],[20,27],[19,27],[19,25],[5,9],[13,22],[25,28],[25,31],[9,19],[15,19],[2,9],[22,27]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[7,17],[5,12],[5,14],[4,11],[8,18],[20,27],[19,27],[19,25],[5,9],[13,22],[25,28],[25,31],[9,19],[15,19],[2,9],[22,27]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-57092.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,0,5,1,4,4,3,6,3,1,1,4,4,0,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,0,5,1,4,4,3,6,3,1,1,4,4,0,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-904886.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":28,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 28 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"the-hub\\\",\\\"name\\\":\\\"contract-625337.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[6,4,3,2,4,8,2,6,3,0,4,0,2,2,0,5,6,3,3,7,5,0,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 6,4,3,2,4,8,2,6,3,0,4,0,2,2,0,5,6,3,3,7,5,0,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-394118-BitRunners.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[83,18,162,4,46,95,11,119,195,120,119,187,88,196,77,1,159,129,29,59,17,164,79,89,61,109,127,177,49,84,170],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 83,18,162,4,46,95,11,119,195,120,119,187,88,196,77,1,159,129,29,59,17,164,79,89,61,109,127,177,49,84,170\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"}]\"}}],[\"analytics/2023-07-22-00-43-Bachman&Associates-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-22-00-43-Bachman&Associates-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-21T09:07:14.531Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-21T09:07:14.531Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-21T09:07:14.532Z\\\"},{\\\"factionToMax\\\":\\\"Bachman & Associates\\\",\\\"firstTime\\\":\\\"2023-07-21T15:38:51.410Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-21T09:07:14.532Z\\\"},\\\"augsBought\\\":[\\\"FocusWire\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"CashRoot Starter Kit\\\",\\\"Nanofiber Weave\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\"],\\\"moneySpent\\\":{\\\"augments\\\":13504345725,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":529136852962.8832,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":478094288875.795,\\\"lastSaved\\\":\\\"2023-07-22T05:43:08.455Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1125000,\\\"currentFactionRep\\\":462513.38379352586,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-22T05:43:03.775Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$721,453,082,023.73\\\",\\\"moneyRightNow\\\":\\\"$517,995,312,219.22\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$13,504,345,725.00\\\",\\\"time\\\":\\\"2023-07-22T05:43:03.776Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$721,453,082,023.73\\\",\\\"moneyRightNow\\\":\\\"$1,020,735,487,563.68\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$13,504,345,725.00\\\",\\\"time\\\":\\\"2023-07-22T05:43:08.447Z\\\"}}\"}}],[\"contracts/2023-07-22T05:43:11.146Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T05:43:11.146Z.txt\",\"text\":\"[{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-11351.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[9,1,0,1,4,8,2,9,3,0,0,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 9,1,0,1,4,8,2,9,3,0,0,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-380792-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[8],[6,7],[8,5,3],[1,9,2,9],[7,5,6,6,4],[7,7,7,8,3,3],[1,5,4,5,4,8,9]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,9,2,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,5,6,6,4],\\\\n&nbsp;&nbsp;&nbsp;[7,7,7,8,3,3],\\\\n&nbsp;&nbsp;[1,5,4,5,4,8,9]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-347251-TianDiHui.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"64125109196\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 64125109196\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-489407-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[22,23],[14,20],[7,12],[21,25],[2,7],[5,7],[6,16],[5,10],[7,13],[24,34],[11,19],[23,31],[15,19],[17,19],[16,21],[25,32],[5,11],[2,10],[10,18],[22,26]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[22,23],[14,20],[7,12],[21,25],[2,7],[5,7],[6,16],[5,10],[7,13],[24,34],[11,19],[23,31],[15,19],[17,19],[16,21],[25,32],[5,11],[2,10],[10,18],[22,26]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-740419-Sector12.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[12,[[0,10],[5,9],[2,8],[9,10],[1,7],[6,11],[1,4],[0,5],[0,6],[1,5],[0,3],[1,2],[1,10],[8,10],[3,11],[5,11],[7,8],[1,3]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [12,[[0,10],[5,9],[2,8],[9,10],[1,7],[6,11],[1,4],[0,5],[0,6],[1,5],[0,3],[1,2],[1,10],[8,10],[3,11],[5,11],[7,8],[1,3]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 11. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-995428.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":976679328,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 976679328?\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-399060-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[17,26],[24,30],[6,10],[20,25],[24,27]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[17,26],[24,30],[6,10],[20,25],[24,27]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-829895-NWO.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1242558141\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 1242558141\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-881035.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"rmmTTTTTkiiGGGGGGGiiiiiiiwwwwww1T4xxW00000000MPPHHHHWWWWWWW\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; rmmTTTTTkiiGGGGGGGiiiiiiiwwwwww1T4xxW00000000MPPHHHHWWWWWWW\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-611935.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[8,11],[1,5],[7,17]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[8,11],[1,5],[7,17]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-387094-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[20,30],[25,29],[12,16],[21,23],[11,18],[8,16],[15,16],[10,20],[21,29],[20,23],[5,15],[20,30]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[20,30],[25,29],[12,16],[21,23],[11,18],[8,16],[15,16],[10,20],[21,29],[20,23],[5,15],[20,30]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-797670.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,10],[1,3],[3,12],[11,16],[11,19],[24,34],[1,10],[9,19],[7,15],[24,28],[9,19],[6,13],[18,24],[10,20],[2,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,10],[1,3],[3,12],[11,16],[11,19],[24,34],[1,10],[9,19],[7,15],[24,28],[9,19],[6,13],[18,24],[10,20],[2,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-188827.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"16442178219\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 16442178219\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-464359-NiteSec.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"ii44XXTTMM6cdBtttttttttttoooooooooooooo222222233v882222000rrrrrrrjjjjj\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; ii44XXTTMM6cdBtttttttttttoooooooooooooo222222233v882222000rrrrrrrjjjjj\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"}]\"}}],[\"analytics/2023-07-22-09-43-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-22-09-43-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-22T06:02:37.619Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-22T06:02:37.619Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-22T06:02:37.620Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":3.2864092291602076,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-22T06:02:37.620Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core Implant\\\",\\\"Neuroreceptor Management Implant\\\"],\\\"moneySpent\\\":{\\\"augments\\\":10635000000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":544271461926.7823,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":444192826113.2349,\\\"lastSaved\\\":\\\"2023-07-22T14:43:13.384Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":424401.7324430114,\\\"targetRepForGettingToFavor\\\":46.7456,\\\"time\\\":\\\"2023-07-22T12:46:06.443Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$56,130,176,702.47\\\",\\\"moneyRightNow\\\":\\\"$8,419,609.39\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$10,635,000,000.00\\\",\\\"time\\\":\\\"2023-07-22T14:30:11.871Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$78,940,357,809.55\\\",\\\"moneyRightNow\\\":\\\"$999,099,288,040.02\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$10,635,000,000.00\\\",\\\"time\\\":\\\"2023-07-22T14:43:13.379Z\\\"}}\"}}],[\"contracts/2023-07-22T14:43:15.941Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T14:43:15.941Z.txt\",\"text\":\"[{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-753491-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader I\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[55,2,86,172,107,98,152,148,14,103,31,116,22,49],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 55,2,86,172,107,98,152,148,14,103,31,116,22,49\\\\n\\\\n Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\\"}]\"}}],[\"contracts/2023-07-22T14:56:24.747Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T14:56:24.747Z.txt\",\"text\":\"[{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-847565-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"215407675\\\",-39],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 215407675\\\\n\\\\n You are also given a target number of -39. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"215407675\\\\\\\", -39]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-372294-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":193172784,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 193172784?\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-355180.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2619,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2619 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"contracts/2023-07-22T19:15:14.104Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T19:15:14.104Z.txt\",\"text\":\"[{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-847565-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"215407675\\\",-39],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 215407675\\\\n\\\\n You are also given a target number of -39. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"215407675\\\\\\\", -39]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-372294-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":193172784,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 193172784?\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-355180.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2619,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2619 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"analytics/2023-07-22-14-28-NWO-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-22-14-28-NWO-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-22T18:07:08.879Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-22T18:07:08.879Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-22T18:07:08.879Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5250000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-22T18:07:08.880Z\\\"},\\\"augsBought\\\":[\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\"],\\\"moneySpent\\\":{\\\"augments\\\":1281000000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":429379128590.6032,\\\"repPurchased\\\":93720000000},\\\"moneyLeft\\\":275337831020.79755,\\\"lastSaved\\\":\\\"2023-07-22T19:28:26.372Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5250000,\\\"currentFactionRep\\\":85420.86318980539,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-22T19:27:56.980Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$1,379,208,116,078.57\\\",\\\"moneyRightNow\\\":\\\"$592.87\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,281,000,000.00\\\",\\\"time\\\":\\\"2023-07-22T19:27:56.981Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$1,287,219,116,506.24\\\",\\\"moneyRightNow\\\":\\\"$799,717,959,611.40\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,281,000,000.00\\\",\\\"time\\\":\\\"2023-07-22T19:28:26.347Z\\\"}}\"}}],[\"contracts/2023-07-22T19:28:28.997Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T19:28:28.997Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-816744.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[5],[7,3],[2,9,6],[2,7,6,6],[9,1,9,5,9],[8,3,8,4,4,5],[6,2,5,4,4,7,1],[4,6,5,4,2,7,4,7],[8,9,5,6,1,3,5,5,5]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,9,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,6,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,1,9,5,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,3,8,4,4,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[6,2,5,4,4,7,1],\\\\n&nbsp;&nbsp;&nbsp;[4,6,5,4,2,7,4,7],\\\\n&nbsp;&nbsp;[8,9,5,6,1,3,5,5,5]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-751646.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":1771645887127,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 1771645887127 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-825287-BladeIndustries.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[14,10],\\\"description\\\":\\\"You are in a grid with 14 rows and 10 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [14, 10]\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-829370-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,1,1],[0,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,0,0,0,0,0,\\\\n0,0,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n1,1,0,0,0,0,0,1,1,\\\\n0,0,0,0,1,0,0,0,0,\\\\n0,0,1,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,1,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"}]\"}}],[\"analytics/2023-07-22-17-47-OmniTekIncorporated-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-22-17-47-OmniTekIncorporated-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-22T21:38:23.035Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-22T21:38:23.035Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"OmniTek Incorporated\\\",\\\"firstTime\\\":\\\"2023-07-22T21:38:23.035Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-22T21:38:23.035Z\\\"},\\\"augsBought\\\":[\\\"Augmented Targeting III\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\"],\\\"moneySpent\\\":{\\\"augments\\\":1184325000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":492252175215.5397,\\\"repPurchased\\\":273260000000},\\\"moneyLeft\\\":1105056896.8406372,\\\"lastSaved\\\":\\\"2023-07-22T22:47:33.683Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":85407.69418403886,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-22T22:43:45.648Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$668,528,618,551.94\\\",\\\"moneyRightNow\\\":\\\"$36,502,335,303.15\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,184,325,000.00\\\",\\\"time\\\":\\\"2023-07-22T22:43:45.648Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$766,198,261,105.09\\\",\\\"moneyRightNow\\\":\\\"$767,801,557,112.38\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,184,325,000.00\\\",\\\"time\\\":\\\"2023-07-22T22:47:33.635Z\\\"}}\"}}],[\"contracts/2023-07-22T22:47:36.350Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T22:47:36.350Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-582184.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,-8,4,-2,-7,5,5,-7,1,3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,-8,4,-2,-7,5,5,-7,1,3\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-471181.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[9,6,2,1,4,4,0,10],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 9,6,2,1,4,4,0,10\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-690374.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"axRv7rLNcTMzusBusBusBusBusBsBusBusBBsBusBuL4sBusBuL4szlzlzlzlzl4kY0KcHFl4kY0KcHF6OHF6OHF6OHieR\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; axRv7rLNcTMzusBusBusBusBusBsBusBusBBsBusBuL4sBusBuL4szlzlzlzlzl4kY0KcHFl4kY0KcHF6OHF6OHF6OHieR\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-379736-Sector12.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"))))((a((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ))))((a((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-741659.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[3,6],[0,6],[1,2],[0,8],[4,7],[5,6],[1,3],[4,5],[7,8],[3,4],[3,8],[1,6],[5,8],[1,8],[6,7],[2,3]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[3,6],[0,6],[1,2],[0,8],[4,7],[5,6],[1,3],[4,5],[7,8],[3,4],[3,8],[1,6],[5,8],[1,8],[6,7],[2,3]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-274629.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[6,7,6,5,1,-9,-9,6,9,3,-5,1,2,1,10,6,-1,9,6,7,-10,5,8,2,2,-4,-2,-3,-3,-3,-5,7,-5,-10,8,-8,-6,5,10],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 6,7,6,5,1,-9,-9,6,9,3,-5,1,2,1,10,6,-1,9,6,7,-10,5,8,2,2,-4,-2,-3,-3,-3,-5,7,-5,-10,8,-8,-6,5,10\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-575293.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[9,0,5,9,0,0,3,0,3,4,2,5,1,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 9,0,5,9,0,0,3,0,3,4,2,5,1,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-967890.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":312328765,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 312328765?\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-588254.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"5725283224\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 5725283224\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-67120.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"4281543629\\\",58],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 4281543629\\\\n\\\\n You are also given a target number of 58. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"4281543629\\\\\\\", 58]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-5790.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"NMGpXdr41IG3cxkxGj6fNOtOtOtOsssssstssstsssDvP4QsssDvP4Cl3fsDK7yad0dXd\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; NMGpXdr41IG3cxkxGj6fNOtOtOtOsssssstssstsssDvP4QsssDvP4Cl3fsDK7yad0dXd\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-776549-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,1,0,1,0,0,0,1],[0,0,0,1,0,0,0,0],[1,0,0,0,1,1,0,0],[0,1,1,0,0,1,1,0],[0,0,0,0,0,0,0,0],[1,0,0,0,0,1,0,0],[0,0,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,\\\\n0,1,0,1,0,0,0,1,\\\\n0,0,0,1,0,0,0,0,\\\\n1,0,0,0,1,1,0,0,\\\\n0,1,1,0,0,1,1,0,\\\\n0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,1,0,0,\\\\n0,0,0,0,0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-908432-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[1,4,5,5,1,1,3,2,4,3,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,4,5,5,1,1,3,2,4,3,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-618789.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[152,[1,2,3,5,6,7,9,10,12,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 152 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,3,5,6,7,9,10,12,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"}]\"}}],[\"analytics/2023-07-23-11-59-ECorp-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-23-11-59-ECorp-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-23T00:56:11.917Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-23T00:56:11.917Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Blade Industries\\\",\\\"firstTime\\\":\\\"2023-07-23T00:56:11.917Z\\\"},{\\\"factionToMax\\\":\\\"ECorp\\\",\\\"firstTime\\\":\\\"2023-07-23T14:49:04.700Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-23T00:56:11.917Z\\\"},\\\"augsBought\\\":[\\\"Hydroflame Left Arm\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"ECorp HVMind Implant\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"BitRunners Neurolink\\\",\\\"Xanipher\\\",\\\"Artificial Bio-neural Network Implant\\\",\\\"Neotra\\\",\\\"Synthetic Heart\\\",\\\"OmniTek InfoLoad\\\",\\\"SmartJaw\\\",\\\"HyperSight Corneal Implant\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"Neural Accelerator\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"Synfibril Muscle\\\"],\\\"moneySpent\\\":{\\\"augments\\\":3523374747269026.5,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":11334270935597.5,\\\"lastSaved\\\":\\\"2023-07-23T16:59:30.520Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":85453.09018885919,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-23T01:53:57.167Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$2,308,060,639,891.18\\\",\\\"moneyRightNow\\\":\\\"$233,863,763,984.28\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,059,000,000.00\\\",\\\"time\\\":\\\"2023-07-23T02:07:05.581Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$2,308,060,639,891.18\\\",\\\"moneyRightNow\\\":\\\"$1,837,790,952,925.58\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,059,000,000.00\\\",\\\"time\\\":\\\"2023-07-23T02:07:10.071Z\\\"}}\"}}],[\"analytics/2023-07-23-12-00-Daedalus-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-23-12-00-Daedalus-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-23T17:00:28.477Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-23T17:00:28.477Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Daedalus\\\",\\\"firstTime\\\":\\\"2023-07-23T17:00:28.477Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":7500000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-23T17:00:28.477Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"PCMatrix\\\",\\\"The Red Pill\\\"],\\\"moneySpent\\\":{\\\"augments\\\":133051500000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":45584400824051.39,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":40791342748081.83,\\\"lastSaved\\\":\\\"2023-07-23T17:00:34.804Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":7500000,\\\"currentFactionRep\\\":7500126.051371851,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-23T17:00:30.625Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$84,474,904,563,461.88\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$133,051,500,000.00\\\",\\\"time\\\":\\\"2023-07-23T17:00:30.625Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$86,508,795,072,133.22\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$133,051,500,000.00\\\",\\\"time\\\":\\\"2023-07-23T17:00:34.804Z\\\"}}\"}}],[\"analytics/end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-23T17:03:10.432Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-23T17:03:10.432Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Illuminati\\\",\\\"firstTime\\\":\\\"2023-07-23T17:03:10.432Z\\\"},{\\\"factionToMax\\\":\\\"CyberSec\\\",\\\"firstTime\\\":\\\"2023-07-24T11:47:54.128Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5625000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-23T17:03:10.432Z\\\"},\\\"augsBought\\\":[],\\\"moneySpent\\\":{\\\"augments\\\":0,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":0,\\\"lastSaved\\\":\\\"2023-07-24T11:49:16.382Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5625000,\\\"currentFactionRep\\\":5625265.904895162,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-23T17:03:12.454Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$13,900,414,011,565,530.00\\\",\\\"moneyRightNow\\\":\\\"$228,017,966,566,475.30\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$75,000,285,000,000.00\\\",\\\"time\\\":\\\"2023-07-23T17:03:12.454Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$13,900,414,011,565,530.00\\\",\\\"moneyRightNow\\\":\\\"$231,548,724,433,651.28\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$75,000,285,000,000.00\\\",\\\"time\\\":\\\"2023-07-23T17:03:16.593Z\\\"}}\"}}],[\"contracts/2023-07-23T16:59:33.190Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-23T16:59:33.190Z.txt\",\"text\":\"[{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T15:25:43.759Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T15:25:43.759Z.txt\",\"text\":\"[{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T16:11:41.072Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T16:11:41.072Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T16:28:22.611Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T16:28:22.611Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T17:40:18.455Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T17:40:18.455Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T18:07:17.894Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T18:07:17.894Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T18:23:10.151Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T18:23:10.151Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T19:23:40.991Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T19:23:40.991Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"data/memoryStarvedQueue.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/memoryStarvedQueue.txt\",\"text\":\"[[\\\"johnson-ortho\\\",{\\\"name\\\":\\\"johnson-ortho\\\",\\\"moneyThreshhold\\\":59768275.5,\\\"securityThreshholdTarget\\\":21,\\\"hackDifficulty\\\":49,\\\"moneyAvailable\\\":15938206.8,\\\"minDifficulty\\\":16,\\\"pids\\\":[62],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":135}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}]]\"}}],[\"data/ramObservations.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/ramObservations.txt\",\"text\":\"[21558.25]\"}}],[\"data/factionToMax.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/factionToMax.txt\",\"text\":\"CyberSec\"}}],[\"data/enviroment.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/enviroment.txt\",\"text\":\"[{\\\"name\\\":\\\"n00dles\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"n00dles\\\",\\\"ip\\\":\\\"42.0.6.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":3.5,\\\"maxRam\\\":4,\\\"organizationName\\\":\\\"Noodle Bar\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":4.002000000000001,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":51513,\\\"moneyMax\\\":70000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":3000}},{\\\"name\\\":\\\"foodnstuff\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"foodnstuff\\\",\\\"ip\\\":\\\"10.5.2.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"FoodNStuff\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":10,\\\"hackDifficulty\\\":35.056000000000004,\\\"minDifficulty\\\":3,\\\"moneyAvailable\\\":172456.88650306631,\\\"moneyMax\\\":2000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":5}},{\\\"name\\\":\\\"sigma-cosmetics\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"sigma-cosmetics\\\",\\\"ip\\\":\\\"0.6.7.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Sigma Cosmetics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":10,\\\"hackDifficulty\\\":3.972,\\\"minDifficulty\\\":3,\\\"moneyAvailable\\\":614428.1638694205,\\\"moneyMax\\\":2300000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":5,\\\"serverGrowth\\\":10}},{\\\"name\\\":\\\"joesguns\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"joesguns\\\",\\\"ip\\\":\\\"13.4.5.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Joe's Guns\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":93.8,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":2500000,\\\"moneyMax\\\":2500000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":10,\\\"serverGrowth\\\":20}},{\\\"name\\\":\\\"hong-fang-tea\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"hong-fang-tea\\\",\\\"ip\\\":\\\"87.8.6.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"HongFang Teahouse\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":100,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":2964371.164055575,\\\"moneyMax\\\":3000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":30,\\\"serverGrowth\\\":20}},{\\\"name\\\":\\\"harakiri-sushi\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"harakiri-sushi\\\",\\\"ip\\\":\\\"94.1.4.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"HaraKiri Sushi Bar Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":61.202,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":4000000,\\\"moneyMax\\\":4000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":40,\\\"serverGrowth\\\":40}},{\\\"name\\\":\\\"iron-gym\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"iron-gym\\\",\\\"ip\\\":\\\"64.9.4.4\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Iron Gym Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":30,\\\"hackDifficulty\\\":10,\\\"minDifficulty\\\":10,\\\"moneyAvailable\\\":11250584.134062514,\\\"moneyMax\\\":20000000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":100,\\\"serverGrowth\\\":20}},{\\\"name\\\":\\\"darkweb\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"darkweb\\\",\\\"ip\\\":\\\"84.2.1.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"darkweb\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"CLOUD-000\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"CLOUD-000\\\",\\\"ip\\\":\\\"0.7.4.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":65535.75,\\\"maxRam\\\":65536,\\\"organizationName\\\":\\\"\\\",\\\"purchasedByPlayer\\\":true,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"zer0\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"zer0\\\",\\\"ip\\\":\\\"45.3.0.8\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"ZER0 Nightclub\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":25,\\\"hackDifficulty\\\":8.968,\\\"minDifficulty\\\":8,\\\"moneyAvailable\\\":4440347.868540766,\\\"moneyMax\\\":7500000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":75,\\\"serverGrowth\\\":40}},{\\\"name\\\":\\\"nectar-net\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"nectar-net\\\",\\\"ip\\\":\\\"83.6.6.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Nectar Nightclub Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":20,\\\"hackDifficulty\\\":72.69600000000003,\\\"minDifficulty\\\":7,\\\"moneyAvailable\\\":2154131.5703422353,\\\"moneyMax\\\":2750000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":20,\\\"serverGrowth\\\":25}},{\\\"name\\\":\\\"silver-helix\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"silver-helix\\\",\\\"ip\\\":\\\"10.5.6.0\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":63,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Silver Helix\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":30,\\\"hackDifficulty\\\":10,\\\"minDifficulty\\\":10,\\\"moneyAvailable\\\":18107737.383234084,\\\"moneyMax\\\":45000000,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":150,\\\"serverGrowth\\\":30}},{\\\"name\\\":\\\"computek\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"computek\\\",\\\"ip\\\":\\\"84.5.9.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"CompuTek\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":63,\\\"hackDifficulty\\\":63,\\\"minDifficulty\\\":21,\\\"moneyAvailable\\\":49156514.800000004,\\\"moneyMax\\\":245782574,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":399,\\\"serverGrowth\\\":52}},{\\\"name\\\":\\\"netlink\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"netlink\\\",\\\"ip\\\":\\\"32.7.0.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"NetLink Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":68,\\\"hackDifficulty\\\":68,\\\"minDifficulty\\\":23,\\\"moneyAvailable\\\":55000000,\\\"moneyMax\\\":275000000,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":418,\\\"serverGrowth\\\":60}},{\\\"name\\\":\\\"johnson-ortho\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"johnson-ortho\\\",\\\"ip\\\":\\\"46.6.3.7\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":true,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Johnson Orthopedics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":49,\\\"hackDifficulty\\\":49,\\\"minDifficulty\\\":16,\\\"moneyAvailable\\\":15938206.8,\\\"moneyMax\\\":79691034,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":3,\\\"requiredHackingSkill\\\":299,\\\"serverGrowth\\\":42}},{\\\"name\\\":\\\"avmnite-02h\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"avmnite-02h\\\",\\\"ip\\\":\\\"98.1.8.4\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":127.75,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"NiteSec\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":216,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"rothman-uni\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"rothman-uni\\\",\\\"ip\\\":\\\"39.8.4.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Rothman University\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":55,\\\"hackDifficulty\\\":55,\\\"minDifficulty\\\":18,\\\"moneyAvailable\\\":35412301.800000004,\\\"moneyMax\\\":177061509,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":413,\\\"serverGrowth\\\":39}},{\\\"name\\\":\\\"alpha-ent\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"alpha-ent\\\",\\\"ip\\\":\\\"0.4.0.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Alpha Enterprises\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":53,\\\"hackDifficulty\\\":53,\\\"minDifficulty\\\":18,\\\"moneyAvailable\\\":137469858.6,\\\"moneyMax\\\":687349293,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":502,\\\"serverGrowth\\\":58}},{\\\"name\\\":\\\"aevum-police\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"aevum-police\\\",\\\"ip\\\":\\\"97.8.4.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Aevum Police Headquarters\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":75,\\\"hackDifficulty\\\":75,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":41959730.6,\\\"moneyMax\\\":209798653,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":427,\\\"serverGrowth\\\":39}},{\\\"name\\\":\\\"galactic-cyber\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"galactic-cyber\\\",\\\"ip\\\":\\\"31.7.7.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Galactic Cybersystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":60,\\\"hackDifficulty\\\":60,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":157845129.8,\\\"moneyMax\\\":789225649,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":837,\\\"serverGrowth\\\":75}},{\\\"name\\\":\\\"unitalife\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"unitalife\\\",\\\"ip\\\":\\\"5.4.0.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"UnitaLife Group\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":79,\\\"hackDifficulty\\\":79,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":208695086.60000002,\\\"moneyMax\\\":1043475433,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":782,\\\"serverGrowth\\\":75}},{\\\"name\\\":\\\"icarus\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"icarus\\\",\\\"ip\\\":\\\"18.5.1.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Icarus Microsystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":87,\\\"hackDifficulty\\\":87,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":180810429.60000002,\\\"moneyMax\\\":904052148,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":859,\\\"serverGrowth\\\":87}},{\\\"name\\\":\\\"univ-energy\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"univ-energy\\\",\\\"ip\\\":\\\"56.1.1.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Universal Energy\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":89,\\\"hackDifficulty\\\":89,\\\"minDifficulty\\\":30,\\\"moneyAvailable\\\":223326967.8,\\\"moneyMax\\\":1116634839,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":831,\\\"serverGrowth\\\":81}},{\\\"name\\\":\\\"solaris\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"solaris\\\",\\\"ip\\\":\\\"72.8.9.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Solaris Space Systems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":70,\\\"hackDifficulty\\\":70,\\\"minDifficulty\\\":23,\\\"moneyAvailable\\\":159280367.6,\\\"moneyMax\\\":796401838,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":839,\\\"serverGrowth\\\":73}},{\\\"name\\\":\\\"taiyang-digital\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"taiyang-digital\\\",\\\"ip\\\":\\\"68.6.2.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Taiyang Digital\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":77,\\\"hackDifficulty\\\":77,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":172440843.4,\\\"moneyMax\\\":862204217,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":875,\\\"serverGrowth\\\":80}},{\\\"name\\\":\\\"titan-labs\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"titan-labs\\\",\\\"ip\\\":\\\"95.6.0.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Titan Laboratories\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":72,\\\"hackDifficulty\\\":72,\\\"minDifficulty\\\":24,\\\"moneyAvailable\\\":154487552.4,\\\"moneyMax\\\":772437762,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":865,\\\"serverGrowth\\\":74}},{\\\"name\\\":\\\"run4theh111z\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"run4theh111z\\\",\\\"ip\\\":\\\"2.4.5.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"The Runners\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":520,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"fulcrumtech\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"fulcrumtech\\\",\\\"ip\\\":\\\"46.2.3.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":1024,\\\"organizationName\\\":\\\"Fulcrum Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":94,\\\"hackDifficulty\\\":94,\\\"minDifficulty\\\":31,\\\"moneyAvailable\\\":340802285.40000004,\\\"moneyMax\\\":1704011427,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1036,\\\"serverGrowth\\\":91}},{\\\"name\\\":\\\"helios\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"helios\\\",\\\"ip\\\":\\\"61.6.9.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Helios Labs\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":94,\\\"hackDifficulty\\\":94,\\\"minDifficulty\\\":31,\\\"moneyAvailable\\\":125210190.60000001,\\\"moneyMax\\\":626050953,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":861,\\\"serverGrowth\\\":73}},{\\\"name\\\":\\\"vitalife\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"vitalife\\\",\\\"ip\\\":\\\"99.7.9.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"VitaLife\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":87,\\\"hackDifficulty\\\":87,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":158737226.8,\\\"moneyMax\\\":793686134,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":784,\\\"serverGrowth\\\":68}},{\\\"name\\\":\\\"kuai-gong\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"vitalife\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"kuai-gong\\\",\\\"ip\\\":\\\"26.1.2.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"KuaiGong International\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":95,\\\"hackDifficulty\\\":95,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":5980051534.400001,\\\"moneyMax\\\":29900257672,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1082,\\\"serverGrowth\\\":93}},{\\\"name\\\":\\\"clarkinc\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"vitalife\\\",\\\"kuai-gong\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"clarkinc\\\",\\\"ip\\\":\\\"25.5.9.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Clarke Incorporated\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":55,\\\"hackDifficulty\\\":55,\\\"minDifficulty\\\":18,\\\"moneyAvailable\\\":4799026376,\\\"moneyMax\\\":23995131880,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1024,\\\"serverGrowth\\\":62}},{\\\"name\\\":\\\"powerhouse-fitness\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"vitalife\\\",\\\"kuai-gong\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"powerhouse-fitness\\\",\\\"ip\\\":\\\"43.4.6.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Powerhouse Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":60,\\\"hackDifficulty\\\":60,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":180000000,\\\"moneyMax\\\":900000000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1012,\\\"serverGrowth\\\":56}},{\\\"name\\\":\\\"4sigma\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"helios\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"4sigma\\\",\\\"ip\\\":\\\"81.0.7.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Four Sigma\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":70,\\\"hackDifficulty\\\":70,\\\"minDifficulty\\\":23,\\\"moneyAvailable\\\":3338986017.4,\\\"moneyMax\\\":16694930087,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1032,\\\"serverGrowth\\\":95}},{\\\"name\\\":\\\"b-and-a\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"helios\\\",\\\"4sigma\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"b-and-a\\\",\\\"ip\\\":\\\"73.2.5.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Bachman & Associates\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":75,\\\"hackDifficulty\\\":75,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":3866198594.6000004,\\\"moneyMax\\\":19330992973,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1090,\\\"serverGrowth\\\":77}},{\\\"name\\\":\\\"megacorp\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"helios\\\",\\\"4sigma\\\",\\\"b-and-a\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"megacorp\\\",\\\"ip\\\":\\\"85.5.4.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"MegaCorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":9031935412.6,\\\"moneyMax\\\":45159677063,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1301,\\\"serverGrowth\\\":99}},{\\\"name\\\":\\\"fulcrumassets\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"helios\\\",\\\"4sigma\\\",\\\"b-and-a\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"fulcrumassets\\\",\\\"ip\\\":\\\"3.7.1.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Fulcrum Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":200000,\\\"moneyMax\\\":1000000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1386,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"omnitek\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"omnitek\\\",\\\"ip\\\":\\\"57.8.8.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":512,\\\"organizationName\\\":\\\"OmniTek Incorporated\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":96,\\\"hackDifficulty\\\":96,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":3965703763,\\\"moneyMax\\\":19828518815,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1022,\\\"serverGrowth\\\":96}},{\\\"name\\\":\\\"blade\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"omnitek\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"blade\\\",\\\"ip\\\":\\\"71.7.6.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Blade Industries\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":96,\\\"hackDifficulty\\\":96,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":5902648362.8,\\\"moneyMax\\\":29513241814,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1189,\\\"serverGrowth\\\":62}},{\\\"name\\\":\\\"ecorp\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"omnitek\\\",\\\"blade\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"ecorp\\\",\\\"ip\\\":\\\"25.6.8.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"ECorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":12580011794.2,\\\"moneyMax\\\":62900058971,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1177,\\\"serverGrowth\\\":99}},{\\\"name\\\":\\\"The-Cave\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"omnitek\\\",\\\"blade\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"The-Cave\\\",\\\"ip\\\":\\\"66.2.3.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Helios\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":925,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"stormtech\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"titan-labs\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"stormtech\\\",\\\"ip\\\":\\\"45.6.9.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Storm Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":87,\\\"hackDifficulty\\\":87,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":207393733.20000002,\\\"moneyMax\\\":1036968666,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":996,\\\"serverGrowth\\\":83}},{\\\"name\\\":\\\".\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"titan-labs\\\",\\\"stormtech\\\"],\\\"server\\\":{\\\"hostname\\\":\\\".\\\",\\\"ip\\\":\\\"21.5.4.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\".\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":515,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"nwo\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"titan-labs\\\",\\\"stormtech\\\",\\\".\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"nwo\\\",\\\"ip\\\":\\\"6.9.4.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"NWO\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":5668064556.6,\\\"moneyMax\\\":28340322783,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1268,\\\"serverGrowth\\\":94}},{\\\"name\\\":\\\"I.I.I.I\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"I.I.I.I\\\",\\\"ip\\\":\\\"3.7.8.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"I.I.I.I\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":342,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"millenium-fitness\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"millenium-fitness\\\",\\\"ip\\\":\\\"19.8.7.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Millenium Fitness Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":55,\\\"hackDifficulty\\\":55,\\\"minDifficulty\\\":18,\\\"moneyAvailable\\\":50000000,\\\"moneyMax\\\":250000000,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":507,\\\"serverGrowth\\\":31}},{\\\"name\\\":\\\"snap-fitness\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"snap-fitness\\\",\\\"ip\\\":\\\"10.7.3.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Snap Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":45,\\\"hackDifficulty\\\":45,\\\"minDifficulty\\\":15,\\\"moneyAvailable\\\":90000000,\\\"moneyMax\\\":450000000,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":769,\\\"serverGrowth\\\":45}},{\\\"name\\\":\\\"omnia\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"omnia\\\",\\\"ip\\\":\\\"51.5.4.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Omnia Cybersystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":95,\\\"hackDifficulty\\\":95,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":186407601.8,\\\"moneyMax\\\":932038009,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":918,\\\"serverGrowth\\\":63}},{\\\"name\\\":\\\"defcomm\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"defcomm\\\",\\\"ip\\\":\\\"11.9.7.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"DefComm\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":86,\\\"hackDifficulty\\\":86,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":184069765.20000002,\\\"moneyMax\\\":920348826,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":893,\\\"serverGrowth\\\":69}},{\\\"name\\\":\\\"zeus-med\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"zeus-med\\\",\\\"ip\\\":\\\"75.9.5.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Zeus Medical\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":87,\\\"hackDifficulty\\\":87,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":289543677,\\\"moneyMax\\\":1447718385,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":817,\\\"serverGrowth\\\":76}},{\\\"name\\\":\\\"infocomm\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"zeus-med\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"infocomm\\\",\\\"ip\\\":\\\"10.3.9.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"InfoComm\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":83,\\\"hackDifficulty\\\":83,\\\"minDifficulty\\\":28,\\\"moneyAvailable\\\":160029464,\\\"moneyMax\\\":800147320,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":926,\\\"serverGrowth\\\":64}},{\\\"name\\\":\\\"nova-med\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"zeus-med\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"nova-med\\\",\\\"ip\\\":\\\"16.3.9.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Nova Medical\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":72,\\\"hackDifficulty\\\":72,\\\"minDifficulty\\\":24,\\\"moneyAvailable\\\":231833219.4,\\\"moneyMax\\\":1159166097,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":804,\\\"serverGrowth\\\":68}},{\\\"name\\\":\\\"microdyne\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"zeus-med\\\",\\\"infocomm\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"microdyne\\\",\\\"ip\\\":\\\"73.9.2.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Microdyne Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":72,\\\"hackDifficulty\\\":72,\\\"minDifficulty\\\":24,\\\"moneyAvailable\\\":107483560.2,\\\"moneyMax\\\":537417801,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":828,\\\"serverGrowth\\\":79}},{\\\"name\\\":\\\"applied-energetics\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"zeus-med\\\",\\\"infocomm\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"applied-energetics\\\",\\\"ip\\\":\\\"43.3.4.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Applied Energetics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":63,\\\"hackDifficulty\\\":63,\\\"minDifficulty\\\":21,\\\"moneyAvailable\\\":170924266.20000002,\\\"moneyMax\\\":854621331,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":791,\\\"serverGrowth\\\":75}},{\\\"name\\\":\\\"zb-def\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"defcomm\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"zb-def\\\",\\\"ip\\\":\\\"60.3.0.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"ZB Defense Industries\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":62,\\\"hackDifficulty\\\":62,\\\"minDifficulty\\\":21,\\\"moneyAvailable\\\":209964880.60000002,\\\"moneyMax\\\":1049824403,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":777,\\\"serverGrowth\\\":68}},{\\\"name\\\":\\\"syscore\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"computek\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"syscore\\\",\\\"ip\\\":\\\"41.2.7.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"SysCore Securities\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":65,\\\"hackDifficulty\\\":65,\\\"minDifficulty\\\":22,\\\"moneyAvailable\\\":117846055.4,\\\"moneyMax\\\":589230277,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":578,\\\"serverGrowth\\\":67}},{\\\"name\\\":\\\"CSEC\\\",\\\"lineage\\\":[\\\"joesguns\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"CSEC\\\",\\\"ip\\\":\\\"88.9.6.0\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":7,\\\"maxRam\\\":8,\\\"organizationName\\\":\\\"CyberSec\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":60,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"neo-net\\\",\\\"lineage\\\":[\\\"joesguns\\\",\\\"CSEC\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"neo-net\\\",\\\"ip\\\":\\\"72.1.9.8\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Neo Nightclub Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":25,\\\"hackDifficulty\\\":52.24400000000002,\\\"minDifficulty\\\":8,\\\"moneyAvailable\\\":48994.90042242674,\\\"moneyMax\\\":5000000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":50,\\\"serverGrowth\\\":25}},{\\\"name\\\":\\\"omega-net\\\",\\\"lineage\\\":[\\\"joesguns\\\",\\\"CSEC\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"omega-net\\\",\\\"ip\\\":\\\"37.8.2.8\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Omega Software\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":28,\\\"hackDifficulty\\\":16.584000000000007,\\\"minDifficulty\\\":9,\\\"moneyAvailable\\\":69977499,\\\"moneyMax\\\":69977499,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":202,\\\"serverGrowth\\\":38}},{\\\"name\\\":\\\"crush-fitness\\\",\\\"lineage\\\":[\\\"joesguns\\\",\\\"CSEC\\\",\\\"neo-net\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"crush-fitness\\\",\\\"ip\\\":\\\"39.2.4.5\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Crush Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":42,\\\"hackDifficulty\\\":16.69199999999999,\\\"minDifficulty\\\":14,\\\"moneyAvailable\\\":17103457.52328664,\\\"moneyMax\\\":49686168,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":225,\\\"serverGrowth\\\":28}},{\\\"name\\\":\\\"catalyst\\\",\\\"lineage\\\":[\\\"joesguns\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"crush-fitness\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"catalyst\\\",\\\"ip\\\":\\\"50.6.8.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Catalyst Ventures\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":66,\\\"hackDifficulty\\\":66,\\\"minDifficulty\\\":22,\\\"moneyAvailable\\\":77010199,\\\"moneyMax\\\":385050995,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":424,\\\"serverGrowth\\\":28}}]\"}}],[\"data/ramNeededToStartBatches.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/ramNeededToStartBatches.txt\",\"text\":\"38457\"}}],[\"data/ramToReserveOnHome.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/ramToReserveOnHome.txt\",\"text\":\"{\\\"ramToReserve\\\":1027.7,\\\"ramToReserveInLimitedEnvironment\\\":16.55,\\\"earlyGameLimiter\\\":\\\"scripts/stock/invest-in-stocks.js\\\"}\"}}],[\"data/ownedAugs.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/ownedAugs.txt\",\"text\":\"[]\"}}],[\"data/scriptsToRun.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/scriptsToRun.txt\",\"text\":\"[\\\"scripts/hacking/hack-all-machines.js\\\",\\\"scripts/precalculate-important-data.js\\\",\\\"scripts/script-registry.js\\\",\\\"scripts/stock/get-stock-quotes.js\\\",\\\"scripts/stock/second-part-of-quotes.js\\\",\\\"scripts/stock/populate-forecast.js\\\",\\\"scripts/stock/invest-in-stocks.js\\\",\\\"scripts/stock/buy-4s.js\\\",\\\"scripts/contracts/get.js\\\",\\\"scripts/contracts/populate-input.js\\\",\\\"scripts/contracts/populate-description.js\\\",\\\"scripts/contracts/do.js\\\",\\\"scripts/contracts/save-contracts-for-thomas.js\\\",\\\"scripts/singularity/apply-to-jobs.js\\\",\\\"scripts/singularity/do-work-get-augments.js\\\",\\\"scripts/singularity/backdoor-all-machines.js\\\",\\\"scripts/singularity/join-organziations.js\\\",\\\"scripts/singularity/do-work.js\\\",\\\"scripts/singularity/finish-round.js\\\",\\\"scripts/singularity/finish-bitnode.js\\\",\\\"scripts/singularity/study-computer-science.js\\\",\\\"scripts/singularity/create-early-programs.js\\\",\\\"scripts/singularity/do-job.js\\\",\\\"scripts/singularity/buy-rep.js\\\",\\\"scripts/singularity/workout.js\\\",\\\"scripts/singularity/upgade-home-machine.js\\\",\\\"scripts/singularity/travel-to-get-augs.js\\\",\\\"scripts/investments/invest-in-nodes.js\\\",\\\"scripts/investments/purchase-server.js\\\",\\\"scripts/investments/invest-in-programs.js\\\",\\\"scripts/corporations/invest.js\\\",\\\"scripts/corporations/start-company.js\\\",\\\"scripts/corporations/get-corporate-info.js\\\",\\\"scripts/corporations/add-supporting-material.js\\\",\\\"scripts/corporations/upgrade-offices.js\\\",\\\"scripts/corporations/upgrade-warehouse.js\\\",\\\"scripts/corporations/expand.js\\\",\\\"scripts/corporations/product-management.js\\\",\\\"scripts/corporations/research.js\\\",\\\"scripts/corporations/tea-party.js\\\",\\\"scripts/corporations/adjust-prices-export.js\\\",\\\"scripts/corporations/get-investments.js\\\",\\\"scripts/corporations/bribe-factions.js\\\"]\"}}],[\"data/latestQuotes.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/latestQuotes.txt\",\"text\":\"[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15932.72522652629,\\\"ask\\\":15964.62257432714,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":15948.673900426717,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32613917249646884,\\\"bias\\\":0.17386082750353116},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27949.307362299136,\\\"ask\\\":28230.204923729278,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":28089.75614301421,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6522358414868995,\\\"bias\\\":0.1522358414868995},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":73899.53289049992,\\\"ask\\\":74642.24176377126,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":74270.8873271356,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3655428256983228,\\\"bias\\\":0.1344571743016772},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":20638.474884902014,\\\"ask\\\":20721.194223118055,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":20679.834554010034,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3383573392740533,\\\"bias\\\":0.16164266072594669},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21194.27813260841,\\\"ask\\\":21450.144669420584,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":21322.211401014498,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.32816603267451355,\\\"bias\\\":0.17183396732548645},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":52004.71651565269,\\\"ask\\\":52422.42508204347,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":52213.57079884808,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6204684031971764,\\\"bias\\\":0.12046840319717644},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":251086.34129904147,\\\"ask\\\":253609.82211611726,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":252348.08170757937,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5885466631144243,\\\"bias\\\":0.08854666311442427},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":58282.743717903024,\\\"ask\\\":59341.36065727966,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":58812.05218759135,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2521587611887551,\\\"bias\\\":0.24784123881124492},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6056.886419155349,\\\"ask\\\":6093.337089681861,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":6075.111754418605,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4844639685175962,\\\"bias\\\":0.01553603148240379},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5203.215384974063,\\\"ask\\\":5266.0308624586605,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":5234.623123716362,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6076452294734499,\\\"bias\\\":0.1076452294734499},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26711.815452594816,\\\"ask\\\":27142.651185701183,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":26927.233319148,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6087809327317392,\\\"bias\\\":0.10878093273173917},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3632.016014147545,\\\"ask\\\":3690.5969176015374,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":3661.306465874541,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5558928598087739,\\\"bias\\\":0.0558928598087739},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19585.46807162054,\\\"ask\\\":19703.33447927322,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":19644.401275446882,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.569628103115087,\\\"bias\\\":0.06962810311508705},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13213.535151654209,\\\"ask\\\":13480.475255728032,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":13347.00520369112,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.39063426044997995,\\\"bias\\\":0.10936573955002005},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17432.974481123467,\\\"ask\\\":17572.998372538113,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":17502.98642683079,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.4372962511826111,\\\"bias\\\":0.06270374881738888},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27709.988180812703,\\\"ask\\\":28100.66273723906,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":27905.325459025884,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.43023811100916537,\\\"bias\\\":0.06976188899083463},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":34150.30849012077,\\\"ask\\\":34770.596636258175,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":34460.45256318947,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.38017047668183457,\\\"bias\\\":0.11982952331816543},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":31385.924932606507,\\\"ask\\\":31638.020715197727,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":31511.972823902117,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41527156631448164,\\\"bias\\\":0.08472843368551836},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":12978.778502316942,\\\"ask\\\":13109.218487264849,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":13043.998494790896,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5518455527375374,\\\"bias\\\":0.05184555273753744},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":57541.05744926784,\\\"ask\\\":58586.20279143415,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":58063.630120351,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2987256,\\\"averageShortPrice\\\":110015.92973946211,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.32126023147741506,\\\"bias\\\":0.17873976852258494},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":12384.954307384689,\\\"ask\\\":12635.155404503572,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":12510.05485594413,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.54099517698737,\\\"bias\\\":0.040995176987369986},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2377.551568916106,\\\"ask\\\":2396.6483686664365,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":2387.0999687912713,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4615390520169981,\\\"bias\\\":0.038460947983001925},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":141705.3420295776,\\\"ask\\\":145729.4288214926,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":143717.3854255351,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5787967119034918,\\\"bias\\\":0.0787967119034918},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":191.3309396048161,\\\"ask\\\":194.02845536963724,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":192.6796974872267,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3181499465589219,\\\"bias\\\":0.18185005344107807},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13379.58696987528,\\\"ask\\\":13595.386759711979,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":13487.48686479363,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5575785041607465,\\\"bias\\\":0.0575785041607465},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":26.980318184685167,\\\"ask\\\":27.306036311663256,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":27.14317724817421,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5761842257977904,\\\"bias\\\":0.07618422579779038},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1299.7885266352134,\\\"ask\\\":1328.7019215654202,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":1314.2452241003168,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5666457625979535,\\\"bias\\\":0.06664576259795352},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5348.847628594503,\\\"ask\\\":5446.001268669881,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":5397.424448632192,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.559104828175239,\\\"bias\\\":0.05910482817523899},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":42414.54157282545,\\\"ask\\\":43358.03996979426,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":42886.29077130986,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42232904030050944,\\\"bias\\\":0.07767095969949056},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":33.14536297168087,\\\"ask\\\":33.61266919686066,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":33.379016084270766,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5572331233666297,\\\"bias\\\":0.05723312336662967},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":384.6217965993587,\\\"ask\\\":391.60786354061844,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":388.11483006998856,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.6310688067855623,\\\"bias\\\":0.13106880678556232},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":6915.361797407664,\\\"ask\\\":6970.906872085638,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":6943.134334746651,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.5792253476961389,\\\"bias\\\":0.07922534769613887},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22889.12268544374,\\\"ask\\\":23026.87066549656,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":22957.996675470153,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.4042943963935216,\\\"bias\\\":0.0957056036064784}]\"}}],[\"data/stockHistory.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/stockHistory.txt\",\"text\":\"[[\\\"ECP\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15606.417256844792,\\\"ask\\\":15637.661335437071,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":15622.039296140932,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6730501672995932,\\\"bias\\\":0.17305016729959322},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15630.606057531866,\\\"ask\\\":15661.898562151548,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":15646.252309841708,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6733183823509266,\\\"bias\\\":0.17331838235092656},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15671.080341517907,\\\"ask\\\":15702.453875735158,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":15686.767108626533,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6728695873776893,\\\"bias\\\":0.17286958737768932},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15702.911989303739,\\\"ask\\\":15734.349250543584,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":15718.630619923662,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6732207261440263,\\\"bias\\\":0.17322072614402628},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15702.911989303739,\\\"ask\\\":15734.349250543584,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":15775.997909912512,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6738529188501892,\\\"bias\\\":0.17385291885018916},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15760.2219120026,\\\"ask\\\":15791.773907822422,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":15835.27794492552,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6731996475214653,\\\"bias\\\":0.17319964752146533},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15763.79704163099,\\\"ask\\\":15795.356194867489,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":15779.57661824924,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6725882591185818,\\\"bias\\\":0.17258825911858178},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15804.4436841521,\\\"ask\\\":15836.0842120483,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":15820.2639481002,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3278567563337998,\\\"bias\\\":0.1721432436662002},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15859.229024787111,\\\"ask\\\":15890.979233044942,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":15875.104128916028,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3272600300946013,\\\"bias\\\":0.1727399699053987},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15844.59773477999,\\\"ask\\\":15876.318651165933,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":15860.458192972963,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32710051777135946,\\\"bias\\\":0.17289948222864054},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15823.320267925508,\\\"ask\\\":15854.998586780212,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":15839.15942735286,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3273330140452126,\\\"bias\\\":0.1726669859547874},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15858.128864157652,\\\"ask\\\":15889.876869891701,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":15874.002867024677,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3269531762302057,\\\"bias\\\":0.1730468237697943},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15923.169361235472,\\\"ask\\\":15955.047578174881,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":15939.108469705177,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32624344234343156,\\\"bias\\\":0.17375655765656844},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15920.33374241043,\\\"ask\\\":15952.206282435272,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":15936.270012422852,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3262743906497822,\\\"bias\\\":0.1737256093502178},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15932.72522652629,\\\"ask\\\":15964.62257432714,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":15948.673900426717,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32613917249646884,\\\"bias\\\":0.17386082750353116}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[15622.039296140932,15646.252309841708,15686.767108626533,15718.630619923662,15775.997909912512,15835.27794492552,15779.57661824924,15820.2639481002,15875.104128916028,15860.458192972963,15839.15942735286,15874.002867024677,15939.108469705177,15936.270012422852,15948.673900426717]}],[\\\"MGCP\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28244.056216456764,\\\"ask\\\":28527.91607792869,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":28385.98614719273,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.34684588892225043,\\\"bias\\\":0.15315411107774957},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28200.3477483462,\\\"ask\\\":28483.76832873159,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":28342.058038538897,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3470832665475117,\\\"bias\\\":0.1529167334524883},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28127.51365788163,\\\"ask\\\":28410.202237357826,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":28268.85794761973,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.34747923297857597,\\\"bias\\\":0.15252076702142403},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28070.49588255061,\\\"ask\\\":28352.611419058656,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":28211.553650804635,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3471694274495348,\\\"bias\\\":0.15283057255046523},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28070.49588255061,\\\"ask\\\":28352.611419058656,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":28314.515570227206,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3477272035043745,\\\"bias\\\":0.15227279649562547},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28172.94299237607,\\\"ask\\\":28456.08814807834,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":28420.910454656343,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3471550218421218,\\\"bias\\\":0.15284497815787818},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28179.33388736305,\\\"ask\\\":28462.543273165687,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":28320.93858026437,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3476945590087499,\\\"bias\\\":0.1523054409912501},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28251.993748941935,\\\"ask\\\":28535.933384609692,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":28393.963566775816,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.652698157593579,\\\"bias\\\":0.15269815759357896},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28154.397888592426,\\\"ask\\\":28437.3566613421,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":28295.877274967264,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6532274783811555,\\\"bias\\\":0.15322747838115547},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28180.39634985848,\\\"ask\\\":28463.61641367615,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":28322.006381767318,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6530859843709709,\\\"bias\\\":0.15308598437097087},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28142.55332857659,\\\"ask\\\":28425.39306052208,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":28283.973194549337,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6532918376244717,\\\"bias\\\":0.15329183762447174},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28080.780418030372,\\\"ask\\\":28362.99931670404,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":28221.88986736721,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.652954621819495,\\\"bias\\\":0.15295462181949504},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27966.080393475706,\\\"ask\\\":28247.1465280835,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":28106.613460779605,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6523272940484378,\\\"bias\\\":0.1523272940484378},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27971.061516692687,\\\"ask\\\":28252.177712840352,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":28111.61961476652,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6523544255237925,\\\"bias\\\":0.15235442552379252},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27949.307362299136,\\\"ask\\\":28230.204923729278,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":28089.75614301421,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6522358414868995,\\\"bias\\\":0.1522358414868995}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[28385.98614719273,28342.058038538897,28268.85794761973,28211.553650804635,28314.515570227206,28420.910454656343,28320.93858026437,28393.963566775816,28295.877274967264,28322.006381767318,28283.973194549337,28221.88986736721,28106.613460779605,28111.61961476652,28089.75614301421]}],[\\\"BLD\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":75262.50839891925,\\\"ask\\\":76018.91551850637,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":75640.71195871281,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3675856988136079,\\\"bias\\\":0.13241430118639208},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":75069.46957954284,\\\"ask\\\":75823.93661049301,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":75446.70309501793,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3672451995332382,\\\"bias\\\":0.1327548004667618},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":75391.97490311065,\\\"ask\\\":76149.68319359416,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":75770.8290483524,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3678155263268003,\\\"bias\\\":0.1321844736731997},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":75138.75702003409,\\\"ask\\\":75893.9204071701,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":75516.33871360209,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3673700641721604,\\\"bias\\\":0.1326299358278396},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":75138.75702003409,\\\"ask\\\":75893.9204071701,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":75061.83338674264,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3681731489039733,\\\"bias\\\":0.1318268510960267},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74686.52421980893,\\\"ask\\\":75437.14255367634,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":75529.78501516559,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3673513119349452,\\\"bias\\\":0.1326486880650548},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74714.56797721816,\\\"ask\\\":75465.46815789372,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":75090.01806755594,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.366574450906595,\\\"bias\\\":0.13342554909340498},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74396.3055312078,\\\"ask\\\":75144.00709433551,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":74770.15631277167,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3660036652834174,\\\"bias\\\":0.13399633471658262},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":73970.88723449055,\\\"ask\\\":74714.31323684723,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":74342.6002356689,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.36523303112432215,\\\"bias\\\":0.13476696887567785},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74084.21397877525,\\\"ask\\\":74828.77894338606,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":74456.49646108066,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3650265620337002,\\\"bias\\\":0.1349734379662998},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74249.49316479749,\\\"ask\\\":74995.71922675525,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":74622.60619577637,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.36532768286314016,\\\"bias\\\":0.13467231713685984},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74520.4827299262,\\\"ask\\\":75269.43230510133,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":74894.95751751377,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3648361671490222,\\\"bias\\\":0.13516383285097783},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74016.82840857547,\\\"ask\\\":74760.71613127472,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":74388.7722699251,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.36575590189001844,\\\"bias\\\":0.13424409810998156},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":73994.96247517204,\\\"ask\\\":74738.63043974663,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":74366.79645745934,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.36571623199343506,\\\"bias\\\":0.13428376800656494},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":73899.53289049992,\\\"ask\\\":74642.24176377126,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":74270.8873271356,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3655428256983228,\\\"bias\\\":0.1344571743016772}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[75640.71195871281,75446.70309501793,75770.8290483524,75516.33871360209,75061.83338674264,75529.78501516559,75090.01806755594,74770.15631277167,74342.6002356689,74456.49646108066,74622.60619577637,74894.95751751377,74388.7722699251,74366.79645745934,74270.8873271356]}],[\\\"CLRK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":21107.121043179326,\\\"ask\\\":21191.71872271111,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":21149.419882945218,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3388930516209506,\\\"bias\\\":0.16110694837904938},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":21057.423093580433,\\\"ask\\\":21141.821582933462,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":21099.622338256948,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.338512820622837,\\\"bias\\\":0.161487179377163},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":21140.452265473545,\\\"ask\\\":21225.183537078647,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":21182.817901276096,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33787607857156826,\\\"bias\\\":0.16212392142843174},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":21205.84004414282,\\\"ask\\\":21290.83339101313,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":21248.336717577975,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3373746265232282,\\\"bias\\\":0.1626253734767718},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":21205.84004414282,\\\"ask\\\":21290.83339101313,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":21130.90380692175,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3364708520738041,\\\"bias\\\":0.16352914792619588},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":21088.641999307907,\\\"ask\\\":21173.165614535592,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":21010.684577308068,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.337406535445316,\\\"bias\\\":0.162593464554684},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":20856.555646325076,\\\"ask\\\":20940.149055729184,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":20898.35235102713,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33828050318905833,\\\"bias\\\":0.16171949681094167},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":20774.98634984844,\\\"ask\\\":20858.252828204546,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":20816.619589026493,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3389154660891191,\\\"bias\\\":0.1610845339108809},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":20665.902200576023,\\\"ask\\\":20748.731467913003,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":20707.316834244513,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33976574444484087,\\\"bias\\\":0.16023425555515913},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":20636.884188705946,\\\"ask\\\":20719.59715138613,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":20678.240670046038,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3399910536284936,\\\"bias\\\":0.16000894637150642},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":20679.1402055953,\\\"ask\\\":20762.02253106863,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":20720.581368331965,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3396634198307508,\\\"bias\\\":0.16033658016924918},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":20748.409935604523,\\\"ask\\\":20831.569895266268,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":20789.989915435395,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3391263340762899,\\\"bias\\\":0.1608736659237101},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":20619.633919347463,\\\"ask\\\":20702.277742671504,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":20660.955831009484,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33812162808105467,\\\"bias\\\":0.16187837191894533},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":20614.043028833363,\\\"ask\\\":20696.664443778584,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":20655.353736305973,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33816553233859087,\\\"bias\\\":0.16183446766140913},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":20638.474884902014,\\\"ask\\\":20721.194223118055,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":20679.834554010034,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3383573392740533,\\\"bias\\\":0.16164266072594669}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[21149.419882945218,21099.622338256948,21182.817901276096,21248.336717577975,21130.90380692175,21010.684577308068,20898.35235102713,20816.619589026493,20707.316834244513,20678.240670046038,20720.581368331965,20789.989915435395,20660.955831009484,20655.353736305973,20679.834554010034]}],[\\\"OMTK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21120.310774459762,\\\"ask\\\":21375.284345177588,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":21247.797559818675,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3293081381657801,\\\"bias\\\":0.17069186183421992},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21171.645097642573,\\\"ask\\\":21427.23839862015,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":21299.44174813136,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.32889326021755083,\\\"bias\\\":0.17110673978244917},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21086.021314513928,\\\"ask\\\":21340.580927968826,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":21213.301121241377,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.32819844889395144,\\\"bias\\\":0.17180155110604856},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21153.1875857676,\\\"ask\\\":21408.558059640047,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":21280.872822703823,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.32765120152986726,\\\"bias\\\":0.17234879847013274},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21153.1875857676,\\\"ask\\\":21408.558059640047,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":21402.669510117354,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3286376043390119,\\\"bias\\\":0.1713623956609881},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21274.25349305665,\\\"ask\\\":21531.085527178057,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":21277.290640048777,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.32964737686614837,\\\"bias\\\":0.17035262313385163},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21033.19503072886,\\\"ask\\\":21287.116902327198,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":21160.15596652803,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.32870436874627673,\\\"bias\\\":0.17129563125372327},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21118.243305134678,\\\"ask\\\":21373.19191646427,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":21245.717610799475,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3280117303796329,\\\"bias\\\":0.17198826962036712},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21004.06465254161,\\\"ask\\\":21257.634849554182,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":21130.849751047896,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.32894666317535204,\\\"bias\\\":0.17105333682464796},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":20973.6926997864,\\\"ask\\\":21226.89623338543,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":21100.294466585914,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3291943650912246,\\\"bias\\\":0.17080563490877537},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21017.920324832965,\\\"ask\\\":21271.65779354322,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":21144.789059188093,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.32883418399747455,\\\"bias\\\":0.17116581600252545},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21090.42650845492,\\\"ask\\\":21345.039303325604,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":21217.73290589026,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3294246601194255,\\\"bias\\\":0.1705753398805745},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21226.07459933397,\\\"ask\\\":21482.324996911444,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":21354.199798122707,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.32832756427849646,\\\"bias\\\":0.17167243572150354},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21220.147523331518,\\\"ask\\\":21476.32636667154,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":21348.23694500153,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3283755147261985,\\\"bias\\\":0.17162448527380147},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21194.27813260841,\\\"ask\\\":21450.144669420584,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":21322.211401014498,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.32816603267451355,\\\"bias\\\":0.17183396732548645}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[21247.797559818675,21299.44174813136,21213.301121241377,21280.872822703823,21402.669510117354,21277.290640048777,21160.15596652803,21245.717610799475,21130.849751047896,21100.294466585914,21144.789059188093,21217.73290589026,21354.199798122707,21348.23694500153,21322.211401014498]}],[\\\"FSIG\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":53403.29418815953,\\\"ask\\\":53832.23631015279,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":53617.76524915616,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6189655429297339,\\\"bias\\\":0.11896554292973394},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":53200.89854090744,\\\"ask\\\":53628.21499505127,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":53414.55676797935,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6194181313017789,\\\"bias\\\":0.11941813130177892},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":52864.8965715598,\\\"ask\\\":53289.51421470486,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":53077.20539313233,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6186591261793741,\\\"bias\\\":0.11865912617937413},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":53128.46819372307,\\\"ask\\\":53555.20287801,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":53341.835535866536,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6192507319593881,\\\"bias\\\":0.11925073195938807},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":53128.46819372307,\\\"ask\\\":53555.20287801,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":53819.682312878766,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6203190037455141,\\\"bias\\\":0.12031900374551407},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":53604.40358362725,\\\"ask\\\":54034.96104213028,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":53327.82788542836,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6214287327002692,\\\"bias\\\":0.12142873270026922},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":53574.72493506462,\\\"ask\\\":54005.04401084828,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":53789.88447295645,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.620376618858695,\\\"bias\\\":0.120376618858695},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":53237.78314009825,\\\"ask\\\":53665.39585608297,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":53451.58949809061,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6196147555421195,\\\"bias\\\":0.11961475554211953},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":52788.62776152875,\\\"ask\\\":53212.63280379002,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":53000.63028265938,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6206325052561437,\\\"bias\\\":0.12063250525614366},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":52908.27780273295,\\\"ask\\\":53333.243889501886,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":53120.76084611742,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6203590811336287,\\\"bias\\\":0.1203590811336287},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":52734.22303065041,\\\"ask\\\":53157.791087121506,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":52946.00705888596,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6207563387631305,\\\"bias\\\":0.12075633876313052},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":52451.00961475638,\\\"ask\\\":52872.30286467411,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":52661.656239715245,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6214083722595904,\\\"bias\\\":0.12140837225959045},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":51928.24446353279,\\\"ask\\\":52345.33879657322,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":52136.791630053005,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6201861459598228,\\\"bias\\\":0.1201861459598228},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":51905.55205588769,\\\"ask\\\":52322.46412059362,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":52114.008088240655,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6202386897226649,\\\"bias\\\":0.12023868972266494},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":52004.71651565269,\\\"ask\\\":52422.42508204347,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":52213.57079884808,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6204684031971764,\\\"bias\\\":0.12046840319717644}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[53617.76524915616,53414.55676797935,53077.20539313233,53341.835535866536,53819.682312878766,53327.82788542836,53789.88447295645,53451.58949809061,53000.63028265938,53120.76084611742,52946.00705888596,52661.656239715245,52136.791630053005,52114.008088240655,52213.57079884808]}],[\\\"KGI\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":242416.3292216163,\\\"ask\\\":244852.67423891893,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":243634.50173026763,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5888478777508718,\\\"bias\\\":0.08884787775087177},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":243073.8523613016,\\\"ask\\\":245516.8056513649,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":244295.32900633325,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5890888662012814,\\\"bias\\\":0.08908886620128142},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":241977.33353539155,\\\"ask\\\":244409.2665357472,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":243193.30003556938,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5886851605419892,\\\"bias\\\":0.08868516054198916},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":242837.48101083282,\\\"ask\\\":245278.05870943415,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":244057.7698601335,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5890004062546135,\\\"bias\\\":0.08900040625461347},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":242837.48101083282,\\\"ask\\\":245278.05870943415,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":245616.5336668064,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5895688397534871,\\\"bias\\\":0.08956883975348706},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":244388.45099847237,\\\"ask\\\":246844.61633514042,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":247231.66282679368,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5901578279732635,\\\"bias\\\":0.09015782797326355},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":247515.12595157337,\\\"ask\\\":250002.7151571168,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":248758.9205543451,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5896008837781025,\\\"bias\\\":0.08960088377810249},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":246403.27042340685,\\\"ask\\\":248879.68520153154,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":247641.4778124692,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5891965740553212,\\\"bias\\\":0.08919657405532122},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":247898.02423465365,\\\"ask\\\":250389.46166414762,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":249143.74294940065,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.589737666382506,\\\"bias\\\":0.08973766638250602},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":247498.0691111176,\\\"ask\\\":249985.48689112882,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":248741.77800112322,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5895926509503745,\\\"bias\\\":0.0895926509503745},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":248080.48359667193,\\\"ask\\\":250573.75478859828,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":249327.11919263512,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.589381820789557,\\\"bias\\\":0.08938182078955703},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":249035.51914993496,\\\"ask\\\":251538.38868913025,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":250286.95391953262,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5890377275524277,\\\"bias\\\":0.08903772755242767},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":250822.95823969218,\\\"ask\\\":253343.79199084482,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":252083.3751152685,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5883986640355703,\\\"bias\\\":0.08839866403557028},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":250744.8016375887,\\\"ask\\\":253264.84989525288,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":252004.8257664208,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5884262177043458,\\\"bias\\\":0.08842621770434578},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":251086.34129904147,\\\"ask\\\":253609.82211611726,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":252348.08170757937,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5885466631144243,\\\"bias\\\":0.08854666311442427}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[243634.50173026763,244295.32900633325,243193.30003556938,244057.7698601335,245616.5336668064,247231.66282679368,248758.9205543451,247641.4778124692,249143.74294940065,248741.77800112322,249327.11919263512,250286.95391953262,252083.3751152685,252004.8257664208,252348.08170757937]}],[\\\"FLCM\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":57914.53041315464,\\\"ask\\\":58966.459320759874,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":58440.49486695726,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7511367341616031,\\\"bias\\\":0.2511367341616031},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":57670.75196638489,\\\"ask\\\":58718.253011183,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":58194.502488783946,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7521983073315944,\\\"bias\\\":0.25219830733159443},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":58078.02676794194,\\\"ask\\\":59132.92533688538,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":58605.476052413665,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7504172656064688,\\\"bias\\\":0.2504172656064688},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":58399.763469946425,\\\"ask\\\":59460.50589422395,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":58930.13468208519,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7518045101401567,\\\"bias\\\":0.2518045101401567},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":58399.763469946425,\\\"ask\\\":59460.50589422395,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":59516.69898514932,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7492981602430189,\\\"bias\\\":0.24929816024301887},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":58981.048694282974,\\\"ask\\\":60052.34927601566,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":58912.95751703615,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7467433464362344,\\\"bias\\\":0.2467433464362344},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":58944.80162827786,\\\"ask\\\":60015.44383746959,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":59480.12273287373,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7443679056293877,\\\"bias\\\":0.2443679056293877},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":59359.31440667445,\\\"ask\\\":60437.48560679567,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":59898.400006735064,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.25391364564035485,\\\"bias\\\":0.24608635435964515},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":58803.38956241962,\\\"ask\\\":59871.46323761997,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":59337.4264000198,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2562401359879122,\\\"bias\\\":0.24375986401208782},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":58951.48181221829,\\\"ask\\\":60022.245356738895,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":59486.8635844786,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.25685402826420434,\\\"bias\\\":0.24314597173579566},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":58736.07679790424,\\\"ask\\\":59802.92783964215,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":59269.5023187732,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.25596232993538404,\\\"bias\\\":0.24403767006461596},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":59088.46584030842,\\\"ask\\\":60161.717490283736,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":59625.09166529608,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.25449821783337034,\\\"bias\\\":0.24550178216662966},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":58434.83534919866,\\\"ask\\\":59496.21480054636,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":58965.525074872516,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.25175212554977,\\\"bias\\\":0.24824787445023},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":58406.46366190578,\\\"ask\\\":59467.32778492727,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":58936.89572341653,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2516315359673259,\\\"bias\\\":0.2483684640326741},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":58282.743717903024,\\\"ask\\\":59341.36065727966,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":58812.05218759135,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2521587611887551,\\\"bias\\\":0.24784123881124492}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[58440.49486695726,58194.502488783946,58605.476052413665,58930.13468208519,59516.69898514932,58912.95751703615,59480.12273287373,59898.400006735064,59337.4264000198,59486.8635844786,59269.5023187732,59625.09166529608,58965.525074872516,58936.89572341653,58812.05218759135]}],[\\\"STM\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6207.038083002916,\\\"ask\\\":6244.392374375049,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":6225.715228688983,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.48044227856170957,\\\"bias\\\":0.019557721438290432},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6189.378092015289,\\\"ask\\\":6226.62610460515,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":6208.00209831022,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47988424319983003,\\\"bias\\\":0.02011575680016997},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6160.013944667312,\\\"ask\\\":6197.085242227997,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":6178.549593447655,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4808431404555864,\\\"bias\\\":0.019156859544413596},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6137.065498529053,\\\"ask\\\":6173.998691097933,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":6155.532094813493,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.48155947656042114,\\\"bias\\\":0.01844052343957886},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6137.065498529053,\\\"ask\\\":6173.998691097933,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":6114.451241628668,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.48279843064826317,\\\"bias\\\":0.017201569351736834},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6096.107887903782,\\\"ask\\\":6132.794595353554,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":6156.747450295079,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4816085263740457,\\\"bias\\\":0.01839147362595428},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6098.646122342623,\\\"ask\\\":6135.348105024725,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":6116.997113683674,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.48041338559855623,\\\"bias\\\":0.01958661440144377},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6069.8341486012105,\\\"ask\\\":6106.362739264808,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":6088.09844393301,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.48134311284645415,\\\"bias\\\":0.018656887153545854},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6108.568324461753,\\\"ask\\\":6145.330019493618,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":6126.949171977686,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4825336876304164,\\\"bias\\\":0.017466312369583625},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6118.952527689516,\\\"ask\\\":6155.7767154188405,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":6137.3646215541785,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4822367706972636,\\\"bias\\\":0.017763229302736383},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6134.099705741782,\\\"ask\\\":6171.015050009033,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":6152.557377875408,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.48267649105105653,\\\"bias\\\":0.017323508948943467},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6109.358727918416,\\\"ask\\\":6146.125179641093,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":6127.741953779755,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4833780385780827,\\\"bias\\\":0.016621961421917297},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6063.576898677791,\\\"ask\\\":6100.067832872442,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":6081.822365775117,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4846330466569419,\\\"bias\\\":0.015366953343058098},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6065.56508423775,\\\"ask\\\":6102.067983440785,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":6083.816533839267,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4846834333432951,\\\"bias\\\":0.015316566656704889},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6056.886419155349,\\\"ask\\\":6093.337089681861,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":6075.111754418605,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4844639685175962,\\\"bias\\\":0.01553603148240379}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[6225.715228688983,6208.00209831022,6178.549593447655,6155.532094813493,6114.451241628668,6156.747450295079,6116.997113683674,6088.09844393301,6126.949171977686,6137.3646215541785,6152.557377875408,6127.741953779755,6081.822365775117,6083.816533839267,6075.111754418605]}],[\\\"DCOMM\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5223.2085138196435,\\\"ask\\\":5286.265357044831,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":5254.736935432237,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3930897728705316,\\\"bias\\\":0.1069102271294684},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5211.825951443096,\\\"ask\\\":5274.745379428325,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":5243.28566543571,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.39285628227811165,\\\"bias\\\":0.10714371772188835},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5192.878511798792,\\\"ask\\\":5255.569198057932,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":5224.223854928362,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3924653432025702,\\\"bias\\\":0.1075346567974298},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5178.057901118419,\\\"ask\\\":5240.569666524275,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":5209.313783821347,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3921575580612148,\\\"bias\\\":0.10784244193878523},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5178.057901118419,\\\"ask\\\":5240.569666524275,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":5236.1035644351605,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.39271215612926946,\\\"bias\\\":0.10728784387073054},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5204.686943048549,\\\"ask\\\":5267.5201858217715,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":5208.525396584562,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3921440870614799,\\\"bias\\\":0.1078559129385201},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5151.6497363460185,\\\"ask\\\":5213.842690909552,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":5182.746213627785,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.39160760751993856,\\\"bias\\\":0.10839239248006144},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5170.3672941806535,\\\"ask\\\":5232.786215237161,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":5201.576754708907,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6079985689518882,\\\"bias\\\":0.1079985689518882},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5145.235158561897,\\\"ask\\\":5207.350673554597,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":5176.292916058247,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6085260928838147,\\\"bias\\\":0.10852609288381465},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5151.9300824252405,\\\"ask\\\":5214.126421448484,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":5183.028251936862,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6086673058520566,\\\"bias\\\":0.10866730585205664},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5161.691913269004,\\\"ask\\\":5224.006101356757,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":5192.8490073128805,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6084614040170154,\\\"bias\\\":0.10846140401701543},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5177.691913285909,\\\"ask\\\":5240.19926032759,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":5208.94558680675,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6081251998236491,\\\"bias\\\":0.1081251998236491},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5207.615050721547,\\\"ask\\\":5270.483642883176,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":5239.0493468023615,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.607500318067692,\\\"bias\\\":0.107500318067692},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5208.9220446486515,\\\"ask\\\":5271.806415408998,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":5240.364230028825,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6075272982230046,\\\"bias\\\":0.10752729822300455},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5203.215384974063,\\\"ask\\\":5266.0308624586605,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":5234.623123716362,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6076452294734499,\\\"bias\\\":0.1076452294734499}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[5254.736935432237,5243.28566543571,5224.223854928362,5209.313783821347,5236.1035644351605,5208.525396584562,5182.746213627785,5201.576754708907,5176.292916058247,5183.028251936862,5192.8490073128805,5208.94558680675,5239.0493468023615,5240.364230028825,5234.623123716362]}],[\\\"HLS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26535.802603205506,\\\"ask\\\":26963.79941938624,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":26749.801011295873,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6074494581445657,\\\"bias\\\":0.10744945814456575},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26479.83650951931,\\\"ask\\\":26906.930646769626,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":26693.38357814447,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6076765564666754,\\\"bias\\\":0.1076765564666754},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26573.337719335028,\\\"ask\\\":27001.939940614622,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":26787.638829974825,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6072963468571936,\\\"bias\\\":0.10729634685719358},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26646.94230367491,\\\"ask\\\":27076.73169566967,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":26861.83699967229,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.607593543359004,\\\"bias\\\":0.10759354335900395},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26646.94230367491,\\\"ask\\\":27076.73169566967,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":26995.522377991347,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6081290124540183,\\\"bias\\\":0.10812901245401829},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26779.558198967417,\\\"ask\\\":27211.486557015276,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":26857.90215013339,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6086830668715523,\\\"bias\\\":0.10868306687155227},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26771.287501361396,\\\"ask\\\":27203.082461060774,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":26987.184981211085,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6092062221983093,\\\"bias\\\":0.10920622219830933},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26865.41828522105,\\\"ask\\\":27298.731483369775,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":27082.074884295413,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6088222411403436,\\\"bias\\\":0.10882224114034356},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26992.410569060386,\\\"ask\\\":27427.772029851683,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":27210.091299456035,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6083078406278255,\\\"bias\\\":0.1083078406278255},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":27026.399824088097,\\\"ask\\\":27462.30949867016,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":27244.35466137913,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6084442235124583,\\\"bias\\\":0.1084442235124583},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26976.933065581783,\\\"ask\\\":27412.044889220197,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":27194.48897740099,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6086430742937111,\\\"bias\\\":0.10864307429371112},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26896.25059147983,\\\"ask\\\":27330.061084890796,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":27113.155838185314,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6083171704284773,\\\"bias\\\":0.10831717042847733},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26746.6614520906,\\\"ask\\\":27178.0592174469,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":26962.36033476875,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.608922968364586,\\\"bias\\\":0.10892296836458604},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26740.166762958674,\\\"ask\\\":27171.459775264462,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":26955.813269111568,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6088965130015688,\\\"bias\\\":0.10889651300156877},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26711.815452594816,\\\"ask\\\":27142.651185701183,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":26927.233319148,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6087809327317392,\\\"bias\\\":0.10878093273173917}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[26749.801011295873,26693.38357814447,26787.638829974825,26861.83699967229,26995.522377991347,26857.90215013339,26987.184981211085,27082.074884295413,27210.091299456035,27244.35466137913,27194.48897740099,27113.155838185314,26962.36033476875,26955.813269111568,26927.233319148]}],[\\\"VITA\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3737.1448796927757,\\\"ask\\\":3797.4214100104014,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":3767.2831448515885,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.4438550732695207,\\\"bias\\\":0.05614492673047933},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3747.1497617275286,\\\"ask\\\":3807.587661110231,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":3777.3687114188797,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.443704765109984,\\\"bias\\\":0.05629523489001598},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3763.909426345468,\\\"ask\\\":3824.6176428994277,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":3794.263534622448,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.44395655362027564,\\\"bias\\\":0.05604344637972436},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3777.1150909685557,\\\"ask\\\":3838.03630211321,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":3807.5756965408827,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.44375992536136155,\\\"bias\\\":0.05624007463863845},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3777.1150909685557,\\\"ask\\\":3838.03630211321,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":3783.723415134986,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.44411445816923106,\\\"bias\\\":0.05588554183076894},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3753.453627813906,\\\"ask\\\":3813.9932024560662,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":3759.323839892976,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.4444771785787819,\\\"bias\\\":0.055522821421218116},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3706.649033945845,\\\"ask\\\":3766.4336957836813,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":3736.541364864763,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.4441386443116601,\\\"bias\\\":0.055861355688339887},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3690.213785031341,\\\"ask\\\":3749.7333622092656,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":3719.9735736203033,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5556125637920103,\\\"bias\\\":0.055612563792010294},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3668.250110068751,\\\"ask\\\":3727.4154344246986,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":3697.8327722467247,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.555945544433546,\\\"bias\\\":0.055945544433546046},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3674.1009909435143,\\\"ask\\\":3733.360684345829,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":3703.7308376446717,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5558563109554209,\\\"bias\\\":0.055856310955420874},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3665.5871258049538,\\\"ask\\\":3724.709498801808,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":3695.148312303381,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5559860454515031,\\\"bias\\\":0.0559860454515031},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3651.7117009484614,\\\"ask\\\":3710.610276770211,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":3681.160988859336,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5561987758722734,\\\"bias\\\":0.0561987758722734},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3626.0241020426697,\\\"ask\\\":3684.508361753036,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":3655.266231897853,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5558006506604773,\\\"bias\\\":0.05580065066047735},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3627.1396475344427,\\\"ask\\\":3685.6418999140305,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":3656.3907737242366,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5558178177179844,\\\"bias\\\":0.05581781771798444},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3632.016014147545,\\\"ask\\\":3690.5969176015374,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":3661.306465874541,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5558928598087739,\\\"bias\\\":0.0558928598087739}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[3767.2831448515885,3777.3687114188797,3794.263534622448,3807.5756965408827,3783.723415134986,3759.323839892976,3736.541364864763,3719.9735736203033,3697.8327722467247,3703.7308376446717,3695.148312303381,3681.160988859336,3655.266231897853,3656.3907737242366,3661.306465874541]}],[\\\"ICRS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19661.81978317896,\\\"ask\\\":19780.145679567195,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":19720.98273137308,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.4293193021867593,\\\"bias\\\":0.07068069781324071},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19613.457072496287,\\\"ask\\\":19731.49191947219,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":19672.47449598424,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.429493586104508,\\\"bias\\\":0.070506413895492},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19532.990138970043,\\\"ask\\\":19650.540731581696,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":19591.76543527587,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.42978404009438553,\\\"bias\\\":0.07021595990561447},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19470.072399091252,\\\"ask\\\":19587.24434933653,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":19528.658374213894,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.42955713649535804,\\\"bias\\\":0.07044286350464196},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19470.072399091252,\\\"ask\\\":19587.24434933653,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":19642.04645324441,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.4291481283176766,\\\"bias\\\":0.07085187168232338},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19583.120313884676,\\\"ask\\\":19700.97259260414,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":19525.32378164686,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.42957168184451855,\\\"bias\\\":0.07042831815548145},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19576.07016034414,\\\"ask\\\":19693.880010857745,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":19634.975085600945,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.42996719676695483,\\\"bias\\\":0.07003280323304517},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19496.09468460734,\\\"ask\\\":19613.423238376286,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":19554.758961491814,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5697455197105576,\\\"bias\\\":0.06974551971055765},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19603.61193314861,\\\"ask\\\":19721.587531542682,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":19662.599732345647,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5693608864545814,\\\"bias\\\":0.06936088645458138},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19632.411294770936,\\\"ask\\\":19750.560209283096,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":19691.485752027016,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5694627834549028,\\\"bias\\\":0.06946278345490275},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19674.41052316345,\\\"ask\\\":19792.812191306857,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":19733.611357235153,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5693141830989251,\\\"bias\\\":0.06931418309892512},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19743.265602577776,\\\"ask\\\":19862.081644318463,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":19802.67362344812,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5690716023325944,\\\"bias\\\":0.06907160233259435},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19615.27687680125,\\\"ask\\\":19733.322675458025,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":19674.29977612964,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5695222911719829,\\\"bias\\\":0.06952229117198294},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19609.72023445299,\\\"ask\\\":19727.732592935154,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":19668.726413694072,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5695419911219392,\\\"bias\\\":0.06954199112193915},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19585.46807162054,\\\"ask\\\":19703.33447927322,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":19644.401275446882,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.569628103115087,\\\"bias\\\":0.06962810311508705}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[19720.98273137308,19672.47449598424,19591.76543527587,19528.658374213894,19642.04645324441,19525.32378164686,19634.975085600945,19554.758961491814,19662.599732345647,19691.485752027016,19733.611357235153,19802.67362344812,19674.29977612964,19668.726413694072,19644.401275446882]}],[\\\"UNV\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13154.657582312559,\\\"ask\\\":13420.408240541094,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":13287.532911426826,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6113436631222949,\\\"bias\\\":0.11134366312229493},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13181.07028536973,\\\"ask\\\":13447.354533559017,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":13314.212409464373,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6111201007001684,\\\"bias\\\":0.11112010070016842},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13137.002440011285,\\\"ask\\\":13402.396428698383,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":13269.699434354834,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6107473502621419,\\\"bias\\\":0.11074735026214189},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13171.57078944363,\\\"ask\\\":13437.663128624308,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":13304.616959033969,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6104559327093135,\\\"bias\\\":0.11045593270931353},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13171.57078944363,\\\"ask\\\":13437.663128624308,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":13367.520367836623,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6109781615499699,\\\"bias\\\":0.11097816154996987},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13233.845164158258,\\\"ask\\\":13501.195571514989,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":13432.590942939712,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6104379407313567,\\\"bias\\\":0.11043794073135671},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13237.730124377886,\\\"ask\\\":13505.15901577946,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":13371.444570078673,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6099329182959292,\\\"bias\\\":0.10993291829592922},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13193.659288553934,\\\"ask\\\":13460.19786003987,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":13326.928574296902,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.3896998723129603,\\\"bias\\\":0.11030012768703967},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13134.676309094611,\\\"ask\\\":13400.023305237937,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":13267.349807166274,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.3901951894424141,\\\"bias\\\":0.1098048105575859},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13118.982667205275,\\\"ask\\\":13384.01262007811,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":13251.497643641693,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.3900638349450166,\\\"bias\\\":0.10993616505498338},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13096.169332866519,\\\"ask\\\":13360.738410298165,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":13228.453871582342,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.3898723277626052,\\\"bias\\\":0.11012767223739478},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13133.490511611042,\\\"ask\\\":13398.813552249649,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":13266.152031930345,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.39018616720953225,\\\"bias\\\":0.10981383279046775},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13203.271039884123,\\\"ask\\\":13470.00378816461,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":13336.637414024366,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.3907696272772908,\\\"bias\\\":0.10923037272270919},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13200.225255156958,\\\"ask\\\":13466.896472432858,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":13333.560863794908,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.39074442375276375,\\\"bias\\\":0.10925557624723625},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13213.535151654209,\\\"ask\\\":13480.475255728032,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":13347.00520369112,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.39063426044997995,\\\"bias\\\":0.10936573955002005}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[13287.532911426826,13314.212409464373,13269.699434354834,13304.616959033969,13367.520367836623,13432.590942939712,13371.444570078673,13326.928574296902,13267.349807166274,13251.497643641693,13228.453871582342,13266.152031930345,13336.637414024366,13333.560863794908,13347.00520369112]}],[\\\"AERO\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17216.971663461776,\\\"ask\\\":17355.260592485563,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":17286.11612797367,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5626551261383997,\\\"bias\\\":0.06265512613839974},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17255.179791416103,\\\"ask\\\":17393.7756130339,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":17324.477702225002,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5625160810657073,\\\"bias\\\":0.06251608106570727},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17191.441045806227,\\\"ask\\\":17329.524909627966,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":17260.482977717096,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5622842973207055,\\\"bias\\\":0.062284297320705506},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17241.43993303794,\\\"ask\\\":17379.925394347483,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":17310.68266369271,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5624654424352858,\\\"bias\\\":0.062465442435285845},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17241.43993303794,\\\"ask\\\":17379.925394347483,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":17220.693928672863,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5621390220151513,\\\"bias\\\":0.06213902201515131},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17151.811152958173,\\\"ask\\\":17289.576704387553,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":17313.344933190747,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5624733432006569,\\\"bias\\\":0.062473343200656895},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17331.24777329521,\\\"ask\\\":17470.45458271927,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":17400.85117800724,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5627891000740812,\\\"bias\\\":0.06278910007408123},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17267.4976364325,\\\"ask\\\":17406.192396564493,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":17336.845016498497,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.43744271195841405,\\\"bias\\\":0.06255728804158595},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17353.201900726785,\\\"ask\\\":17492.585048523786,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":17422.893474625285,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.43775320433320597,\\\"bias\\\":0.06224679566679403},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17376.145888023293,\\\"ask\\\":17515.713324874883,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":17445.929606449088,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.4376709031131085,\\\"bias\\\":0.06232909688689148},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17409.601088095143,\\\"ask\\\":17549.43724141318,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":17479.51916475416,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.4375508976515933,\\\"bias\\\":0.062449102348406726},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17354.937288869038,\\\"ask\\\":17494.33437552662,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":17424.63583219783,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.4377475970193756,\\\"bias\\\":0.0622524029806244},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17456.853396968683,\\\"ask\\\":17597.069086904172,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":17526.961241936428,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.4373820225130532,\\\"bias\\\":0.06261797748694681},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17452.402589800862,\\\"ask\\\":17592.582530281194,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":17522.492560041028,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.43736605333393297,\\\"bias\\\":0.06263394666606703},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17432.974481123467,\\\"ask\\\":17572.998372538113,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":17502.98642683079,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.4372962511826111,\\\"bias\\\":0.06270374881738888}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[17286.11612797367,17324.477702225002,17260.482977717096,17310.68266369271,17220.693928672863,17313.344933190747,17400.85117800724,17336.845016498497,17422.893474625285,17445.929606449088,17479.51916475416,17424.63583219783,17526.961241936428,17522.492560041028,17502.98642683079]}],[\\\"OMN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":28053.428077673827,\\\"ask\\\":28448.944687026727,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":28251.18638235028,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5708267802096227,\\\"bias\\\":0.07082678020962274},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27983.44099180512,\\\"ask\\\":28377.970874871855,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":28180.70593333849,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5710039192523082,\\\"bias\\\":0.0710039192523082},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27867.001775303946,\\\"ask\\\":28259.890017856065,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":28063.445896580008,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5707072371480433,\\\"bias\\\":0.07070723714804328},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27958.3407434541,\\\"ask\\\":28352.516745879435,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":28155.42874466677,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.570938992474071,\\\"bias\\\":0.07093899247407098},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27958.3407434541,\\\"ask\\\":28352.516745879435,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":28321.241311884554,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.571356765421684,\\\"bias\\\":0.07135676542168401},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":28122.992622701364,\\\"ask\\\":28519.490001067745,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":28150.55283157063,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5709240997499717,\\\"bias\\\":0.07092409974997171},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":28112.7242491847,\\\"ask\\\":28509.076856927484,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":28310.900553056093,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5713280888958105,\\\"bias\\\":0.07132808889581055},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27996.239460804725,\\\"ask\\\":28390.949785529057,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":28193.594623166893,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4289686880106811,\\\"bias\\\":0.07103131198931889},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27840.5109870265,\\\"ask\\\":28233.025744144696,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":28036.768365585598,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.429366008225519,\\\"bias\\\":0.07063399177448099},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27881.995335635605,\\\"ask\\\":28275.094967759367,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":28078.545151697486,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42926075853596446,\\\"bias\\\":0.07073924146403554},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27821.626819986443,\\\"ask\\\":28213.87533507185,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":28017.75107752915,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42941425146551027,\\\"bias\\\":0.07058574853448973},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27920.38591103506,\\\"ask\\\":28314.026800012387,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":28117.206355523726,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4296648113774578,\\\"bias\\\":0.07033518862254218},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27736.819069740162,\\\"ask\\\":28127.871906574364,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":27932.345488157265,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.43013030125121937,\\\"bias\\\":0.06986969874878063},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27744.790899376578,\\\"ask\\\":28135.956128572216,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":27940.3735139744,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.43015038247732434,\\\"bias\\\":0.06984961752267566},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27709.988180812703,\\\"ask\\\":28100.66273723906,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":27905.325459025884,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.43023811100916537,\\\"bias\\\":0.06976188899083463}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[28251.18638235028,28180.70593333849,28063.445896580008,28155.42874466677,28321.241311884554,28150.55283157063,28310.900553056093,28193.594623166893,28036.768365585598,28078.545151697486,28017.75107752915,28117.206355523726,27932.345488157265,27940.3735139744,27905.325459025884]}],[\\\"SLRS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35023.17756085198,\\\"ask\\\":35659.320039252925,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":35341.24880005245,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.38159680847434574,\\\"bias\\\":0.11840319152565426},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":34932.12018909553,\\\"ask\\\":35566.60874954327,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":35249.3644693194,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3812881675052451,\\\"bias\\\":0.11871183249475492},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":34780.65245625183,\\\"ask\\\":35412.38983689011,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":35096.52114657097,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3807711843304091,\\\"bias\\\":0.11922881566959093},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":34662.24041792443,\\\"ask\\\":35291.82702490994,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":34977.03372141719,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3803638786594375,\\\"bias\\\":0.1196361213405625},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":34662.24041792443,\\\"ask\\\":35291.82702490994,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":35191.72363691152,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3796295491280872,\\\"bias\\\":0.12037045087191278},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":34874.998124179314,\\\"ask\\\":35508.44914964372,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":34970.72211983509,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3803902440935131,\\\"bias\\\":0.11960975590648693},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":34451.45571731087,\\\"ask\\\":35077.2137424487,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":34764.33472987979,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3796801500984304,\\\"bias\\\":0.12031984990156958},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":34302.7008440222,\\\"ask\\\":34925.75696429707,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":34614.22890415964,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3802019213754971,\\\"bias\\\":0.11979807862450292},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":34502.68358292754,\\\"ask\\\":35129.372083929244,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":34816.027833428394,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3795035055863771,\\\"bias\\\":0.12049649441362292},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":34556.26735951328,\\\"ask\\\":35183.929127899995,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":34870.09824370664,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3793163706575677,\\\"bias\\\":0.12068362934243232},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":34478.29384419841,\\\"ask\\\":35104.539342882126,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":34791.41659354027,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.37958929967381505,\\\"bias\\\":0.12041070032618495},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":34351.204276849705,\\\"ask\\\":34975.141387831834,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":34663.17283234077,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3791438147445161,\\\"bias\\\":0.12085618525548392},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":34115.87957071847,\\\"ask\\\":34735.54236816845,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":34425.71096944346,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3799774572194356,\\\"bias\\\":0.1200225427805644},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":34105.663092250856,\\\"ask\\\":34725.140322988,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":34415.40170761943,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3800134104193669,\\\"bias\\\":0.11998658958063307},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":34150.30849012077,\\\"ask\\\":34770.596636258175,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":34460.45256318947,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.38017047668183457,\\\"bias\\\":0.11982952331816543}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[35341.24880005245,35249.3644693194,35096.52114657097,34977.03372141719,35191.72363691152,34970.72211983509,34764.33472987979,34614.22890415964,34816.027833428394,34870.09824370664,34791.41659354027,34663.17283234077,34425.71096944346,34415.40170761943,34460.45256318947]}],[\\\"GPH\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":32243.461146335034,\\\"ask\\\":32502.444770000377,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":32372.952958167705,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4155218940592426,\\\"bias\\\":0.08447810594075739},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":32179.981826189436,\\\"ask\\\":32438.455575797383,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":32309.21870099341,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4153552496912852,\\\"bias\\\":0.08464475030871482},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":32074.276814025532,\\\"ask\\\":32331.901527391197,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":32203.089170708365,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4156342076367089,\\\"bias\\\":0.08436579236329111},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":31991.571938141802,\\\"ask\\\":32248.532355315634,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":32120.052146728718,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4158523107796157,\\\"bias\\\":0.08414768922038429},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":31991.571938141802,\\\"ask\\\":32248.532355315634,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":31971.544575809196,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4154614454307434,\\\"bias\\\":0.08453855456925657},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":31843.65839750596,\\\"ask\\\":32099.430754112433,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":31819.371241878725,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41586574360485484,\\\"bias\\\":0.08413425639514516},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":31834.476211382847,\\\"ask\\\":32090.17481549034,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":31962.325513436594,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4154877552642116,\\\"bias\\\":0.08451224473578839},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":31730.346656814112,\\\"ask\\\":31985.208878957197,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":31857.777767885655,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4152104112283862,\\\"bias\\\":0.0847895887716138},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":31590.972101895823,\\\"ask\\\":31844.714849702214,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":31717.843475799018,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41558448997337166,\\\"bias\\\":0.08441551002662834},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":31553.88784090883,\\\"ask\\\":31807.332723165127,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":31680.610282036978,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41568370078444383,\\\"bias\\\":0.08431629921555617},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":31499.97801796261,\\\"ask\\\":31752.989889592835,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":31626.483953777722,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4155393998341511,\\\"bias\\\":0.08446060016584889},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":31588.17109436194,\\\"ask\\\":31841.89134411585,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":31715.031219238896,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41577587111546166,\\\"bias\\\":0.08422412888453834},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":31424.13831737381,\\\"ask\\\":31676.541034782433,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":31550.33967607812,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41533622444605084,\\\"bias\\\":0.08466377555394916},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":31417.016415713435,\\\"ask\\\":31669.361929092658,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":31543.189172403047,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4153554168186082,\\\"bias\\\":0.08464458318139179},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":31385.924932606507,\\\"ask\\\":31638.020715197727,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":31511.972823902117,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41527156631448164,\\\"bias\\\":0.08472843368551836}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[32372.952958167705,32309.21870099341,32203.089170708365,32120.052146728718,31971.544575809196,31819.371241878725,31962.325513436594,31857.777767885655,31717.843475799018,31680.610282036978,31626.483953777722,31715.031219238896,31550.33967607812,31543.189172403047,31511.972823902117]}],[\\\"NVMD\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13328.12888520888,\\\"ask\\\":13462.07992928133,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":13395.104407245106,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4468210047313277,\\\"bias\\\":0.05317899526867231},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13365.218704763382,\\\"ask\\\":13499.542510841404,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":13432.380607802394,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4466730170163535,\\\"bias\\\":0.05332698298364652},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13427.356214130756,\\\"ask\\\":13562.30451779036,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":13494.830365960559,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4469209445645573,\\\"bias\\\":0.053079055435442724},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13378.564719471911,\\\"ask\\\":13513.022656351026,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":13445.79368791147,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4467273657686192,\\\"bias\\\":0.05327263423138079},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13378.564719471911,\\\"ask\\\":13513.022656351026,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":13358.260258957001,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.44707644837768,\\\"bias\\\":0.052923551622319986},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13291.468957662217,\\\"ask\\\":13425.051560251784,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":13268.741150542673,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.44743350328602416,\\\"bias\\\":0.05256649671397584},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13119.249104281465,\\\"ask\\\":13251.100854073238,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":13185.174979177353,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.44710034268107113,\\\"bias\\\":0.05289965731892887},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13179.985251132885,\\\"ask\\\":13312.447414460852,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":13246.216332796868,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5526547560040919,\\\"bias\\\":0.05265475600409186},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13098.4623019626,\\\"ask\\\":13230.105139168252,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":13164.283720565427,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5523270403609624,\\\"bias\\\":0.05232704036096236},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13076.781433200706,\\\"ask\\\":13208.206372227847,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":13142.493902714277,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5522402838681235,\\\"bias\\\":0.052240283868123516},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13045.285801935239,\\\"ask\\\":13176.394201954687,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":13110.840001944964,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5521141585579621,\\\"bias\\\":0.05211415855796209},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13096.81067185016,\\\"ask\\\":13228.436909758202,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":13162.623790804182,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5523199934688405,\\\"bias\\\":0.05231999346884053},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13001.072418202375,\\\"ask\\\":13131.736462606419,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":13066.404440404398,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5519347156514077,\\\"bias\\\":0.051934715651407726},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":12996.916084461169,\\\"ask\\\":13127.538356666808,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":13062.22722056399,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5519181072491068,\\\"bias\\\":0.05191810724910684},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":12978.778502316942,\\\"ask\\\":13109.218487264849,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":13043.998494790896,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5518455527375374,\\\"bias\\\":0.05184555273753744}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[13395.104407245106,13432.380607802394,13494.830365960559,13445.79368791147,13358.260258957001,13268.741150542673,13185.174979177353,13246.216332796868,13164.283720565427,13142.493902714277,13110.840001944964,13162.623790804182,13066.404440404398,13062.22722056399,13043.998494790896]}],[\\\"WDS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":68193.21061226136,\\\"ask\\\":69431.83603206025,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":68812.5233221608,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986826,\\\"averageShortPrice\\\":110021.9507695538,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.31680664597890734,\\\"bias\\\":0.18319335402109266},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":67609.72027442402,\\\"ask\\\":68837.7474842521,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":68223.73387933806,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2987256,\\\"averageShortPrice\\\":110015.92973946211,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.31838765462076324,\\\"bias\\\":0.18161234537923676},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":66648.75257479856,\\\"ask\\\":67859.3252754508,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":67254.03892512468,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2987256,\\\"averageShortPrice\\\":110015.92973946211,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3210062122234251,\\\"bias\\\":0.17899378777657488},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":65903.36664192584,\\\"ask\\\":67100.40054662277,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":66501.8835942743,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2987256,\\\"averageShortPrice\\\":110015.92973946211,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3230306831765583,\\\"bias\\\":0.1769693168234417},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":65903.36664192584,\\\"ask\\\":67100.40054662277,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":65177.35969977122,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2987256,\\\"averageShortPrice\\\":110015.92973946211,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.31943434098340634,\\\"bias\\\":0.18056565901659366},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":64590.76346247328,\\\"ask\\\":65763.95593706916,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":63841.598657750284,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2987256,\\\"averageShortPrice\\\":110015.92973946211,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.32321232552502493,\\\"bias\\\":0.17678767447497507},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":62047.45196874093,\\\"ask\\\":63174.44907816306,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":62610.950523452,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2987256,\\\"averageShortPrice\\\":110015.92973946211,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3266871716971505,\\\"bias\\\":0.1733128283028495},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":61169.218102387575,\\\"ask\\\":62280.263436235175,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":61724.74076931138,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2987256,\\\"averageShortPrice\\\":110015.92973946211,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.32917550161227666,\\\"bias\\\":0.17082449838772334},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":60010.89775680617,\\\"ask\\\":61100.90397236874,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":60555.90086458746,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2987256,\\\"averageShortPrice\\\":110015.92973946211,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.32587827561828975,\\\"bias\\\":0.17412172438171025},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":59703.91244221511,\\\"ask\\\":60788.342738844636,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":60246.127590529875,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2987256,\\\"averageShortPrice\\\":110015.92973946211,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.32498297730114517,\\\"bias\\\":0.17501702269885483},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":59260.20282120786,\\\"ask\\\":60336.5738108968,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":59798.38831605233,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2987256,\\\"averageShortPrice\\\":110015.92973946211,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3236725407330184,\\\"bias\\\":0.17632745926698162},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":58543.10557322125,\\\"ask\\\":59606.45158766926,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":59074.77858044526,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2987256,\\\"averageShortPrice\\\":110015.92973946211,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.32583238405780873,\\\"bias\\\":0.17416761594219127},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":57235.98844882513,\\\"ask\\\":58275.59267897532,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":57755.79056390023,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2987256,\\\"averageShortPrice\\\":110015.92973946211,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.321854860833643,\\\"bias\\\":0.178145139166357},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":57292.75313986093,\\\"ask\\\":58333.38841384427,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":57813.070776852604,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2987256,\\\"averageShortPrice\\\":110015.92973946211,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.32203153907504967,\\\"bias\\\":0.17796846092495033},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":57541.05744926784,\\\"ask\\\":58586.20279143415,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":58063.630120351,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2987256,\\\"averageShortPrice\\\":110015.92973946211,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.32126023147741506,\\\"bias\\\":0.17873976852258494}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[68812.5233221608,68223.73387933806,67254.03892512468,66501.8835942743,65177.35969977122,63841.598657750284,62610.950523452,61724.74076931138,60555.90086458746,60246.127590529875,59798.38831605233,59074.77858044526,57755.79056390023,57813.070776852604,58063.630120351]}],[\\\"LXO\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":12405.59718409938,\\\"ask\\\":12656.215309030682,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":12530.906246565031,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.550814093237807,\\\"bias\\\":0.050814093237806945},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":12458.036542173882,\\\"ask\\\":12709.714048076385,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":12583.875295125134,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5510288880913706,\\\"bias\\\":0.05102888809137063},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":12370.673994875613,\\\"ask\\\":12620.586600832698,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":12495.630297854155,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5506685185875501,\\\"bias\\\":0.05066851858755006},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":12439.20421317292,\\\"ask\\\":12690.501267984493,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":12564.852740578706,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5503878285749407,\\\"bias\\\":0.05038782857494073},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":12439.20421317292,\\\"ask\\\":12690.501267984493,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":12441.02036720195,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5508893665692186,\\\"bias\\\":0.05088936656921861},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":12316.610163529931,\\\"ask\\\":12565.43057087397,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":12314.817805074057,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5503678510626347,\\\"bias\\\":0.05036785106263475},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":12075.417497442395,\\\"ask\\\":12319.365325673556,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":12197.391411557976,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5498829510623088,\\\"bias\\\":0.04988295106230878},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":12160.334482806586,\\\"ask\\\":12405.997805691568,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":12283.166144249077,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5463750724931596,\\\"bias\\\":0.04637507249315964},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":12275.297788557267,\\\"ask\\\":12523.283602467514,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":12399.29069551239,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5419907920724367,\\\"bias\\\":0.04199079207243672},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":12244.460964603517,\\\"ask\\\":12491.823812373284,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":12368.1423884884,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5409332831575407,\\\"bias\\\":0.040933283157540745},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":12289.365534897226,\\\"ask\\\":12537.635545703231,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":12413.500540300229,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5424344447817345,\\\"bias\\\":0.042434444781734526},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":12216.074788708262,\\\"ask\\\":12462.864178379135,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":12339.469483543699,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5449803133818861,\\\"bias\\\":0.04498031338188613},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":12352.719290500057,\\\"ask\\\":12602.269175156625,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":12477.494232828341,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5399489816171299,\\\"bias\\\":0.0399489816171299},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":12358.719782003114,\\\"ask\\\":12608.390888710248,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":12483.555335356681,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5401430389085747,\\\"bias\\\":0.040143038908574735},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":12384.954307384689,\\\"ask\\\":12635.155404503572,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":12510.05485594413,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.54099517698737,\\\"bias\\\":0.040995176987369986}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[12530.906246565031,12583.875295125134,12495.630297854155,12564.852740578706,12441.02036720195,12314.817805074057,12197.391411557976,12283.166144249077,12399.29069551239,12368.1423884884,12413.500540300229,12339.469483543699,12477.494232828341,12483.555335356681,12510.05485594413]}],[\\\"RHOC\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2419.1851110700472,\\\"ask\\\":2438.616316781453,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":2428.90071392575,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4561038792930007,\\\"bias\\\":0.043896120706999275},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2414.846824765054,\\\"ask\\\":2434.243184803327,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":2424.5450047841905,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4568924756435127,\\\"bias\\\":0.04310752435648729},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2407.62064244515,\\\"ask\\\":2426.9589608583647,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":2417.2898016517574,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.45818629587776394,\\\"bias\\\":0.04181370412223606},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2413.289110995505,\\\"ask\\\":2432.6729592765937,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":2422.9810351360493,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.45720183984423357,\\\"bias\\\":0.04279816015576643},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2413.289110995505,\\\"ask\\\":2432.6729592765937,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":2412.77437070103,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4590123135646552,\\\"bias\\\":0.04098768643534478},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2403.1232732182257,\\\"ask\\\":2422.4254681838343,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":2423.2829939467388,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4607974956342788,\\\"bias\\\":0.0392025043657212},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2403.7547829485416,\\\"ask\\\":2423.0620502814613,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":2413.4084166150014,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.46240148507217105,\\\"bias\\\":0.03759851492782895},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2396.5921043005883,\\\"ask\\\":2415.841840078103,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":2406.2169721893456,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.46352518935036285,\\\"bias\\\":0.036474810649637146},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2387.0012938681984,\\\"ask\\\":2406.173995023766,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":2396.5876444459823,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.46205965602452587,\\\"bias\\\":0.03794034397547413},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2389.556180034923,\\\"ask\\\":2408.749402364521,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":2399.152791199722,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.46165356801681207,\\\"bias\\\":0.038346431983187934},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2393.2805863073686,\\\"ask\\\":2412.503723546785,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":2402.8921549270767,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.46105589346537296,\\\"bias\\\":0.03894410653462704},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2387.1937159337076,\\\"ask\\\":2406.3679626480343,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":2396.780839290871,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.46006289601103106,\\\"bias\\\":0.039937103988968936},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2375.898946401111,\\\"ask\\\":2394.9824720750157,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":2385.4407092380634,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.461961463229296,\\\"bias\\\":0.03803853677070401},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2375.4085452316103,\\\"ask\\\":2394.4881319402975,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":2384.948338585954,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4618829329783381,\\\"bias\\\":0.0381170670216619},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2377.551568916106,\\\"ask\\\":2396.6483686664365,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":2387.0999687912713,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4615390520169981,\\\"bias\\\":0.038460947983001925}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[2428.90071392575,2424.5450047841905,2417.2898016517574,2422.9810351360493,2412.77437070103,2423.2829939467388,2413.4084166150014,2406.2169721893456,2396.5876444459823,2399.152791199722,2402.8921549270767,2396.780839290871,2385.4407092380634,2384.948338585954,2387.0999687912713]}],[\\\"APHE\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":137410.59098583634,\\\"ask\\\":141312.71730186418,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":139361.65414385026,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5753698481371791,\\\"bias\\\":0.07536984813717906},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":136554.37356086785,\\\"ask\\\":140432.18538612576,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":138493.2794734968,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5748972673211313,\\\"bias\\\":0.07489726732113133},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":135138.7409738064,\\\"ask\\\":138976.3522793506,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":137057.5466265785,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5756818462770815,\\\"bias\\\":0.07568184627708152},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":134037.32024416918,\\\"ask\\\":137843.65388193462,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":135940.4870630519,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5763037443737828,\\\"bias\\\":0.07630374437378284},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":134037.32024416918,\\\"ask\\\":137843.65388193462,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":137947.5721013895,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5774303263583738,\\\"bias\\\":0.07743032635837377},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":136016.30609197004,\\\"ask\\\":139878.83811080895,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":135881.99761748174,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.578607363119761,\\\"bias\\\":0.07860736311976102},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":135892.9200671167,\\\"ask\\\":139751.94822318087,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":137822.43414514879,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5774848259079476,\\\"bias\\\":0.07748482590794759},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":134490.0376110169,\\\"ask\\\":138309.22732005187,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":136399.63246553438,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5782930798486194,\\\"bias\\\":0.07829307984861944},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":136376.0415430605,\\\"ask\\\":140248.78917308658,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":138312.41535807354,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5771951468041407,\\\"bias\\\":0.07719514680414075},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":136885.49769049586,\\\"ask\\\":140772.71263505355,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":138829.1051627747,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5774835225455582,\\\"bias\\\":0.07748352254555824},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":137630.13890407415,\\\"ask\\\":141538.49984658335,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":139584.31937532875,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5779050239115473,\\\"bias\\\":0.0779050239115473},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":138854.9518411298,\\\"ask\\\":142798.09448976227,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":140826.52316544604,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5772117231424839,\\\"bias\\\":0.07721172314248392},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":141158.8358326475,\\\"ask\\\":145167.40317880787,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":143163.1195057277,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5784928215156193,\\\"bias\\\":0.07849282151561932},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":141260.54757101287,\\\"ask\\\":145272.0032829686,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":143266.27542699073,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5785493793731453,\\\"bias\\\":0.07854937937314532},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":141705.3420295776,\\\"ask\\\":145729.4288214926,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":143717.3854255351,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5787967119034918,\\\"bias\\\":0.0787967119034918}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[139361.65414385026,138493.2794734968,137057.5466265785,135940.4870630519,137947.5721013895,135881.99761748174,137822.43414514879,136399.63246553438,138312.41535807354,138829.1051627747,139584.31937532875,140826.52316544604,143163.1195057277,143266.27542699073,143717.3854255351]}],[\\\"SYSC\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":188.9657613043503,\\\"ask\\\":191.62993115154154,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":190.29784622794594,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30919258929733945,\\\"bias\\\":0.19080741070266055},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":187.85405949719447,\\\"ask\\\":190.50255580430496,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":189.17830765074973,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3103217687458147,\\\"bias\\\":0.18967823125418531},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":186.0149490567575,\\\"ask\\\":188.63751631435525,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":187.3262326855564,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.308446439815575,\\\"bias\\\":0.191553560184425},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":187.45761120265055,\\\"ask\\\":190.10051810782386,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":188.77906465523722,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3099320573511033,\\\"bias\\\":0.1900679426488967},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":187.45761120265055,\\\"ask\\\":190.10051810782386,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":191.4096964283691,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3125806496084022,\\\"bias\\\":0.1874193503915978},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":190.0698285533705,\\\"ask\\\":192.74956430336766,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":194.1558963545752,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.31526959910165636,\\\"bias\\\":0.18473040089834364},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":195.39532847196656,\\\"ask\\\":198.15014679886235,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":196.77273763541447,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.31775940316103946,\\\"bias\\\":0.18224059683896054},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":193.49039479682241,\\\"ask\\\":196.21835605276954,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":194.854375424796,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3195535813695311,\\\"bias\\\":0.1804464186304689},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":190.96289718935788,\\\"ask\\\":193.655224037949,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":192.30906061365346,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.31716527506460623,\\\"bias\\\":0.18283472493539377},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":191.63619468796475,\\\"ask\\\":194.3380141498293,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":192.98710441889702,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3165206358976826,\\\"bias\\\":0.1834793641023174},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":190.65730812633296,\\\"ask\\\":193.3453265692017,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":192.00131734776733,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3174626689391724,\\\"bias\\\":0.1825373310608276},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":189.06924998868843,\\\"ask\\\":191.73487889084515,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":190.4020644397668,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3159294746517227,\\\"bias\\\":0.18407052534827728},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":192.03005233166576,\\\"ask\\\":194.73742467068217,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":193.38373850117398,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.31881199755143724,\\\"bias\\\":0.18118800244856276},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":191.8995476056313,\\\"ask\\\":194.60507999886275,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":193.25231380224704,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3186887774036291,\\\"bias\\\":0.1813112225963709},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":191.3309396048161,\\\"ask\\\":194.02845536963724,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":192.6796974872267,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3181499465589219,\\\"bias\\\":0.18185005344107807}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[190.29784622794594,189.17830765074973,187.3262326855564,188.77906465523722,191.4096964283691,194.1558963545752,196.77273763541447,194.854375424796,192.30906061365346,192.98710441889702,192.00131734776733,190.4020644397668,193.38373850117398,193.25231380224704,192.6796974872267]}],[\\\"CTK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14238.585844670746,\\\"ask\\\":14468.240455068662,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":14353.413149869704,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.557862365652809,\\\"bias\\\":0.057862365652809},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14190.598095670866,\\\"ask\\\":14419.478710117171,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":14305.038402894019,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5576666949234453,\\\"bias\\\":0.05766669492344534},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14110.876514297952,\\\"ask\\\":14338.471296786627,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":14224.67390554229,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5579924918437988,\\\"bias\\\":0.057992491843798843},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14173.412893369408,\\\"ask\\\":14402.016327133431,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":14287.71461025142,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5582495021329589,\\\"bias\\\":0.058249502132958875},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14173.412893369408,\\\"ask\\\":14402.016327133431,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":14174.842556723184,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5577856704610067,\\\"bias\\\":0.05778567046100669},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14061.443816269399,\\\"ask\\\":14288.24129717697,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":14059.576244379234,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5582594216626494,\\\"bias\\\":0.05825942166264941},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13840.503699015822,\\\"ask\\\":14063.737629645111,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":13952.120664330467,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5587081204732948,\\\"bias\\\":0.05870812047329477},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13763.075724365688,\\\"ask\\\":13985.060816694167,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":13874.068270529928,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5590383991809617,\\\"bias\\\":0.059038399180961654},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13659.764638582772,\\\"ask\\\":13880.083423076041,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":13769.924030829407,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5585918818884863,\\\"bias\\\":0.0585918818884863},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13632.299040427995,\\\"ask\\\":13852.17483140264,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":13742.236935915318,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.558473834222549,\\\"bias\\\":0.05847383422254904},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13592.420645773353,\\\"ask\\\":13811.653236834212,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":13702.036941303782,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5583022795967126,\\\"bias\\\":0.058302279596712636},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13527.493727658342,\\\"ask\\\":13745.67911036251,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":13636.586419010426,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5580224504273555,\\\"bias\\\":0.05802245042735554},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13407.516504550767,\\\"ask\\\":13623.766770753198,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":13515.641637651983,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5575032362628375,\\\"bias\\\":0.05750323626283749},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13402.308230338995,\\\"ask\\\":13618.474492118656,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":13510.391361228825,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5574808899164192,\\\"bias\\\":0.0574808899164192},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13379.58696987528,\\\"ask\\\":13595.386759711979,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":13487.48686479363,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5575785041607465,\\\"bias\\\":0.0575785041607465}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[14353.413149869704,14305.038402894019,14224.67390554229,14287.71461025142,14174.842556723184,14059.576244379234,13952.120664330467,13874.068270529928,13769.924030829407,13742.236935915318,13702.036941303782,13636.586419010426,13515.641637651983,13510.391361228825,13487.48686479363]}],[\\\"NTLK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":24.294617071468274,\\\"ask\\\":24.587912247381375,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":24.441264659424824,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5753956536487798,\\\"bias\\\":0.07539565364877976},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":24.55135483769337,\\\"ask\\\":24.84774946350053,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":24.69955215059695,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5745988964229332,\\\"bias\\\":0.07459889642293316},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":24.984813212542836,\\\"ask\\\":25.28644073623551,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":25.135626974389172,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5759159527166821,\\\"bias\\\":0.07591595271668206},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":25.330836134228893,\\\"ask\\\":25.63664099701636,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":25.483738565622627,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5748645676397498,\\\"bias\\\":0.0748645676397498},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":25.330836134228893,\\\"ask\\\":25.63664099701636,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":26.117873012788454,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5730016462677426,\\\"bias\\\":0.07300164626774264},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":25.961165774711723,\\\"ask\\\":26.274580250865185,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":26.787014559118674,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.571131339507145,\\\"bias\\\":0.07113133950714501},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":26.00051387875795,\\\"ask\\\":26.314403382324443,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":26.157458630541196,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5728433237303407,\\\"bias\\\":0.07284332373034075},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":26.4576171749735,\\\"ask\\\":26.777025028192497,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":26.617321101583,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.574123949318731,\\\"bias\\\":0.07412394931873101},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":27.082940256551048,\\\"ask\\\":27.409897281781042,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":27.246418769166045,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5723720373419211,\\\"bias\\\":0.0723720373419211},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":27.253456513505004,\\\"ask\\\":27.582472085096615,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":27.41796429930081,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5728276972074593,\\\"bias\\\":0.0728276972074593},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":27.503325568029943,\\\"ask\\\":27.83535766744278,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":27.66934161773636,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5734954065615164,\\\"bias\\\":0.07349540656151643},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":27.91584335472157,\\\"ask\\\":28.25285554813873,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":28.08434945143015,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5745977518896028,\\\"bias\\\":0.07459775188960283},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":27.156438617617745,\\\"ask\\\":27.484282947005482,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":27.320360782311614,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5766838091580072,\\\"bias\\\":0.07668380915800721},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":27.123499649817543,\\\"ask\\\":27.45094632567047,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":27.287222987744006,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5765906838034894,\\\"bias\\\":0.07659068380348943},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":26.980318184685167,\\\"ask\\\":27.306036311663256,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":27.14317724817421,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5761842257977904,\\\"bias\\\":0.07618422579779038}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[24.441264659424824,24.69955215059695,25.135626974389172,25.483738565622627,26.117873012788454,26.787014559118674,26.157458630541196,26.617321101583,27.246418769166045,27.41796429930081,27.66934161773636,28.08434945143015,27.320360782311614,27.287222987744006,27.14317724817421]}],[\\\"OMGA\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1298.2355496857592,\\\"ask\\\":1327.1143991226515,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":1312.6749744042054,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5665083245740306,\\\"bias\\\":0.06650832457403055},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1302.4428137414614,\\\"ask\\\":1331.415252469785,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":1316.9290331056231,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5662927873524123,\\\"bias\\\":0.06629278735241229},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1309.49456803611,\\\"ask\\\":1338.6238708640112,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":1324.0592194500607,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.56665171324381,\\\"bias\\\":0.06665171324381003},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1315.0561588834316,\\\"ask\\\":1344.3091775845796,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":1329.6826682340056,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5663686348963443,\\\"bias\\\":0.06636863489634426},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1315.0561588834316,\\\"ask\\\":1344.3091775845796,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":1319.6126272162312,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5668750978248702,\\\"bias\\\":0.06687509782487022},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1305.0968883168528,\\\"ask\\\":1334.1283661156097,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":1329.9805851125984,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5674005233810248,\\\"bias\\\":0.06740052338102476},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1305.713545835377,\\\"ask\\\":1334.7587409904613,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":1320.2361434129193,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5678979953476053,\\\"bias\\\":0.06789799534760532},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1298.711712782976,\\\"ask\\\":1327.601154321121,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":1313.1564335520486,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5682640584417756,\\\"bias\\\":0.06826405844177563},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1308.1248212090763,\\\"ask\\\":1337.2236544412297,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":1322.674237825153,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5677692781318783,\\\"bias\\\":0.06776927813187827},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1310.65054431922,\\\"ask\\\":1339.8055614830448,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":1325.2280529011325,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5676384294321516,\\\"bias\\\":0.06763842943215159},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1314.3356026552956,\\\"ask\\\":1343.5725928053628,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":1328.9540977303293,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5674482555072268,\\\"bias\\\":0.06744825550722677},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1308.3178089613843,\\\"ask\\\":1337.4209351465718,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":1322.8693720539782,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.567138017670612,\\\"bias\\\":0.067138017670612},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1297.1935309449868,\\\"ask\\\":1326.0492009963414,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":1311.621365970664,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5665622655131883,\\\"bias\\\":0.06656226551318833},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1297.6766293550766,\\\"ask\\\":1326.5430457815796,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":1312.1098375683282,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5665374765176573,\\\"bias\\\":0.06653747651765729},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1299.7885266352134,\\\"ask\\\":1328.7019215654202,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":1314.2452241003168,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5666457625979535,\\\"bias\\\":0.06664576259795352}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[1312.6749744042054,1316.9290331056231,1324.0592194500607,1329.6826682340056,1319.6126272162312,1329.9805851125984,1320.2361434129193,1313.1564335520486,1322.674237825153,1325.2280529011325,1328.9540977303293,1322.8693720539782,1311.621365970664,1312.1098375683282,1314.2452241003168]}],[\\\"FNS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5187.958099517757,\\\"ask\\\":5282.189427258744,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":5235.073763388251,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5607953380877921,\\\"bias\\\":0.06079533808779214},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5201.298773324489,\\\"ask\\\":5295.772414010504,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":5248.535593667497,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5606390047560957,\\\"bias\\\":0.06063900475609574},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5223.6440297018025,\\\"ask\\\":5318.523537809403,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":5271.083783755603,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5603784940323723,\\\"bias\\\":0.060378494032372276},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5241.247728985701,\\\"ask\\\":5336.446981378982,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":5288.847355182342,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5605819697757647,\\\"bias\\\":0.06058196977576469},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5241.247728985701,\\\"ask\\\":5336.446981378982,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":5257.015710046666,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5609487983853572,\\\"bias\\\":0.06094879838535716},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5209.702568656246,\\\"ask\\\":5304.328851437085,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":5289.789077697927,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5605688304553454,\\\"bias\\\":0.060568830455345446},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5272.881966435993,\\\"ask\\\":5368.655806391439,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":5320.768886413716,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5602141072794145,\\\"bias\\\":0.06021410727941445},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5295.43900472142,\\\"ask\\\":5391.62255879305,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":5343.530781757236,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5599565153340855,\\\"bias\\\":0.059956515334085525},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5265.158245137012,\\\"ask\\\":5360.79179550277,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":5312.975020319891,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5596116959114162,\\\"bias\\\":0.05961169591141624},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5273.224705664566,\\\"ask\\\":5369.004770954133,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":5321.114738309349,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5595203680975762,\\\"bias\\\":0.059520368097576215},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5284.989078130126,\\\"ask\\\":5380.982825260642,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":5332.985951695384,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5593875803218468,\\\"bias\\\":0.05938758032184677},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5304.27778746601,\\\"ask\\\":5400.621884513827,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":5352.449835989919,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.559604328125495,\\\"bias\\\":0.05960432812549499},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5340.371233871941,\\\"ask\\\":5437.3709131955475,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":5388.8710735337445,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5591987449888345,\\\"bias\\\":0.059198744988834484},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5341.949344027597,\\\"ask\\\":5438.977687309632,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":5390.4635156686145,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5591812514220809,\\\"bias\\\":0.05918125142208086},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5348.847628594503,\\\"ask\\\":5446.001268669881,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":5397.424448632192,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.559104828175239,\\\"bias\\\":0.05910482817523899}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[5235.073763388251,5248.535593667497,5271.083783755603,5288.847355182342,5257.015710046666,5289.789077697927,5320.768886413716,5343.530781757236,5312.975020319891,5321.114738309349,5332.985951695384,5352.449835989919,5388.8710735337445,5390.4635156686145,5397.424448632192]}],[\\\"JGN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":43287.16421010413,\\\"ask\\\":44250.073828529086,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":43768.61901931661,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4249301803947641,\\\"bias\\\":0.0750698196052359},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":43724.786543792514,\\\"ask\\\":44697.43093607101,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":44211.10873993176,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4256891173739978,\\\"bias\\\":0.07431088262600222},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":42998.53636874592,\\\"ask\\\":43955.02554985048,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":43476.7809592982,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4244339981054678,\\\"bias\\\":0.07556600189453222},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":42436.2898042117,\\\"ask\\\":43380.27198388072,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":42908.28089404621,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42343280961427765,\\\"bias\\\":0.07656719038572235},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":42436.2898042117,\\\"ask\\\":43380.27198388072,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":41910.57516217625,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4216100829056746,\\\"bias\\\":0.07838991709432541},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":41449.55883539231,\\\"ask\\\":42371.591488960185,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":40907.92758172888,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.41968875700743474,\\\"bias\\\":0.08031124299256526},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":41389.48397096398,\\\"ask\\\":42310.18027769927,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":41849.832124331624,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4215379224154266,\\\"bias\\\":0.07846207758457341},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":40704.87980094086,\\\"ask\\\":41610.34729904065,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":41157.613549990754,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4228575545029248,\\\"bias\\\":0.07714244549707522},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":41625.24640110968,\\\"ask\\\":42551.18717039624,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":42088.216785752964,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4246018006630427,\\\"bias\\\":0.0753981993369573},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":41376.02839201496,\\\"ask\\\":42296.42538354613,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":41836.22688778055,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42505594258672014,\\\"bias\\\":0.07494405741327986},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":41738.939553833596,\\\"ask\\\":42667.409392240406,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":42203.174473037005,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42571328056729113,\\\"bias\\\":0.07428671943270887},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":41148.50445497065,\\\"ask\\\":42063.8402466889,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":41606.17235082978,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42464734908051127,\\\"bias\\\":0.07535265091948873},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":42249.32159928655,\\\"ask\\\":43189.14472889656,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":42719.23316409156,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42263149234159636,\\\"bias\\\":0.07736850765840364},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":42200.29402794873,\\\"ask\\\":43139.02655435406,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":42669.6602911514,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42272137773495433,\\\"bias\\\":0.07727862226504567},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":42414.54157282545,\\\"ask\\\":43358.03996979426,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":42886.29077130986,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42232904030050944,\\\"bias\\\":0.07767095969949056}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[43768.61901931661,44211.10873993176,43476.7809592982,42908.28089404621,41910.57516217625,40907.92758172888,41849.832124331624,41157.613549990754,42088.216785752964,41836.22688778055,42203.174473037005,41606.17235082978,42719.23316409156,42669.6602911514,42886.29077130986]}],[\\\"SGC\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":34.73654623976399,\\\"ask\\\":35.22628606590366,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":34.98141615283382,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5604465345793634,\\\"bias\\\":0.06044653457936344},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":34.98861109730256,\\\"ask\\\":35.48190470793925,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":35.23525790262091,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5608851633083765,\\\"bias\\\":0.060885163308376455},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":35.41278564361934,\\\"ask\\\":35.91205956004498,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":35.66242260183216,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.56162328739258,\\\"bias\\\":0.06162328739258005},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":35.079187022170366,\\\"ask\\\":35.57375763476894,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":35.326472328469656,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5610372577417125,\\\"bias\\\":0.061037257741712536},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":35.079187022170366,\\\"ask\\\":35.57375763476894,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":34.73299194910064,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5599943180798118,\\\"bias\\\":0.059994318079811815},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":34.48986100545693,\\\"ask\\\":34.976122892744336,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":34.13251757543405,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5589388714520349,\\\"bias\\\":0.05893887145203491},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":33.342549426121565,\\\"ask\\\":33.81263572215953,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":33.577592574140546,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5579648095610716,\\\"bias\\\":0.05796480956107164},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":32.9448400854885,\\\"ask\\\":33.40931920049035,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":33.177079642989426,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5586645593892886,\\\"bias\\\":0.058664559389288606},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":32.41870727035498,\\\"ask\\\":32.875768601457665,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":32.647237935906325,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5577124748560389,\\\"bias\\\":0.05771247485603892},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":32.55886325203353,\\\"ask\\\":33.0179005989907,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":32.78838192551212,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5579619835271,\\\"bias\\\":0.057961983527100025},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":32.76384070004655,\\\"ask\\\":33.225767960671575,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":32.99480433035907,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5575970782976641,\\\"bias\\\":0.05759707829766414},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":32.4298393425088,\\\"ask\\\":32.887057621255146,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":32.658448481881976,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5581902820486433,\\\"bias\\\":0.058190282048643294},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":33.05255709982099,\\\"ask\\\":33.51855488370567,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":33.28555599176333,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5570729122845817,\\\"bias\\\":0.05707291228458167},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":33.02501777509094,\\\"ask\\\":33.49062729055042,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":33.25782253282068,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5570253195936284,\\\"bias\\\":0.05702531959362844},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":33.14536297168087,\\\"ask\\\":33.61266919686066,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":33.379016084270766,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5572331233666297,\\\"bias\\\":0.05723312336662967}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[34.98141615283382,35.23525790262091,35.66242260183216,35.326472328469656,34.73299194910064,34.13251757543405,33.577592574140546,33.177079642989426,32.647237935906325,32.78838192551212,32.99480433035907,32.658448481881976,33.28555599176333,33.25782253282068,33.379016084270766]}],[\\\"CTYS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":388.66938377070625,\\\"ask\\\":395.72896894514895,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":392.1991763579276,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.373148879712136,\\\"bias\\\":0.126851120287864},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":386.5994176906026,\\\"ask\\\":393.62140509567905,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":390.11041139314085,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3724696818028697,\\\"bias\\\":0.1275303181971303},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":383.17183573296853,\\\"ask\\\":390.1315663517308,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":386.65170104234966,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37361047707261497,\\\"bias\\\":0.12638952292738503},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":380.50185655073835,\\\"ask\\\":387.41309107940964,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":383.957473815074,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37449735157600683,\\\"bias\\\":0.12550264842399317},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":380.50185655073835,\\\"ask\\\":387.41309107940964,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":388.7983465261719,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37291503481605537,\\\"bias\\\":0.12708496518394463},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":385.2991614074363,\\\"ask\\\":392.2975316449074,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":383.8160943594187,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37126536625745515,\\\"bias\\\":0.12873463374254485},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":385.0000399578085,\\\"ask\\\":391.9929771114316,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":388.4965085346201,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.369695522226778,\\\"bias\\\":0.13030447777322202},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":381.60093802614915,\\\"ask\\\":388.5321356895908,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":385.06653685787,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.6291437935139175,\\\"bias\\\":0.12914379351391747},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":377.08533549445366,\\\"ask\\\":383.9345141411743,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":380.509924817814,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.6306902923725366,\\\"bias\\\":0.1306902923725366},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":375.88625384640574,\\\"ask\\\":382.71365300809623,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":379.299953427251,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.6311071959691921,\\\"bias\\\":0.13110719596919207},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":377.63235604660065,\\\"ask\\\":384.4914704853885,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":381.0619132659946,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.6304981644842665,\\\"bias\\\":0.13049816448426654},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":380.50213866297946,\\\"ask\\\":387.41337831578835,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":383.95775848938393,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.6295064555962175,\\\"bias\\\":0.12950645559621754},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":385.8932701313358,\\\"ask\\\":392.90243144552755,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":389.3978507884317,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.631341363359347,\\\"bias\\\":0.13134136335934699},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":385.65597618430155,\\\"ask\\\":392.6608274167106,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":389.1584018005061,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.6314221776405848,\\\"bias\\\":0.13142217764058484},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":384.6217965993587,\\\"ask\\\":391.60786354061844,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":388.11483006998856,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.6310688067855623,\\\"bias\\\":0.13106880678556232}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[392.1991763579276,390.11041139314085,386.65170104234966,383.957473815074,388.7983465261719,383.8160943594187,388.4965085346201,385.06653685787,380.509924817814,379.299953427251,381.0619132659946,383.95775848938393,389.3978507884317,389.1584018005061,388.11483006998856]}],[\\\"MDYN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7061.915302249869,\\\"ask\\\":7118.63751351292,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":7090.276407881394,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42089043074264526,\\\"bias\\\":0.07910956925735474},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7081.318600198776,\\\"ask\\\":7138.1966612445485,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":7109.757630721662,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4211077919650916,\\\"bias\\\":0.07889220803490837},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7048.961438594672,\\\"ask\\\":7105.57960276009,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":7077.270520677381,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4207456495492297,\\\"bias\\\":0.07925435045077028},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7074.343520697198,\\\"ask\\\":7131.165557008019,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":7102.754538852609,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4204602684405873,\\\"bias\\\":0.07953973155941269},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7074.343520697198,\\\"ask\\\":7131.165557008019,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":7057.096462912491,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4199456614598153,\\\"bias\\\":0.08005433854018468},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7028.868077060841,\\\"ask\\\":7085.324848764141,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":7010.398680786338,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4204789207264599,\\\"bias\\\":0.07952107927354007},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":6938.935570885585,\\\"ask\\\":6994.669993141694,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":6966.802782013639,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4209765367823149,\\\"bias\\\":0.07902346321768511},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":6970.653047220171,\\\"ask\\\":7026.642228322341,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":6998.647637771256,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.5786622515017268,\\\"bias\\\":0.07866225150172679},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7013.488222284118,\\\"ask\\\":7069.8214610173245,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":7041.654841650721,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.5791456368160115,\\\"bias\\\":0.0791456368160115},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7002.026046909555,\\\"ask\\\":7058.267219977101,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":7030.146633443328,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.5790160770052882,\\\"bias\\\":0.07901607700528823},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":6985.374525254371,\\\"ask\\\":7041.481951160028,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":7013.4282382072,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.5788277209031775,\\\"bias\\\":0.07882772090317747},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":6958.239502493138,\\\"ask\\\":7014.128976408746,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":6986.184239450942,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.5785203167098959,\\\"bias\\\":0.0785203167098959},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":6908.013683812477,\\\"ask\\\":6963.499737497718,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":6935.756710655098,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.5790912112347665,\\\"bias\\\":0.07909121123476648},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":6905.833195849854,\\\"ask\\\":6961.3017355755555,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":6933.567465712705,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.5791161839540829,\\\"bias\\\":0.07911618395408293},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":6915.361797407664,\\\"ask\\\":6970.906872085638,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":6943.134334746651,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.5792253476961389,\\\"bias\\\":0.07922534769613887}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[7090.276407881394,7109.757630721662,7077.270520677381,7102.754538852609,7057.096462912491,7010.398680786338,6966.802782013639,6998.647637771256,7041.654841650721,7030.146633443328,7013.4282382072,6986.184239450942,6935.756710655098,6933.567465712705,6943.134334746651]}],[\\\"TITN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22417.35307584955,\\\"ask\\\":22552.261920839614,\\\"dateObserved\\\":\\\"7/24/2023, 5:15:59 PM\\\",\\\"price\\\":22484.807498344584,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5954570853084515,\\\"bias\\\":0.09545708530845154},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22459.99497485786,\\\"ask\\\":22595.160441105745,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:03 PM\\\",\\\"price\\\":22527.577707981804,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5952755085015208,\\\"bias\\\":0.09527550850152078},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22531.371285344678,\\\"ask\\\":22666.966298094994,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:07 PM\\\",\\\"price\\\":22599.168791719836,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5955782874773936,\\\"bias\\\":0.09557828747739361},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22587.539276434967,\\\"ask\\\":22723.472311197864,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:11 PM\\\",\\\"price\\\":22655.505793816417,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5953400223344749,\\\"bias\\\":0.09534002233447492},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22587.539276434967,\\\"ask\\\":22723.472311197864,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:13 PM\\\",\\\"price\\\":22756.982058331894,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.595767059780179,\\\"bias\\\":0.09576705978017896},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22688.7111121569,\\\"ask\\\":22825.25300450689,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:17 PM\\\",\\\"price\\\":22652.517452854045,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5962087002353086,\\\"bias\\\":0.09620870023530859},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22682.401356750426,\\\"ask\\\":22818.90527665063,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:24 PM\\\",\\\"price\\\":22750.65331670053,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5966254982325638,\\\"bias\\\":0.09662549823256383},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22754.179787185625,\\\"ask\\\":22891.115673567885,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:28 PM\\\",\\\"price\\\":22822.647730376757,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.40368027303451093,\\\"bias\\\":0.09631972696548907},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22850.982476228055,\\\"ask\\\":22988.500926436045,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:32 PM\\\",\\\"price\\\":22919.741701332052,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.40409004427941175,\\\"bias\\\":0.09590995572058825},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22825.11491671682,\\\"ask\\\":22962.47769455062,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:36 PM\\\",\\\"price\\\":22893.79630563372,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.40398135012841296,\\\"bias\\\":0.09601864987158704},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22862.783246183604,\\\"ask\\\":23000.372714064346,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:38 PM\\\",\\\"price\\\":22931.577980123977,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.40413980988432285,\\\"bias\\\":0.09586019011567715},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22801.22472910712,\\\"ask\\\":22938.443734497934,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:43 PM\\\",\\\"price\\\":22869.834231802528,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.4038810075076831,\\\"bias\\\":0.09611899249231692},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22915.9954653099,\\\"ask\\\":23053.90516720745,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:47 PM\\\",\\\"price\\\":22984.950316258677,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.40436482570878746,\\\"bias\\\":0.09563517429121254},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22910.98727791694,\\\"ask\\\":23048.8668402715,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:51 PM\\\",\\\"price\\\":22979.92705909422,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.40438573091328167,\\\"bias\\\":0.09561426908671833},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22889.12268544374,\\\"ask\\\":23026.87066549656,\\\"dateObserved\\\":\\\"7/24/2023, 5:16:55 PM\\\",\\\"price\\\":22957.996675470153,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.4042943963935216,\\\"bias\\\":0.0957056036064784}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[22484.807498344584,22527.577707981804,22599.168791719836,22655.505793816417,22756.982058331894,22652.517452854045,22750.65331670053,22822.647730376757,22919.741701332052,22893.79630563372,22931.577980123977,22869.834231802528,22984.950316258677,22979.92705909422,22957.996675470153]}]]\"}}],[\"data/salesLedger.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/salesLedger.txt\",\"text\":\"[]\"}}],[\"data/stockMarketReserveMoney.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/stockMarketReserveMoney.txt\",\"text\":\"{\\\"stockMarketReserveMoneyLimit\\\":1500000000000,\\\"capitalToReserveForTrading\\\":363570120929.04517,\\\"moneyInvested\\\":483840564960.774,\\\"moneyRequested\\\":[],\\\"countOfVisitedWithoutFillingRequest\\\":0}\"}}],[\"data/contracts.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/contracts.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T22:15:59.703Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T22:15:59.703Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"data/factionsWithAugsToBuyAndNotEnoughtFavor.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/factionsWithAugsToBuyAndNotEnoughtFavor.txt\",\"text\":\"[{\\\"faction\\\":\\\"CyberSec\\\",\\\"maximumAugRep\\\":56250},{\\\"faction\\\":\\\"NiteSec\\\",\\\"maximumAugRep\\\":150000},{\\\"faction\\\":\\\"Chongqing\\\",\\\"maximumAugRep\\\":112500}]\"}}],[\"data/organizations.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/organizations.txt\",\"text\":\"{\\\"toJoinInOrderInWhichIWantToComplete\\\":[\\\"CyberSec\\\",\\\"NiteSec\\\",\\\"Chongqing\\\",\\\"The Black Hand\\\",\\\"Bachman & Associates\\\",\\\"BitRunners\\\",\\\"Daedalus\\\",\\\"NWO\\\",\\\"OmniTek Incorporated\\\",\\\"Blade Industries\\\",\\\"ECorp\\\",\\\"Illuminati\\\",\\\"Aevum\\\",\\\"Volhaven\\\",\\\"New Tokyo\\\",\\\"Ishima\\\",\\\"Tian Di Hui\\\",\\\"Netburners\\\"],\\\"companiesWeWantToBecomePartOf\\\":[\\\"Bachman & Associates\\\",\\\"NWO\\\",\\\"OmniTek Incorporated\\\",\\\"Blade Industries\\\",\\\"ECorp\\\"],\\\"doNoWorkFor\\\":[\\\"Aevum\\\",\\\"Volhaven\\\",\\\"New Tokyo\\\",\\\"Ishima\\\",\\\"Tian Di Hui\\\",\\\"Netburners\\\"],\\\"stopAtAugments\\\":[{\\\"final\\\":true,\\\"faction\\\":\\\"Chongqing\\\",\\\"augmentToStopAt\\\":\\\"Neuregen Gene Modification\\\"},{\\\"final\\\":true,\\\"faction\\\":\\\"NiteSec\\\",\\\"augmentToStopAt\\\":\\\"Cranial Signal Processors - Gen III\\\"},{\\\"final\\\":true,\\\"faction\\\":\\\"The Black Hand\\\",\\\"augmentToStopAt\\\":\\\"Cranial Signal Processors - Gen IV\\\"}]}\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"scripts/coordinator.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":29333.500999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":459888822283.9802,\"onlineRunningTime\":75825.80999945758,\"ramUsage\":2.7,\"server\":\"home\",\"scriptKey\":\"scripts/coordinator.js*[]\",\"title\":\"scripts/coordinator.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":23149.440000000002,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":609.2100000000016,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"omega-net\\\"]\",\"title\":\"scripts/hacking/weaken.js omega-net\",\"threads\":161,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.825,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":146.8100000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"omega-net\\\"]\",\"title\":\"scripts/hacking/weaken.js omega-net\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":21338.053,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":572.4099999999933,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"scripts/hacking/grow.js crush-fitness\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.827000000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":151.00999999999996,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"scripts/hacking/grow.js crush-fitness\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":20363.305,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":312.4099999999908,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"iron-gym\\\"]\",\"title\":\"scripts/hacking/grow.js iron-gym\",\"threads\":121,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":16390.753,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":206.4099999999968,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"nectar-net\\\"]\",\"title\":\"scripts/hacking/weaken.js nectar-net\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.827000000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":134.21000000000092,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"nectar-net\\\"]\",\"title\":\"scripts/hacking/weaken.js nectar-net\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":16390.753,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.80999999999776,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"joesguns\\\"]\",\"title\":\"scripts/hacking/weaken.js joesguns\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.827000000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.4100000000008,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"zer0\\\"]\",\"title\":\"scripts/hacking/grow.js zer0\",\"threads\":107,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.827000000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":134.21000000000092,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"scripts/hacking/weaken.js harakiri-sushi\",\"threads\":150,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.827000000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":134.21000000000092,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"scripts/hacking/weaken.js hong-fang-tea\",\"threads\":4,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"25.6.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":12580011794.2,\"moneyMax\":62900058971,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1177,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"85.5.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":9031935412.6,\"moneyMax\":45159677063,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1301,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"73.2.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":3866198594.6000004,\"moneyMax\":19330992973,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1090,\"serverGrowth\":77,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-824470.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":2206660927995210,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"71.7.6.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":5902648362.8,\"moneyMax\":29513241814,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1189,\"serverGrowth\":62,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"6.9.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":5668064556.6,\"moneyMax\":28340322783,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1268,\"serverGrowth\":94,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"25.5.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":4799026376,\"moneyMax\":23995131880,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1024,\"serverGrowth\":62,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"57.8.8.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":3965703763,\"moneyMax\":19828518815,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1022,\"serverGrowth\":96,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"81.0.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":3338986017.4,\"moneyMax\":16694930087,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1032,\"serverGrowth\":95,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-417173-OmniTekIncorporated.cct\",\"type\":\"Total Ways to Sum\",\"data\":99,\"reward\":{\"name\":\"OmniTek Incorporated\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"26.1.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":5980051534.400001,\"moneyMax\":29900257672,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1082,\"serverGrowth\":93,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-551305-NWO.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,2,5,6,7,7,9,7,0,8,5],\"reward\":{\"name\":\"NWO\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"46.2.3.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":340802285.40000004,\"moneyMax\":1704011427,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1036,\"serverGrowth\":91,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"3.7.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1386,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"45.6.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":207393733.20000002,\"moneyMax\":1036968666,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":996,\"serverGrowth\":83,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-214124.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)(((()\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"11.9.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":184069765.20000002,\"moneyMax\":920348826,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":893,\"serverGrowth\":69,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-121332.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"10.3.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":160029464,\"moneyMax\":800147320,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":926,\"serverGrowth\":64,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"61.6.9.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":125210190.60000001,\"moneyMax\":626050953,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":861,\"serverGrowth\":73,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"99.7.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":158737226.8,\"moneyMax\":793686134,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":784,\"serverGrowth\":68,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"18.5.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":180810429.60000002,\"moneyMax\":904052148,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":859,\"serverGrowth\":87,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"56.1.1.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":223326967.8,\"moneyMax\":1116634839,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":831,\"serverGrowth\":81,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"95.6.0.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":154487552.4,\"moneyMax\":772437762,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":865,\"serverGrowth\":74,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-909434.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"73.9.2.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":107483560.2,\"moneyMax\":537417801,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":828,\"serverGrowth\":79,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-41190-CyberSec.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[4,8],[3,8,9],[4,4,1,8]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"68.6.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":172440843.4,\"moneyMax\":862204217,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":875,\"serverGrowth\":80,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"31.7.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":157845129.8,\"moneyMax\":789225649,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":837,\"serverGrowth\":75,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"35.7.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":207287338,\"moneyMax\":1036436690,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":865,\"serverGrowth\":60,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"51.5.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":186407601.8,\"moneyMax\":932038009,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":918,\"serverGrowth\":63,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"60.3.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":209964880.60000002,\"moneyMax\":1049824403,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":777,\"serverGrowth\":68,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"43.3.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":170924266.20000002,\"moneyMax\":854621331,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":791,\"serverGrowth\":75,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"72.8.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":159280367.6,\"moneyMax\":796401838,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":839,\"serverGrowth\":73,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"68.1.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":300464910.6,\"moneyMax\":1502324553,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":868,\"serverGrowth\":50,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-320893-NiteSec.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[7,8],[4,7,8],[9,4,3,3],[4,5,7,1,4],[4,3,8,9,8,5],[3,3,6,9,6,9,9],[6,9,6,7,7,7,8,1],[9,4,4,5,8,4,2,7,4],[1,5,5,5,2,6,7,2,7,1],[7,7,5,5,1,2,2,3,3,7,3]],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"41.8.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":302862739.8,\"moneyMax\":1514313699,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":810,\"serverGrowth\":82,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"16.3.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":231833219.4,\"moneyMax\":1159166097,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":68,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"75.9.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":289543677,\"moneyMax\":1447718385,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":76,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"5.4.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":208695086.60000002,\"moneyMax\":1043475433,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":782,\"serverGrowth\":75,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-625266-CyberSec.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":123050623,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-124209-CyberSec.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[67,[5,8,9,13,14,16,18,22,23,25,28,30]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"71.5.0.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":156352466.8,\"moneyMax\":781762334,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":732,\"serverGrowth\":62,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"48.2.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":121177335,\"moneyMax\":605886675,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":491,\"serverGrowth\":42,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"0.4.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":137469858.6,\"moneyMax\":687349293,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":502,\"serverGrowth\":58,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"97.8.4.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":41959730.6,\"moneyMax\":209798653,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":427,\"serverGrowth\":39,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"39.8.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":35412301.800000004,\"moneyMax\":177061509,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":413,\"serverGrowth\":39,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"46.3.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":213291311.8,\"moneyMax\":1066456559,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":772,\"serverGrowth\":78,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-509024.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[123,189,111,22,168,109,185,155,101,119,190,141,25,121,96,126,181,93,16,77,147,28,128,182,30,178,20,159,42,134]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"95.0.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":67751922,\"moneyMax\":338759610,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":455,\"serverGrowth\":52,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"41.2.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":117846055.4,\"moneyMax\":589230277,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":578,\"serverGrowth\":67,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"50.6.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":77010199,\"moneyMax\":385050995,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":424,\"serverGrowth\":28,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-763993.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,0,0,0],[0,1,0,1,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,1,1,0,1],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,1,1],[0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"52.7.1.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":37778391,\"moneyMax\":188891955,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":293,\"serverGrowth\":50,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"84.5.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":49156514.800000004,\"moneyMax\":245782574,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":399,\"serverGrowth\":52,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"32.7.0.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":55000000,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":418,\"serverGrowth\":60,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"46.6.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":15938206.8,\"moneyMax\":79691034,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":299,\"serverGrowth\":42,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"42.0.6.0\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"n00dles\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"n00dles\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"n00dles\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  while(true){\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":4.002000000000001,\"minDifficulty\":1,\"moneyAvailable\":51513,\"moneyMax\":70000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.828,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.4100000000008,\"ramUsage\":1.75,\"server\":\"n00dles\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"10.5.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"foodnstuff\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"foodnstuff\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":35.056000000000004,\"minDifficulty\":3,\"moneyAvailable\":172456.88650306631,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.828,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.4100000000008,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":9,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"0.6.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"sigma-cosmetics\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":3.972,\"minDifficulty\":3,\"moneyAvailable\":614428.1638694205,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.828,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.4100000000008,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":9,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"13.4.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"joesguns\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"joesguns\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":93.8,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.828,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.4100000000008,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":9,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"45.3.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"zer0\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"zer0\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":8.968,\"minDifficulty\":8,\"moneyAvailable\":4440347.868540766,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.828,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.4100000000008,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":18,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"83.6.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"nectar-net\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"nectar-net\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":72.69600000000003,\"minDifficulty\":7,\"moneyAvailable\":2154131.5703422353,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.828,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.4100000000008,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":9,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-570067.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,9],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"72.1.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"neo-net\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"neo-net\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":52.24400000000002,\"minDifficulty\":8,\"moneyAvailable\":48994.90042242674,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.828,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.4100000000008,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":18,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-815379.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[3,8],[6,7,6]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"10.5.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"silver-helix\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"silver-helix\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"computek\",\"netlink\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":18107737.383234084,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.828,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.4100000000008,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":36,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-346431.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")))a)a))))()((a())(\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"87.8.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"hong-fang-tea\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"hong-fang-tea\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":100,\"minDifficulty\":5,\"moneyAvailable\":2964371.164055575,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.828,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.4100000000008,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":9,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"94.1.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"harakiri-sushi\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"harakiri-sushi\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":61.202,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.828,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.4100000000008,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":9,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"46.7.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":4800000,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-327190-TianDiHui.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"ARRAYCACHELINUXPOPUPMOUSE\",\"PROGRAM\"],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"48.7.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"n00dles\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"37.8.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"omega-net\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"omega-net\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":28,\"hackDifficulty\":16.584000000000007,\"minDifficulty\":9,\"moneyAvailable\":69977499,\"moneyMax\":69977499,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":202,\"serverGrowth\":38,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.828,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.4100000000008,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":18,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"39.2.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":42,\"hackDifficulty\":16.69199999999999,\"minDifficulty\":14,\"moneyAvailable\":17103457.52328664,\"moneyMax\":49686168,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":225,\"serverGrowth\":28,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-983199.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,2],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"64.9.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"iron-gym\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"iron-gym\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":11250584.134062514,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.828,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.4100000000008,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":18,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"19.8.7.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":507,\"serverGrowth\":31,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"43.4.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1012,\"serverGrowth\":56,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"10.7.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":769,\"serverGrowth\":45,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"2.4.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":520,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"3.7.8.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":342,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"98.1.8.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"avmnite-02h\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"avmnite-02h\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":216,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.828,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.4100000000008,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"zer0\\\"]\",\"title\":\"scripts/hacking/grow.js zer0\",\"threads\":57,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.828,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.4100000000008,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":16,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-583952.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-431789-TianDiHui.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":71704917,\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-581142.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"21.5.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":515,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"88.9.6.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"CSEC\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"CSEC\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":60,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.828,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.4100000000008,\"ramUsage\":1.75,\"server\":\"CSEC\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-193424.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,2],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"66.2.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"80.3.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-813084-CyberSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"84.2.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"CLOUD-000\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CLOUD-000\",\"httpPortOpen\":false,\"ip\":\"0.7.4.3\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"CLOUD-000\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"CLOUD-000\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"CLOUD-000\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":20363.307,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":514.00999999998,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"silver-helix\\\"]\",\"title\":\"scripts/hacking/weaken.js silver-helix\",\"threads\":161,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":23149.447,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":756.010000000035,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"scripts/hacking/grow.js crush-fitness\",\"threads\":1059,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":21338.057,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":572.4099999999933,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"scripts/hacking/grow.js crush-fitness\",\"threads\":599,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":20363.308,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":551.8099999999886,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"scripts/hacking/grow.js crush-fitness\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":16390.756,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":208.6099999999967,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"scripts/hacking/grow.js crush-fitness\",\"threads\":7019,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":21338.057999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":572.4099999999933,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"omega-net\\\"]\",\"title\":\"scripts/hacking/weaken.js omega-net\",\"threads\":161,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":20363.308,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":551.8099999999886,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"omega-net\\\"]\",\"title\":\"scripts/hacking/weaken.js omega-net\",\"threads\":161,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":16390.756,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":208.6099999999967,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"omega-net\\\"]\",\"title\":\"scripts/hacking/weaken.js omega-net\",\"threads\":161,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.829,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":146.8100000000002,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"omega-net\\\"]\",\"title\":\"scripts/hacking/weaken.js omega-net\",\"threads\":104,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":20363.308,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":486.6099999999809,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/weaken.js johnson-ortho\",\"threads\":681,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":16390.756,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":208.6099999999967,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/weaken.js johnson-ortho\",\"threads\":681,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.829,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":146.8100000000002,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/weaken.js johnson-ortho\",\"threads\":681,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.01000000000029,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/weaken.js johnson-ortho\",\"threads\":135,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":20363.308,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":469.80999999998187,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"scripts/hacking/weaken.js hong-fang-tea\",\"threads\":1921,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":16390.756,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.00999999999956,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"scripts/hacking/weaken.js hong-fang-tea\",\"threads\":1921,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":20363.308,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":364.60999999998785,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"scripts/hacking/weaken.js harakiri-sushi\",\"threads\":1141,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":16390.756,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.00999999999956,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"scripts/hacking/weaken.js harakiri-sushi\",\"threads\":1141,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.829,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":134.21000000000092,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"scripts/hacking/weaken.js harakiri-sushi\",\"threads\":78,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":20363.308,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":346.0099999999889,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"nectar-net\\\"]\",\"title\":\"scripts/hacking/weaken.js nectar-net\",\"threads\":1321,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":20363.308,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":245.60999999999459,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"joesguns\\\"]\",\"title\":\"scripts/hacking/weaken.js joesguns\",\"threads\":1781,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":20363.308,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":230.80999999999543,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"zer0\\\"]\",\"title\":\"scripts/hacking/grow.js zer0\",\"threads\":121,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":16390.756,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":208.6099999999967,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"zer0\\\"]\",\"title\":\"scripts/hacking/grow.js zer0\",\"threads\":1299,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.829,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.4100000000008,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"zer0\\\"]\",\"title\":\"scripts/hacking/grow.js zer0\",\"threads\":1135,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":16390.756,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":208.6099999999967,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"silver-helix\\\"]\",\"title\":\"scripts/hacking/grow.js silver-helix\",\"threads\":3353,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.829,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.4100000000008,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"silver-helix\\\"]\",\"title\":\"scripts/hacking/grow.js silver-helix\",\"threads\":3353,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":16390.756,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":208.6099999999967,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"iron-gym\\\"]\",\"title\":\"scripts/hacking/grow.js iron-gym\",\"threads\":3178,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":14826.829,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.4100000000008,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"iron-gym\\\"]\",\"title\":\"scripts/hacking/grow.js iron-gym\",\"threads\":3178,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":16390.756,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":156.00999999999968,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":901,\"temporary\":false}}]}}}","CompaniesSave":"{\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":8001,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":32001,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":115476.27337849983}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Chongqing\",\"playerReputation\":10225.327999998159}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":10878.394666663924}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":59460.41625150794}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":15948.673900426717,\"lastPrice\":15936.270012422852,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":false,\"otlkMag\":17.38608275035312,\"otlkMagForecast\":31.85704667043902,\"cap\":413709697,\"spreadPerc\":0.1,\"shareTxForMovement\":72921,\"shareTxUntilMovement\":45124,\"totalShares\":114300000,\"maxShares\":22900000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":28089.75614301421,\"lastPrice\":28111.61961476652,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":true,\"otlkMag\":15.223584148689953,\"otlkMagForecast\":66.12657986381357,\"cap\":295767297,\"spreadPerc\":0.5,\"shareTxForMovement\":59520,\"shareTxUntilMovement\":59520,\"totalShares\":96000000,\"maxShares\":19200000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":74270.8873271356,\"lastPrice\":74366.79645745934,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":13.445717430167722,\"otlkMagForecast\":36.11859296865503,\"cap\":407587922,\"spreadPerc\":0.5,\"shareTxForMovement\":38910,\"shareTxUntilMovement\":38910,\"totalShares\":79100000,\"maxShares\":15800000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":20679.834554010034,\"lastPrice\":20655.353736305973,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":16.16426607259467,\"otlkMagForecast\":36.03056021296555,\"cap\":404125219,\"spreadPerc\":0.2,\"shareTxForMovement\":84221,\"shareTxUntilMovement\":42448,\"totalShares\":70000000,\"maxShares\":14000000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":21322.211401014498,\"lastPrice\":21348.23694500153,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":17.183396732548644,\"otlkMagForecast\":35.122986430243074,\"cap\":534599042,\"spreadPerc\":0.6,\"shareTxForMovement\":39503,\"shareTxUntilMovement\":35786,\"totalShares\":53600000,\"maxShares\":10700000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":52213.57079884808,\"lastPrice\":52114.008088240655,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.08,\"b\":true,\"otlkMag\":12.04684031971765,\"otlkMagForecast\":62.878339558155965,\"cap\":1054120782,\"spreadPerc\":0.4,\"shareTxForMovement\":39412,\"shareTxUntilMovement\":39412,\"totalShares\":39200000,\"maxShares\":7800000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":252348.08170757937,\"lastPrice\":252004.8257664208,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":8.854666311442427,\"otlkMagForecast\":60.76976516994296,\"cap\":132154359,\"spreadPerc\":0.5,\"shareTxForMovement\":77014,\"shareTxUntilMovement\":55620,\"totalShares\":78600000,\"maxShares\":15700000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":58812.05218759135,\"lastPrice\":58936.89572341653,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.2,\"b\":false,\"otlkMag\":24.784123881124493,\"otlkMagForecast\":25.824564635375243,\"cap\":437459817,\"spreadPerc\":0.9,\"shareTxForMovement\":59809,\"shareTxUntilMovement\":45066,\"totalShares\":62800000,\"maxShares\":12600000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":6075.111754418605,\"lastPrice\":6083.816533839267,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":false,\"otlkMag\":1.5536031482403805,\"otlkMagForecast\":53.76383340806207,\"cap\":449783964,\"spreadPerc\":0.3,\"shareTxForMovement\":91630,\"shareTxUntilMovement\":30620,\"totalShares\":54900000,\"maxShares\":11000000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":5234.623123716362,\"lastPrice\":5240.364230028825,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":10.764522947344995,\"otlkMagForecast\":63.083145286439624,\"cap\":214327006,\"spreadPerc\":0.6,\"shareTxForMovement\":68680,\"shareTxUntilMovement\":53070,\"totalShares\":76600000,\"maxShares\":15300000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":26927.233319148,\"lastPrice\":26955.813269111568,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":10.878093273173919,\"otlkMagForecast\":60.99412692444419,\"cap\":228752422,\"spreadPerc\":0.8,\"shareTxForMovement\":74568,\"shareTxUntilMovement\":74568,\"totalShares\":62400000,\"maxShares\":12500000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":3661.306465874541,\"lastPrice\":3656.3907737242366,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":5.589285980877392,\"otlkMagForecast\":57.35547049425058,\"cap\":249914480,\"spreadPerc\":0.8,\"shareTxForMovement\":83865,\"shareTxUntilMovement\":26230,\"totalShares\":93300000,\"maxShares\":18700000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":19644.401275446882,\"lastPrice\":19668.726413694072,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":6.962810311508706,\"otlkMagForecast\":58.3267123828376,\"cap\":393424420,\"spreadPerc\":0.3,\"shareTxForMovement\":90137,\"shareTxUntilMovement\":72492,\"totalShares\":49700000,\"maxShares\":9900000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":13347.00520369112,\"lastPrice\":13333.560863794908,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":10.936573955002007,\"otlkMagForecast\":38.483988930264836,\"cap\":363379978,\"spreadPerc\":1,\"shareTxForMovement\":106291,\"shareTxUntilMovement\":87482,\"totalShares\":38500000,\"maxShares\":7700000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":17502.98642683079,\"lastPrice\":17522.492560041028,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":6.2703748817388885,\"otlkMagForecast\":44.216712070623146,\"cap\":156324592,\"spreadPerc\":0.4,\"shareTxForMovement\":75689,\"shareTxUntilMovement\":75689,\"totalShares\":64600000,\"maxShares\":12900000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":27905.325459025884,\"lastPrice\":27940.3735139744,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":6.976188899083461,\"otlkMagForecast\":43.057079738143564,\"cap\":219167744,\"spreadPerc\":0.7,\"shareTxForMovement\":51339,\"shareTxUntilMovement\":51339,\"totalShares\":51900000,\"maxShares\":10400000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":34460.45256318947,\"lastPrice\":34415.40170761943,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":11.982952331816541,\"otlkMagForecast\":39.894446624655934,\"cap\":420329629,\"spreadPerc\":0.9,\"shareTxForMovement\":95685,\"shareTxUntilMovement\":76161,\"totalShares\":35600000,\"maxShares\":7100000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":31511.972823902117,\"lastPrice\":31543.189172403047,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":8.472843368551835,\"otlkMagForecast\":39.82470991532624,\"cap\":560845063,\"spreadPerc\":0.4,\"shareTxForMovement\":83889,\"shareTxUntilMovement\":68136,\"totalShares\":26700000,\"maxShares\":5300000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":13043.998494790896,\"lastPrice\":13062.22722056399,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":5.184555273753741,\"otlkMagForecast\":54.0085024092332,\"cap\":192954536,\"spreadPerc\":0.5,\"shareTxForMovement\":63375,\"shareTxUntilMovement\":63375,\"totalShares\":27300000,\"maxShares\":5500000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":58063.630120351,\"lastPrice\":57813.070776852604,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":2987256,\"playerAvgShortPx\":110015.92973946211,\"mv\":2.45,\"b\":false,\"otlkMag\":17.873976852258497,\"otlkMagForecast\":30.500840566488847,\"cap\":107236568,\"spreadPerc\":0.9,\"shareTxForMovement\":46342,\"shareTxUntilMovement\":21330,\"totalShares\":54400000,\"maxShares\":10900000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":12510.05485594413,\"lastPrice\":12483.555335356681,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.2,\"b\":true,\"otlkMag\":4.0995176987370066,\"otlkMagForecast\":51.20590585413297,\"cap\":61590334,\"spreadPerc\":1,\"shareTxForMovement\":90124,\"shareTxUntilMovement\":19606,\"totalShares\":45500000,\"maxShares\":9100000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2387.0999687912713,\"lastPrice\":2384.948338585954,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.51,\"b\":false,\"otlkMag\":3.8460947983001907,\"otlkMagForecast\":45.38039753974892,\"cap\":58031170,\"spreadPerc\":0.4,\"shareTxForMovement\":92355,\"shareTxUntilMovement\":23800,\"totalShares\":42600000,\"maxShares\":8500000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":143717.3854255351,\"lastPrice\":143266.27542699073,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.78,\"b\":true,\"otlkMag\":7.879671190349183,\"otlkMagForecast\":57.09036705614843,\"cap\":53784251,\"spreadPerc\":1.4,\"shareTxForMovement\":71715,\"shareTxUntilMovement\":54734,\"totalShares\":50500000,\"maxShares\":10100000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":192.6796974872267,\"lastPrice\":193.25231380224704,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.68,\"b\":false,\"otlkMag\":18.185005344107807,\"otlkMagForecast\":29.38391783502172,\"cap\":55848920,\"spreadPerc\":0.7,\"shareTxForMovement\":15733,\"shareTxUntilMovement\":15733,\"totalShares\":28000000,\"maxShares\":5600000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":13487.48686479363,\"lastPrice\":13510.391361228825,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.96,\"b\":true,\"otlkMag\":5.7578504160746515,\"otlkMagForecast\":54.82794223405818,\"cap\":8612163,\"spreadPerc\":0.8,\"shareTxForMovement\":72534,\"shareTxUntilMovement\":49432,\"totalShares\":34800000,\"maxShares\":7000000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":27.14317724817421,\"lastPrice\":27.287222987744006,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3,\"b\":true,\"otlkMag\":7.618422579779034,\"otlkMagForecast\":59.15919834246641,\"cap\":31761380,\"spreadPerc\":0.6,\"shareTxForMovement\":49946,\"shareTxUntilMovement\":49946,\"totalShares\":45000000,\"maxShares\":9000000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":1314.2452241003168,\"lastPrice\":1312.1098375683282,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.92,\"b\":true,\"otlkMag\":6.664576259795349,\"otlkMagForecast\":54.95345828339562,\"cap\":7856465,\"spreadPerc\":1.1,\"shareTxForMovement\":82245,\"shareTxUntilMovement\":42771,\"totalShares\":15200000,\"maxShares\":3000000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":5397.424448632192,\"lastPrice\":5390.4635156686145,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":5.910482817523901,\"otlkMagForecast\":54.52994499007981,\"cap\":55066798,\"spreadPerc\":0.9,\"shareTxForMovement\":151480,\"shareTxUntilMovement\":151480,\"totalShares\":10600000,\"maxShares\":2100000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":33.379016084270766,\"lastPrice\":33.25782253282068,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.06,\"b\":true,\"otlkMag\":5.723312336662973,\"otlkMagForecast\":55.90188794610805,\"cap\":26299173,\"spreadPerc\":0.7,\"shareTxForMovement\":64363,\"shareTxUntilMovement\":37988,\"totalShares\":13800000,\"maxShares\":2800000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":42886.29077130986,\"lastPrice\":42669.6602911514,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.87,\"b\":false,\"otlkMag\":7.767095969949053,\"otlkMagForecast\":44.64533793134464,\"cap\":9533340,\"spreadPerc\":1.1,\"shareTxForMovement\":24404,\"shareTxUntilMovement\":24404,\"totalShares\":82500000,\"maxShares\":16500000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":388.11483006998856,\"lastPrice\":389.1584018005061,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.52,\"b\":true,\"otlkMag\":13.106880678556228,\"otlkMagForecast\":65.77675930441417,\"cap\":1655445,\"spreadPerc\":0.9,\"shareTxForMovement\":45284,\"shareTxUntilMovement\":25746,\"totalShares\":87700000,\"maxShares\":17500000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":6943.134334746651,\"lastPrice\":6933.567465712705,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":7.922534769613888,\"otlkMagForecast\":58.49910820732825,\"cap\":98373610,\"spreadPerc\":0.4,\"shareTxForMovement\":183321,\"shareTxUntilMovement\":111918,\"totalShares\":20200000,\"maxShares\":4000000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":22957.996675470153,\"lastPrice\":22979.92705909422,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":false,\"otlkMag\":9.57056036064784,\"otlkMagForecast\":39.746328666560004,\"cap\":251113832,\"spreadPerc\":0.3,\"shareTxForMovement\":147926,\"shareTxUntilMovement\":147926,\"totalShares\":26100000,\"maxShares\":5200000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":143084,\"lastUpdate\":1690237015219,\"ticksUntilCycle\":68}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":5,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"32","AllGangsSave":"","LastExportBonus":"1690237017082","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}