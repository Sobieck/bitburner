{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":311,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":6911089.887999167,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.28,\"hacking_speed\":1.28,\"hacking_money\":1.28,\"hacking_grow\":1.5104,\"hacking\":1.28,\"strength\":1.28,\"defense\":1.28,\"dexterity\":1.28,\"agility\":1.28,\"charisma\":1.3824,\"hacking_exp\":1.28,\"strength_exp\":1.28,\"defense_exp\":1.28,\"dexterity_exp\":1.28,\"agility_exp\":1.28,\"charisma_exp\":1.28,\"company_rep\":1.28,\"faction_rep\":1.28,\"crime_money\":1.28,\"crime_success\":1.28,\"hacknet_node_money\":1.28,\"hacknet_node_purchase_cost\":0.78125,\"hacknet_node_ram_cost\":0.78125,\"hacknet_node_core_cost\":0.78125,\"hacknet_node_level_cost\":0.78125,\"work_money\":1.3824,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":3,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"NiteSec\",\"Chongqing\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[],\"has4SData\":false,\"has4SDataTixApi\":true,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{\"Bachman & Associates\":\"Junior Software Engineer\",\"OmniTek Incorporated\":\"Junior Software Engineer\",\"Blade Industries\":\"Software Engineering Intern\",\"NWO\":\"Software Engineering Intern\",\"ECorp\":\"Software Engineering Intern\"},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"ECorp\",\"money\":26155374.514049944,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":330780704.65981066,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":106281875153.96228,\"total\":26154295.514049944,\"work\":0,\"servers\":-101580901563.10802,\"other\":-5005600000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":330780704.65981066,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":106281875153.96228,\"total\":26154295.514049944,\"work\":0,\"servers\":-101580901563.10802,\"other\":-5005600000,\"augmentations\":0}},\"playtimeSinceLastAug\":84560200,\"playtimeSinceLastBitnode\":84560200,\"lastAugReset\":1690131857373,\"lastNodeReset\":1690131857373,\"purchasedServers\":[\"CLOUD-000\"],\"scriptProdSinceLastAug\":460196432823.9723,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,3],[4,3],[8,2],[3,1]]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1686525459069},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1686525759083},{\"ID\":\"WORKOUT\",\"unlockedOn\":1686528279088},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1686532892094},{\"ID\":\"TRAVEL\",\"unlockedOn\":1686563653859},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1686567073861},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1686654552271},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1686667992269},{\"ID\":\"NITESEC\",\"unlockedOn\":1686679931301},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1686687177835},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1686697617844},{\"ID\":\"FROZE\",\"unlockedOn\":1686704316676},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1686746667786},{\"ID\":\"TOR\",\"unlockedOn\":1686746787787},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1686746893212},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1686762613218},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1686764833216},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1686767653216},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1686860173219},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1686862933218},{\"ID\":\"4S\",\"unlockedOn\":1686863833212},{\"ID\":\"DONATION\",\"unlockedOn\":1687005871880},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1687008391895},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1687017151898},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1687131964898},{\"ID\":\"SF1.1\",\"unlockedOn\":1687262446639},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1688063566853},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1688088406853},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1688429201871},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1688468232306},{\"ID\":\"SF4.1\",\"unlockedOn\":1688489952298},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1688562948355},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1688694948374},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1688720088407},{\"ID\":\"SF8.1\",\"unlockedOn\":1689334420195},{\"ID\":\"CORPORATION\",\"unlockedOn\":1689335320195},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1690127753231},{\"ID\":\"SF3.1\",\"unlockedOn\":1690131893170}],\"terminalCommandHistory\":[\"nano data/corporation.txt \",\"nano test.js \",\"run test.js \",\"nano data/corporation.txt \",\"free\",\"nano data/corporation.txt \",\"nano data/stockMarketReserveMoney.txt \",\"nano data/batchQueue.txt \",\"nano test.js \",\"run test.js \",\"nano data/corporation.txt \",\"run test.js \",\"nano data/corporation.txt \",\"run test.js \",\"gome\",\"home\",\"nano data/corporation.txt \",\"home\",\"nano test.js \",\"run test.js \",\"nano data/corporation.txt \",\"run test.js \",\"nano thing.txt \",\"free\",\"run scripts/coordinator.js \",\"nano data/ramToReserveOnHome.txt \",\"mem scripts/singularity/do-work.js \",\"nano data/ramToReserveOnHome.txt \",\"nano scripts/singularity/do-work\",\"nano scripts/singularity/do-work.js\",\"mem scripts/singularity/do-work\",\"mem scripts/singularity/do-work.js\",\"nano data/ramToReserveOnHome.txt \",\"mem scripts/singularity/do-job.js \",\"nano data/ramToReserveOnHome.txt \",\"mem scripts/stock/get-stock-quotes.js \",\"nano scripts/ramt\",\"nano data/ramToReserveOnHome.txt \",\"mem scripts/stock/invest-in-stocks.js \",\"nano data/latestQuotes.txt \",\"connect n00dles \",\"nano hack.js\",\"run hack.js \",\"rm hack.js \",\"home\",\"ls\",\"ls scripts/tools/ \",\"free\",\"nano data/stockMarketReserveMoney.txt \",\"nano data/latestQuotes.txt \"],\"lastUpdate\":1690216417739,\"lastSave\":1690216400549,\"totalPlaytime\":3695241200,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":true,\"cyclesWorked\":197806,\"factionWorkType\":\"hacking\",\"factionName\":\"NiteSec\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"40a77882039c0\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"43.3.1.6\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"corporation-management-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"Formulas.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/tools/delete-all-js.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    \\r\\n    const doNoDeleteFolders = [];\\r\\n\\r\\n    for (const textFile of ns.ls(\\\"home\\\", \\\".js\\\")) {\\r\\n        if(!doNoDeleteFolders.find(x => textFile.startsWith(x))){\\r\\n            ns.rm(textFile);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"scripts/tools/delete-all-js.js\",\"server\":\"home\"}}],[\"scripts/contracts/do.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const solverRegistry = [\\r\\n        new LzDecompression2Handler(),\\r\\n        new AlgorithmicStockTrading4Handler(),\\r\\n        new AlgorithmicStockTrading3Handler(),\\r\\n        new AlgorithmicStockTrading1Handler(),\\r\\n        new AlgorithmicStockTrading2Handler(),\\r\\n        new SpiralizeMatrixHandler(),\\r\\n        new Encryption1Handler(),\\r\\n        new Encryption2Handler(),\\r\\n    ]\\r\\n\\r\\n    const contracts = JSON.parse(ns.read(thisRoundsContractsFileName));\\r\\n    contracts\\r\\n        .forEach(contract => {\\r\\n            if (contract.attemptsLeft === 10 || contract.attemptsLeft === 5) {\\r\\n                const solver = solverRegistry.find(x => x.type === contract.type);\\r\\n                if (solver) {\\r\\n                    const result = solver.solve(contract.input);\\r\\n                    const success = ns.codingcontract.attempt(result, contract.name, contract.server);\\r\\n                    if (success === \\\"\\\") {\\r\\n                        const failuresContractsFileName = `contracts/failure/${contract.server}-${contract.name}-${contract.type.replaceAll(\\\" \\\", \\\"\\\")}.txt`;\\r\\n\\r\\n                        const saveThis = { contract, wrongResult: result };\\r\\n\\r\\n                        ns.write(failuresContractsFileName, JSON.stringify(saveThis), \\\"W\\\");\\r\\n\\r\\n                        ns.alert(`${contract.name} on ${contract.server} had a problem solving. You need to figure this out. Type: ${contract.type}`);\\r\\n                    } else {\\r\\n                        ns.toast(`Contract completed: ${success} Type: ${contract.type}`, \\\"success\\\", null);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        });\\r\\n}\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\";\\r\\n\\r\\nclass LzDecompression2Handler {\\r\\n    type = 'Compression II: LZ Decompression';\\r\\n\\r\\n    solve(input) {\\r\\n        return this.lzDecompression(input);\\r\\n    }\\r\\n\\r\\n    /// all need to be worked on in tests. These are just copies.\\r\\n    lzDecompression(stringToDecode) {\\r\\n        let decompressedString = '';\\r\\n        let startOfNextChunk = 0\\r\\n        let nextSectionCompressed = false;\\r\\n\\r\\n\\r\\n        while (startOfNextChunk < stringToDecode.length) {\\r\\n            const chunkLength = Number(stringToDecode[startOfNextChunk]);\\r\\n\\r\\n\\r\\n            if (chunkLength === 0) {\\r\\n                startOfNextChunk++;\\r\\n                nextSectionCompressed = !nextSectionCompressed;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (nextSectionCompressed) {\\r\\n                const nextCharacterInEncoded = parseInt(stringToDecode[startOfNextChunk + 1]);\\r\\n\\r\\n                const placesBack = nextCharacterInEncoded;\\r\\n                const startText = decompressedString.length - placesBack;\\r\\n                const endOfText = startText + chunkLength;\\r\\n\\r\\n                if (chunkLength <= nextCharacterInEncoded) {\\r\\n                    decompressedString += decompressedString.slice(startText, endOfText);\\r\\n                } else {\\r\\n                    let nextChunk = \\\"\\\";\\r\\n                    const partialChunk = decompressedString.slice(startText, endOfText);\\r\\n\\r\\n                    while (nextChunk.length < chunkLength) {\\r\\n                        if (nextChunk.length + partialChunk.length > chunkLength) {\\r\\n                            const howMuchLeftInChunk = chunkLength - nextChunk.length;\\r\\n                            nextChunk += partialChunk.slice(0, howMuchLeftInChunk)\\r\\n                        } else {\\r\\n                            nextChunk += partialChunk;\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    decompressedString += nextChunk;\\r\\n                }\\r\\n\\r\\n                startOfNextChunk += 2;\\r\\n                nextSectionCompressed = false;\\r\\n            } else {\\r\\n                const startText = startOfNextChunk + 1;\\r\\n                const endOfText = startText + chunkLength;\\r\\n                decompressedString += stringToDecode.slice(startText, endOfText);\\r\\n                startOfNextChunk = endOfText;\\r\\n                nextSectionCompressed = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        return decompressedString;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading1Handler {\\r\\n    type = 'Algorithmic Stock Trader I';\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = 1;\\r\\n        const stockPricesByDay = input;\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return new AlgorithmicStockTrading4Handler().tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading2Handler {\\r\\n    type = 'Algorithmic Stock Trader II';\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = input.length;\\r\\n        const stockPricesByDay = input;\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return new AlgorithmicStockTrading4Handler().tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading3Handler {\\r\\n    type = 'Algorithmic Stock Trader III';\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = 2;\\r\\n        const stockPricesByDay = input;\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return new AlgorithmicStockTrading4Handler().tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading4Handler {\\r\\n    type = 'Algorithmic Stock Trader IV';\\r\\n\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = input[0];\\r\\n        const stockPricesByDay = input[1];\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return this.tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n\\r\\n    tradeStock(maxNumberOfTrades, stockPricesByDay) {\\r\\n        if (maxNumberOfTrades === 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        let profitsPerTransaction = []\\r\\n\\r\\n        for (let i = stockPricesByDay.length - 1; i >= 1; i--) {\\r\\n            const priceToSeeIfHasNoVolitility = stockPricesByDay[i];\\r\\n\\r\\n            const yesterdaysPrice = stockPricesByDay[i - 1]\\r\\n            const tomorrowsPrice = stockPricesByDay[i + 1]\\r\\n\\r\\n            if (\\r\\n                (yesterdaysPrice <= priceToSeeIfHasNoVolitility && priceToSeeIfHasNoVolitility <= tomorrowsPrice) || // rising prices filter\\r\\n                (!tomorrowsPrice && yesterdaysPrice >= priceToSeeIfHasNoVolitility) || // end price\\r\\n                (yesterdaysPrice >= priceToSeeIfHasNoVolitility && priceToSeeIfHasNoVolitility >= tomorrowsPrice)) { // falling price filter\\r\\n                stockPricesByDay.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < stockPricesByDay.length; i++) {\\r\\n            const price = stockPricesByDay[i];\\r\\n            const potentialBuyPrice = stockPricesByDay[i - 1];\\r\\n            let potentialProfit = 0;\\r\\n\\r\\n            if (potentialBuyPrice) {\\r\\n                potentialProfit = price - potentialBuyPrice;\\r\\n            }\\r\\n\\r\\n            if (potentialProfit < 0) {\\r\\n                potentialProfit = 0;\\r\\n            }\\r\\n\\r\\n\\r\\n            profitsPerTransaction.push({ price, potentialProfit });\\r\\n        }\\r\\n\\r\\n        if (maxNumberOfTrades >= profitsPerTransaction.filter(x => x.potentialProfit > 0).length) {\\r\\n            return profitsPerTransaction\\r\\n                .reduce((acc, x) => acc + x.potentialProfit, 0);\\r\\n        }\\r\\n\\r\\n        const minProfit = Math.min(...profitsPerTransaction.filter(x => x.potentialProfit !== 0).map(x => x.potentialProfit));\\r\\n        const countOfMinProfits = profitsPerTransaction.filter(x => x.potentialProfit === minProfit).length;\\r\\n        const maxPrice = Math.max(...stockPricesByDay);\\r\\n        const arraysToWorkWith = [];\\r\\n\\r\\n        for (let i = 0; i < profitsPerTransaction.length; i++) {\\r\\n            const profitPerTranaction = profitsPerTransaction[i];\\r\\n\\r\\n            if (profitPerTranaction.potentialProfit === minProfit) {\\r\\n\\r\\n                const copyOfProfitsPerTransaction = profitsPerTransaction.map(x => x)\\r\\n                if (profitPerTranaction.price === maxPrice) {\\r\\n                    copyOfProfitsPerTransaction.splice(i - 1, 1);\\r\\n                } else {\\r\\n                    copyOfProfitsPerTransaction.splice(i, 1); // if there is a bigger price in the future, splice sell price. \\r\\n                }\\r\\n\\r\\n                arraysToWorkWith.push(copyOfProfitsPerTransaction.map(x => x.price));\\r\\n            }\\r\\n\\r\\n            if (arraysToWorkWith.length === countOfMinProfits) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        const potentialProfitsForAllTrades = []\\r\\n        for (const newArrayOfPrices of arraysToWorkWith) {\\r\\n            potentialProfitsForAllTrades.push(this.tradeStock(maxNumberOfTrades, newArrayOfPrices))\\r\\n        }\\r\\n\\r\\n        return Math.max(...potentialProfitsForAllTrades);\\r\\n\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass SpiralizeMatrixHandler {\\r\\n    type = \\\"Spiralize Matrix\\\";\\r\\n\\r\\n    solve(matrix) {\\r\\n        return this.solveRecursively(JSON.parse(JSON.stringify(matrix)));\\r\\n    }\\r\\n\\r\\n    solveRecursively(matrix, spiralOrderResult = []) {\\r\\n\\r\\n        if (matrix.length === 0) {\\r\\n            return spiralOrderResult;\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < matrix.length; i++) {\\r\\n            if (i === 0 || i === matrix.length - 1) {\\r\\n                let rowToEmpty = matrix[i];\\r\\n\\r\\n                if (i === matrix.length - 1 && i !== 0) {\\r\\n                    rowToEmpty.reverse()\\r\\n                }\\r\\n\\r\\n                for (let x = 0; x < rowToEmpty.length; x++) {\\r\\n                    const number = rowToEmpty[x];\\r\\n                    \\r\\n                    spiralOrderResult.push(number);\\r\\n                }\\r\\n\\r\\n                rowToEmpty.length = 0\\r\\n            } else {\\r\\n                let rowBeingUsed = matrix[i];\\r\\n                const number = rowBeingUsed.pop()\\r\\n\\r\\n                if(number){\\r\\n                    spiralOrderResult.push(number);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        for (let i = matrix.length - 1; i > -1; i--) {\\r\\n            if (matrix[i].length === 0) {\\r\\n                matrix.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (let i = matrix.length - 1; i > -1; i--) {\\r\\n            const row = matrix[i];\\r\\n            row.reverse();\\r\\n            spiralOrderResult.push(row.pop());\\r\\n            row.reverse();\\r\\n        }\\r\\n\\r\\n        return this.solveRecursively(matrix, spiralOrderResult)\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Encryption1Handler {\\r\\n    type = 'Encryption I: Caesar Cipher';\\r\\n\\r\\n    solve([string, shift]) {\\r\\n\\r\\n        let returnString = \\\"\\\";\\r\\n\\r\\n        if (string) {\\r\\n            for (const character of string) {\\r\\n                if (character === \\\" \\\") {\\r\\n                    returnString += \\\" \\\";\\r\\n                }\\r\\n                else {\\r\\n                    const charCode = character.charCodeAt(0);\\r\\n\\r\\n                    if (charCode) {\\r\\n                        let newCharCode = charCode - shift;\\r\\n\\r\\n                        if (newCharCode < 65) {\\r\\n                            const amountLessThan65 = 65 - newCharCode;\\r\\n                            newCharCode = 91 - amountLessThan65;\\r\\n                        }\\r\\n\\r\\n                        returnString += String.fromCharCode(newCharCode);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return returnString;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass Encryption2Handler {\\r\\n    type = 'Encryption II: Vigenère Cipher';\\r\\n\\r\\n    solve([plainText, key]) {\\r\\n\\r\\n        let encryptedText = \\\"\\\";\\r\\n\\r\\n        if(plainText){\\r\\n            let keyIndex = 0;\\r\\n\\r\\n            for (let i = 0; i < plainText.length; i++) {\\r\\n                const plainTextCharacter = plainText[i];\\r\\n\\r\\n                if(plainTextCharacter === \\\" \\\"){\\r\\n                    encryptedText += \\\" \\\";\\r\\n                } else {\\r\\n                    const keyCharCode = key[keyIndex].charCodeAt(0);\\r\\n                    const shift = keyCharCode - 65;\\r\\n\\r\\n                    const plainTextCode = plainTextCharacter.charCodeAt(0);\\r\\n                    let encryptedCharacterCode = plainTextCode + shift;\\r\\n\\r\\n                    if (encryptedCharacterCode > 90) {\\r\\n                        const amountMoreThan91 = encryptedCharacterCode - 91;\\r\\n                        encryptedCharacterCode = amountMoreThan91 + 65;\\r\\n                    }\\r\\n\\r\\n                    encryptedText += String.fromCharCode(encryptedCharacterCode);\\r\\n                }\\r\\n\\r\\n                \\r\\n                keyIndex++;\\r\\n                if(keyIndex >= key.length){\\r\\n                    keyIndex = 0;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return encryptedText;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/contracts/do.js\",\"server\":\"home\"}}],[\"scripts/contracts/get.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// let savedContractsFileNameForHuman;\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \\r\\n\\r\\nexport async function main(ns) {\\r\\n    const allContracts = [];\\r\\n\\r\\n    JSON\\r\\n        .parse(ns.read('../../data/enviroment.txt'))\\r\\n        .map(server => {\\r\\n            const hostName = server.name;\\r\\n            ns\\r\\n                .ls(hostName)\\r\\n                .filter(file => file.endsWith('.cct'))\\r\\n                .map(contract => {\\r\\n                    const cont = new Contract(\\r\\n                        hostName,\\r\\n                        contract,\\r\\n                        ns.codingcontract.getContractType(contract, hostName),\\r\\n                        ns.codingcontract.getNumTriesRemaining(contract, hostName)\\r\\n                    );\\r\\n\\r\\n                    allContracts.push(cont);\\r\\n                });\\r\\n        });\\r\\n    \\r\\n\\r\\n    ns.rm(thisRoundsContractsFileName);\\r\\n    ns.write(thisRoundsContractsFileName, JSON.stringify(allContracts), \\\"W\\\");\\r\\n}\\r\\n\\r\\nclass Contract {\\r\\n    constructor(server, name, type, attemptsLeft, input, description) {\\r\\n        this.server = server;\\r\\n        this.name = name;\\r\\n        this.type = type;\\r\\n        this.attemptsLeft = attemptsLeft;\\r\\n        this.input = input;\\r\\n        this.description = description;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/contracts/get.js\",\"server\":\"home\"}}],[\"scripts/contracts/populate-description.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const contracts = JSON.parse(ns.read(thisRoundsContractsFileName))\\r\\n\\r\\n    for (const contract of contracts) {\\r\\n        const hostName = contract.server;\\r\\n        const contractName = contract.name;\\r\\n        contract.description = ns.codingcontract.getDescription(contractName, hostName);\\r\\n    }\\r\\n\\r\\n    ns.rm(thisRoundsContractsFileName);\\r\\n    ns.write(thisRoundsContractsFileName, JSON.stringify(contracts), \\\"W\\\");\\r\\n}\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \",\"filename\":\"scripts/contracts/populate-description.js\",\"server\":\"home\"}}],[\"scripts/contracts/populate-input.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const contracts = JSON.parse(ns.read(thisRoundsContractsFileName))\\r\\n\\r\\n    for (const contract of contracts) {\\r\\n        const hostName = contract.server;\\r\\n        const contractName = contract.name;\\r\\n        contract.input = ns.codingcontract.getData(contractName, hostName);\\r\\n    }\\r\\n\\r\\n    ns.rm(thisRoundsContractsFileName);\\r\\n    ns.write(thisRoundsContractsFileName, JSON.stringify(contracts), \\\"W\\\");\\r\\n}\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \",\"filename\":\"scripts/contracts/populate-input.js\",\"server\":\"home\"}}],[\"scripts/contracts/save-contracts-for-thomas.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \\r\\nlet savedContractsFileNameForHuman;\\r\\n\\r\\nexport async function main(ns) {\\r\\n\\r\\n    let savedContracts;\\r\\n\\r\\n    const contractsFromThisRound = JSON.parse(ns.read(thisRoundsContractsFileName));\\r\\n\\r\\n    if(savedContractsFileNameForHuman){\\r\\n        savedContracts = JSON.parse(ns.read(savedContractsFileNameForHuman));\\r\\n    }\\r\\n\\r\\n    if (!savedContracts || contractsFromThisRound.length === 0 && savedContracts.length > 0){\\r\\n        const now = new Date();\\r\\n        savedContractsFileNameForHuman = `contracts/${now.toISOString()}.txt`\\r\\n    }\\r\\n\\r\\n    ns.rm(savedContractsFileNameForHuman);\\r\\n    ns.write(savedContractsFileNameForHuman, JSON.stringify(contractsFromThisRound), \\\"W\\\");\\r\\n}\",\"filename\":\"scripts/contracts/save-contracts-for-thomas.js\",\"server\":\"home\"}}],[\"scripts/corporations/start-company.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if(ns.corporation.hasCorporation()){\\r\\n        return;\\r\\n    }\\r\\n\\r\\n\\r\\n    const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if(moneyOnHome > 200_000_000_000){\\r\\n        ns.corporation.createCorporation(\\\"Gidget's Keiretsu\\\", true)\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\",\"filename\":\"scripts/corporations/start-company.js\",\"server\":\"home\"}}],[\"scripts/hacking/advanced-dispatch.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const nameOfrecordOfWhoIsBeingHacked = 'data/recordOfWhoIsBeingHacked.txt';\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\";\\r\\n\\r\\n    const hackScript = 'scripts/hacking/hack-until-worked.js';\\r\\n    const growScript = 'scripts/hacking/grow.js';\\r\\n    const weakenScript = 'scripts/hacking/weaken.js';\\r\\n\\r\\n    let memoryLimited = false;\\r\\n    if(ns.fileExists('data/ramObservations.txt') || ns.fileExists('buyOrUpgradeServerFlag.txt')){\\r\\n        memoryLimited = true;\\r\\n    }\\r\\n\\r\\n    const homeMemoryLimitations = JSON.parse(ns.read(\\\"data/ramToReserveOnHome.txt\\\"));\\r\\n\\r\\n    let batchTargets = [];\\r\\n\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        const batchQueue = JSON.parse(ns.read(batchQueuesFileName));\\r\\n        batchTargets = batchQueue.map(x => x[0]);\\r\\n    }\\r\\n\\r\\n    let recordOfWhoIsBeingHacked = new Map();\\r\\n\\r\\n    if (ns.fileExists(nameOfrecordOfWhoIsBeingHacked)) {\\r\\n        recordOfWhoIsBeingHacked = new Map(JSON.parse(ns.read(nameOfrecordOfWhoIsBeingHacked)));\\r\\n    }\\r\\n\\r\\n    for (const recordKey of recordOfWhoIsBeingHacked.keys()) {\\r\\n        const record = recordOfWhoIsBeingHacked.get(recordKey);\\r\\n        if (record.pid === 0) {\\r\\n            recordOfWhoIsBeingHacked.delete(recordKey);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n\\r\\n    const allHackedMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    let allMachinesByOrderOfValue = allHackedMachines\\r\\n        .filter(x => !x.server.purchasedByPlayer && !batchTargets.includes(x.name) && x.server.moneyMax > 0)\\r\\n        .sort((a, b) => b.server.moneyMax - a.server.moneyMax)\\r\\n        .map(x => new HackedRecord(\\r\\n            x.name,\\r\\n            x.server.moneyMax,\\r\\n            x.server.minDifficulty,\\r\\n            x.server.hackDifficulty,\\r\\n            x.server.moneyAvailable,\\r\\n        ))\\r\\n\\r\\n    if(memoryLimited){\\r\\n        allMachinesByOrderOfValue = allMachinesByOrderOfValue.slice(0, 15);\\r\\n    }\\r\\n\\r\\n    cleanProcessesAttackingBatchTarget(ns, recordOfWhoIsBeingHacked, batchTargets);\\r\\n    \\r\\n    cleanRecordOfWhoIsBeingHacked(ns, recordOfWhoIsBeingHacked);\\r\\n\\r\\n    const machinesNextInQueueToHack = getMachinesToHack(allMachinesByOrderOfValue, recordOfWhoIsBeingHacked, ns);\\r\\n\\r\\n    const hackQueue = [];\\r\\n    const growAndWeakenQueue = [];\\r\\n\\r\\n    machinesNextInQueueToHack.forEach(machineInQuestion => {\\r\\n        if (machineInQuestion.needsWeakening() || machineInQuestion.needsGrowing()) {\\r\\n            growAndWeakenQueue.push(machineInQuestion);\\r\\n        } else {\\r\\n            hackQueue.push(machineInQuestion);\\r\\n        }\\r\\n    });\\r\\n\\r\\n    const ramNeededForOneHackThread = ns.getScriptRam(hackScript);\\r\\n\\r\\n    hackQueue.forEach(target => {\\r\\n\\r\\n        let numberOfThreads = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable));\\r\\n        const ramNeeded = ramNeededForOneHackThread * numberOfThreads;\\r\\n        let machineToRunOn = getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations);\\r\\n\\r\\n        if (machineToRunOn && numberOfThreads > 0) {\\r\\n            ns.scp(hackScript, machineToRunOn.hostname);\\r\\n            const pid = ns.exec(hackScript, machineToRunOn.hostname, numberOfThreads, target.name);\\r\\n            if (pid !== 0) {\\r\\n                target.hacking();\\r\\n                target.machineRunningOn = machineToRunOn.hostname;\\r\\n                target.pid = pid;\\r\\n                recordOfWhoIsBeingHacked.set(target.name, target);\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n\\r\\n\\r\\n    const ramNeededForWeaken = ns.getScriptRam(weakenScript);\\r\\n    const ramNeededForGrow = ns.getScriptRam(growScript);\\r\\n    growAndWeakenQueue.map(target => {\\r\\n        let machineToRunOn;\\r\\n        let threadsNeeded;\\r\\n        let script;\\r\\n\\r\\n        if (target.needsGrowing()) {\\r\\n            target.growing();\\r\\n\\r\\n            script = growScript;\\r\\n            const serverToHack = getServer(ns, target.name, homeMemoryLimitations);\\r\\n            const player = ns.getPlayer();\\r\\n\\r\\n            if (ns.fileExists('Formulas.exe')) {\\r\\n                threadsNeeded = Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, 1));\\r\\n            } else {\\r\\n                threadsNeeded = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable)) * 5;\\r\\n\\r\\n                if (threadsNeeded === 0) {\\r\\n                    threadsNeeded = 5000;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            machineToRunOn = getMachineWithEnoughRam(ns, threadsNeeded * ramNeededForGrow, enviroment, homeMemoryLimitations);\\r\\n\\r\\n            if (!machineToRunOn) {\\r\\n                [threadsNeeded, machineToRunOn] = getMachineWithNumberOfThreads(ns, enviroment, threadsNeeded, ramNeededForGrow, homeMemoryLimitations);\\r\\n            }\\r\\n\\r\\n            if (machineToRunOn && machineToRunOn.cpuCores > 1 && ns.fileExists('Formulas.exe')) {\\r\\n                threadsNeeded = Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, machineToRunOn.cpuCores));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (target.needsWeakening()) {\\r\\n            target.weakening();\\r\\n\\r\\n            script = weakenScript;\\r\\n            const amountToWeaken = target.hackDifficulty - target.minDifficulty;\\r\\n\\r\\n            threadsNeeded = getNumberOfThreadsToWeaken(ns, 1, amountToWeaken);\\r\\n\\r\\n            machineToRunOn = getMachineWithEnoughRam(ns, threadsNeeded * ramNeededForWeaken, enviroment, homeMemoryLimitations);\\r\\n\\r\\n            if (!machineToRunOn) {\\r\\n                [threadsNeeded, machineToRunOn] = getMachineWithNumberOfThreads(ns, enviroment, threadsNeeded, ramNeededForWeaken, homeMemoryLimitations);\\r\\n            }\\r\\n\\r\\n            if (machineToRunOn && machineToRunOn.cpuCores > 1) {\\r\\n                threadsNeeded = getNumberOfThreadsToWeaken(ns, machineToRunOn.cpuCores, amountToWeaken);\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n\\r\\n        if (machineToRunOn && threadsNeeded > 0) {\\r\\n            ns.scp(script, machineToRunOn.hostname);\\r\\n            const pid = ns.exec(script, machineToRunOn.hostname, threadsNeeded, target.name);\\r\\n\\r\\n            if (pid !== 0) {\\r\\n                target.machineRunningOn = machineToRunOn.hostname;\\r\\n                target.pid = pid;\\r\\n\\r\\n                recordOfWhoIsBeingHacked.set(target.name, target);\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n\\r\\n    ns.rm(nameOfrecordOfWhoIsBeingHacked);\\r\\n    ns.write(nameOfrecordOfWhoIsBeingHacked, JSON.stringify(Array.from(recordOfWhoIsBeingHacked.entries()), \\\"W\\\"));\\r\\n\\r\\n    function cleanProcessesAttackingBatchTarget(ns, recordOfWhoIsBeingHacked, batchTargets) {\\r\\n        for (const machineHackin of recordOfWhoIsBeingHacked) {\\r\\n            const whoTheyHackin = machineHackin[0];\\r\\n\\r\\n            if (batchTargets.includes(whoTheyHackin)) {\\r\\n                ns.kill(recordOfWhoIsBeingHacked.get(whoTheyHackin).pid);\\r\\n                recordOfWhoIsBeingHacked.delete(whoTheyHackin);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getMachineWithNumberOfThreads(ns, enviroment, threads, ramCostPerThread, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n    const buyOrUpgradeServerFlag = 'buyOrUpgradeServerFlag.txt';\\r\\n    let originalAmountNeeded = ramCostPerThread * threads;\\r\\n\\r\\n    let globalMaxAmountNeeded = 0;\\r\\n\\r\\n    if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n        globalMaxAmountNeeded = JSON.parse(ns.read(buyOrUpgradeServerFlag));\\r\\n    }\\r\\n\\r\\n    if (originalAmountNeeded > globalMaxAmountNeeded) {\\r\\n        globalMaxAmountNeeded = originalAmountNeeded;\\r\\n        ns.rm(buyOrUpgradeServerFlag);\\r\\n        ns.write(buyOrUpgradeServerFlag, globalMaxAmountNeeded, \\\"W\\\");\\r\\n    }\\r\\n\\r\\n    while (threads > 0 && !machineToRunOn) {\\r\\n        threads--;\\r\\n\\r\\n        machineToRunOn = getMachineWithEnoughRam(ns, threads * ramCostPerThread, enviroment, homeMemoryLimitations)\\r\\n    }\\r\\n\\r\\n    return [threads, machineToRunOn];\\r\\n}\\r\\n\\r\\nfunction getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n\\r\\n    const allHackableMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    allHackableMachines.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const machinesWithRamAvailable = allHackableMachines\\r\\n        .filter(x => x.server.ramUsed < x.server.maxRam && x.server.maxRam !== 0);\\r\\n\\r\\n    const serversWithEnoughRam = machinesWithRamAvailable\\r\\n        .filter(x => (x.server.maxRam - x.server.ramUsed) > ramNeeded)\\r\\n        .sort((b, a) => b.server.maxRam - a.server.maxRam);\\r\\n\\r\\n    for (const potentialServerToRun of serversWithEnoughRam) {\\r\\n        const server = getServer(ns, potentialServerToRun.name, homeMemoryLimitations);\\r\\n        const freeRam = server.maxRam - server.ramUsed;\\r\\n        if (freeRam > ramNeeded) {\\r\\n            machineToRunOn = server;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machineToRunOn;\\r\\n}\\r\\n\\r\\n\\r\\nfunction getServer(ns, serverName, homeMemoryLimitations) {\\r\\n    const server = ns.getServer(serverName);\\r\\n\\r\\n    if (serverName === \\\"home\\\") {\\r\\n\\r\\n        let ramToReserve = homeMemoryLimitations.ramToReserve;\\r\\n\\r\\n        if(server.maxRam < ramToReserve){\\r\\n            ramToReserve = homeMemoryLimitations.ramToReserveInLimitedEnvironment;\\r\\n        }\\r\\n\\r\\n        server.maxRam -= ramToReserve;\\r\\n        server.ramUsed -= ramToReserve;\\r\\n\\r\\n        if (server.ramUsed < 0) {\\r\\n            server.ramUsed = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return server;\\r\\n}\\r\\n\\r\\nfunction getMachinesToHack(hackableMachinesInTheEnvironment, recordOfWhoIsBeingHacked, ns) {\\r\\n    const machinesNextInQueueToHack = [];\\r\\n    const namesOfMachinesBeingHacked = Array.from(recordOfWhoIsBeingHacked.keys());\\r\\n\\r\\n    for (const hackableMachine of hackableMachinesInTheEnvironment) {\\r\\n        if (!namesOfMachinesBeingHacked.includes(hackableMachine.name)) {\\r\\n            machinesNextInQueueToHack.push(hackableMachine);\\r\\n        } else {\\r\\n            const recordOfHackin = recordOfWhoIsBeingHacked.get(hackableMachine.name);\\r\\n            const moneyChange = recordOfHackin.moneyAvailable - hackableMachine.moneyAvailable;\\r\\n            const difficultyChange = recordOfHackin.hackDifficulty - hackableMachine.hackDifficulty;\\r\\n\\r\\n            if (moneyChange !== 0 || difficultyChange !== 0) {\\r\\n                machinesNextInQueueToHack.push(hackableMachine);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machinesNextInQueueToHack;\\r\\n}\\r\\n\\r\\nexport class HackedRecord {\\r\\n    constructor(name, maxMoney, minDifficulty, hackDifficulty, moneyAvailable) {\\r\\n        this.name = name;\\r\\n        this.moneyThreshhold = maxMoney * 0.75;\\r\\n        this.securityThreshholdTarget = minDifficulty + 5;\\r\\n        this.hackDifficulty = hackDifficulty;\\r\\n        this.moneyAvailable = moneyAvailable;\\r\\n        this.minDifficulty = minDifficulty;\\r\\n        this.machineRunningOn;\\r\\n        this.pid;\\r\\n\\r\\n        this.isWeakening = false;\\r\\n        this.isGrowing = false;\\r\\n        this.isHacking = false;\\r\\n    }\\r\\n\\r\\n    needsWeakening() {\\r\\n        return this.hackDifficulty > this.securityThreshholdTarget;\\r\\n    }\\r\\n\\r\\n    needsGrowing() {\\r\\n        return this.moneyAvailable < this.moneyThreshhold;\\r\\n    }\\r\\n\\r\\n    weakening() {\\r\\n        this.isWeakening = true;\\r\\n        this.isGrowing = false;\\r\\n        this.isHacking = false;\\r\\n    }\\r\\n\\r\\n    growing() {\\r\\n        this.isWeakening = false;\\r\\n        this.isGrowing = true;\\r\\n        this.isHacking = false;\\r\\n    }\\r\\n\\r\\n    hacking() {\\r\\n        this.isWeakening = false;\\r\\n        this.isGrowing = false;\\r\\n        this.isHacking = true;\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getNumberOfThreadsToWeaken(ns, cpuCores, amountToWeaken) {\\r\\n    let numberOfThreadsToWeaken = 0;\\r\\n    let foundNumberOfThreads = false;\\r\\n    while (!foundNumberOfThreads) {\\r\\n        numberOfThreadsToWeaken++;\\r\\n\\r\\n        const amountNumberOfThreadsWillWeaken = Math.ceil(ns.weakenAnalyze(numberOfThreadsToWeaken, cpuCores));\\r\\n        if (amountNumberOfThreadsWillWeaken > amountToWeaken) {\\r\\n            foundNumberOfThreads = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //add a small margin\\r\\n    numberOfThreadsToWeaken += 20;\\r\\n    return numberOfThreadsToWeaken;\\r\\n}\\r\\n\\r\\nfunction cleanRecordOfWhoIsBeingHacked(ns, recordOfWhoIsBeingHacked) {\\r\\n    for (const key of recordOfWhoIsBeingHacked.keys()) {\\r\\n        const record = recordOfWhoIsBeingHacked.get(key);\\r\\n        \\r\\n        if(!ns.isRunning(record.pid)){\\r\\n            recordOfWhoIsBeingHacked.delete(key);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/advanced-dispatch.js\",\"server\":\"home\"}}],[\"scripts/hacking/batch-dispatch.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let failuresThisRun = 0;\\r\\nlet successesThisRun = 0;\\r\\n\\r\\nlet lastTimeVisited = new Date();\\r\\nlet secondsBetweenVisits = [];\\r\\nlet lastRecordedToConsole = new Date();\\r\\n\\r\\nlet visitsToFunction = 0;\\r\\n\\r\\nlet countOfSuccesses = [];\\r\\nlet countOfFailures = [];\\r\\nlet averageErrorRateOver10Minutes = 1;\\r\\nlet errorRateAtWhichWeAllowNewThings = 0.1;\\r\\n\\r\\nexport async function main(ns) {\\r\\n    visitsToFunction++;\\r\\n\\r\\n    const buyOrUpgradeServerFlagFile = 'buyOrUpgradeServerFlag.txt';\\r\\n    const memoryConstrained = ns.fileExists('data/ramObservations.txt') || ns.fileExists(buyOrUpgradeServerFlagFile);\\r\\n\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\"\\r\\n\\r\\n    let batchQueueForDifferentTargets = new Map();\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        batchQueueForDifferentTargets = new Map(JSON.parse(ns.read(batchQueuesFileName)));\\r\\n    }\\r\\n\\r\\n    const homeMemoryLimitations = JSON.parse(ns.read(\\\"data/ramToReserveOnHome.txt\\\"));\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n\\r\\n    const playerServers = enviroment\\r\\n        .filter(x => x.server.purchasedByPlayer);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    playerServers.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const totalBoughtMemory = playerServers.reduce((acc, x) => acc + x.server.maxRam, 0);\\r\\n\\r\\n    const ramNeededForBatchesFile = \\\"data/ramNeededToStartBatches.txt\\\";\\r\\n    const memoryNeededForBatches = 105_000;\\r\\n\\r\\n    if (totalBoughtMemory < memoryNeededForBatches) {\\r\\n        const ramNeededToStartBatches = Math.round(memoryNeededForBatches - totalBoughtMemory);\\r\\n        ns.rm(ramNeededForBatchesFile);\\r\\n        ns.write(ramNeededForBatchesFile, ramNeededToStartBatches, \\\"W\\\");\\r\\n\\r\\n        if (visitsToFunction > 100) {\\r\\n            visitsToFunction = 0;\\r\\n            ns.toast(`Ram Needed to Start Batches: ${ramNeededToStartBatches}`, \\\"warning\\\", 180000)\\r\\n        }\\r\\n\\r\\n        ns.run('scripts/hacking/memory-starved-dispatch.js');\\r\\n        return;\\r\\n    } else {\\r\\n        ns.rm(ramNeededForBatchesFile);\\r\\n    }\\r\\n\\r\\n    const targetNames = Array.from(batchQueueForDifferentTargets.keys());\\r\\n    const player = ns.getPlayer();\\r\\n\\r\\n    giveBatchQueueStructure(targetNames, batchQueueForDifferentTargets);\\r\\n    cleanFinishedAndPoisonedJobsFromQueue(targetNames, batchQueueForDifferentTargets, ns);\\r\\n\\r\\n    const noMoreInvestingForEndGame = ns.fileExists(\\\"stopInvesting.txt\\\");\\r\\n\\r\\n    const anyBatchNotPrepping = targetNames\\r\\n        .map(x => batchQueueForDifferentTargets.get(x))\\r\\n        .filter(x => !x.prepStage)\\r\\n        .length > 0;\\r\\n\\r\\n\\r\\n    for (const nameOfTarget of targetNames) {\\r\\n        const targetServer = ns.getServer(nameOfTarget);\\r\\n        const batchForTarget = batchQueueForDifferentTargets.get(nameOfTarget);\\r\\n\\r\\n        if (!noMoreInvestingForEndGame) {\\r\\n            prepServerForBatching(targetServer, batchForTarget, ns, player, nameOfTarget, anyBatchNotPrepping);\\r\\n        }\\r\\n\\r\\n        createBatchesOfJobs(batchForTarget, ns, targetServer, player);\\r\\n    }\\r\\n\\r\\n    await executeJobs(ns, targetNames, batchQueueForDifferentTargets, player, enviroment, homeMemoryLimitations);\\r\\n    addNewTargetsToQueueIfNeeded(batchQueueForDifferentTargets, targetNames, ns, enviroment, player, noMoreInvestingForEndGame, homeMemoryLimitations);\\r\\n    adjustTimingsOrOutrightDeleteDependingOnReliability(ns, batchQueueForDifferentTargets, targetNames);\\r\\n\\r\\n    ns.rm(batchQueuesFileName);\\r\\n    ns.write(batchQueuesFileName, JSON.stringify(Array.from(batchQueueForDifferentTargets.entries()), \\\"W\\\"));\\r\\n\\r\\n    const total = failuresThisRun + successesThisRun;\\r\\n    const now = new Date();\\r\\n    const secondsSinceLastVisit = Math.abs(now.getTime() - lastTimeVisited.getTime()) / 1000;\\r\\n    lastTimeVisited = now;\\r\\n    if (secondsSinceLastVisit !== 0) {\\r\\n        secondsBetweenVisits.push(secondsSinceLastVisit);\\r\\n    }\\r\\n\\r\\n\\r\\n    const moneyWeHaveNow = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (now.getMinutes() !== lastRecordedToConsole.getMinutes() && total > 0) {\\r\\n        const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n\\r\\n        const errorRate = 1 - (successesThisRun / total);\\r\\n\\r\\n        if (errorRate > 0.03) {\\r\\n            ns.toast(`${timeStamp} Error Rate in batches ${errorRate.toLocaleString(undefined, { style: 'percent', minimumFractionDigits: 2 })}`, \\\"error\\\", 60000);\\r\\n        }\\r\\n\\r\\n        const averageTimeBetweenVisits = secondsBetweenVisits.reduce((acc, b) => acc + b, 0) / secondsBetweenVisits.length;\\r\\n\\r\\n        if (averageTimeBetweenVisits > 3) {\\r\\n            ns.toast(`${timeStamp} Average of ${averageTimeBetweenVisits.toFixed(2)} seconds between visits`, \\\"warning\\\", null)\\r\\n        }\\r\\n\\r\\n        const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n        let stockMarketReserveMoney = new ReserveForTrading();\\r\\n        if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n            stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n        }\\r\\n\\r\\n        const formatter = new Intl.NumberFormat('en-US', {\\r\\n            style: 'currency',\\r\\n            currency: 'USD',\\r\\n        });\\r\\n\\r\\n        const moneyFormatted = formatter.format(moneyWeHaveNow + stockMarketReserveMoney.moneyInvested);\\r\\n\\r\\n        let consoleUpdate = `${timeStamp} Money we have now: ${moneyFormatted} | Number of targeted server: ${String(targetNames.length).padStart(2, 0)}`;\\r\\n\\r\\n        if (memoryConstrained) {\\r\\n            consoleUpdate += \\\" | Memory Constrained\\\";\\r\\n        }\\r\\n\\r\\n        ns.tprint(consoleUpdate);\\r\\n\\r\\n        const reliabilityForBatchFile = 'data/reliabilityForEvery100Batches.txt';\\r\\n        let batchReliability = [];\\r\\n\\r\\n        if (ns.fileExists(reliabilityForBatchFile)) {\\r\\n            batchReliability = JSON.parse(ns.read(reliabilityForBatchFile));\\r\\n        }\\r\\n\\r\\n        batchReliability.push({ errorRate, averageTimeBetweenVisits, now, moneyWeHaveNow, numberOfTargetedServers: targetNames.length });\\r\\n\\r\\n\\r\\n        ns.rm(reliabilityForBatchFile);\\r\\n        ns.write(reliabilityForBatchFile, JSON.stringify(batchReliability), \\\"W\\\");\\r\\n\\r\\n\\r\\n        countOfFailures.push(failuresThisRun);\\r\\n        countOfSuccesses.push(successesThisRun);\\r\\n\\r\\n        if (countOfFailures.length > 10) {\\r\\n            countOfFailures.shift();\\r\\n        }\\r\\n\\r\\n        if (countOfSuccesses.length > 10) {\\r\\n            countOfSuccesses.shift();\\r\\n        }\\r\\n\\r\\n        const successesIn10Minutes = countOfSuccesses.reduce((acc, b) => acc + b, 0);\\r\\n        const failuresIn10Minutes = countOfFailures.reduce((acc, b) => acc + b, 0);\\r\\n        const totalIn10Minutes = successesIn10Minutes + failuresIn10Minutes;\\r\\n\\r\\n        averageErrorRateOver10Minutes = 1 - (successesIn10Minutes / totalIn10Minutes);\\r\\n\\r\\n        if (averageErrorRateOver10Minutes > errorRateAtWhichWeAllowNewThings) {\\r\\n            ns.toast(`${timeStamp} Error Rate over 10 minutes is: ${averageErrorRateOver10Minutes.toLocaleString(undefined, { style: 'percent', minimumFractionDigits: 2 })}`, \\\"error\\\", 15000);\\r\\n        }\\r\\n\\r\\n\\r\\n        failuresThisRun = 0;\\r\\n        successesThisRun = 0;\\r\\n        secondsBetweenVisits.length = 0;\\r\\n        lastRecordedToConsole = now;\\r\\n    }\\r\\n\\r\\n    if (moneyWeHaveNow > 1_000_000_000_000 ||\\r\\n        homeServer.maxRam - homeServer.ramUsed > 300000 ||\\r\\n        targetNames\\r\\n            .map(x => batchQueueForDifferentTargets.get(x))\\r\\n            .every(x => !x.targetMachineSaturatedWithAttacks)) {\\r\\n        if (!memoryConstrained) {\\r\\n            ns.run('scripts/hacking/advanced-dispatch.js');\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nclass BatchQueueForTarget {\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    targetMachineSaturatedWithAttacks = false;\\r\\n\\r\\n    prepStage = true;\\r\\n    weakeningDoneAfter;\\r\\n    successfulWeakening = false;\\r\\n    growDoneAfter;\\r\\n    successfulGrowing = false;\\r\\n    hackDoneAfter;\\r\\n    successfulHacking = false;\\r\\n\\r\\n    securityWeNeedToReduceAfterFullHack;\\r\\n    securityWeNeedToReduceAfterFullGrowth;\\r\\n    originalNumberOfThreadsForFullMoney;\\r\\n\\r\\n    successes = 0;\\r\\n    failures = 0;\\r\\n    successesInTheLastHour = 0;\\r\\n    failuresInTheLastHour = 0;\\r\\n    lastResetHour = 0\\r\\n\\r\\n    executionWindowSizeInSeconds = 4;\\r\\n\\r\\n    batchesQueue = [];\\r\\n\\r\\n    lastFailure;\\r\\n\\r\\n    getAllocatedMemory(machineRunningOn) {\\r\\n        return this.batchesQueue\\r\\n            .reduce((acc, x) => acc.concat(x.jobs), [])\\r\\n            .filter(x => x.machineRunningOn === machineRunningOn)\\r\\n            .reduce((acc, x) => acc + x, 0);\\r\\n    }\\r\\n\\r\\n    thereAreNoJobsRunningAfter() {\\r\\n        return Math.max(...this.batchesQueue.map(x => x.wholeBatchFinishsBefore()));\\r\\n    }\\r\\n}\\r\\n\\r\\nclass BatchOfJobs {\\r\\n    jobs = [];\\r\\n    //6 second window? 2 cycles seems like enough for each step.\\r\\n\\r\\n    startTime;\\r\\n    poisonedBatch = false;\\r\\n\\r\\n    wholeBatchFinishsBefore() {\\r\\n        return Math.max(...this.jobs.map(x => new Date(x.endBefore)))\\r\\n    }\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n}\\r\\n\\r\\nclass JobHasTo {\\r\\n    executing = false;\\r\\n    ramCost = 0;\\r\\n    machineRunningOn;\\r\\n    pid;\\r\\n    executedAt;\\r\\n    expectedEndTime;\\r\\n\\r\\n    firstLookStartedNowEndAt;\\r\\n\\r\\n    lastMissForDoneBeforeWindow;\\r\\n    firstMissForAfterWindow;\\r\\n\\r\\n    constructor(endAfter, endBefore, type) {\\r\\n        this.endAfter = endAfter;\\r\\n        this.endBefore = endBefore;\\r\\n        this.type = type;\\r\\n        // this.types = [\\\"grow\\\", \\\"hack\\\", \\\"weaken-after-hack\\\", \\\"weaken-after-grow\\\",\\r\\n        //     \\\"weaken-dynamic\\\", \\\"grow-dynamic\\\", \\\"hack-dynamic\\\"]\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction adjustTimingsOrOutrightDeleteDependingOnReliability(ns, batchQueueForDifferentTargets, targetNames) {\\r\\n    const currentTime = new Date();\\r\\n    let countOfDeleted = 0;\\r\\n\\r\\n    for (const nameOfTarget of targetNames) {\\r\\n        const queueOfBatches = batchQueueForDifferentTargets.get(nameOfTarget);\\r\\n        const currentHour = currentTime.getHours()\\r\\n\\r\\n        if (currentHour !== queueOfBatches.lastResetHour) {\\r\\n            if (queueOfBatches.failuresInTheLastHour === 0 && queueOfBatches.successesInTheLastHour > 0 && queueOfBatches.executionWindowSizeInSeconds > 2) {\\r\\n                queueOfBatches.executionWindowSizeInSeconds--;\\r\\n            }\\r\\n\\r\\n            const totalRunsThisHour = queueOfBatches.successesInTheLastHour + queueOfBatches.failuresInTheLastHour;\\r\\n            const ratioOfFailuresThisHour = 1 - (queueOfBatches.successesInTheLastHour / totalRunsThisHour);\\r\\n\\r\\n            if (ratioOfFailuresThisHour > 0.1) {\\r\\n                queueOfBatches.executionWindowSizeInSeconds++;\\r\\n            }\\r\\n\\r\\n\\r\\n            queueOfBatches.lastResetHour = currentHour;\\r\\n            queueOfBatches.successesInTheLastHour = 0;\\r\\n            queueOfBatches.failuresInTheLastHour = 0;\\r\\n\\r\\n            if (ratioOfFailuresThisHour > 0.9 && totalRunsThisHour > 10 && countOfDeleted < 2 && targetNames.length > 2) {\\r\\n                for (const batch of queueOfBatches.batchesQueue) {\\r\\n                    batch.jobs.map(x => {\\r\\n                        if (x.pid) {\\r\\n                            ns.kill(x.pid);\\r\\n                        }\\r\\n                    });\\r\\n\\r\\n                }\\r\\n\\r\\n                batchQueueForDifferentTargets.delete(nameOfTarget);\\r\\n                ns.tprint(`Deleted ${nameOfTarget} from batchQueue for failing too often. Ratio of Failure: ${ratioOfFailuresThisHour}. Total Runs: ${totalRunsThisHour}`);\\r\\n                countOfDeleted++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction createBatchesOfJobs(batchForTarget, ns, targetServer, player) {\\r\\n    if (batchForTarget.prepStage === false) {\\r\\n\\r\\n        if (batchForTarget.batchesQueue.length === 0 || batchForTarget.batchesQueue.every(x => new Date() > new Date(x.startTime))) {\\r\\n            const batch = new BatchOfJobs();\\r\\n\\r\\n            const secondsToPadEndTime = batchForTarget.executionWindowSizeInSeconds;\\r\\n            const msToPadStartTime = 1;\\r\\n\\r\\n            const noJobsRunningAfter = batchForTarget.thereAreNoJobsRunningAfter();\\r\\n\\r\\n            let noMoreJobsAfter = new Date(noJobsRunningAfter);\\r\\n\\r\\n            const defaultStartTime = getWeakenEndDate(ns, targetServer, player, batchForTarget.securityWeNeedToReduceAfterFullGrowth);\\r\\n\\r\\n            if (noJobsRunningAfter < 0 || defaultStartTime > noMoreJobsAfter) {\\r\\n\\r\\n                addSecondsToDate(defaultStartTime, secondsToPadEndTime);\\r\\n                const defaultEndTime = new Date(defaultStartTime);\\r\\n\\r\\n                noMoreJobsAfter = defaultEndTime;\\r\\n            }\\r\\n\\r\\n            const hackStart = createNewDataFromOldDateAndAddMilliseconds(noMoreJobsAfter, msToPadStartTime);\\r\\n            const hackEnd = createNewDataFromOldDateAndAddSeconds(hackStart, secondsToPadEndTime);\\r\\n\\r\\n            const weakenAfterhackStart = createNewDataFromOldDateAndAddMilliseconds(hackEnd, msToPadStartTime);\\r\\n            const weakenAfterHackEnd = createNewDataFromOldDateAndAddSeconds(weakenAfterhackStart, secondsToPadEndTime);\\r\\n\\r\\n            const growStart = createNewDataFromOldDateAndAddMilliseconds(weakenAfterHackEnd, msToPadStartTime);\\r\\n            const growEnd = createNewDataFromOldDateAndAddSeconds(growStart, secondsToPadEndTime);\\r\\n\\r\\n            const weakenAfterGrowStart = createNewDataFromOldDateAndAddMilliseconds(growEnd, msToPadStartTime);\\r\\n            const weakenAfterGrowEnd = createNewDataFromOldDateAndAddSeconds(weakenAfterGrowStart, secondsToPadEndTime);\\r\\n\\r\\n            // get them in the order they are executed. \\r\\n            batch.jobs.push(new JobHasTo(weakenAfterGrowStart, weakenAfterGrowEnd, \\\"weaken-after-grow\\\"));\\r\\n            batch.jobs.push(new JobHasTo(weakenAfterhackStart, weakenAfterHackEnd, \\\"weaken-after-hack\\\"));\\r\\n            batch.jobs.push(new JobHasTo(growStart, growEnd, \\\"grow\\\"));\\r\\n            batch.jobs.push(new JobHasTo(hackStart, hackEnd, \\\"hack\\\"));\\r\\n\\r\\n            batchForTarget.batchesQueue.push(batch);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function executeJobs(ns, targetNames, batchQueueForDifferentTargets, player, environment, homeMemoryLimitations) {\\r\\n    const hackScript = 'scripts/hacking/hack.js';\\r\\n    const growScript = 'scripts/hacking/grow.js';\\r\\n    const weakenScript = 'scripts/hacking/weaken.js';\\r\\n\\r\\n    const ramNeededForWeaken = ns.getScriptRam(weakenScript);\\r\\n    const ramNeededForGrow = ns.getScriptRam(growScript);\\r\\n    const ramNeededForHack = ns.getScriptRam(hackScript);\\r\\n\\r\\n    for (const nameOfTarget of targetNames) {\\r\\n        const batchForTarget = batchQueueForDifferentTargets.get(nameOfTarget);\\r\\n\\r\\n        for (let i = 0; i < batchForTarget.batchesQueue.length; i++) {\\r\\n            const batchOfJobs = batchForTarget.batchesQueue[i];\\r\\n\\r\\n            for (let y = 0; y < batchOfJobs.jobs.length; y++) {\\r\\n                const job = batchOfJobs.jobs[y];\\r\\n\\r\\n                if (job.executing === false) {\\r\\n\\r\\n                    const targetServer = ns.getServer(nameOfTarget);\\r\\n\\r\\n                    let machineToRunOn;\\r\\n                    let script;\\r\\n                    let numberOfThreads;\\r\\n                    let ramCost;\\r\\n                    let shouldExecute = false;\\r\\n\\r\\n                    if (job.type.startsWith(\\\"weaken\\\")) {\\r\\n                        let amountToWeaken = targetServer.hackDifficulty - targetServer.minDifficulty;\\r\\n\\r\\n                        if (job.type === \\\"weaken-after-hack\\\") {\\r\\n                            amountToWeaken = batchForTarget.securityWeNeedToReduceAfterFullHack;\\r\\n                        }\\r\\n\\r\\n                        if (job.type === \\\"weaken-after-grow\\\") {\\r\\n                            amountToWeaken = batchForTarget.securityWeNeedToReduceAfterFullGrowth;\\r\\n                        }\\r\\n\\r\\n                        const ifStartedNowWeakenDoneAt = getWeakenEndDate(ns, targetServer, player, amountToWeaken);\\r\\n                        shouldExecute = shouldWeExecute(job, ifStartedNowWeakenDoneAt, batchOfJobs, ns);\\r\\n\\r\\n                        if (shouldExecute === false) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        script = weakenScript;\\r\\n\\r\\n\\r\\n                        numberOfThreads = getNumberOfThreadsToWeaken(ns, 1, amountToWeaken);\\r\\n                        ramCost = ramNeededForWeaken * numberOfThreads;\\r\\n\\r\\n                        machineToRunOn = getMachineWithEnoughRam(ns, ramCost, environment, homeMemoryLimitations);\\r\\n\\r\\n                        if (machineToRunOn && machineToRunOn.cpuCores > 1) {\\r\\n                            numberOfThreads = getNumberOfThreadsToWeaken(ns, machineToRunOn.cpuCores, amountToWeaken);\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    if (job.type.startsWith(\\\"grow\\\")) {\\r\\n                        const ifStartedNowGrowDoneAt = getGrowEndDate(ns, targetServer, player);\\r\\n                        shouldExecute = shouldWeExecute(job, ifStartedNowGrowDoneAt, batchOfJobs, ns);\\r\\n\\r\\n                        if (shouldExecute === false) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        script = growScript;\\r\\n\\r\\n                        if (job.type !== \\\"grow-dynamic\\\") {\\r\\n                            targetServer.moneyAvailable = 0;\\r\\n                        }\\r\\n\\r\\n                        numberOfThreads = getGrowThreads(ns, targetServer, player, 1);\\r\\n                        ramCost = ramNeededForGrow * numberOfThreads;\\r\\n\\r\\n                        machineToRunOn = getMachineWithEnoughRam(ns, ramCost, environment, homeMemoryLimitations);\\r\\n\\r\\n                        if (machineToRunOn && machineToRunOn.cpuCores > 1) {\\r\\n                            numberOfThreads = getGrowThreads(ns, targetServer, player, machineToRunOn.cpuCores);\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    if (job.type.startsWith(\\\"hack\\\")) {\\r\\n                        const ifStartedNowHackDoneAt = getHackEndDate(ns, targetServer, player);\\r\\n                        shouldExecute = shouldWeExecute(job, ifStartedNowHackDoneAt, batchOfJobs, ns);\\r\\n\\r\\n                        if (shouldExecute === false) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        script = hackScript;\\r\\n\\r\\n                        if (job.type === \\\"hack\\\") {\\r\\n                            targetServer.moneyAvailable = targetServer.moneyMax;\\r\\n                        }\\r\\n\\r\\n\\r\\n                        numberOfThreads = getHackThreadsForTotalStealing(ns, nameOfTarget, targetServer);\\r\\n\\r\\n                        if (numberOfThreads === -1) {\\r\\n                            numberOfThreads = batchForTarget.originalNumberOfThreadsForFullMoney;\\r\\n                        }\\r\\n\\r\\n                        ramCost = ramNeededForHack * numberOfThreads;\\r\\n\\r\\n                        machineToRunOn = getMachineWithEnoughRam(ns, ramCost, environment, homeMemoryLimitations);\\r\\n                    }\\r\\n\\r\\n                    if (shouldExecute && machineToRunOn) {\\r\\n                        ns.scp(script, machineToRunOn.hostname);\\r\\n                        const pid = ns.exec(script, machineToRunOn.hostname, numberOfThreads, nameOfTarget);\\r\\n\\r\\n                        if (pid === 0) {\\r\\n                            ns.tprint(\\\"failed exec\\\")\\r\\n                        }\\r\\n\\r\\n                        job.ramCost = ramCost;\\r\\n                        job.executing = true;\\r\\n                        job.machineRunningOn = machineToRunOn.hostname;\\r\\n                        job.pid = pid;\\r\\n                        job.executedAt = new Date();\\r\\n\\r\\n                        if (!batchOfJobs.startTime) {\\r\\n                            batchOfJobs.startTime = new Date();\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction shouldWeExecute(job, ifStartedNowWeWouldBeDoneAtString, batchOfJobs, ns) {\\r\\n\\r\\n    const endBeforeDate = new Date(job.endBefore);\\r\\n    const endAfterDate = new Date(job.endAfter);\\r\\n    const ifStartedNowWeWouldBeDoneAt = new Date(ifStartedNowWeWouldBeDoneAtString)\\r\\n\\r\\n    if (!job.firstLookStartedNowEndAt) {\\r\\n        job.firstLookStartedNowEndAt = ifStartedNowWeWouldBeDoneAt;\\r\\n    }\\r\\n\\r\\n    if (endAfterDate > ifStartedNowWeWouldBeDoneAt) {\\r\\n        job.lastMissForDoneBeforeWindow = ifStartedNowWeWouldBeDoneAt;\\r\\n    }\\r\\n\\r\\n    if (ifStartedNowWeWouldBeDoneAt > endBeforeDate) {\\r\\n        if (!job.firstMissForAfterWindow) {\\r\\n            job.firstMissForAfterWindow = ifStartedNowWeWouldBeDoneAt;\\r\\n            batchOfJobs.poisonedBatch = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (endAfterDate < ifStartedNowWeWouldBeDoneAt && ifStartedNowWeWouldBeDoneAt < endBeforeDate) {\\r\\n        job.expectedEndTime = ifStartedNowWeWouldBeDoneAt;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n}\\r\\n\\r\\nfunction getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n\\r\\n    const allHackedMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    allHackedMachines.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const machinesWithRamAvailable = allHackedMachines\\r\\n        .filter(x => x.server.ramUsed < x.server.maxRam && x.server.maxRam !== 0);\\r\\n\\r\\n    const serversWithEnoughRam = machinesWithRamAvailable\\r\\n        .filter(x => (x.server.maxRam - x.server.ramUsed) > ramNeeded)\\r\\n        .sort((b, a) => b.server.maxRam - a.server.maxRam);\\r\\n\\r\\n    for (const potentialServerToRun of serversWithEnoughRam) {\\r\\n        const server = getServer(ns, potentialServerToRun.name, homeMemoryLimitations);\\r\\n        const freeRam = server.maxRam - server.ramUsed;\\r\\n        if (freeRam > ramNeeded) {\\r\\n            machineToRunOn = server;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (machineToRunOn === undefined) {\\r\\n        const buyOrUpgradeServerFlag = 'buyOrUpgradeServerFlag.txt';\\r\\n\\r\\n        let maxAmountNeeded = 0;\\r\\n        if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n            maxAmountNeeded = ns.read(buyOrUpgradeServerFlag);\\r\\n        }\\r\\n\\r\\n        if (maxAmountNeeded < ramNeeded) {\\r\\n            maxAmountNeeded = ramNeeded;\\r\\n            ns.rm(buyOrUpgradeServerFlag);\\r\\n            ns.write(buyOrUpgradeServerFlag, maxAmountNeeded, \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machineToRunOn;\\r\\n}\\r\\n\\r\\nfunction getServer(ns, serverName, homeMemoryLimitations) {\\r\\n    const server = ns.getServer(serverName);\\r\\n\\r\\n    if (serverName === \\\"home\\\") {\\r\\n\\r\\n        let ramToReserve = homeMemoryLimitations.ramToReserve;\\r\\n\\r\\n        if (server.maxRam < ramToReserve) {\\r\\n            ramToReserve = homeMemoryLimitations.ramToReserveInLimitedEnvironment;\\r\\n        }\\r\\n\\r\\n        server.maxRam -= ramToReserve;\\r\\n\\r\\n        const freeRam = server.maxRam - server.ramUsed\\r\\n\\r\\n        if (freeRam < 0) {\\r\\n            server.ramUsed = server.maxRam;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return server;\\r\\n}\\r\\n\\r\\nfunction prepServerForBatching(targetServer, batchForTarget, ns, player, nameOfTarget, anyBatchNotPrepping) {\\r\\n    const amountToWeaken = targetServer.hackDifficulty - targetServer.minDifficulty;\\r\\n    const serverHasMaxMoney = targetServer.moneyMax === targetServer.moneyAvailable;\\r\\n    const currentTime = new Date();\\r\\n\\r\\n    if (amountToWeaken === 0 && serverHasMaxMoney && batchForTarget.securityWeNeedToReduceAfterFullHack && batchForTarget.securityWeNeedToReduceAfterFullGrowth && batchForTarget.prepStage && batchForTarget.originalNumberOfThreadsForFullMoney) {\\r\\n\\r\\n        if (averageErrorRateOver10Minutes < errorRateAtWhichWeAllowNewThings || !anyBatchNotPrepping) {\\r\\n            batchForTarget.prepStage = false;\\r\\n            batchForTarget.targetMachineSaturatedWithAttacks = false;\\r\\n            ns.toast(`Added ${nameOfTarget} to in process batch attack.`, 'success')\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (batchForTarget.prepStage) {\\r\\n        batchForTarget.targetMachineSaturatedWithAttacks = false;\\r\\n\\r\\n        if (batchForTarget.successfulWeakening === false) {\\r\\n            if (currentTime > new Date(batchForTarget.weakeningDoneAfter) || !batchForTarget.weakeningDoneAfter) {\\r\\n                if (amountToWeaken !== 0) {\\r\\n                    let endDate = new Date();\\r\\n                    endDate = getWeakenEndDate(ns, targetServer, player, targetServer.hackDifficulty - targetServer.minDifficulty);\\r\\n                    addSecondsToDate(endDate, 10);\\r\\n\\r\\n                    const job = new JobHasTo(new Date(), endDate, \\\"weaken-dynamic\\\");\\r\\n                    const batchOfJobs = new BatchOfJobs();\\r\\n                    batchOfJobs.jobs.push(job);\\r\\n\\r\\n                    batchForTarget.batchesQueue.push(batchOfJobs);\\r\\n                    batchForTarget.weakeningDoneAfter = endDate;\\r\\n                } else if (amountToWeaken === 0) {\\r\\n                    batchForTarget.successfulWeakening = true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (batchForTarget.successfulWeakening && batchForTarget.successfulGrowing === false) {\\r\\n            if (currentTime > new Date(batchForTarget.growDoneAfter) || !batchForTarget.growDoneAfter) {\\r\\n\\r\\n                if (serverHasMaxMoney === false) {\\r\\n\\r\\n                    if (targetServer.moneyAvailable === 0) {\\r\\n                        const growThreads = getGrowThreads(ns, targetServer, player, 1);\\r\\n                        batchForTarget.securityWeNeedToReduceAfterFullGrowth = ns.growthAnalyzeSecurity(growThreads, nameOfTarget, 1);\\r\\n                    }\\r\\n\\r\\n                    let endDate = getGrowEndDate(ns, targetServer, player);\\r\\n                    addSecondsToDate(endDate, 10);\\r\\n\\r\\n                    const job = new JobHasTo(new Date(), endDate, \\\"grow-dynamic\\\");\\r\\n                    const batchOfJobs = new BatchOfJobs();\\r\\n                    batchOfJobs.jobs.push(job);\\r\\n\\r\\n                    batchForTarget.batchesQueue.push(batchOfJobs);\\r\\n                    batchForTarget.growDoneAfter = endDate;\\r\\n                }\\r\\n\\r\\n\\r\\n                if (serverHasMaxMoney) {\\r\\n                    batchForTarget.successfulGrowing = true;\\r\\n                    batchForTarget.successfulWeakening = false;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (batchForTarget.successfulGrowing && batchForTarget.successfulHacking === false && batchForTarget.successfulWeakening) {\\r\\n\\r\\n            if (currentTime > new Date(batchForTarget.hackDoneAfter) || !batchForTarget.hackDoneAfter) {\\r\\n                if (serverHasMaxMoney) {\\r\\n                    if (currentTime > new Date(batchForTarget.hackDoneAfter)) {\\r\\n\\r\\n                        batchForTarget.successfulWeakening = false;\\r\\n                        batchForTarget.successfulGrowing = false;\\r\\n                        batchForTarget.successfulHacking = false;\\r\\n                        batchForTarget.hackDoneAfter = undefined;\\r\\n\\r\\n                    } else {\\r\\n                        const hackThreads = getHackThreadsForTotalStealing(ns, nameOfTarget, targetServer);\\r\\n                        batchForTarget.securityWeNeedToReduceAfterFullHack = ns.hackAnalyzeSecurity(hackThreads, nameOfTarget);\\r\\n                        batchForTarget.originalNumberOfThreadsForFullMoney = hackThreads;\\r\\n\\r\\n                        let endDate = getHackEndDate(ns, targetServer, player);\\r\\n                        addSecondsToDate(endDate, 100);\\r\\n\\r\\n                        const job = new JobHasTo(new Date(), endDate, \\\"hack-dynamic\\\");\\r\\n                        const batchOfJobs = new BatchOfJobs();\\r\\n                        batchOfJobs.jobs.push(job);\\r\\n\\r\\n                        batchForTarget.batchesQueue.push(batchOfJobs);\\r\\n                        batchForTarget.hackDoneAfter = endDate;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (targetServer.moneyAvailable === 0) {\\r\\n                    batchForTarget.successfulGrowing = false;\\r\\n                    batchForTarget.successfulWeakening = false;\\r\\n                    batchForTarget.successfulHacking = true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nfunction giveBatchQueueStructure(targetNames, batchQueue) {\\r\\n    for (const target of targetNames) {\\r\\n        let targetObject = batchQueue.get(target);\\r\\n        targetObject = new BatchQueueForTarget(targetObject);\\r\\n\\r\\n        for (let i = 0; i < targetObject.batchesQueue.length; i++) {\\r\\n            targetObject.batchesQueue[i] = new BatchOfJobs(targetObject.batchesQueue[i]);\\r\\n        }\\r\\n\\r\\n        batchQueue.set(target, targetObject);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction cleanFinishedAndPoisonedJobsFromQueue(targetNames, batchQueue, ns) {\\r\\n\\r\\n    for (const target of targetNames) {\\r\\n        const batches = batchQueue.get(target);\\r\\n        const currentTime = new Date();\\r\\n\\r\\n        for (let i = batches.batchesQueue.length - 1; i > -1; i--) {\\r\\n            const batch = batches.batchesQueue[i];\\r\\n            let remove = false;\\r\\n\\r\\n            if (batch.wholeBatchFinishsBefore() < currentTime) {\\r\\n\\r\\n                if (batch.jobs.every(x => x.executing) === false) {\\r\\n                    batches.failures++;\\r\\n                    batches.failuresInTheLastHour++;\\r\\n                    batches.lastFailure = batch;\\r\\n                    failuresThisRun++;\\r\\n                } else {\\r\\n                    batches.successes++;\\r\\n                    batches.successesInTheLastHour++;\\r\\n                    successesThisRun++;\\r\\n                }\\r\\n\\r\\n                remove = true;\\r\\n                batches.targetMachineSaturatedWithAttacks = true;\\r\\n            }\\r\\n\\r\\n            if (batch.poisonedBatch) {\\r\\n                batches.failures++;\\r\\n                batches.failuresInTheLastHour++;\\r\\n                batches.lastFailure = batch;\\r\\n                failuresThisRun++;\\r\\n\\r\\n                remove = true;\\r\\n\\r\\n                batch.jobs.map(x => {\\r\\n                    if (x.pid) {\\r\\n                        ns.kill(x.pid);\\r\\n                    }\\r\\n                });\\r\\n            }\\r\\n\\r\\n            if (remove) {\\r\\n                batches.batchesQueue.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction addNewTargetsToQueueIfNeeded(batchQueue, targetNames, ns, enviroment, player, noMoreInvestingForEndGame, homeMemoryLimitations) {\\r\\n    const batchesAreSaturated = targetNames.map(x => batchQueue.get(x)).every(x => x.targetMachineSaturatedWithAttacks);\\r\\n    const over2andAHalfTrillionDollars = ns.getServerMoneyAvailable(\\\"home\\\") > 2_500_000_000_000;\\r\\n    const massiveRamOnHome = getServer(ns, \\\"home\\\", homeMemoryLimitations).maxRam > 400_000;\\r\\n\\r\\n    let addNewServerToAttack = false;\\r\\n\\r\\n    if (batchQueue.size < 15 && batchesAreSaturated && averageErrorRateOver10Minutes < errorRateAtWhichWeAllowNewThings && !noMoreInvestingForEndGame) {\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if (over2andAHalfTrillionDollars && batchQueue.size < 20) {\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if (over2andAHalfTrillionDollars && batchesAreSaturated && batchQueue.size < 50) {\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if(massiveRamOnHome && batchQueue.size < 50){\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if (batchQueue.size < 2 || addNewServerToAttack) {\\r\\n\\r\\n        const allHackedMachines = enviroment\\r\\n            .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n        const allMachinesByOrderOfValue = allHackedMachines\\r\\n            .filter(x => !x.server.purchasedByPlayer && x.server.moneyMax !== 0 && !targetNames.includes(x.name))\\r\\n            .sort((a, b) => b.server.moneyMax - a.server.moneyMax);\\r\\n\\r\\n        // only add machine if 90%+ chances of successfully hacking at minDifficulty. \\r\\n        let mostValuableMachine;\\r\\n        for (const hackPossibility of allMachinesByOrderOfValue) {\\r\\n            const server = ns.getServer(hackPossibility.name);\\r\\n            server.hackDifficulty = server.minDifficulty;\\r\\n            const chanceOfHackingAtMinDif = ns.formulas.hacking.hackChance(server, player);\\r\\n\\r\\n            if (chanceOfHackingAtMinDif > 0.8) {\\r\\n                mostValuableMachine = hackPossibility;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (mostValuableMachine) {\\r\\n            batchQueue.set(mostValuableMachine.name, new BatchQueueForTarget());\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getHackThreadsForTotalStealing(ns, theTarget, targetServer) {\\r\\n    return Math.ceil(ns.hackAnalyzeThreads(theTarget, targetServer.moneyAvailable));\\r\\n}\\r\\n\\r\\nfunction getGrowThreads(ns, serverToHack, player, cpuCores) {\\r\\n    return Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, cpuCores));\\r\\n}\\r\\n\\r\\nfunction createNewDataFromOldDateAndAddSeconds(date, secondsToAdd) {\\r\\n    const newDate = new Date(date);\\r\\n    addSecondsToDate(newDate, secondsToAdd);\\r\\n    return newDate;\\r\\n}\\r\\n\\r\\nfunction createNewDataFromOldDateAndAddMilliseconds(date, secondsToAdd) {\\r\\n    const newDate = new Date(date);\\r\\n    addMillisecondsToDate(newDate, secondsToAdd);\\r\\n    return newDate;\\r\\n}\\r\\n\\r\\n\\r\\nfunction addSecondsToDate(date, secondsToAdd) {\\r\\n    date.setSeconds(date.getSeconds() + secondsToAdd);\\r\\n}\\r\\n\\r\\nfunction addMillisecondsToDate(date, msToAdd) {\\r\\n    date.setMilliseconds(date.getMilliseconds() + msToAdd);\\r\\n}\\r\\n\\r\\nfunction getWeakenEndDate(ns, targetServer, player, difficultyToWeaken) {\\r\\n    let endDate = new Date();\\r\\n    targetServer.hackDifficulty = targetServer.minDifficulty + difficultyToWeaken;\\r\\n\\r\\n    const howLongToWeaken = ns.formulas.hacking.weakenTime(targetServer, player);\\r\\n\\r\\n    endDate.setMilliseconds(endDate.getMilliseconds() + howLongToWeaken);\\r\\n    return endDate;\\r\\n}\\r\\n\\r\\nfunction getGrowEndDate(ns, targetServer, player) {\\r\\n    let endDate = new Date();\\r\\n    targetServer.moneyAvailable = 0;\\r\\n    targetServer.hackDifficulty = targetServer.minDifficulty;\\r\\n\\r\\n    const howLongToGrow = ns.formulas.hacking.growTime(targetServer, player);\\r\\n\\r\\n    endDate.setMilliseconds(endDate.getMilliseconds() + howLongToGrow);\\r\\n    return endDate;\\r\\n}\\r\\n\\r\\nfunction getHackEndDate(ns, targetServer, player) {\\r\\n    let endDate = new Date();\\r\\n    targetServer.moneyAvailable = targetServer.moneyMax;\\r\\n    targetServer.hackDifficulty = targetServer.minDifficulty;\\r\\n\\r\\n    const howLongToHack = ns.formulas.hacking.hackTime(targetServer, player);\\r\\n\\r\\n    endDate.setMilliseconds(endDate.getMilliseconds() + howLongToHack);\\r\\n    return endDate;\\r\\n}\\r\\n\\r\\nfunction getNumberOfThreadsToWeaken(ns, cpuCores, amountToWeaken) {\\r\\n    let numberOfThreadsToWeaken = 0;\\r\\n    let foundNumberOfThreads = false;\\r\\n    while (!foundNumberOfThreads) {\\r\\n        numberOfThreadsToWeaken++;\\r\\n\\r\\n        const amountNumberOfThreadsWillWeaken = Math.ceil(ns.weakenAnalyze(numberOfThreadsToWeaken, cpuCores));\\r\\n        if (amountNumberOfThreadsWillWeaken > amountToWeaken) {\\r\\n            foundNumberOfThreads = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //add a small margin\\r\\n    numberOfThreadsToWeaken += 20;\\r\\n    return numberOfThreadsToWeaken;\\r\\n}\\r\\n\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    canSellAmountAndStillHaveReserve(amountToSell) {\\r\\n        return (this.moneyInvested - amountToSell) > this.capitalToReserveForTrading;\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = (moneyInvested + ns.getServerMoneyAvailable(\\\"home\\\")) * .75;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"batch-dispatch\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"batch-dispatch\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/hacking/batch-dispatch.js\",\"server\":\"home\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"home\"}}],[\"scripts/hacking/memory-starved-dispatch.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const hackScript = 'scripts/hacking/hack.js';\\r\\nconst growScript = 'scripts/hacking/grow.js';\\r\\nconst weakenScript = 'scripts/hacking/weaken.js';\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const memoryStarvedQueueFileName = 'data/memoryStarvedQueue.txt';\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\";\\r\\n\\r\\n    const homeMemoryLimitations = JSON.parse(ns.read(\\\"data/ramToReserveOnHome.txt\\\"));\\r\\n\\r\\n\\r\\n    let batchTargets = [];\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        const batchQueue = JSON.parse(ns.read(batchQueuesFileName));\\r\\n        batchTargets = batchQueue.map(x => x[0]);\\r\\n    }\\r\\n\\r\\n\\r\\n    let memoryStarvedQueue = new Map();\\r\\n    if (ns.fileExists(memoryStarvedQueueFileName)) {\\r\\n        memoryStarvedQueue = new Map(JSON.parse(ns.read(memoryStarvedQueueFileName)));\\r\\n    }\\r\\n\\r\\n    cleanProcessesAttackingBatchTarget(ns, memoryStarvedQueue, batchTargets);\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n    const allHackedMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    let allMachinesByOrderOfValue = allHackedMachines\\r\\n        .filter(x => !x.server.purchasedByPlayer && !batchTargets.includes(x.name) && x.server.moneyMax > 0)\\r\\n        .sort((a, b) => b.server.moneyMax - a.server.moneyMax)\\r\\n        .map(x => new HackedRecord(\\r\\n            x.name,\\r\\n            x.server.moneyMax,\\r\\n            x.server.minDifficulty,\\r\\n            x.server.hackDifficulty,\\r\\n            x.server.moneyAvailable,\\r\\n        ))\\r\\n\\r\\n    if (ns.getHackingLevel() < 250) {\\r\\n        allMachinesByOrderOfValue = allMachinesByOrderOfValue\\r\\n            .sort((a, b) => a.hackDifficulty - b.hackDifficulty)\\r\\n    }\\r\\n\\r\\n    seeIfWeNeedToDoNextStep(ns, memoryStarvedQueue);\\r\\n\\r\\n    const machinesNextInQueueToHack = getMachinesToHack(allMachinesByOrderOfValue, memoryStarvedQueue, ns);\\r\\n\\r\\n    const hackQueue = [];\\r\\n    const growAndWeakenQueue = [];\\r\\n\\r\\n    machinesNextInQueueToHack.forEach(machineInQuestion => {\\r\\n        if (machineInQuestion.needsWeakening() || machineInQuestion.needsGrowing()) {\\r\\n            growAndWeakenQueue.push(machineInQuestion);\\r\\n        } else {\\r\\n            hackQueue.push(machineInQuestion);\\r\\n        }\\r\\n    });\\r\\n\\r\\n    for (const target of hackQueue) {\\r\\n        let numberOfThreads = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable));\\r\\n\\r\\n        await executeScriptAcrossFleet(ns, hackScript, enviroment, homeMemoryLimitations, numberOfThreads, target, memoryStarvedQueue);\\r\\n    }\\r\\n\\r\\n    for (const target of growAndWeakenQueue) {\\r\\n        let threadsNeeded;\\r\\n        let script;\\r\\n\\r\\n        if (target.needsGrowing()) {\\r\\n\\r\\n            script = growScript;\\r\\n            const serverToHack = getServer(ns, target.name, homeMemoryLimitations);\\r\\n            const player = ns.getPlayer();\\r\\n\\r\\n            if (ns.fileExists('Formulas.exe')) {\\r\\n                threadsNeeded = Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, 1));\\r\\n            } else {\\r\\n                threadsNeeded = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable)) * 5;\\r\\n\\r\\n                if (threadsNeeded === 0) {\\r\\n                    threadsNeeded = 500;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (target.needsWeakening()) {\\r\\n            script = weakenScript;\\r\\n            const amountToWeaken = target.hackDifficulty - target.minDifficulty;\\r\\n\\r\\n            threadsNeeded = getNumberOfThreadsToWeaken(ns, 1, amountToWeaken);\\r\\n        }\\r\\n\\r\\n        await executeScriptAcrossFleet(ns, script, enviroment, homeMemoryLimitations, threadsNeeded, target, memoryStarvedQueue);\\r\\n    }\\r\\n\\r\\n    ns.rm(memoryStarvedQueueFileName);\\r\\n    ns.write(memoryStarvedQueueFileName, JSON.stringify(Array.from(memoryStarvedQueue.entries()), \\\"W\\\"));\\r\\n}\\r\\n\\r\\nasync function executeScriptAcrossFleet(ns, script, enviroment, homeMemoryLimitations, numberOfThreadsWanted, target, memoryStarvedQueue) {\\r\\n    const ramNeededForOneThread = ns.getScriptRam(script);\\r\\n\\r\\n    let numberOfThreadsLeft = numberOfThreadsWanted;\\r\\n    let serversExausted = false;\\r\\n\\r\\n    while (numberOfThreadsLeft > 0 && serversExausted === false) {\\r\\n        const result = getMachineWithNumberOfThreads(ns, enviroment, numberOfThreadsLeft, ramNeededForOneThread, homeMemoryLimitations);\\r\\n\\r\\n        if (!result.machineToRunOn || result.threads <= 0) {\\r\\n            serversExausted = true;\\r\\n        } else {\\r\\n            const machineToRunOn = result.machineToRunOn.hostname;\\r\\n            const threads = result.threads\\r\\n\\r\\n            ns.scp(script, machineToRunOn);\\r\\n            const pid = ns.exec(script, machineToRunOn, threads, target.name);\\r\\n\\r\\n            if (pid !== 0) {\\r\\n                target.pids.push(pid);\\r\\n                target.runningOn.push({ machineToRunOn, threads })\\r\\n            }\\r\\n\\r\\n            numberOfThreadsLeft -= threads;\\r\\n\\r\\n            memoryStarvedQueue.set(target.name, target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getMachineWithNumberOfThreads(ns, enviroment, threads, ramCostPerThread, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n    const buyOrUpgradeServerFlag = 'buyOrUpgradeServerFlag.txt';\\r\\n    let originalAmountNeeded = ramCostPerThread * threads;\\r\\n\\r\\n    let globalMaxAmountNeeded = 0;\\r\\n\\r\\n    if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n        globalMaxAmountNeeded = JSON.parse(ns.read(buyOrUpgradeServerFlag));\\r\\n    }\\r\\n\\r\\n    if (originalAmountNeeded > globalMaxAmountNeeded) {\\r\\n        globalMaxAmountNeeded = originalAmountNeeded;\\r\\n        ns.rm(buyOrUpgradeServerFlag);\\r\\n        ns.write(buyOrUpgradeServerFlag, globalMaxAmountNeeded, \\\"W\\\");\\r\\n    }\\r\\n\\r\\n    machineToRunOn = getMachineWithEnoughRam(ns, threads * ramCostPerThread, enviroment, homeMemoryLimitations);\\r\\n\\r\\n    while (threads > 0 && !machineToRunOn) {\\r\\n        threads--;\\r\\n\\r\\n        machineToRunOn = getMachineWithEnoughRam(ns, threads * ramCostPerThread, enviroment, homeMemoryLimitations);\\r\\n    }\\r\\n\\r\\n    return { threads, machineToRunOn };\\r\\n}\\r\\n\\r\\nfunction getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n\\r\\n    const allHackableMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    allHackableMachines.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const machinesWithRamAvailable = allHackableMachines\\r\\n        .filter(x => x.server.ramUsed < x.server.maxRam && x.server.maxRam !== 0);\\r\\n\\r\\n    const serversWithEnoughRam = machinesWithRamAvailable\\r\\n        .filter(x => (x.server.maxRam - x.server.ramUsed) > ramNeeded)\\r\\n        .sort((b, a) => b.server.maxRam - a.server.maxRam);\\r\\n\\r\\n    for (const potentialServerToRun of serversWithEnoughRam) {\\r\\n        const server = getServer(ns, potentialServerToRun.name, homeMemoryLimitations);\\r\\n\\r\\n        const freeRam = server.maxRam - server.ramUsed;\\r\\n        if (freeRam > ramNeeded) {\\r\\n            machineToRunOn = server;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machineToRunOn;\\r\\n}\\r\\n\\r\\n\\r\\nfunction getServer(ns, serverName, homeMemoryLimitations) {\\r\\n    const server = ns.getServer(serverName);\\r\\n\\r\\n    if (serverName === \\\"home\\\") {\\r\\n\\r\\n        let ramToReserve = homeMemoryLimitations.ramToReserve;\\r\\n\\r\\n        if (server.maxRam < ramToReserve) {\\r\\n            ramToReserve = homeMemoryLimitations.ramToReserveInLimitedEnvironment;\\r\\n        }\\r\\n\\r\\n        server.maxRam -= ramToReserve;\\r\\n\\r\\n        const freeRam = server.maxRam - server.ramUsed\\r\\n\\r\\n        if (freeRam < 0) {\\r\\n            server.ramUsed = server.maxRam;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return server;\\r\\n}\\r\\n\\r\\nfunction cleanProcessesAttackingBatchTarget(ns, memoryStarvedQueue, batchTargets) {\\r\\n    for (const machineBeingHacked of memoryStarvedQueue) {\\r\\n        const whoTheyHackin = machineBeingHacked[0];\\r\\n\\r\\n        if (batchTargets.includes(whoTheyHackin)) {\\r\\n            const hackinRecord = memoryStarvedQueue.get(whoTheyHackin);\\r\\n            for (const pid of hackinRecord.pids) {\\r\\n                ns.kill(pid);\\r\\n            }\\r\\n\\r\\n            memoryStarvedQueue.delete(whoTheyHackin);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nfunction getMachinesToHack(hackableMachinesInTheEnvironment, memoryStarvedQueue, ns) {\\r\\n    const machinesNextInQueueToHack = [];\\r\\n    const doNotAdd = [];\\r\\n\\r\\n    for (const hackableMachine of hackableMachinesInTheEnvironment) {\\r\\n        if (memoryStarvedQueue.has(hackableMachine.name)) {\\r\\n            const record = memoryStarvedQueue.get(hackableMachine.name);\\r\\n            if (record.readyForNextProcess) {\\r\\n                machinesNextInQueueToHack.push(hackableMachine);\\r\\n            }\\r\\n\\r\\n            doNotAdd.push(hackableMachine);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const hackableMachine of hackableMachinesInTheEnvironment) {\\r\\n        if (!doNotAdd.find(x => x.name === hackableMachine.name)) {\\r\\n            machinesNextInQueueToHack.push(hackableMachine);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machinesNextInQueueToHack;\\r\\n}\\r\\n\\r\\nexport class HackedRecord {\\r\\n    constructor(name, maxMoney, minDifficulty, hackDifficulty, moneyAvailable) {\\r\\n        this.name = name;\\r\\n        this.moneyThreshhold = maxMoney * 0.75;\\r\\n        this.securityThreshholdTarget = minDifficulty + 5;\\r\\n        this.hackDifficulty = hackDifficulty;\\r\\n        this.moneyAvailable = moneyAvailable;\\r\\n        this.minDifficulty = minDifficulty;\\r\\n        this.pids = [];\\r\\n\\r\\n        this.runningOn = [];\\r\\n\\r\\n        this.isHacking = false;\\r\\n        this.readyForNextProcess = false;\\r\\n    }\\r\\n\\r\\n    needsWeakening() {\\r\\n        return this.hackDifficulty > this.securityThreshholdTarget;\\r\\n    }\\r\\n\\r\\n    needsGrowing() {\\r\\n        return this.moneyAvailable < this.moneyThreshhold;\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getNumberOfThreadsToWeaken(ns, cpuCores, amountToWeaken) {\\r\\n    let numberOfThreadsToWeaken = 0;\\r\\n    let foundNumberOfThreads = false;\\r\\n    while (!foundNumberOfThreads) {\\r\\n        numberOfThreadsToWeaken++;\\r\\n\\r\\n        const amountNumberOfThreadsWillWeaken = Math.ceil(ns.weakenAnalyze(numberOfThreadsToWeaken, cpuCores));\\r\\n        if (amountNumberOfThreadsWillWeaken > amountToWeaken) {\\r\\n            foundNumberOfThreads = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //add a small margin\\r\\n    numberOfThreadsToWeaken += 20;\\r\\n    return numberOfThreadsToWeaken;\\r\\n}\\r\\n\\r\\nfunction seeIfWeNeedToDoNextStep(ns, recordOfWhoIsBeingHacked) {\\r\\n    for (const companyBeingHacked of recordOfWhoIsBeingHacked.keys()) {\\r\\n        const record = recordOfWhoIsBeingHacked.get(companyBeingHacked);\\r\\n\\r\\n        if (record.pids.every(x => !ns.isRunning(x))) {\\r\\n            if (record.isHacking) {\\r\\n                recordOfWhoIsBeingHacked.delete(companyBeingHacked)\\r\\n            } else {\\r\\n                record.readyForNextProcess = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/memory-starved-dispatch.js\",\"server\":\"home\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"home\"}}],[\"scripts/hacking/hack-until-worked.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n    let moneyStolen = 0;\\r\\n\\r\\n    while (moneyStolen === 0) {\\r\\n        moneyStolen = await ns.hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/hack-until-worked.js\",\"server\":\"home\"}}],[\"scripts/hacking/hack-all-machines.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const helpers = new Helpers(ns);\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n\\r\\n    const portsWeCanPop = helpers.numberOfPortsWeCanPop();\\r\\n    const currentHackingLevel = ns.getHackingLevel();\\r\\n\\r\\n    const allHackableMachines = enviroment\\r\\n        .filter(x => x.server.requiredHackingSkill < currentHackingLevel)\\r\\n        .filter(x => x.server.numOpenPortsRequired <= portsWeCanPop || x.server.purchasedByPlayer);\\r\\n\\r\\n    allHackableMachines\\r\\n        .filter(x => !x.server.hasAdminRights)\\r\\n        .map(x => helpers.hackMachine(x.name));\\r\\n}\\r\\n\\r\\nexport class Helpers {\\r\\n    constructor(ns) {\\r\\n        this.ns = ns;\\r\\n    }\\r\\n\\r\\n    hackMachine(hostname) {\\r\\n        if (this.fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n            this.ns.brutessh(hostname);\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"FTPCrack.exe\\\")) {\\r\\n            this.ns.ftpcrack(hostname);\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"relaySMTP.exe\\\")) {\\r\\n            this.ns.relaysmtp(hostname)\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"HTTPWorm.exe\\\")) {\\r\\n            this.ns.httpworm(hostname)\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"SQLInject.exe\\\")) {\\r\\n            this.ns.sqlinject(hostname)\\r\\n        }\\r\\n\\r\\n        this.ns.nuke(hostname);\\r\\n        this.ns.killall(hostname);\\r\\n    }\\r\\n\\r\\n    numberOfPortsWeCanPop() {\\r\\n        let portsWeCanPop = 0;\\r\\n        if (this.fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"FTPCrack.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"relaySMTP.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"HTTPWorm.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"SQLInject.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        return portsWeCanPop;\\r\\n    }\\r\\n\\r\\n    fileExists(fileName) {\\r\\n        return this.ns.fileExists(fileName, \\\"home\\\");\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/hack-all-machines.js\",\"server\":\"home\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"home\"}}],[\"scripts/investments/invest-in-nodes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const moneyToInvest = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (moneyToInvest < 1_000_000_000_000) {\\r\\n        return;\\r\\n    }\\r\\n    \\r\\n    let endDate = ns.args[0];\\r\\n\\r\\n    if (endDate === undefined){\\r\\n        endDate = new Date();\\r\\n        endDate.setHours(endDate.getHours() + 6);\\r\\n    } else {\\r\\n        const timeLeftInSeconds = (new Date(endDate) - new Date()) / 1000;\\r\\n        const conservativeTimeLeft = timeLeftInSeconds / 2;\\r\\n    \\r\\n        let numberPurchased = 0\\r\\n    \\r\\n        while(buyHacknetNodeIfAboveBreakeven(ns, conservativeTimeLeft)){\\r\\n            numberPurchased++;\\r\\n        }\\r\\n\\r\\n        if(numberPurchased != 0){\\r\\n            ns.tprint(\\\"Total nodes purchase: \\\", numberPurchased);\\r\\n        }        \\r\\n    }\\r\\n}\\r\\n\\r\\nfunction buyHacknetNodeIfAboveBreakeven(ns, secondsLeft) {\\r\\n    const productionMultiplier = 2.8991;\\r\\n    const upgradeCostMultiplier = 0.8700;\\r\\n\\r\\n    const fixedCostOfFullyUpgradedNode = 409_194_200 * upgradeCostMultiplier;\\r\\n    const variableCost = ns.hacknet.getPurchaseNodeCost();\\r\\n    const totalCost = variableCost + fixedCostOfFullyUpgradedNode;\\r\\n\\r\\n    const moneyToInvest = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (totalCost > moneyToInvest) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    const revPerSecond = 9172 * productionMultiplier;\\r\\n    const expectedValue = secondsLeft * revPerSecond;\\r\\n\\r\\n    if (expectedValue < totalCost) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    const indexOfNode = ns.hacknet.purchaseNode();\\r\\n    ns.hacknet.upgradeLevel(indexOfNode, 199);\\r\\n    ns.hacknet.upgradeRam(indexOfNode, 6);\\r\\n    ns.hacknet.upgradeCore(indexOfNode, 15);\\r\\n\\r\\n    return true;\\r\\n}\\r\\n\\r\\n\",\"filename\":\"scripts/investments/invest-in-nodes.js\",\"server\":\"home\"}}],[\"scripts/investments/purchase-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let countOfTriesToBuyServers = 0;\\r\\nlet countOfVisitsWithoutTryingToBuy = 0;\\r\\nconst beforeFormulasServerSpendFile = \\\"data/beforeFormulasServerSpend.txt\\\";\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const buyOrUpgradeServerFlag = \\\"../../buyOrUpgradeServerFlag.txt\\\";\\r\\n    const ramObservationsTextFile = '../../data/ramObservations.txt';\\r\\n    const typeRecord = \\\"../../data/typeOfServerPurchase.txt\\\";\\r\\n    \\r\\n    const stopInvestingFileName = \\\"stopInvesting.txt\\\";\\r\\n    if (ns.fileExists(stopInvestingFileName)) {\\r\\n        if (ns.fileExists(ramObservationsTextFile)) {\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let additionalRamNeeded = 0;\\r\\n    let ramObservations = [];\\r\\n    let type = new TypeOfPurchase();\\r\\n\\r\\n    if (ns.fileExists(ramObservationsTextFile)) {\\r\\n        countOfVisitsWithoutTryingToBuy++;\\r\\n    } else {\\r\\n        countOfVisitsWithoutTryingToBuy = 0;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n        countOfVisitsWithoutTryingToBuy = 0;\\r\\n    }\\r\\n\\r\\n    let tryToBuy = ns.fileExists(buyOrUpgradeServerFlag);\\r\\n\\r\\n    if (tryToBuy === false && countOfVisitsWithoutTryingToBuy < 300) {\\r\\n        tryToBuy = true;\\r\\n    }\\r\\n\\r\\n    if (tryToBuy === false) {\\r\\n        return;\\r\\n    } else {\\r\\n        countOfTriesToBuyServers++;\\r\\n\\r\\n        if (ns.fileExists(typeRecord)) {\\r\\n            const tempType = JSON.parse(ns.read(typeRecord));\\r\\n            type = new TypeOfPurchase(tempType);\\r\\n        }\\r\\n\\r\\n        if (!type.lastPurchaseDate) {\\r\\n            type.lastPurchaseDate = new Date();\\r\\n        }\\r\\n\\r\\n        if (ns.fileExists(ramObservationsTextFile)) {\\r\\n            ramObservations = JSON.parse(ns.read(ramObservationsTextFile));\\r\\n\\r\\n        }\\r\\n\\r\\n        if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n            const latestRamNeeded = JSON.parse(ns.read(buyOrUpgradeServerFlag));\\r\\n\\r\\n            ramObservations.push(latestRamNeeded);\\r\\n\\r\\n            ns.rm(buyOrUpgradeServerFlag);\\r\\n\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n            ns.write(ramObservationsTextFile, JSON.stringify(ramObservations), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        if (ramObservations.length === 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (ramObservations.length > 10 || countOfTriesToBuyServers > 300) {\\r\\n\\r\\n            additionalRamNeeded = Math.min(...ramObservations);\\r\\n\\r\\n            if (type.average) {\\r\\n                additionalRamNeeded = ramObservations.reduce((a, b) => a + b) / ramObservations.length;\\r\\n            }\\r\\n\\r\\n            if (ns.fileExists('Formulas.exe')) {\\r\\n                if (type.max) {\\r\\n                    additionalRamNeeded = Math.max(...ramObservations);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            const ramNeededForBatchesFile = \\\"data/ramNeededToStartBatches.txt\\\";\\r\\n            if (ns.fileExists(ramNeededForBatchesFile)) {\\r\\n                const ramNeededToStartBatches = Number(ns.read(ramNeededForBatchesFile));\\r\\n\\r\\n                if (ramNeededToStartBatches < additionalRamNeeded) {\\r\\n                    additionalRamNeeded = ramNeededToStartBatches;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (additionalRamNeeded === 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        let maxRam = 1048576;\\r\\n\\r\\n        const enviroment = JSON.parse(ns.read('../../data/enviroment.txt'));\\r\\n\\r\\n        const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n        let stockMarketReserveMoney = new ReserveForTrading();\\r\\n        if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n            stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n        }\\r\\n\\r\\n\\r\\n        const playerPurchasedServers = enviroment\\r\\n            .filter(x => x.server.purchasedByPlayer && x.server.maxRam < maxRam)\\r\\n            .sort((b, a) => a.server.maxRam - b.server.maxRam)\\r\\n\\r\\n        let upgradedOrPurchased = false;\\r\\n        if (playerPurchasedServers.length === 0) {\\r\\n            upgradedOrPurchased = purchaseServer(ns, maxRam, additionalRamNeeded, stockMarketReserveMoney);\\r\\n        } else {\\r\\n            const smallestPlayerPurchasedServer = playerPurchasedServers.pop();\\r\\n            upgradedOrPurchased = upgradeSmallMachine(ns, smallestPlayerPurchasedServer, maxRam, additionalRamNeeded, stockMarketReserveMoney);\\r\\n        }\\r\\n\\r\\n        if (upgradedOrPurchased) {\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n            type.changeType();\\r\\n            const now = new Date();\\r\\n            const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n            ns.toast(`${timeStamp} More than ${Math.round(additionalRamNeeded)} GB bought for server`, \\\"success\\\", 300000);\\r\\n        }\\r\\n\\r\\n        ns.rm(typeRecord);\\r\\n        ns.write(typeRecord, JSON.stringify(type), \\\"W\\\");\\r\\n        if (countOfTriesToBuyServers > 100) {\\r\\n            countOfTriesToBuyServers = 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction purchaseServer(ns, maxRam, additionalRamNeeded, stockMarketReserveMoney) {\\r\\n    let currentNumberOfPurchasedServers = ns.getPurchasedServers().length;\\r\\n    let ramToBuy = 64;\\r\\n\\r\\n    if (currentNumberOfPurchasedServers < ns.getPurchasedServerLimit()) {\\r\\n\\r\\n        let purchaseCost = ns.getPurchasedServerCost(ramToBuy);\\r\\n        let moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        if (moneyAvailable > purchaseCost) {\\r\\n\\r\\n            while (moneyAvailable > purchaseCost && ramToBuy < additionalRamNeeded) {\\r\\n\\r\\n                ramToBuy = ramToBuy * 2;\\r\\n\\r\\n                purchaseCost = ns.getPurchasedServerCost(ramToBuy);\\r\\n            }\\r\\n\\r\\n            if (ramToBuy > maxRam) {\\r\\n                ramToBuy = maxRam;\\r\\n            }\\r\\n            const canBuy = stockMarketReserveMoney.canSpend(ns, purchaseCost);\\r\\n\\r\\n            if (canBuy && ramToBuy > additionalRamNeeded) {\\r\\n                const hostname = \\\"CLOUD-\\\" + String(currentNumberOfPurchasedServers).padStart(3, '0')\\r\\n                ns.purchaseServer(hostname, ramToBuy);\\r\\n\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            if (countOfTriesToBuyServers > 100) {\\r\\n                ns.toast(\\\"Not enough money to buy new server\\\", \\\"warning\\\", 3000)\\r\\n                countOfTriesToBuyServers = 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n}\\r\\n\\r\\nfunction upgradeSmallMachine(ns, smallestPlayerPurchasedServer, maxRam, additionalRamNeeded, stockMarketReserveMoney) {\\r\\n\\r\\n    let ramToBuy = smallestPlayerPurchasedServer.server.maxRam * 2;\\r\\n\\r\\n    while (!(ramToBuy - smallestPlayerPurchasedServer.server.maxRam > additionalRamNeeded)) {\\r\\n        ramToBuy = ramToBuy * 2;\\r\\n    }\\r\\n\\r\\n    if (ramToBuy >= maxRam) {\\r\\n        ramToBuy = maxRam;\\r\\n    }\\r\\n\\r\\n    const costOfRamToBuy = ns.getPurchasedServerUpgradeCost(smallestPlayerPurchasedServer.name, ramToBuy);\\r\\n    const canSpendMoney = stockMarketReserveMoney.canSpend(ns, costOfRamToBuy);\\r\\n\\r\\n    if (canSpendMoney) {\\r\\n        ns.upgradePurchasedServer(smallestPlayerPurchasedServer.name, ramToBuy);\\r\\n\\r\\n        return true;\\r\\n    } else {\\r\\n        if (countOfTriesToBuyServers > 100) {\\r\\n            const now = new Date();\\r\\n            const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n            ns.toast(`${timeStamp} Too expensive to buy ${ramToBuy} $${Number((costOfRamToBuy).toFixed(2)).toLocaleString()}`, \\\"warning\\\", 300000);\\r\\n            countOfTriesToBuyServers = 0;\\r\\n        }\\r\\n\\r\\n        return purchaseServer(ns, maxRam, additionalRamNeeded, stockMarketReserveMoney);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nclass TypeOfPurchase {\\r\\n\\r\\n    max = false;\\r\\n    min = true;\\r\\n    average = false;\\r\\n    lastPurchaseDate = new Date();\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n\\r\\n    changeType() {\\r\\n\\r\\n        if (this.min) {\\r\\n            this.min = false;\\r\\n            this.average = true;\\r\\n            this.max = false;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (this.average) {\\r\\n            this.min = false;\\r\\n            this.average = false;\\r\\n            this.max = true;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (this.max) {\\r\\n            this.min = true;\\r\\n            this.average = false;\\r\\n            this.max = false;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        this.lastPurchaseDate = new Date();\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = moneyInvested / 2;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n// ns.tprint(`${canSpend} = ${moneyNeeded} < ${moneyOnHome} - ${moneyToSaveForTrading}`)\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            const debugInfor = {moneyOnHome, moneyNeeded, moneyToSaveForTrading, canSpend}\\r\\n            // ns.write(`data/canpuchase${new Date().toJSON().replaceAll(\\\".\\\", \\\"\\\")}.txt`, JSON.stringify(debugInfor), \\\"W\\\")\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"purchase-server\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"purchase-server\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/investments/purchase-server.js\",\"server\":\"home\"}}],[\"scripts/investments/invest-in-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const ramObservationsTextFile = '../../data/ramObservations.txt';\\r\\n    \\r\\n    const stopInvestingFileName = \\\"stopInvesting.txt\\\";\\r\\n    if (ns.fileExists(stopInvestingFileName)) {\\r\\n        if (ns.fileExists(ramObservationsTextFile)) {\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n    let stockMarketReserveMoney = new ReserveForTrading();\\r\\n    if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n        stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n    }\\r\\n\\r\\n    checkTor(ns, stockMarketReserveMoney);\\r\\n\\r\\n    if (stockMarketReserveMoney.capitalToReserveForTrading > 4_000_000_000) {\\r\\n        if (!ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n            checkTor(ns);\\r\\n            const formulasCost = ns.singularity.getDarkwebProgramCost(\\\"Formulas.exe\\\")\\r\\n            if(stockMarketReserveMoney.canSpend(ns, formulasCost)){\\r\\n                ns.singularity.purchaseProgram(\\\"Formulas.exe\\\");\\r\\n                ns.rm(ramObservationsTextFile);\\r\\n                ns.rm('../../buyOrUpgradeServerFlag.txt');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    purchaseProgram(ns, 50, \\\"BruteSSH.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 100, \\\"FTPCrack.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 250, \\\"relaySMTP.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 500, \\\"HTTPWorm.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 750, \\\"SQLInject.exe\\\", stockMarketReserveMoney);\\r\\n}\\r\\n\\r\\nfunction purchaseProgram(ns, atWhatHackingLevelToBuy, programToBuy, stockMarketReserveMoney) {\\r\\n    const playerHackingLevel = ns.getHackingLevel();\\r\\n    if (!ns.fileExists(programToBuy) && playerHackingLevel > atWhatHackingLevelToBuy && ns.hasTorRouter()) {\\r\\n\\r\\n        const cost = ns.singularity.getDarkwebProgramCost(programToBuy);\\r\\n\\r\\n        if(stockMarketReserveMoney.canSpend(ns, cost)){\\r\\n            ns.singularity.purchaseProgram(programToBuy);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction checkTor(ns, stockMarketReserveMoney) {\\r\\n    if (!ns.hasTorRouter() && stockMarketReserveMoney.canSpend(ns, 200_000)) {\\r\\n        ns.singularity.purchaseTor()\\r\\n    }\\r\\n}\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns){\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = moneyInvested / 2;\\r\\n        \\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if(this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit){\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded){\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if(moneyToSaveForTrading < 0){\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if(moneyToSaveForTrading > this.stockMarketReserveMoneyLimit){\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if(canSpend === false){\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"invest-in-programs\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount){\\r\\n\\r\\n        const nameOfRequest = \\\"invest-in-programs\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n\\r\\n        if(moneyRequestedPreviously){\\r\\n            if(moneyRequestedPreviously < amount){\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/investments/invest-in-programs.js\",\"server\":\"home\"}}],[\"scripts/singularity/backdoor-all-machines.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const backdooringFile = \\\"data/backdooring.txt\\\";\\r\\n// run on n00dles continuously? that way we can maybe avoid the annoyingness on home of it going to other machiens. \\r\\nexport async function main(ns) {\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n\\r\\n    if(ns.fileExists(backdooringFile)){\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const machinesToBackdoorFirst = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I.\\\", \\\"run4theh111z\\\"]\\r\\n\\r\\n    for(const machineName of machinesToBackdoorFirst){\\r\\n        if(await backdoorMachine(machineName, enviroment, ns)){\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const machineName of enviroment.map(x => x.name)) {\\r\\n        if(await backdoorMachine(machineName, enviroment, ns)){\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function backdoorMachine (machineName, enviroment, ns){\\r\\n    const serverWithLineage = enviroment.find(x => x.name === machineName)\\r\\n\\r\\n    if (serverWithLineage && !serverWithLineage.server.backdoorInstalled && serverWithLineage.server.hasAdminRights && !serverWithLineage.server.purchasedByPlayer) {\\r\\n        \\r\\n        ns.write(backdooringFile, JSON.stringify(new Date()), \\\"W\\\");\\r\\n        \\r\\n        for (const server of serverWithLineage.lineage) {\\r\\n            await ns.singularity.connect(server);\\r\\n        }\\r\\n\\r\\n        await ns.singularity.connect(serverWithLineage.name);\\r\\n        await ns.singularity.installBackdoor();\\r\\n        await ns.singularity.connect(\\\"home\\\");\\r\\n\\r\\n        ns.rm(backdooringFile);\\r\\n        return true;\\r\\n    } \\r\\n\\r\\n    return false;\\r\\n\\r\\n}\",\"filename\":\"scripts/singularity/backdoor-all-machines.js\",\"server\":\"home\"}}],[\"scripts/singularity/workout.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(false);\\r\\n    const includesHVMind = ownedAugmentations.includes(\\\"ECorp HVMind Implant\\\");\\r\\n\\r\\n    if (!includesHVMind) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    // if(getBuffForFaction(ns, \\\"The Covenant\\\", 850)){\\r\\n    //     return;\\r\\n    // } \\r\\n\\r\\n    if(getBuffForFaction(ns, \\\"Illuminati\\\", 1200)){\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n    if(currentWork && currentWork.type === \\\"CLASS\\\"){\\r\\n        ns.singularity.stopAction();\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\nfunction getBuffForFaction(ns, faction, targetForAttributes){\\r\\n    const player = ns.getPlayer();\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (!player.factions.includes(faction) && (!currentWork || currentWork.type === \\\"CLASS\\\")) {\\r\\n        \\r\\n        if(doExersizeIfAppropriate(player.skills.agility, currentWork, ns, 'agi', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        if(doExersizeIfAppropriate(player.skills.defense, currentWork, ns, 'def', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        if(doExersizeIfAppropriate(player.skills.strength, currentWork, ns, 'str', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        if(doExersizeIfAppropriate(player.skills.dexterity, currentWork, ns, 'dex', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction doExersizeIfAppropriate(skill, currentWork, ns, type, targetForAttributes) {\\r\\n    if (skill < targetForAttributes) {\\r\\n        if (!currentWork || currentWork.classType !== type) {\\r\\n            ns.singularity.travelToCity(\\\"Sector-12\\\");\\r\\n            ns.singularity.gymWorkout(\\\"powerhouse gym\\\", type, true);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/workout.js\",\"server\":\"home\"}}],[\"scripts/singularity/upgade-home-machine.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let visitedBefore = false;\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const ramObservationsTextFile = '../../data/ramObservations.txt';\\r\\n    const stopInvestingFileName = \\\"stopInvesting.txt\\\";\\r\\n    if (ns.fileExists(stopInvestingFileName)) {\\r\\n        if (ns.fileExists(ramObservationsTextFile)) {\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    visitedBefore = false;\\r\\n\\r\\n    await upgradeHomeRamOrCpu(ns, 11_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 100_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 30_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 100_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 1_000_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 10_000_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 100_000_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 1_000_000_000_000_000);\\r\\n}\\r\\n\\r\\nasync function upgradeHomeRamOrCpu(ns, moneyLimit) {\\r\\n    if (visitedBefore) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const ramUpgradeCost = ns.singularity.getUpgradeHomeRamCost();\\r\\n    const coreUpgradeCost = ns.singularity.getUpgradeHomeCoresCost();\\r\\n\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (moneyLimit < coreUpgradeCost && moneyLimit < ramUpgradeCost) {\\r\\n        return;\\r\\n    } else {\\r\\n        visitedBefore = true;\\r\\n    }\\r\\n\\r\\n    const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n    let stockMarketReserveMoney = new ReserveForTrading();\\r\\n    if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n        stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n    }\\r\\n\\r\\n    if (ramUpgradeCost < coreUpgradeCost) {\\r\\n\\r\\n        const moneyLeftOverForRam = moneyAvailable - ramUpgradeCost;\\r\\n\\r\\n        if (moneyLeftOverForRam > moneyLimit) {\\r\\n            if (stockMarketReserveMoney.canSpend(ns, ramUpgradeCost)) {\\r\\n                ns.singularity.upgradeHomeRam();\\r\\n                ns.toast(`Upgraded home ram`, \\\"success\\\", null);\\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n        }\\r\\n\\r\\n    } else {\\r\\n\\r\\n        const moneyLeftOverForCores = moneyAvailable - coreUpgradeCost;\\r\\n\\r\\n        if (moneyLeftOverForCores > moneyLimit) {\\r\\n            if (stockMarketReserveMoney.canSpend(ns, coreUpgradeCost)) {\\r\\n                ns.singularity.upgradeHomeCores()\\r\\n                ns.toast(`Upgraded home core`, \\\"success\\\", null);\\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = moneyInvested / 2;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"upgrade-home-machine\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"upgrade-home-machine\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/upgade-home-machine.js\",\"server\":\"home\"}}],[\"scripts/singularity/travel-to-get-augs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const ownedAugmentations = JSON.parse(ns.read(\\\"data/ownedAugs.txt\\\"));\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (moneyAvailable > 10_000_000 && notInAnyCityFaction(ns)) {\\r\\n\\r\\n        if (travelToGetUniqueAugments(ns, \\\"Neuregen Gene Modification\\\", \\\"Chongqing\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, 'PCMatrix', \\\"Aevum\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, 'CashRoot Starter Kit', \\\"Sector-12\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, \\\"DermaForce Particle Barrier\\\", \\\"Volhaven\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, \\\"NutriGen Implant\\\", \\\"New Tokyo\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, \\\"INFRARET Enhancement\\\", \\\"Ishima\\\", ownedAugmentations)) { return; }\\r\\n    }\\r\\n\\r\\n    const playersLocation = ns.getPlayer().city\\r\\n    if (moneyAvailable > 250_000_000) {\\r\\n        if (ns.singularity.getFactionRep(\\\"Tian Di Hui\\\") === 0 && playersLocation !== \\\"Chongqing\\\") {\\r\\n            ns.singularity.travelToCity(\\\"Chongqing\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction notInAnyCityFaction(ns){\\r\\n    const cityFactions = [\\\"Chongqing\\\", \\\"Aevum\\\", \\\"Sector-12\\\", \\\"Volhaven\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"];\\r\\n\\r\\n    for (const city of cityFactions) {\\r\\n        if(ns.singularity.getFactionRep(city)){\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n}\\r\\n\\r\\nfunction travelToGetUniqueAugments(ns, augmentWanted, city, ownedAugmentations) {\\r\\n    if (!ownedAugmentations.includes(augmentWanted)) {\\r\\n\\r\\n        const playersLocation = ns.getPlayer().city\\r\\n        if (ns.singularity.getFactionRep(city) === 0 && playersLocation !== city) {\\r\\n            ns.singularity.travelToCity(city);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\n\\r\\n\",\"filename\":\"scripts/singularity/travel-to-get-augs.js\",\"server\":\"home\"}}],[\"scripts/singularity/study-computer-science.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (player.factions.length === 0 && !currentWork) {\\r\\n        ns.singularity.universityCourse(\\\"Rothman University\\\", \\\"Computer Science\\\", true);\\r\\n        return;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/singularity/study-computer-science.js\",\"server\":\"home\"}}],[\"scripts/singularity/join-organziations.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const toJoinInOrderInWhichIWantToComplete = [\\r\\n        \\\"CyberSec\\\",\\r\\n        \\\"NiteSec\\\",\\r\\n        \\\"Chongqing\\\",\\r\\n        \\\"The Black Hand\\\",\\r\\n        \\\"Bachman & Associates\\\",\\r\\n        \\\"BitRunners\\\",\\r\\n        \\\"Daedalus\\\",\\r\\n        \\\"NWO\\\",\\r\\n        \\\"OmniTek Incorporated\\\",\\r\\n        \\\"Blade Industries\\\",\\r\\n        \\\"ECorp\\\",\\r\\n    // \\\"The Covenant\\\",\\r\\n        \\\"Illuminati\\\",\\r\\n        \\\"Aevum\\\",\\r\\n        \\\"Volhaven\\\",\\r\\n        \\\"New Tokyo\\\",\\r\\n        \\\"Ishima\\\",\\r\\n        \\\"Tian Di Hui\\\",\\r\\n        \\\"Netburners\\\",\\r\\n    ];\\r\\n\\r\\n    const companiesWeWantToBecomePartOf = [\\r\\n        \\\"Bachman & Associates\\\", \\r\\n        \\\"NWO\\\", \\r\\n        \\\"OmniTek Incorporated\\\", \\r\\n        \\\"Blade Industries\\\", \\r\\n        \\\"ECorp\\\"\\r\\n    ]; \\r\\n\\r\\n    const doNoWorkFor = [\\r\\n        \\\"Aevum\\\",\\r\\n        \\\"Volhaven\\\",\\r\\n        \\\"New Tokyo\\\",\\r\\n        \\\"Ishima\\\",\\r\\n        \\\"Tian Di Hui\\\",\\r\\n        \\\"Netburners\\\"\\r\\n    ];\\r\\n\\r\\n    const stopAtAugments = [\\r\\n        { final: true, faction: \\\"Chongqing\\\", augmentToStopAt: \\\"Neuregen Gene Modification\\\" },\\r\\n        { final: true, faction: \\\"NiteSec\\\", augmentToStopAt: \\\"Cranial Signal Processors - Gen III\\\" },\\r\\n        { final: true, faction: \\\"The Black Hand\\\", augmentToStopAt: \\\"Cranial Signal Processors - Gen IV\\\" },\\r\\n    ]\\r\\n\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    if (moneyAvailable > 150_000_000) {\\r\\n        toJoinInOrderInWhichIWantToComplete.push(\\\"Sector-12\\\");\\r\\n        doNoWorkFor.push(\\\"Sector-12\\\");\\r\\n    }\\r\\n\\r\\n    const factionInvitations = ns.singularity.checkFactionInvitations();\\r\\n\\r\\n    const organzations = { toJoinInOrderInWhichIWantToComplete, companiesWeWantToBecomePartOf, doNoWorkFor, stopAtAugments };\\r\\n\\r\\n    const organizationTextFileName = \\\"data/organizations.txt\\\";\\r\\n    ns.rm(organizationTextFileName);\\r\\n    ns.write(organizationTextFileName, JSON.stringify(organzations), \\\"W\\\");\\r\\n\\r\\n    for (const name of toJoinInOrderInWhichIWantToComplete) {\\r\\n        if (factionInvitations.includes(name)) {\\r\\n            await ns.singularity.joinFaction(name);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/singularity/join-organziations.js\",\"server\":\"home\"}}],[\"scripts/singularity/finish-round.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let incomePerHourEstimate;\\r\\nlet updatedMoneyEstimate = false;\\r\\n\\r\\nexport async function main(ns) {\\r\\n\\r\\n    if (!ns.stock.has4SDataTIXAPI() || !ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const factionToMaxFile = \\\"data/factionToMax.txt\\\";\\r\\n    const factionDonationFile = 'data/factionDonatation.txt'\\r\\n    const incomeEveryMinuteObservationsFile = 'data/incomeEveryMinuteForTheLast30Minutes.txt'\\r\\n\\r\\n    let factionToMax;\\r\\n\\r\\n    let incomeObservations = [];\\r\\n    const lastObservation = new Date();\\r\\n    let lastObservationRecordedMoney = new Date();\\r\\n\\r\\n    const formatter = new Intl.NumberFormat('en-US', {\\r\\n        style: 'currency',\\r\\n        currency: 'USD',\\r\\n    });\\r\\n\\r\\n    if (ns.fileExists(incomeEveryMinuteObservationsFile)) {\\r\\n        const incomePlusDateFromFile = JSON.parse(ns.read(incomeEveryMinuteObservationsFile));\\r\\n        incomeObservations = incomePlusDateFromFile.incomeObservations;\\r\\n        lastObservationRecordedMoney = new Date(incomePlusDateFromFile.lastObservation);\\r\\n    } else {\\r\\n        ns.write(incomeEveryMinuteObservationsFile, JSON.stringify({ incomeObservations, lastObservation }), \\\"W\\\");\\r\\n    }\\r\\n\\r\\n    if (lastObservationRecordedMoney.getMinutes() !== lastObservation.getMinutes()) {\\r\\n        let totalIncomeSinceAugInstall = 0\\r\\n\\r\\n        const moneySources = ns.getMoneySources();\\r\\n\\r\\n        for (let [key, value] of Object.entries(moneySources.sinceInstall)) {\\r\\n            if (key !== \\\"total\\\" && value > 0 && key !== \\\"stock\\\") {\\r\\n                totalIncomeSinceAugInstall += value;\\r\\n            }\\r\\n        }\\r\\n        incomeObservations.push(totalIncomeSinceAugInstall);\\r\\n\\r\\n        const totalIncome30MinutesAgo = incomeObservations[0];\\r\\n\\r\\n        const incomePerMinute = (totalIncomeSinceAugInstall - totalIncome30MinutesAgo) / incomeObservations.length;\\r\\n        incomePerHourEstimate = incomePerMinute * 60;\\r\\n        updatedMoneyEstimate = true;\\r\\n\\r\\n        if (incomeObservations.length > 30) {\\r\\n            incomeObservations.shift();\\r\\n        }\\r\\n\\r\\n        ns.rm(incomeEveryMinuteObservationsFile);\\r\\n        ns.write(incomeEveryMinuteObservationsFile, JSON.stringify({ incomeObservations, lastObservation }), \\\"W\\\");\\r\\n    } else {\\r\\n        updatedMoneyEstimate = false;\\r\\n    }\\r\\n\\r\\n    let analytics = new EndOfRoundAnalytics();\\r\\n    const endOfRoundAnalyticsFile = \\\"analytics/end-round.txt\\\";\\r\\n    if (ns.fileExists(endOfRoundAnalyticsFile)) {\\r\\n        analytics = JSON.parse(ns.read(endOfRoundAnalyticsFile));\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(factionToMaxFile) || ns.fileExists(factionDonationFile)) {\\r\\n        if (ns.fileExists(factionToMaxFile)) {\\r\\n            factionToMax = ns.read(factionToMaxFile);\\r\\n\\r\\n            if (!analytics.firstAssignFactionToMax) {\\r\\n                analytics.firstAssignFactionToMax = new Date();\\r\\n            }\\r\\n        } else {\\r\\n            factionToMax = ns.read(factionDonationFile);\\r\\n\\r\\n            if (!analytics.firstAssignFactionToMaxViaDonation) {\\r\\n                analytics.firstAssignFactionToMaxViaDonation = new Date();\\r\\n            }\\r\\n        }\\r\\n    } else {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (!analytics.factionsToMax.find(x => x.factionToMax === factionToMax)) {\\r\\n        const firstTime = new Date();\\r\\n        analytics.factionsToMax.push({ factionToMax, firstTime });\\r\\n    }\\r\\n\\r\\n    saveAnalytics(ns, analytics);\\r\\n\\r\\n    const player = ns.getPlayer();\\r\\n\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n\\r\\n    const mostRepExpensiveForEachFaction = [];\\r\\n    for (const faction of player.factions) {\\r\\n        const maximumAugRep = Math.max(...ns\\r\\n            .singularity\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n            .filter(x => !ownedAugmentations.includes(x))\\r\\n            .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n        if (maximumAugRep > 0) {\\r\\n            mostRepExpensiveForEachFaction.push({ faction, maximumAugRep });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const targetFaction = mostRepExpensiveForEachFaction\\r\\n        .filter(x => x.faction === factionToMax)\\r\\n        .pop();\\r\\n\\r\\n    setGoalAugment(ownedAugmentations, factionToMax, targetFaction, ns);\\r\\n\\r\\n    const currentFactionRep = ns.singularity.getFactionRep(targetFaction.faction);\\r\\n    const currentFactionFavor = ns.singularity.getFactionFavor(targetFaction.faction);\\r\\n\\r\\n    let targetRepForGettingToFavor = 700_000;\\r\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n        const favorGain = ns.singularity.getFactionFavorGain(targetFaction.faction);\\r\\n        if (favorGain + currentFactionFavor > 75) {\\r\\n            targetRepForGettingToFavor = currentFactionFavor;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (!analytics.firstEncounterOfRepTrigger) {\\r\\n        const repTrigger = populateRepTrigger(targetFaction, currentFactionRep, targetRepForGettingToFavor, ns, factionDonationFile, factionToMaxFile);\\r\\n        analytics.firstEncounterOfRepTrigger = repTrigger;\\r\\n        saveAnalytics(ns, analytics);\\r\\n    }\\r\\n\\r\\n    if (targetFaction.maximumAugRep < currentFactionRep || targetRepForGettingToFavor < currentFactionRep || (ns.fileExists(factionDonationFile) && !ns.fileExists(factionToMaxFile))) {\\r\\n\\r\\n        if (!analytics.repTrigger) {\\r\\n            const repTrigger = populateRepTrigger(targetFaction, currentFactionRep, targetRepForGettingToFavor, ns, factionDonationFile, factionToMaxFile);\\r\\n            analytics.repTrigger = repTrigger;\\r\\n            saveAnalytics(ns, analytics);\\r\\n        }\\r\\n\\r\\n        const factionsWithAugmentsToBuy =\\r\\n            mostRepExpensiveForEachFaction\\r\\n                .map(x => {\\r\\n                    {\\r\\n                        const faction = x.faction;\\r\\n                        const factionRep = ns.singularity.getFactionRep(faction);\\r\\n                        const factionAugmentsThatIDontOwnAndCanAfford = ns\\r\\n                            .singularity\\r\\n                            .getAugmentationsFromFaction(faction)\\r\\n                            .filter(y => y !== \\\"NeuroFlux Governor\\\")\\r\\n                            .filter(y => !ownedAugmentations.includes(y))\\r\\n                            .map(y => {\\r\\n                                return {\\r\\n                                    augmentName: y,\\r\\n                                    augmentationRepCost: ns.singularity.getAugmentationRepReq(y),\\r\\n                                    price: ns.singularity.getAugmentationPrice(y),\\r\\n                                    prereqs: ns.singularity.getAugmentationPrereq(y)\\r\\n                                }\\r\\n                            })\\r\\n                            .filter(y => y.augmentationRepCost < factionRep)\\r\\n                            .sort((a, b) => b.price - a.price);\\r\\n\\r\\n                        return {\\r\\n                            faction,\\r\\n                            factionRep,\\r\\n                            factionAugmentsThatIDontOwnAndCanAfford\\r\\n                        }\\r\\n                    }\\r\\n                });\\r\\n\\r\\n        const priceOfMostExpensiveAugment = Math.max(...factionsWithAugmentsToBuy.find(x => x.faction === targetFaction.faction).factionAugmentsThatIDontOwnAndCanAfford.map(x => x.price));\\r\\n\\r\\n\\r\\n        if (priceOfMostExpensiveAugment < 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // --------\\r\\n        // My augment script ranks every augment that hasn't been purchased by price, and then calculates how many of them I can buy (taking into account the 1.9x price increase per augment, and the additional 1.14x increase per NeuroFlux Governor level). \\r\\n\\r\\n        const purchasableAugments = new Map();\\r\\n\\r\\n        for (const factionWithAugments of factionsWithAugmentsToBuy) {\\r\\n            for (const augment of factionWithAugments.factionAugmentsThatIDontOwnAndCanAfford) {\\r\\n                if (purchasableAugments.has(augment.augmentName) === false) {\\r\\n                    const item = {\\r\\n                        augmentationRepCost: augment.augmentationRepCost,\\r\\n                        price: augment.price,\\r\\n                        prereqs: augment.prereqs,\\r\\n                        faction: factionWithAugments.faction\\r\\n                    }\\r\\n                    purchasableAugments.set(augment.augmentName, item)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        const augmentsLeft = Array.from(purchasableAugments.entries()).sort((a, b) => b[1].price - a[1].price);\\r\\n\\r\\n        const orderedAugments = []; // { factionName, augmentName, basePrice, multipledPrice}\\r\\n\\r\\n        function addPrereqs(prereqName) {\\r\\n            const augment = purchasableAugments.get(prereqName);\\r\\n\\r\\n            if (augment && !ownedAugmentations.find(x => x.augmentName === prereqName)) {\\r\\n\\r\\n                if (augment.prereqs.length > 0) {//it has prereqs, pass it into this. \\r\\n                    for (const prereq of augment.prereqs) {\\r\\n                        addPrereqs(prereq)\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (!orderedAugments.find(x => x.augmentName === prereqName)) {\\r\\n                    orderedAugments.push({ faction: augment.faction, augmentName: prereqName, basePrice: augment.price });\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (const augmentData of augmentsLeft) {\\r\\n            const augmentName = augmentData[0];\\r\\n            const augment = augmentData[1];\\r\\n\\r\\n            if (augment.prereqs.length > 0) {\\r\\n                for (const prereqName of augment.prereqs) {\\r\\n                    addPrereqs(prereqName);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (!orderedAugments.find(x => x.augmentName === augmentName)) {\\r\\n                orderedAugments.push({ faction: augment.faction, augmentName: augmentName, basePrice: augment.price, multipledPrice: 0 })\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        let priceMultipler = 1;\\r\\n\\r\\n        for (const augment of orderedAugments) {\\r\\n            augment.multipledPrice = augment.basePrice * priceMultipler;\\r\\n            priceMultipler *= 1.9;\\r\\n        }\\r\\n\\r\\n        const moneyNeededForAugments = orderedAugments.reduce((acc, x) => acc + x.multipledPrice, 0);\\r\\n\\r\\n        // make a pass for multiplied price\\r\\n\\r\\n        // (faction, augmentName)\\r\\n        // arrange with prereqs in mind\\r\\n        // then 1.9X the cost every purchase\\r\\n        // then figure out how many NeuroFlux governors we can buy with the rep, and then figure out how much that would cost. \\r\\n\\r\\n        // new order ->\\r\\n        // augments\\r\\n        // neuroflux\\r\\n        // computer\\r\\n        // if we have extra money, then we buy more neuroflux with purchased rep\\r\\n\\r\\n\\r\\n\\r\\n        /// ------\\r\\n\\r\\n\\r\\n        let buyAugmentsWhenWeHaveMoreThanThisMuchMoney = moneyNeededForAugments;\\r\\n\\r\\n        const estimatedIncomeForTheNextFourHours = incomePerHourEstimate * 4;\\r\\n\\r\\n        const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        const moneyFormatted = formatter.format(incomePerHourEstimate);\\r\\n\\r\\n        if (moneyFormatted !== \\\"$NaN\\\") {\\r\\n            const hoursTillInstall = Math.floor(buyAugmentsWhenWeHaveMoreThanThisMuchMoney / incomePerHourEstimate);\\r\\n            if (updatedMoneyEstimate) {\\r\\n                const now = new Date();\\r\\n                const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n\\r\\n                ns.toast(`${timeStamp} Income Per Hour Estimate: ${moneyFormatted}. ~Hours to install: ${hoursTillInstall}`, \\\"success\\\", 60000)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!analytics.firstEncoundedMoneyTrigger) {\\r\\n            const moneyTrigger = createMoneyTrigger(estimatedIncomeForTheNextFourHours, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, moneyAvailable, formatter);\\r\\n\\r\\n            analytics.firstEncoundedMoneyTrigger = moneyTrigger;\\r\\n            saveAnalytics(ns, analytics);\\r\\n        }\\r\\n\\r\\n        if (estimatedIncomeForTheNextFourHours > buyAugmentsWhenWeHaveMoreThanThisMuchMoney || moneyAvailable > buyAugmentsWhenWeHaveMoreThanThisMuchMoney) {\\r\\n\\r\\n            const stopInvestingFileName = \\\"stopInvesting.txt\\\";\\r\\n            if (!ns.fileExists(stopInvestingFileName)) {\\r\\n                ns.write(stopInvestingFileName, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, \\\"W\\\")\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            if (moneyAvailable > buyAugmentsWhenWeHaveMoreThanThisMuchMoney) {\\r\\n                const stopStockTradingFileName = \\\"stopTrading.txt\\\";\\r\\n                if (!ns.fileExists(stopStockTradingFileName)) {\\r\\n                    ns.write(stopStockTradingFileName, \\\"\\\", \\\"W\\\")\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                if (!analytics.moneyTrigger) {\\r\\n                    const moneyTrigger = createMoneyTrigger(estimatedIncomeForTheNextFourHours, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, moneyAvailable, formatter);\\r\\n\\r\\n                    analytics.moneyTrigger = moneyTrigger;\\r\\n                    saveAnalytics(ns, analytics);\\r\\n                }\\r\\n\\r\\n                for (const augment of orderedAugments) {\\r\\n                    purchaseAug(ns, augment, analytics);\\r\\n                }\\r\\n\\r\\n                upgradeHomeMachine(ns, analytics);\\r\\n\\r\\n                const factionsByRating = factionsWithAugmentsToBuy.sort((a, b) => b.factionRep - a.factionRep);\\r\\n\\r\\n                purchaseNeuroFluxGovernors(ns, factionsByRating[0].faction, analytics);\\r\\n\\r\\n                analytics.moneyLeft = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n                saveAnalytics(ns, analytics, true);\\r\\n\\r\\n                ns.singularity.installAugmentations('scripts/coordinator.js')\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    saveAnalytics(ns, analytics);\\r\\n}\\r\\n\\r\\nfunction createMoneyTrigger(estimatedIncomeForTheNextFourHours, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, moneyAvailable, formatter) {\\r\\n    const moneyTrigger = new MoneyTrigger();\\r\\n    moneyTrigger.estimatedIncomeTriggered = estimatedIncomeForTheNextFourHours > buyAugmentsWhenWeHaveMoreThanThisMuchMoney;\\r\\n    moneyTrigger.moneyIsGreaterThanTriggered = moneyAvailable > buyAugmentsWhenWeHaveMoreThanThisMuchMoney;\\r\\n\\r\\n    moneyTrigger.estimatedIncomeForTheNextFourHours = formatter.format(estimatedIncomeForTheNextFourHours);\\r\\n    moneyTrigger.moneyRightNow = formatter.format(moneyAvailable);\\r\\n    moneyTrigger.buyArgumentsWhenWeHave = formatter.format(buyAugmentsWhenWeHaveMoreThanThisMuchMoney);\\r\\n    return moneyTrigger;\\r\\n}\\r\\n\\r\\nfunction populateRepTrigger(targetFaction, currentFactionRep, targetRepForGettingToFavor, ns, factionDonationFile, factionToMaxFile) {\\r\\n    const repTrigger = new RepTrigger();\\r\\n    repTrigger.factionRepGreaterThanMaximumAug = targetFaction.maximumAugRep < currentFactionRep;\\r\\n    repTrigger.factionRepGreaterThanTargetToGetToFavorNeeded = targetRepForGettingToFavor < currentFactionRep;\\r\\n    repTrigger.factionDonationTrigger = ns.fileExists(factionDonationFile) && !ns.fileExists(factionToMaxFile);\\r\\n\\r\\n    repTrigger.maximumAugRepNeeded = targetFaction.maximumAugRep;\\r\\n    repTrigger.currentFactionRep = currentFactionRep;\\r\\n    repTrigger.targetRepForGettingToFavor = targetRepForGettingToFavor;\\r\\n    return repTrigger;\\r\\n}\\r\\n\\r\\nfunction saveAnalytics(ns, analytics, final = false) {\\r\\n    let endOfRoundAnalyticsFile = \\\"analytics/end-round.txt\\\";\\r\\n    ns.rm(endOfRoundAnalyticsFile);\\r\\n\\r\\n    if (final) {\\r\\n        const now = new Date()\\r\\n        const factionToMax = analytics.factionsToMax[analytics.factionsToMax.length - 1].factionToMax.replaceAll(' ', '');\\r\\n        endOfRoundAnalyticsFile = `analytics/${now.toISOString().split('T')[0]}-${String(now.getHours()).padStart(2, 0)}-${String(now.getMinutes()).padStart(2, 0)}-${factionToMax}-end-round.txt`;\\r\\n    }\\r\\n\\r\\n    analytics.lastSaved = new Date();\\r\\n    ns.write(endOfRoundAnalyticsFile, JSON.stringify(analytics), \\\"W\\\");\\r\\n}\\r\\n\\r\\nfunction setGoalAugment(ownedAugmentations, factionToMax, targetFaction, ns) {\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n\\r\\n    for (const stopAtAugment of organizations.stopAtAugments) {\\r\\n        const goalAugment = stopAtAugment.augmentToStopAt;\\r\\n        const goalFaction = stopAtAugment.faction;\\r\\n\\r\\n        if (!ownedAugmentations.includes(goalAugment) && factionToMax === goalFaction) {\\r\\n            targetFaction.maximumAugRep = ns.singularity.getAugmentationRepReq(goalAugment);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction purchaseNeuroFluxGovernors(ns, faction, analytics) {\\r\\n\\r\\n    const augmentName = \\\"NeuroFlux Governor\\\"\\r\\n\\r\\n    let price = ns.singularity.getAugmentationPrice(augmentName);\\r\\n    let moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    let augmentRepPrice = ns.singularity.getAugmentationRepReq(augmentName);\\r\\n    let factionRep = ns.singularity.getFactionRep(faction);\\r\\n\\r\\n    while (price < moneyAvailable) {\\r\\n        if (factionRep < augmentRepPrice) {\\r\\n            if (ns.singularity.getFactionFavor(faction) > 75 && ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n                const repNeeded = augmentRepPrice - factionRep;\\r\\n                let dollarsDonated = 0;\\r\\n                let purchasedRep = 0;\\r\\n                const player = ns.getPlayer();\\r\\n                while (repNeeded > purchasedRep) {\\r\\n                    dollarsDonated += 1_000_000;\\r\\n                    purchasedRep = ns.formulas.reputation.repFromDonation(dollarsDonated, player);\\r\\n                }\\r\\n\\r\\n                analytics.moneySpent.repPurchased += dollarsDonated;\\r\\n                ns.singularity.donateToFaction(faction, dollarsDonated);\\r\\n            } else {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        factionRep = ns.singularity.getFactionRep(faction);\\r\\n\\r\\n        if (factionRep > augmentRepPrice) {\\r\\n            analytics.moneySpent.fluxGovernors += price;\\r\\n            ns.singularity.purchaseAugmentation(faction, augmentName);\\r\\n        }\\r\\n\\r\\n        price = ns.singularity.getAugmentationPrice(augmentName);\\r\\n        moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n        augmentRepPrice = ns.singularity.getAugmentationRepReq(augmentName);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction upgradeHomeMachine(ns, analytics) {\\r\\n    const home = \\\"home\\\";\\r\\n    const ramCost = ns.singularity.getUpgradeHomeRamCost();\\r\\n    const coreCost = ns.singularity.getUpgradeHomeCoresCost();\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(home);\\r\\n    const orginalSpecs = ns.getServer(home);\\r\\n\\r\\n    if (ramCost > moneyAvailable && coreCost > moneyAvailable) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (ramCost > coreCost) {\\r\\n        analytics.moneySpent.homeCores += coreCost;\\r\\n        ns.singularity.upgradeHomeCores();\\r\\n    } else {\\r\\n        analytics.moneySpent.homeRam += ramCost;\\r\\n        ns.singularity.upgradeHomeRam();\\r\\n    }\\r\\n\\r\\n    const upgradedServer = ns.getServer(home);\\r\\n\\r\\n    analytics.amountOfRamIncrease += upgradedServer.maxRam - orginalSpecs.maxRam;\\r\\n    analytics.amountOfCoresIncrease += upgradedServer.cpuCores - orginalSpecs.cpuCores;\\r\\n\\r\\n    return upgradeHomeMachine(ns, analytics);\\r\\n}\\r\\n\\r\\nfunction purchaseAug(ns, augment, analytics) {\\r\\n    const ownedAugments = ns.singularity.getOwnedAugmentations(true);\\r\\n    const augmentName = augment.augmentName;\\r\\n\\r\\n    if (ownedAugments.includes(augmentName) === false) {\\r\\n        const augmentPrice = ns.singularity.getAugmentationPrice(augmentName);\\r\\n        const amountOfMoneyWeHave = ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n\\r\\n        if (augmentPrice < amountOfMoneyWeHave) {\\r\\n            analytics.moneySpent.augments += augmentPrice;\\r\\n            if (!analytics.augsBought) {\\r\\n                analytics.augsBought = [];\\r\\n            }\\r\\n            analytics.augsBought.push(augmentName)\\r\\n\\r\\n            ns.singularity.purchaseAugmentation(augment.faction, augmentName);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass EndOfRoundAnalytics {\\r\\n    firstStarted = new Date();\\r\\n\\r\\n\\r\\n    firstAssignFactionToMax;\\r\\n    firstAssignFactionToMaxViaDonation;\\r\\n\\r\\n    factionsToMax = [];\\r\\n\\r\\n    firstEncounterOfRepTrigger;\\r\\n    repTrigger;\\r\\n\\r\\n\\r\\n    firstEncoundedMoneyTrigger;\\r\\n    moneyTrigger;\\r\\n\\r\\n    augsBought = [];\\r\\n\\r\\n    amountOfRamIncrease\\r\\n    amountOfCoresIncrease\\r\\n\\r\\n    moneySpent = new MoneySpent();\\r\\n\\r\\n    moneyLeft = 0;\\r\\n    lastSaved;\\r\\n}\\r\\n\\r\\nclass MoneyTrigger {\\r\\n    estimatedIncomeTriggered;\\r\\n    moneyIsGreaterThanTriggered;\\r\\n\\r\\n    estimatedIncomeForTheNextFourHours;\\r\\n    moneyRightNow;\\r\\n    buyArgumentsWhenWeHave;\\r\\n\\r\\n    time = new Date();\\r\\n}\\r\\n\\r\\nclass MoneySpent {\\r\\n\\r\\n    augments = 0;\\r\\n    homeCores = 0;\\r\\n    homeRam = 0;\\r\\n    fluxGovernors = 0;\\r\\n    repPurchased = 0;\\r\\n}\\r\\n\\r\\nclass RepTrigger {\\r\\n\\r\\n    factionRepGreaterThanMaximumAug;\\r\\n    factionRepGreaterThanTargetToGetToFavorNeeded;\\r\\n    factionDonationTrigger;\\r\\n\\r\\n\\r\\n    maximumAugRepNeeded;\\r\\n    currentFactionRep;\\r\\n    targetRepForGettingToFavor;\\r\\n\\r\\n    time = new Date();\\r\\n}\",\"filename\":\"scripts/singularity/finish-round.js\",\"server\":\"home\"}}],[\"scripts/singularity/finish-bitnode.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(false);\\r\\n    const includesRedPill = ownedAugmentations.includes(\\\"The Red Pill\\\");\\r\\n    const currentHackingLevel = ns.getHackingLevel();\\r\\n    const endgameServer = \\\"w0r1d_d43m0n\\\";\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n    const serverWithLineage = enviroment.find(x => x.name === endgameServer);\\r\\n\\r\\n    if (includesRedPill && currentHackingLevel > serverWithLineage.server.requiredHackingSkill) {\\r\\n        if (serverWithLineage && serverWithLineage.server.hasAdminRights) {\\r\\n            for (const server of serverWithLineage.lineage) {\\r\\n                await ns.singularity.connect(server);\\r\\n            }\\r\\n\\r\\n            await ns.singularity.connect(endgameServer);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n\\r\\n\\r\\n        ns.singularity.destroyW0r1dD43m0n(3, 'scripts/coordinator.js'); // 3 (corps) - 8 passive - 5.1 (formula.exe + int passive) - 10 (new mechanic) \\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/finish-bitnode.js\",\"server\":\"home\"}}],[\"scripts/singularity/do-work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n\\r\\n    const factionToMaxFile = \\\"data/factionToMax.txt\\\";\\r\\n\\r\\n    let factionToMax;\\r\\n\\r\\n    if (ns.fileExists(factionToMaxFile)) {\\r\\n        factionToMax = ns.read(factionToMaxFile);\\r\\n    }\\r\\n\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const organizationsToJoinInTheOrderWeWantToComplete = organizations.toJoinInOrderInWhichIWantToComplete;\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavor = JSON.parse(ns.read(\\\"data/factionsWithAugsToBuyAndNotEnoughtFavor.txt\\\"))\\r\\n\\r\\n    for (const faction of organizationsToJoinInTheOrderWeWantToComplete) {\\r\\n        const factionInAugsMix = factionsWithAugsToBuyAndNotEnoughtFavor.find(x => x.faction === faction);\\r\\n\\r\\n        if (factionInAugsMix) {\\r\\n\\r\\n            const newFactionToMax = factionInAugsMix.faction;\\r\\n\\r\\n            if (factionToMax !== newFactionToMax) {\\r\\n                factionToMax = newFactionToMax;\\r\\n                ns.rm(factionToMaxFile);\\r\\n                ns.write(factionToMaxFile, factionToMax, \\\"W\\\");\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (currentWork && currentWork.type === \\\"CREATE_PROGRAM\\\") {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    for (const faction of organizationsToJoinInTheOrderWeWantToComplete) {\\r\\n\\r\\n        if (currentWork &&\\r\\n            currentWork.type === \\\"COMPANY\\\" &&\\r\\n            currentWork.companyName === faction &&\\r\\n            !player.factions.includes(faction)) {\\r\\n\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        if (currentWork &&\\r\\n            currentWork.type === \\\"CLASS\\\" &&\\r\\n            currentWork.classType === \\\"Leadership\\\" &&\\r\\n            factionToMax !== \\\"Chongqing\\\") {\\r\\n\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        const factionsAugs = factionsWithAugsToBuyAndNotEnoughtFavor.find(x => x.faction === faction);\\r\\n\\r\\n        if (!factionsAugs) {\\r\\n            continue;\\r\\n        }\\r\\n\\r\\n        const maxRepNeeded = factionsAugs.maximumAugRep;\\r\\n        const factionRep = ns.singularity.getFactionRep(faction);\\r\\n\\r\\n        if (maxRepNeeded > factionRep) {\\r\\n\\r\\n            if (!currentWork || currentWork.factionName !== faction) {\\r\\n                await ns.singularity.workForFaction(faction, \\\"hacking\\\", true);\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/do-work.js\",\"server\":\"home\"}}],[\"scripts/singularity/do-job.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const companiesWeWantToBecomePartOf = organizations.companiesWeWantToBecomePartOf;\\r\\n    const orderedFactions = organizations.toJoinInOrderInWhichIWantToComplete;\\r\\n\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (currentWork && currentWork.type === \\\"CREATE_PROGRAM\\\") {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let factionWeAreWorkingAtNow;\\r\\n    if (currentWork && currentWork.type === \\\"FACTION\\\") {\\r\\n        factionWeAreWorkingAtNow = currentWork.factionName;\\r\\n    }\\r\\n\\r\\n    if (currentWork && currentWork.type === \\\"COMPANY\\\") {\\r\\n        factionWeAreWorkingAtNow = currentWork.companyName;\\r\\n    }\\r\\n\\r\\n    const player = ns.getPlayer();\\r\\n    let company;\\r\\n\\r\\n    for (const potentialCompany of companiesWeWantToBecomePartOf) {\\r\\n        if (!player.factions.includes(potentialCompany)) {\\r\\n\\r\\n            if (!factionWeAreWorkingAtNow) {\\r\\n                company = potentialCompany;\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            for (const faction of orderedFactions) {\\r\\n                if (faction === potentialCompany) {\\r\\n                    company = potentialCompany;\\r\\n                    break;\\r\\n                }\\r\\n\\r\\n                if (faction === factionWeAreWorkingAtNow) {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (!company) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n\\r\\n    const positionInCompany = player.jobs[company];\\r\\n\\r\\n    if(!positionInCompany){\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const currentPositionInfo = ns.singularity.getCompanyPositionInfo(company, positionInCompany);\\r\\n    const nextPositionInfo = ns.singularity.getCompanyPositionInfo(company, currentPositionInfo.nextPosition);\\r\\n    const companyRep = ns.singularity.getCompanyRep(company);\\r\\n\\r\\n    if (nextPositionInfo.requiredReputation < companyRep && nextPositionInfo.requiredSkills.charisma > player.skills.charisma) {\\r\\n        if (!currentWork || currentWork.type !== \\\"CLASS\\\") {\\r\\n            ns.singularity.travelToCity(\\\"Sector-12\\\");\\r\\n            ns.singularity.universityCourse(\\\"Rothman University\\\", \\\"Leadership\\\", true);\\r\\n            return;\\r\\n        }\\r\\n    } else {\\r\\n        if (!currentWork || currentWork.type !== \\\"COMPANY\\\") {\\r\\n            ns.singularity.workForCompany(company, true);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/do-job.js\",\"server\":\"home\"}}],[\"scripts/singularity/create-early-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (!currentWork || currentWork.type !== \\\"CREATE_PROGRAM\\\") {\\r\\n        if (!ns.fileExists(\\\"FTPCrack.exe\\\")) {\\r\\n           ns.singularity.createProgram(\\\"FTPCrack.exe\\\", true);\\r\\n        }\\r\\n\\r\\n        if (!ns.fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n            ns.singularity.createProgram(\\\"BruteSSH.exe\\\", true);\\r\\n        }\\r\\n\\r\\n        // if (!ns.fileExists(\\\"relaySMTP.exe\\\")) {\\r\\n        //     ns.singularity.createProgram(\\\"relaySMTP.exe\\\", true);\\r\\n \\r\\n        //  }\\r\\n \\r\\n        //  if (!ns.fileExists(\\\"SQLInject.exe\\\")) {\\r\\n        //     ns.singularity.createProgram(\\\"SQLInject.exe\\\", true);\\r\\n        //  }\\r\\n\\r\\n        //  if (!ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\r\\n        //     ns.singularity.createProgram(\\\"HTTPWorm.exe\\\", true);\\r\\n \\r\\n        //  }\\r\\n \\r\\n        //  if (!ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n        //     ns.singularity.createProgram(\\\"Formulas.exe\\\", true);\\r\\n        //  }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/singularity/create-early-programs.js\",\"server\":\"home\"}}],[\"scripts/singularity/buy-rep.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (moneyAvailable > 10_000_000_000_000){\\r\\n        const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n        const player = ns.getPlayer();\\r\\n\\r\\n        const mostRepExpensiveForEachFaction = [];\\r\\n\\r\\n        for (const faction of player.factions) {\\r\\n            const maximumAugRep = Math.max(...ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction)\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .filter(x => {\\r\\n                    const prereqs = ns.singularity.getAugmentationPrereq(x);\\r\\n                    return prereqs.every(y => ownedAugmentations.includes(y));\\r\\n                })\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n    \\r\\n            const favor = ns.singularity.getFactionFavor(faction);\\r\\n    \\r\\n            if (maximumAugRep > 0 && favor > 75) {\\r\\n                mostRepExpensiveForEachFaction.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(mostRepExpensiveForEachFaction.length > 0){\\r\\n            for (const factionWithRep of mostRepExpensiveForEachFaction) {\\r\\n                \\r\\n                const currentFactionRep = ns.singularity.getFactionRep(factionWithRep.faction);\\r\\n                const repNeeded = factionWithRep.maximumAugRep - currentFactionRep;\\r\\n\\r\\n                if(repNeeded < 0){\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                let purchasedRep = 0;\\r\\n                let dollarsDonated = 0;\\r\\n\\r\\n                while(repNeeded > purchasedRep){\\r\\n                    dollarsDonated += 10_000_000;\\r\\n                    purchasedRep = ns.formulas.reputation.repFromDonation(dollarsDonated, player);\\r\\n                }\\r\\n\\r\\n                ns.singularity.donateToFaction(factionWithRep.faction, dollarsDonated);\\r\\n                \\r\\n                const fileToIndicateWeDonatedToFaction = \\\"data/factionDonatation.txt\\\";\\r\\n                ns.rm(fileToIndicateWeDonatedToFaction);\\r\\n                ns.write(fileToIndicateWeDonatedToFaction, factionWithRep.faction, \\\"W\\\");\\r\\n            }\\r\\n        }\\r\\n    }   \\r\\n}\",\"filename\":\"scripts/singularity/buy-rep.js\",\"server\":\"home\"}}],[\"scripts/stock/buy-4s.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\") \\r\\n\\r\\n    if (moneyAvailable > 26_000_000_000 && !ns.stock.has4SDataTIXAPI()) {\\r\\n        ns.stock.purchase4SMarketDataTixApi();\\r\\n    }\\r\\n}\",\"filename\":\"scripts/stock/buy-4s.js\",\"server\":\"home\"}}],[\"scripts/stock/populate-forecast.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const latestStockQuotesFile = \\\"data/latestQuotes.txt\\\";\\r\\n    const stockRecords = JSON.parse(ns.read(latestStockQuotesFile));\\r\\n\\r\\n    const hasS4DataTIXAPI = ns.stock.has4SDataTIXAPI();\\r\\n\\r\\n    if (hasS4DataTIXAPI) {\\r\\n        for (const stockRecord of stockRecords) {\\r\\n            stockRecord.volatility = ns.stock.getVolatility(stockRecord.symbol);\\r\\n            stockRecord.forecast = ns.stock.getForecast(stockRecord.symbol);\\r\\n            stockRecord.bias = Math.abs(stockRecord.forecast - .5);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.rm(latestStockQuotesFile);\\r\\n    ns.write(latestStockQuotesFile, JSON.stringify(stockRecords), \\\"W\\\")\\r\\n}\",\"filename\":\"scripts/stock/populate-forecast.js\",\"server\":\"home\"}}],[\"scripts/stock/invest-in-stocks.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let lastRecordedToConsole = new Date();\\r\\n\\r\\nexport async function main(ns) {\\r\\n\\r\\n    let historicalData = new Map();\\r\\n\\r\\n    const nameOfStockHistoricalData = \\\"../../data/stockHistory.txt\\\";\\r\\n    if (ns.fileExists(nameOfStockHistoricalData)) {\\r\\n        historicalData = new Map(JSON.parse(ns.read(nameOfStockHistoricalData)));\\r\\n    }\\r\\n\\r\\n    const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n    let stockMarketReserveMoney = new ReserveForTrading();\\r\\n    if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n        stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n    }\\r\\n\\r\\n    const latestStockQuotesFile = \\\"data/latestQuotes.txt\\\";\\r\\n    const stockRecords = JSON.parse(ns.read(latestStockQuotesFile));\\r\\n\\r\\n    SaveHistoricData(stockRecords, historicalData, ns, nameOfStockHistoricalData);\\r\\n\\r\\n    let moneyInvested = 0;\\r\\n    moneyInvested += stockRecords.reduce((sum, record) => sum += record.price * record.investedShares, 0);\\r\\n    moneyInvested += stockRecords.reduce((sum, record) => sum += (record.averageShortPrice * record.sharesShort) + ((record.averageShortPrice - record.price) * record.sharesShort), 0);\\r\\n\\r\\n    stockMarketReserveMoney.setMoneyInvested(moneyInvested, ns);\\r\\n\\r\\n    const moneyWeHaveNow = ns.getServerMoneyAvailable(\\\"home\\\") + stockMarketReserveMoney.moneyInvested;\\r\\n\\r\\n    const now = new Date();\\r\\n    const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n    const formatter = new Intl.NumberFormat('en-US', {\\r\\n        style: 'currency',\\r\\n        currency: 'USD',\\r\\n    });\\r\\n\\r\\n    if (now.getMinutes() !== lastRecordedToConsole.getMinutes() && !ns.fileExists(\\\"data/batchQueue.txt\\\")) { // && batches not running\\r\\n        const moneyFormatted = formatter.format(moneyWeHaveNow);\\r\\n\\r\\n        let consoleUpdate = `${timeStamp} Money we have now: ${moneyFormatted}`;\\r\\n\\r\\n        ns.tprint(consoleUpdate);\\r\\n\\r\\n        lastRecordedToConsole = now;\\r\\n    }\\r\\n\\r\\n    const nameOfLedger = \\\"../../data/salesLedger.txt\\\"\\r\\n    let ledger = [];\\r\\n\\r\\n    if (ns.fileExists(nameOfLedger)) {\\r\\n        ledger = JSON.parse(ns.read(nameOfLedger));\\r\\n    }\\r\\n\\r\\n    stockMarketReserveMoney.moneyRequested = new Map(Array.from(stockMarketReserveMoney.moneyRequested));\\r\\n    const reserveMoneyKeys = stockMarketReserveMoney.moneyRequested.keys();\\r\\n    let moneyRequested = 0;\\r\\n\\r\\n\\r\\n    for (const requestKey of reserveMoneyKeys) {\\r\\n        const moneyRequestedFromService = stockMarketReserveMoney.moneyRequested.get(requestKey);\\r\\n        stockMarketReserveMoney.moneyRequested.set(requestKey, moneyRequestedFromService);\\r\\n        moneyRequested += moneyRequestedFromService + 100_000;\\r\\n    }\\r\\n\\r\\n    stockMarketReserveMoney.moneyRequested = Array.from(stockMarketReserveMoney.moneyRequested);\\r\\n\\r\\n    if (moneyRequested === 0) {\\r\\n        stockMarketReserveMoney.countOfVisitedWithoutFillingRequest = 0;\\r\\n    }\\r\\n\\r\\n    let sellSharesToSatisfyMoneyDemands = false;\\r\\n    if (stockMarketReserveMoney.countOfVisitedWithoutFillingRequest > 90) {\\r\\n        sellSharesToSatisfyMoneyDemands = true;\\r\\n    }\\r\\n\\r\\n    const commission = 100_001;\\r\\n\\r\\n    const stopTradingExists = ns.fileExists(\\\"../../stopTrading.txt\\\");\\r\\n\\r\\n    for (const stock of stockRecords) {\\r\\n        let sharesToSell = 0;\\r\\n        let type = \\\"Short-Term Long Sale\\\";\\r\\n        let averagePrice = 0;\\r\\n        let coverShort = false;\\r\\n\\r\\n        if (stock.investedShares > 0) {\\r\\n            sharesToSell = stock.investedShares;\\r\\n            type = \\\"Short-Term Long Sale\\\";\\r\\n            averagePrice = stock.averagePrice;\\r\\n            coverShort = false;\\r\\n        }\\r\\n\\r\\n        if (stock.sharesShort > 0) {\\r\\n            sharesToSell = stock.sharesShort;\\r\\n            type = \\\"Short-Term Cover Short\\\";\\r\\n            averagePrice = stock.averageShortPrice;\\r\\n            coverShort = true;\\r\\n        }\\r\\n\\r\\n        if (sellSharesToSatisfyMoneyDemands && sharesToSell > 0) {\\r\\n            if (stockMarketReserveMoney.canSellAmountAndStillHaveReserve(moneyRequested)) {\\r\\n                sharesToSell = Math.ceil(moneyRequested / stock.bid) + 5\\r\\n\\r\\n                if (sharesToSell > stock.investedShares && stock.investedShares !== 0) {\\r\\n                    sharesToSell = stock.investedShares;\\r\\n                }\\r\\n\\r\\n                if (sharesToSell > stock.sharesShort && stock.sharesShort !== 0) {\\r\\n                    sharesToSell = stock.sharesShort;\\r\\n                }\\r\\n            } else {\\r\\n                sellSharesToSatisfyMoneyDemands = false;\\r\\n                stockMarketReserveMoney.countOfVisitedWithoutFillingRequest = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (sharesToSell > 0) {\\r\\n            if ((stock.sellTrend && coverShort === false) || stopTradingExists || sellSharesToSatisfyMoneyDemands || (stock.coverShortTrend && coverShort)) {\\r\\n                let salePrice;\\r\\n                if (coverShort) {\\r\\n                    salePrice = ns.stock.sellShort(stock.symbol, sharesToSell);\\r\\n                } else {\\r\\n                    salePrice = ns.stock.sellStock(stock.symbol, sharesToSell);\\r\\n                }\\r\\n\\r\\n                stockMarketReserveMoney.moneyInvested -= salePrice * sharesToSell;\\r\\n\\r\\n                if(stockMarketReserveMoney.moneyInvested < 0){\\r\\n                    stockMarketReserveMoney.moneyInvested = 0;\\r\\n                }\\r\\n\\r\\n                ledger.push(new LedgerItem(\\r\\n                    stock.symbol,\\r\\n                    salePrice,\\r\\n                    averagePrice,\\r\\n                    sharesToSell,\\r\\n                    type,\\r\\n                    stock.forecast\\r\\n                ))\\r\\n\\r\\n                if (sellSharesToSatisfyMoneyDemands) {\\r\\n                    stockMarketReserveMoney.moneyRequested = [];\\r\\n                    sellSharesToSatisfyMoneyDemands = false;\\r\\n                    ns.toast(`${timeStamp} Sold ${formatter.format(moneyRequested)} for money request.`, \\\"success\\\", null)\\r\\n                }\\r\\n\\r\\n                if (stopTradingExists) {\\r\\n                    ns.toast(\\\"Stopped trading\\\", \\\"success\\\", null)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.rm(nameOfLedger);\\r\\n    ns.write(nameOfLedger, JSON.stringify(ledger), \\\"W\\\");\\r\\n\\r\\n    const liquidCash = ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n\\r\\n    let moneyAvailable = liquidCash - commission - moneyRequested;\\r\\n\\r\\n    if (stockMarketReserveMoney.capitalToReserveForTrading > stockMarketReserveMoney.moneyInvested) {\\r\\n        moneyAvailable = liquidCash - commission;\\r\\n    }\\r\\n\\r\\n    if (moneyAvailable > 5_000_000_000 && !ns.stock.has4SDataTIXAPI()) {\\r\\n        moneyAvailable = 5_000_000_000;\\r\\n    }\\r\\n\\r\\n    const onlyInvestIfWeHaveMoreThan = 12_000_000;\\r\\n\\r\\n    if (moneyAvailable > onlyInvestIfWeHaveMoreThan && !stopTradingExists) {\\r\\n        let stocksToTrade = stockRecords\\r\\n            .filter(stock =>\\r\\n                (stock.sellShortTrend && stock.maxShares !== stock.sharesShort) ||\\r\\n                (stock.buyTrend && stock.investedShares !== stock.maxShares))\\r\\n            .sort((a, b) => b.volatility - a.volatility);\\r\\n\\r\\n        if (!ns.stock.has4SDataTIXAPI()) {\\r\\n            stocksToTrade = stockRecords\\r\\n                .filter(stock =>\\r\\n                    (stock.sellShortTrend && stock.sharesShort === 0) ||\\r\\n                    (stock.buyTrend && stock.investedShares === 0))\\r\\n                .sort((a, b) => b.magnitudeOfSignal - a.magnitudeOfSignal);\\r\\n        }\\r\\n\\r\\n        if (stocksToTrade.length > 0) {\\r\\n            const stockToLookAt = stocksToTrade[0];\\r\\n\\r\\n            let sharesToBuy = 0;\\r\\n            const ticker = stockToLookAt.symbol;\\r\\n\\r\\n            if (stockToLookAt.buyTrend) {\\r\\n                sharesToBuy = Math.round(moneyAvailable / stockToLookAt.ask);\\r\\n\\r\\n                const totalSharesAfterBuy = sharesToBuy + stockToLookAt.investedShares;\\r\\n\\r\\n                if (stockToLookAt.maxShares < totalSharesAfterBuy) {\\r\\n                    sharesToBuy = stockToLookAt.maxShares - stockToLookAt.investedShares;\\r\\n                }\\r\\n\\r\\n                ns.stock.buyStock(ticker, sharesToBuy);\\r\\n            }\\r\\n\\r\\n            if (stockToLookAt.sellShortTrend) {\\r\\n                sharesToBuy = Math.round(moneyAvailable / stockToLookAt.bid);\\r\\n\\r\\n                const totalSharesAfterBuy = sharesToBuy + stockToLookAt.sharesShort;\\r\\n\\r\\n                if (stockToLookAt.maxShares < totalSharesAfterBuy) {\\r\\n                    sharesToBuy = stockToLookAt.maxShares - stockToLookAt.sharesShort;\\r\\n                }\\r\\n\\r\\n                ns.stock.buyShort(ticker, sharesToBuy);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.rm(stockMarketReserveMoneyFile);\\r\\n    ns.write(stockMarketReserveMoneyFile, JSON.stringify(stockMarketReserveMoney), \\\"W\\\");\\r\\n}\\r\\n\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    canSellAmountAndStillHaveReserve(amountToSell) {\\r\\n        return (this.moneyInvested - amountToSell) > this.capitalToReserveForTrading;\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = (moneyInvested + ns.getServerMoneyAvailable(\\\"home\\\")) * .75;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"invest-in-stocks\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"invest-in-stocks\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nclass LedgerItem {\\r\\n\\r\\n    constructor(symbol, price, averagePurchasePrice, shares, type, forecastAtSale) {\\r\\n        const formatter = new Intl.NumberFormat('en-US', {\\r\\n            style: 'currency',\\r\\n            currency: 'USD',\\r\\n        });\\r\\n\\r\\n        let numberProfit = (price - averagePurchasePrice) * shares;\\r\\n\\r\\n        if (type === \\\"Short-Term Cover Short\\\") {\\r\\n            numberProfit = (averagePurchasePrice - price) * shares;\\r\\n        }\\r\\n\\r\\n        this.date = new Date().toLocaleString();\\r\\n        this.symbol = symbol;\\r\\n        this.price = price;\\r\\n        this.averagePurchasePrice = averagePurchasePrice;\\r\\n        this.profit = formatter.format(numberProfit);\\r\\n        this.profitPercent = (numberProfit / (shares * averagePurchasePrice)).toLocaleString(undefined, { style: 'percent', minimumFractionDigits: 2 });\\r\\n        this.shares = shares;\\r\\n        this.type = type;\\r\\n        this.forecastAtSale = forecastAtSale;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass StockHistoricData {\\r\\n    shortTermRecords = [];\\r\\n    longTermRecords = [];\\r\\n    recentTicksOfPrices = [];\\r\\n\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    addRecord(record, ns) {\\r\\n        this.shortTermRecords.push(record);\\r\\n        this.recentTicksOfPrices.push(record.price);\\r\\n\\r\\n        if (this.recentTicksOfPrices.length === 21) {\\r\\n            record.countOfNegative = 0;\\r\\n            record.countOfPositive = 0;\\r\\n            record.magnitudeOfSignal = 0;\\r\\n\\r\\n            let lastPrice;\\r\\n            for (const price of this.recentTicksOfPrices) {\\r\\n                if (lastPrice) {\\r\\n                    if (lastPrice < price) {\\r\\n                        record.countOfPositive++;\\r\\n                    }\\r\\n\\r\\n                    if (lastPrice > price) {\\r\\n                        record.countOfNegative++;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                lastPrice = price;\\r\\n            }\\r\\n\\r\\n            this.recentTicksOfPrices.shift();\\r\\n        }\\r\\n\\r\\n        const hasOracle = ns.stock.has4SDataTIXAPI();\\r\\n\\r\\n\\r\\n        if (!hasOracle) {\\r\\n            if (record.countOfPositive >= 16) {\\r\\n                record.buyTrend = true;\\r\\n                record.magnitudeOfSignal = record.countOfPositive;\\r\\n            }\\r\\n\\r\\n            if (record.countOfPositive <= 12 && record.investedShares > 0) {\\r\\n                record.sellTrend = true;\\r\\n            }\\r\\n\\r\\n            if (record.countOfNegative >= 16) {\\r\\n                record.sellShortTrend = true;\\r\\n                record.magnitudeOfSignal = record.countOfNegative;\\r\\n            }\\r\\n\\r\\n            if (record.countOfNegative <= 12 && record.sharesShort > 0) {\\r\\n                record.coverShortTrend = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (hasOracle) {\\r\\n            if (record.forecast > 0.6) {\\r\\n                record.buyTrend = true;\\r\\n            }\\r\\n\\r\\n            if (record.forecast < 0.5 && record.investedShares > 0) {\\r\\n                record.sellTrend = true;\\r\\n            }\\r\\n\\r\\n            if (0.4 > record.forecast) {\\r\\n                record.sellShortTrend = true;\\r\\n            }\\r\\n\\r\\n            if (0.5 < record.forecast && record.sharesShort > 0) {\\r\\n                record.coverShortTrend = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    storeLongTerm() {\\r\\n        const newLongTermStock = new Stock(\\r\\n            this.shortTermRecords[0].symbol,\\r\\n            this.shortTermRecords.map(x => x.bid).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            this.shortTermRecords.map(x => x.ask).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            this.shortTermRecords.map(x => x.price).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            this.shortTermRecords[0].maxShares,\\r\\n            [\\r\\n                this.shortTermRecords.map(x => x.investedShares).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n                this.shortTermRecords.map(x => x.averagePrice).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n                this.shortTermRecords.map(x => x.sharesShort).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n                this.shortTermRecords.map(x => x.averageShortPrice).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            ]\\r\\n        );\\r\\n\\r\\n        newLongTermStock.volatility = this.shortTermRecords[0].volatility;\\r\\n        newLongTermStock.forecast = this.shortTermRecords.map(x => x.forecast).reduce((a, b) => a + b) / this.shortTermRecords.length;\\r\\n\\r\\n        newLongTermStock.bias = Math.max(...this.shortTermRecords.map(x => x.bias));\\r\\n\\r\\n        this.longTermRecords.push(newLongTermStock);\\r\\n\\r\\n        this.shortTermRecords.length = 0;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Stock {\\r\\n    constructor(symbol, bid, ask, price, maxShares, position = {}, dateObserved = new Date()) {\\r\\n        this.symbol = symbol;\\r\\n        this.bid = bid;\\r\\n        this.ask = ask;\\r\\n        this.price = price;\\r\\n        this.maxShares = maxShares;\\r\\n        this.investedShares = position[0];\\r\\n        this.averagePrice = position[1];\\r\\n        this.sharesShort = position[2];\\r\\n        this.averageShortPrice = position[3];\\r\\n        this.dateObserved = dateObserved.toLocaleString();\\r\\n    }\\r\\n\\r\\n    volatility;\\r\\n    forecast;\\r\\n\\r\\n    buyTrend = false;\\r\\n    sellTrend = false;\\r\\n    sellShortTrend = false;\\r\\n    coverShortTrend = false;\\r\\n\\r\\n}\\r\\n\\r\\nfunction SaveHistoricData(stockRecords, historicalData, ns, nameOfStockHistoricalData) {\\r\\n    stockRecords.map(x => {\\r\\n        if (historicalData.has(x.symbol)) {\\r\\n            const data = historicalData.get(x.symbol);\\r\\n\\r\\n            if (data.shortTermRecords[data.shortTermRecords.length - 1]?.price !== x.price) {\\r\\n                const record = new StockHistoricData(data);\\r\\n                record.addRecord(x, ns);\\r\\n\\r\\n                if (record.shortTermRecords.length >= 100) {\\r\\n                    record.storeLongTerm();\\r\\n                }\\r\\n\\r\\n                historicalData.set(x.symbol, record);\\r\\n            }\\r\\n\\r\\n        } else {\\r\\n            const stockHistoryData = new StockHistoricData();\\r\\n            stockHistoryData.addRecord(x, ns);\\r\\n            historicalData.set(x.symbol, stockHistoryData);\\r\\n        }\\r\\n    });\\r\\n\\r\\n    ns.rm(nameOfStockHistoricalData);\\r\\n    ns.write(nameOfStockHistoricalData, JSON.stringify(Array.from(historicalData.entries()), \\\"W\\\"));\\r\\n}\\r\\n\",\"filename\":\"scripts/stock/invest-in-stocks.js\",\"server\":\"home\"}}],[\"scripts/stock/get-stock-quotes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const stockRecords = ns.stock\\r\\n        .getSymbols()\\r\\n        .map(x => new Stock(\\r\\n            x,\\r\\n            ns.stock.getBidPrice(x),\\r\\n            ns.stock.getAskPrice(x),\\r\\n        ));\\r\\n\\r\\n    const latestStockQuotesFile = \\\"data/latestQuotes.txt\\\";\\r\\n    ns.rm(latestStockQuotesFile);\\r\\n    ns.write(latestStockQuotesFile, JSON.stringify(stockRecords), \\\"W\\\")\\r\\n}\\r\\n\\r\\n\\r\\nclass Stock {\\r\\n    constructor(symbol, bid, ask, dateObserved = new Date()) {\\r\\n        this.symbol = symbol;\\r\\n        this.bid = bid;\\r\\n        this.ask = ask;\\r\\n        this.dateObserved = dateObserved.toLocaleString();\\r\\n    }\\r\\n\\r\\n    volatility;\\r\\n    forecast;\\r\\n\\r\\n    buyTrend = false;\\r\\n    sellTrend = false;\\r\\n    sellShortTrend = false;\\r\\n    coverShortTrend = false;\\r\\n\\r\\n}\",\"filename\":\"scripts/stock/get-stock-quotes.js\",\"server\":\"home\"}}],[\"scripts/tools/manually-end-round.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const player = ns.getPlayer();\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n\\r\\n    const formatter = new Intl.NumberFormat('en-US', {\\r\\n        style: 'currency',\\r\\n        currency: 'USD',\\r\\n    });\\r\\n\\r\\n    let totalToSpend = 0;\\r\\n\\r\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n        const factionsThatNeedDonating = [];\\r\\n\\r\\n        for (const faction of player.factions) {\\r\\n            const maximumAugRep = Math.max(...ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction)\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .filter(x => {\\r\\n                    const prereqs = ns.singularity.getAugmentationPrereq(x);\\r\\n                    return prereqs.every(y => ownedAugmentations.includes(y));\\r\\n                })\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n            const favor = ns.singularity.getFactionFavor(faction);\\r\\n\\r\\n            if (maximumAugRep > 0 && favor >= 0) {\\r\\n                factionsThatNeedDonating.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (factionsThatNeedDonating.length > 0) {\\r\\n            for (const factionWithRep of factionsThatNeedDonating) {\\r\\n                let dollarsDonated = 0;\\r\\n\\r\\n                const currentFactionRep = ns.singularity.getFactionRep(factionWithRep.faction);\\r\\n                const repNeeded = factionWithRep.maximumAugRep - currentFactionRep;\\r\\n\\r\\n                if (repNeeded < 0) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                let purchasedRep = 0;\\r\\n\\r\\n                while (repNeeded > purchasedRep) {\\r\\n                    dollarsDonated += 10_000_000;\\r\\n                    purchasedRep = ns.formulas.reputation.repFromDonation(dollarsDonated, player);\\r\\n                }\\r\\n\\r\\n                ns.toast(`${factionWithRep.faction}`, 'success', null)\\r\\n                ns.toast(`Money needed for donations: ${formatter.format(dollarsDonated)}`, \\\"success\\\", null)\\r\\n\\r\\n                totalToSpend += dollarsDonated;\\r\\n\\r\\n                if (ns.args[0] === \\\"donate\\\") {\\r\\n                    ns.singularity.donateToFaction(factionWithRep.faction, dollarsDonated);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    const mostRepExpensiveForEachFaction = [];\\r\\n    for (const faction of player.factions) {\\r\\n        const maximumAugRep = Math.max(...ns\\r\\n            .singularity\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n            .filter(x => !ownedAugmentations.includes(x))\\r\\n            .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n        if (maximumAugRep > 0) {\\r\\n            mostRepExpensiveForEachFaction.push({ faction, maximumAugRep });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const factionsWithAugmentsToBuy =\\r\\n        mostRepExpensiveForEachFaction\\r\\n            .map(x => {\\r\\n                {\\r\\n                    const faction = x.faction;\\r\\n                    const factionRep = ns.singularity.getFactionRep(faction);\\r\\n                    const factionAugmentsThatIDontOwnAndCanAfford = ns\\r\\n                        .singularity\\r\\n                        .getAugmentationsFromFaction(faction)\\r\\n                        .filter(y => y !== \\\"NeuroFlux Governor\\\")\\r\\n                        .filter(y => !ownedAugmentations.includes(y))\\r\\n                        .map(y => {\\r\\n                            return {\\r\\n                                augmentName: y,\\r\\n                                augmentationRepCost: ns.singularity.getAugmentationRepReq(y),\\r\\n                                price: ns.singularity.getAugmentationPrice(y),\\r\\n                                prereqs: ns.singularity.getAugmentationPrereq(y)\\r\\n                            }\\r\\n                        })\\r\\n                        .filter(y => y.augmentationRepCost < factionRep)\\r\\n                        .sort((a, b) => b.price - a.price);\\r\\n\\r\\n                    return {\\r\\n                        faction,\\r\\n                        factionRep,\\r\\n                        factionAugmentsThatIDontOwnAndCanAfford\\r\\n                    }\\r\\n                }\\r\\n            });\\r\\n\\r\\n\\r\\n\\r\\n    const purchasableAugments = new Map();\\r\\n\\r\\n    for (const factionWithAugments of factionsWithAugmentsToBuy) {\\r\\n        for (const augment of factionWithAugments.factionAugmentsThatIDontOwnAndCanAfford) {\\r\\n            if (purchasableAugments.has(augment.augmentName) === false) {\\r\\n                const item = {\\r\\n                    augmentationRepCost: augment.augmentationRepCost,\\r\\n                    price: augment.price,\\r\\n                    prereqs: augment.prereqs,\\r\\n                    faction: factionWithAugments.faction\\r\\n                }\\r\\n                purchasableAugments.set(augment.augmentName, item)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const augmentsLeft = Array.from(purchasableAugments.entries()).sort((a, b) => b[1].price - a[1].price);\\r\\n\\r\\n    const orderedAugments = []; // { factionName, augmentName, basePrice, multipledPrice}\\r\\n\\r\\n    function addPrereqs(prereqName) {\\r\\n        const augment = purchasableAugments.get(prereqName);\\r\\n\\r\\n        if (augment && !ownedAugmentations.find(x => x.augmentName === prereqName)) {\\r\\n\\r\\n            if (augment.prereqs.length > 0) {//it has prereqs, pass it into this. \\r\\n                for (const prereq of augment.prereqs) {\\r\\n                    addPrereqs(prereq)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (!orderedAugments.find(x => x.augmentName === prereqName)) {\\r\\n                orderedAugments.push({ faction: augment.faction, augmentName: prereqName, basePrice: augment.price });\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const augmentData of augmentsLeft) {\\r\\n        const augmentName = augmentData[0];\\r\\n        const augment = augmentData[1];\\r\\n\\r\\n        if (augment.prereqs.length > 0) {\\r\\n            for (const prereqName of augment.prereqs) {\\r\\n                addPrereqs(prereqName);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!orderedAugments.find(x => x.augmentName === augmentName)) {\\r\\n            orderedAugments.push({ faction: augment.faction, augmentName: augmentName, basePrice: augment.price, multipledPrice: 0 })\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    let priceMultipler = 1;\\r\\n\\r\\n    for (const augment of orderedAugments) {\\r\\n        augment.multipledPrice = augment.basePrice * priceMultipler;\\r\\n        priceMultipler *= 1.9;\\r\\n    }\\r\\n\\r\\n    const moneyNeededForAugments = orderedAugments.reduce((acc, x) => acc + x.multipledPrice, 0);\\r\\n\\r\\n    totalToSpend += moneyNeededForAugments;\\r\\n\\r\\n    const moneyFormatted = formatter.format(moneyNeededForAugments);\\r\\n\\r\\n    if (ns.args[0] === \\\"finish\\\") {\\r\\n        for (const augment of orderedAugments) {\\r\\n            purchaseAug(ns, augment);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.toast(`Money needed for augs: ${moneyFormatted}`, 'success', null)\\r\\n\\r\\n    ns.toast(`Total Needed: ${formatter.format(totalToSpend)}`, 'success', null)\\r\\n\\r\\n    ns.rm('orderedAugments.txt')\\r\\n    ns.write(\\\"orderedAugments.txt\\\", JSON.stringify(orderedAugments), \\\"W\\\")\\r\\n\\r\\n}\\r\\n\\r\\nfunction purchaseAug(ns, augment) {\\r\\n    const ownedAugments = ns.singularity.getOwnedAugmentations(true);\\r\\n    const augmentName = augment.augmentName;\\r\\n\\r\\n    if (ownedAugments.includes(augmentName) === false) {\\r\\n        const augmentPrice = ns.singularity.getAugmentationPrice(augmentName);\\r\\n        const amountOfMoneyWeHave = ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n\\r\\n        if (augmentPrice < amountOfMoneyWeHave) {\\r\\n            ns.singularity.purchaseAugmentation(augment.faction, augmentName);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/tools/manually-end-round.js\",\"server\":\"home\"}}],[\"scripts/tools/delete-job-from-batch-queue.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n    const targetName = ns.args[0];\\r\\n\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\"\\r\\n\\r\\n    let batchQueueForDifferentTargets = new Map();\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        batchQueueForDifferentTargets = new Map(JSON.parse(ns.read(batchQueuesFileName)));\\r\\n    }\\r\\n\\r\\n    const target = batchQueueForDifferentTargets.get(targetName);\\r\\n\\r\\n    for (const batch of target.batchesQueue) {\\r\\n        batch.jobs.map(x => {\\r\\n            if (x.pid) {\\r\\n                ns.kill(x.pid);\\r\\n            }\\r\\n        });\\r\\n    };\\r\\n\\r\\n    batchQueueForDifferentTargets.delete(targetName);\\r\\n\\r\\n    ns.rm(batchQueuesFileName);\\r\\n    ns.write(batchQueuesFileName, JSON.stringify(Array.from(batchQueueForDifferentTargets.entries()), \\\"W\\\"));\\r\\n\\r\\n}\\r\\n\",\"filename\":\"scripts/tools/delete-job-from-batch-queue.js\",\"server\":\"home\"}}],[\"scripts/clean.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"//run scripts/clean.js \\r\\nexport async function main(ns) {\\r\\n    let newMachine = false;\\r\\n\\r\\n    if (ns.args[0] === \\\"new\\\") {\\r\\n        newMachine = true;\\r\\n    }\\r\\n\\r\\n    \\r\\n    if (!newMachine) {\\r\\n        ns.killall(\\\"home\\\", true);\\r\\n\\r\\n        const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n        enviroment\\r\\n            .filter(x => x.server.hasAdminRights)\\r\\n            .map(target => {\\r\\n                ns.killall(target.name);\\r\\n            })\\r\\n    }\\r\\n\\r\\n    const doNoDeleteFolders = [\\\"analytics\\\", \\\"contracts\\\"]\\r\\n\\r\\n\\r\\n    for (const textFile of ns.ls(\\\"home\\\", \\\".txt\\\")) {\\r\\n        if(!doNoDeleteFolders.find(x => textFile.startsWith(x))){\\r\\n            ns.rm(textFile);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/clean.js\",\"server\":\"home\"}}],[\"scripts/scan.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n/// run scripts/scan.js dispatchScript\\r\\nexport async function main(ns) {\\r\\n    const dispatchScript = ns.args[0];\\r\\n\\r\\n    if (dispatchScript === undefined){\\r\\n        ns.tprint(\\\"Must define dispatch script for scan.\\\")\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const result = new dataMonger(ns).scanEnvironment();\\r\\n\\r\\n    ns.rm('data/enviroment.txt')\\r\\n    ns.write('data/enviroment.txt', JSON.stringify(result), \\\"W\\\")\\r\\n\\r\\n    ns.run(dispatchScript)\\r\\n}\\r\\n\\r\\nexport class dataMonger {\\r\\n    constructor(ns) {\\r\\n        this.ns = ns;\\r\\n    }\\r\\n\\r\\n    scanEnvironment(machineToScan = \\\"home\\\", serversToScan = [], scannedServers = [], result = []) {\\r\\n        if (serversToScan.length === 0 && machineToScan !== \\\"home\\\") {\\r\\n            return result;\\r\\n        }\\r\\n\\r\\n        let lineage = result\\r\\n            .find(x => x.name === machineToScan)\\r\\n            ?.lineage\\r\\n            .map(x => x); // so we aren't using a reference\\r\\n\\r\\n        const scan = this.ns\\r\\n            .scan(machineToScan)\\r\\n            .map(x => new ServerNode(\\r\\n                machineToScan,\\r\\n                this.ns.getServer(x),\\r\\n                lineage\\r\\n            ));\\r\\n\\r\\n        scan.forEach(x => {\\r\\n            if (!scannedServers.includes(x.name) && !serversToScan.includes(x.name)) {\\r\\n                serversToScan.push(x.name);\\r\\n                result.push(x);\\r\\n            }\\r\\n        });\\r\\n\\r\\n        scannedServers.push(machineToScan);\\r\\n        machineToScan = serversToScan.pop();\\r\\n        return this.scanEnvironment(machineToScan, serversToScan, scannedServers, result);\\r\\n    }\\r\\n}\\r\\n\\r\\nclass ServerNode {\\r\\n    constructor(parentsName, server, lineage = []) {\\r\\n        this.name = server.hostname;\\r\\n        this.lineage = lineage\\r\\n        if (parentsName !== \\\"home\\\" && this.lineage !== undefined) {\\r\\n            if (!this.lineage.includes(parentsName)) {\\r\\n                this.lineage.push(parentsName)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.server = server;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/scan.js\",\"server\":\"home\"}}],[\"scripts/precalculate-important-data.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n  const notImportantScriptsForEarlyGame = [\\r\\n    \\\"scripts/singularity/finish-bitnode.js\\\", \\r\\n    \\\"scripts/singularity/finish-round.js\\\", \\r\\n    \\\"scripts/singularity/buy-rep.js\\\",\\r\\n    \\\"scripts/hacking/batch-dispatch.js\\\",\\r\\n    \\\"scripts/tools/manually-end-round.js\\\",\\r\\n  ];\\r\\n\\r\\n  const notImportantFolder = \\\"scripts/corporations/\\\"\\r\\n\\r\\n  const scriptsThatWeRun = JSON.parse(ns.read('data/scriptsToRun.txt'));\\r\\n\\r\\n  scriptsThatWeRun.push(\\\"scripts/coordinator.js\\\");\\r\\n\\r\\n  const orderedScriptsByRamUsage = scriptsThatWeRun\\r\\n    .map(x => new ScriptRam(ns.getScriptRam(x), x))\\r\\n    .sort((a, b) => b.ram - a.ram);\\r\\n\\r\\n  const mostExpensiveScript = orderedScriptsByRamUsage[0];\\r\\n  const coordinator = orderedScriptsByRamUsage.find(x => x.name === \\\"scripts/coordinator.js\\\");\\r\\n  const ramToReserve = coordinator.ram + mostExpensiveScript.ram + 1;\\r\\n\\r\\n  const earlyGameScriptsUsage = orderedScriptsByRamUsage\\r\\n    .filter(x => !notImportantScriptsForEarlyGame.includes(x.name))\\r\\n    .filter(x => !x.name.startsWith(notImportantFolder));\\r\\n\\r\\n  const mostExpensiveEarlyGame = earlyGameScriptsUsage[0];\\r\\n  const ramToReserveInLimitedEnvironment = coordinator.ram + mostExpensiveEarlyGame.ram + 1;\\r\\n  const earlyGameLimiter = mostExpensiveEarlyGame.name;\\r\\n\\r\\n  const ramReserveFile = 'data/ramToReserveOnHome.txt';\\r\\n\\r\\n\\r\\n  ns.rm(ramReserveFile);\\r\\n  ns.write(ramReserveFile, JSON.stringify({ramToReserve, ramToReserveInLimitedEnvironment, earlyGameLimiter}), \\\"W\\\");\\r\\n\\r\\n  const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n\\r\\n  const ownedAugsTextFileName = \\\"data/ownedAugs.txt\\\";\\r\\n  ns.rm(ownedAugsTextFileName);\\r\\n  ns.write(ownedAugsTextFileName, JSON.stringify(ownedAugmentations), \\\"W\\\");\\r\\n  \\r\\n}\\r\\n\\r\\nclass ScriptRam {\\r\\n  constructor(ram, name) {\\r\\n    this.ram = ram;\\r\\n    this.name = name;\\r\\n  }\\r\\n}\",\"filename\":\"scripts/precalculate-important-data.js\",\"server\":\"home\"}}],[\"scripts/coordinator.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const loopEveryXSeconds = 2;\\r\\n    const sleepTotalOfXMS = loopEveryXSeconds * 1000;\\r\\n    let dispatchScript = 'scripts/hacking/memory-starved-dispatch.js';\\r\\n\\r\\n    let runClean = true;\\r\\n    if (ns.args[0] === 'old') {\\r\\n        runClean = false;\\r\\n    }\\r\\n\\r\\n    if (runClean) {\\r\\n        ns.run('scripts/clean.js', 1, \\\"new\\\");\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n\\r\\n    ns.run('scripts/script-registry.js')\\r\\n\\r\\n    await ns.sleep(200);\\r\\n\\r\\n    ns.run('scripts/precalculate-important-data.js')\\r\\n\\r\\n    await ns.sleep(200);\\r\\n\\r\\n    const scriptsFile = 'data/scriptsToRun.txt';\\r\\n\\r\\n    while (true) {\\r\\n\\r\\n        let scriptsToRun = JSON.parse(ns.read(scriptsFile));\\r\\n\\r\\n        let numberOfScripts = scriptsToRun.length + 1;\\r\\n\\r\\n        let individualSleepAmount = sleepTotalOfXMS / numberOfScripts;\\r\\n\\r\\n        if (ns.fileExists('Formulas.exe')) {\\r\\n            dispatchScript = 'scripts/hacking/batch-dispatch.js'\\r\\n        }\\r\\n\\r\\n        ns.run(\\\"scripts/scan.js\\\", 1, dispatchScript);\\r\\n        await ns.sleep(individualSleepAmount);\\r\\n\\r\\n        for (const script of scriptsToRun) {\\r\\n            ns.run(script);\\r\\n            await ns.sleep(individualSleepAmount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"filename\":\"scripts/coordinator.js\",\"server\":\"home\"}}],[\"scripts/script-registry.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    let scriptsToRun = [];\\r\\n\\r\\n    const basicScripts = [\\r\\n        'scripts/hacking/hack-all-machines.js',\\r\\n        'scripts/precalculate-important-data.js',\\r\\n        'scripts/script-registry.js',\\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(basicScripts);\\r\\n\\r\\n    const stockScripts = [\\r\\n        'scripts/stock/get-stock-quotes.js',\\r\\n        'scripts/stock/second-part-of-quotes.js',\\r\\n        'scripts/stock/populate-forecast.js',\\r\\n        'scripts/stock/invest-in-stocks.js',\\r\\n        'scripts/stock/buy-4s.js',\\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(stockScripts);\\r\\n\\r\\n    const contractScripts = [\\r\\n        'scripts/contracts/get.js',\\r\\n        'scripts/contracts/populate-input.js',\\r\\n        'scripts/contracts/populate-description.js',\\r\\n        'scripts/contracts/do.js',\\r\\n        'scripts/contracts/save-contracts-for-thomas.js',\\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(contractScripts);\\r\\n\\r\\n    const singularityScripts = [\\r\\n        'scripts/singularity/apply-to-jobs.js',\\r\\n        'scripts/singularity/do-work-get-augments.js',\\r\\n        'scripts/singularity/backdoor-all-machines.js',\\r\\n        'scripts/singularity/join-organziations.js',\\r\\n        'scripts/singularity/do-work.js',\\r\\n        'scripts/singularity/finish-round.js',\\r\\n        'scripts/singularity/finish-bitnode.js',\\r\\n        'scripts/singularity/study-computer-science.js',\\r\\n        'scripts/singularity/create-early-programs.js',\\r\\n        'scripts/singularity/do-job.js',\\r\\n        'scripts/singularity/buy-rep.js',\\r\\n        'scripts/singularity/workout.js',\\r\\n        'scripts/singularity/upgade-home-machine.js',\\r\\n        'scripts/singularity/travel-to-get-augs.js',\\r\\n    ];\\r\\n    \\r\\n    scriptsToRun = scriptsToRun.concat(singularityScripts);\\r\\n\\r\\n    const investmentScripts = [\\r\\n        'scripts/investments/invest-in-nodes.js',\\r\\n        'scripts/investments/purchase-server.js',\\r\\n        'scripts/investments/invest-in-programs.js',\\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(investmentScripts);\\r\\n\\r\\n    const corporateScripts = [\\r\\n        'scripts/corporations/invest.js',\\r\\n        'scripts/corporations/start-company.js',\\r\\n        'scripts/corporations/get-corporate-info.js',\\r\\n        'scripts/corporations/add-supporting-material.js',\\r\\n        'scripts/corporations/upgrade-offices.js',\\r\\n        'scripts/corporations/upgrade-warehouse.js',\\r\\n        'scripts/corporations/expand.js',\\r\\n        'scripts/corporations/product-management.js',\\r\\n        'scripts/corporations/research.js',\\r\\n        'scripts/corporations/tea-party.js',\\r\\n        'scripts/corporations/adjust-prices-export.js',\\r\\n        'scripts/corporations/get-investments.js',\\r\\n        'scripts/corporations/bribe-factions.js',\\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(corporateScripts);\\r\\n    \\r\\n    const scriptsFile = 'data/scriptsToRun.txt';\\r\\n    ns.rm(scriptsFile);\\r\\n    ns.write(scriptsFile, JSON.stringify(scriptsToRun), \\\"W\\\");\\r\\n}\",\"filename\":\"scripts/script-registry.js\",\"server\":\"home\"}}],[\"test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  const moneyThing = 0;\\n        const gidgetsSmokes = \\\"Gidget's Smokes\\\";\\n    const city = \\\"Aevum\\\"\\n\\n  const thing = ns.corporation.getConstants();\\n\\nconst array =[]\\n  for (const upgrade of thing.industryNames) {\\n    array.push(ns.corporation.getIndustryData(upgrade));\\n  }\\n  \\n  ns.write(\\\"thing.txt\\\", JSON.stringify(array), \\\"W\\\")\\n\\n  const formatter = new Intl.NumberFormat('en-US', {\\n    style: 'currency',\\n    currency: 'USD',\\n  });\\n  const formattedMoneyThing = formatter.format(moneyThing);\\n\\nns.tprint(thing);\\n\\n}\",\"filename\":\"test.js\",\"server\":\"home\"}}],[\"scripts/corporations/get-corporate-info.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let lastRecorded = new Date();\\r\\n\\r\\nexport async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporationFileName = 'data/corporation.txt';\\r\\n    const constants = ns.corporation.getConstants();\\r\\n    let corporation = ns.corporation.getCorporation();\\r\\n    const divisions = [];\\r\\n\\r\\n    const rawMaterialProducers = [\\r\\n        { producer: \\\"Gidget's Farm\\\", materials: [\\\"Food\\\", \\\"Plants\\\"] },\\r\\n        { producer: \\\"Chemist Gidget's Lab\\\", materials: [ \\\"Chemicals\\\" ] }\\r\\n    ];\\r\\n\\r\\n    for (const divisionName of corporation.divisions) {\\r\\n        let division = ns.corporation.getDivision(divisionName)\\r\\n        division.offices = [];\\r\\n        division.productObjects = [];\\r\\n\\r\\n        for (const city of division.cities) {\\r\\n            let office = ns.corporation.getOffice(division.name, city)\\r\\n\\r\\n            if (ns.corporation.hasWarehouse(division.name, city)) {\\r\\n                office.warehouse = ns.corporation.getWarehouse(division.name, city);\\r\\n            }\\r\\n\\r\\n            division.offices.push(office);\\r\\n        }\\r\\n\\r\\n        for (const productName of division.products) {\\r\\n            division.productObjects.push(ns.corporation.getProduct(divisionName, \\\"Aevum\\\", productName));\\r\\n        }\\r\\n\\r\\n        division.materials = [];\\r\\n        const rawMaterialsProducer = rawMaterialProducers.find(x => x.producer === divisionName);\\r\\n        if(rawMaterialsProducer){\\r\\n        \\r\\n            for (const material of rawMaterialsProducer.materials) {\\r\\n                division.materials.push(ns.corporation.getMaterial(divisionName, \\\"Aevum\\\", material));\\r\\n            }            \\r\\n        }\\r\\n\\r\\n        divisions.push(division);\\r\\n    }\\r\\n\\r\\n    const corporationData = { constants, corporation, divisions };\\r\\n\\r\\n    ns.rm(corporationFileName);\\r\\n    ns.write(corporationFileName, JSON.stringify(corporationData), \\\"W\\\");\\r\\n\\r\\n\\r\\n    const now = new Date();\\r\\n    const formatter = new Intl.NumberFormat('en-US', {\\r\\n        style: 'currency',\\r\\n        currency: 'USD',\\r\\n    });\\r\\n\\r\\n    if (now.getHours() !== lastRecorded.getHours()) { // && batches not running\\r\\n        let snapshots = [];\\r\\n\\r\\n        const snapshotsFileName = \\\"data/corporateSnapshots.txt\\\";\\r\\n        if(ns.fileExists(snapshotsFileName)){\\r\\n            snapshots = JSON.parse(ns.read(snapshotsFileName));\\r\\n        }\\r\\n\\r\\n        corporation.profit = formatter.format(corporation.revenue - corporation.expenses);\\r\\n        corporation.funds = formatter.format(corporation.funds);\\r\\n        corporation.revenue = formatter.format(corporation.revenue);\\r\\n        corporation.expenses = formatter.format(corporation.expenses);\\r\\n        corporation.sharePrice = formatter.format(corporation.sharePrice);\\r\\n        corporation.snapshotTime = now;\\r\\n\\r\\n\\r\\n        snapshots.push({ corporation, divisions });\\r\\n        \\r\\n        ns.rm(snapshotsFileName);\\r\\n        ns.write(snapshotsFileName, JSON.stringify(snapshots), \\\"W\\\");\\r\\n\\r\\n        lastRecorded = now;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/get-corporate-info.js\",\"server\":\"home\"}}],[\"scripts/corporations/initial-expand.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const gidgetsFarm = \\\"Gidget's Farm\\\";\\r\\n    const industry = \\\"Agriculture\\\";\\r\\n\\r\\n    if (corporation.divisions.length === 0) {\\r\\n        ns.corporation.expandIndustry(industry, gidgetsFarm);\\r\\n    }\\r\\n\\r\\n    const smartSupplyName = \\\"Smart Supply\\\";\\r\\n    if (!ns.corporation.hasUnlock(smartSupplyName)) {\\r\\n        ns.corporation.purchaseUnlock(smartSupplyName);\\r\\n    }\\r\\n\\r\\n    const division = ns.corporation.getDivision(gidgetsFarm);\\r\\n\\r\\n    for (let [key, city] of Object.entries(ns.enums.CityName)) {\\r\\n        if (!division.cities.includes(city)) {\\r\\n            ns.corporation.expandCity(gidgetsFarm, city);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (let city of division.cities) {\\r\\n        if (!ns.corporation.hasWarehouse(gidgetsFarm, city)) {\\r\\n            ns.corporation.purchaseWarehouse(gidgetsFarm, city);\\r\\n        }\\r\\n\\r\\n        const warehouse = ns.corporation.getWarehouse(division.name, city);\\r\\n\\r\\n        if (warehouse.smartSupplyEnabled === false) {\\r\\n            ns.corporation.setSmartSupply(gidgetsFarm, city, true);\\r\\n            ns.corporation.setSmartSupplyOption(gidgetsFarm, city, \\\"Water\\\", \\\"leftovers\\\");\\r\\n            ns.corporation.setSmartSupplyOption(gidgetsFarm, city, \\\"Chemicals\\\", \\\"leftovers\\\");\\r\\n        }\\r\\n\\r\\n        const percentUsedOfWarehouse = warehouse.sizeUsed / warehouse.size;\\r\\n\\r\\n        if (warehouse.size < 300 && percentUsedOfWarehouse > 0.5){\\r\\n            ns.corporation.upgradeWarehouse(gidgetsFarm, city);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (let city of division.cities) {\\r\\n        const office = ns.corporation.getOffice(gidgetsFarm, city);\\r\\n\\r\\n        if (office.numEmployees < 3) {\\r\\n            ns.corporation.hireEmployee(gidgetsFarm, city, \\\"Operations\\\");\\r\\n            ns.corporation.hireEmployee(gidgetsFarm, city, \\\"Engineer\\\");\\r\\n            ns.corporation.hireEmployee(gidgetsFarm, city, \\\"Business\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (division.numAdVerts === 0) {\\r\\n        ns.corporation.hireAdVert(gidgetsFarm);\\r\\n    }\\r\\n\\r\\n    const initialUpgrades = [\\r\\n        \\\"FocusWires\\\",\\r\\n        \\\"Neural Accelerators\\\",\\r\\n        \\\"Speech Processor Implants\\\",\\r\\n        \\\"Nuoptimal Nootropic Injector Implants\\\",\\r\\n        \\\"Smart Factories\\\",\\r\\n    ];\\r\\n\\r\\n    for (const upgrade of initialUpgrades) {\\r\\n        const upgradeLevel = ns.corporation.getUpgradeLevel(upgrade);\\r\\n        const upgradeCost = ns.corporation.getUpgradeLevelCost(upgrade);\\r\\n\\r\\n        const reserve = 10_000_000_000;\\r\\n        const fundsLessReserve = ns.corporation.getCorporation().funds - reserve;\\r\\n\\r\\n        if (upgradeLevel < 2 && upgradeCost < fundsLessReserve) {\\r\\n            ns.corporation.levelUpgrade(upgrade);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    const thingsToUpgrade = [\\r\\n        \\\"Smart Factories\\\",\\r\\n        \\\"Smart Storage\\\",\\r\\n    ]\\r\\n\\r\\n    if (corporation.funds > 200_000_000_000 && profit > 1_000_000) {\\r\\n\\r\\n        for (const upgrade of thingsToUpgrade) {\\r\\n            const level = ns.corporation.getUpgradeLevel(upgrade);\\r\\n            if(level < 10){\\r\\n                ns.corporation.levelUpgrade(upgrade);\\r\\n            }\\r\\n        }      \\r\\n    }\\r\\n\\r\\n    if (corporation.funds > 200_000_000_000) {\\r\\n\\r\\n        const employeeGoals = [\\r\\n            { type: \\\"Operations\\\", number: 2 },\\r\\n            { type: \\\"Engineer\\\", number: 2 },\\r\\n            { type: \\\"Business\\\", number: 1 },\\r\\n            { type: \\\"Management\\\", number: 2 },\\r\\n            { type: \\\"Research & Development\\\", number: 2 }\\r\\n        ];\\r\\n\\r\\n        for (const city of division.cities) {\\r\\n            const office = ns.corporation.getOffice(gidgetsFarm, city);\\r\\n\\r\\n            if (office.size < 9) {\\r\\n                ns.corporation.upgradeOfficeSize(gidgetsFarm, city, 3);\\r\\n            }\\r\\n\\r\\n            for (let [type, numberOfEmployees] of Object.entries(office.employeeJobs)) {\\r\\n                const goal = employeeGoals.find(x => x.type === type);\\r\\n\\r\\n                if (goal) {\\r\\n                    if (numberOfEmployees < goal.number) {\\r\\n                        ns.corporation.hireEmployee(gidgetsFarm, city, type);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (corporation.funds > 40_000_000_000 && profit > 1_000_000) {\\r\\n        for (const city of division.cities) {\\r\\n            const warehouse = ns.corporation.getWarehouse(gidgetsFarm, city);\\r\\n\\r\\n            if (warehouse.size < 4_200){\\r\\n                ns.corporation.upgradeWarehouse(gidgetsFarm, city);\\r\\n            }\\r\\n        }   \\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/initial-expand.js\",\"server\":\"home\"}}],[\"scripts/corporations/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/upgrade.js\",\"server\":\"home\"}}],[\"scripts/corporations/add-supporting-material.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const materialGoalsGoals = [];\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    for (const divisionName of corporation.divisions) {\\r\\n        const materialGoals = [];\\r\\n\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n        const allMaterials = [\\r\\n            { name: \\\"Water\\\", factorName: \\\"waterFactor\\\" },\\r\\n            { name: \\\"Hardware\\\", factorName: \\\"hardwareFactor\\\" },\\r\\n            { name: \\\"AI Cores\\\", factorName: \\\"aiCoreFactor\\\" },\\r\\n            { name: \\\"Robots\\\", factorName: \\\"robotFactor\\\" },\\r\\n            { name: \\\"Real Estate\\\", factorName: \\\"realEstateFactor\\\" },\\r\\n            // { name: \\\"Ore\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Minerals\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Food\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Plants\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Metal\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Chemicals\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Drugs\\\", factorName: \\\"\\\" },\\r\\n        ];\\r\\n\\r\\n        const materialsToBuy = [];\\r\\n\\r\\n        const industryInformation = ns.corporation.getIndustryData(division.type);\\r\\n        const itemsInIndustry = Object.entries(industryInformation);\\r\\n\\r\\n        let sumOfAllMaterialsFactors = 0;\\r\\n\\r\\n        for (const material of allMaterials) {\\r\\n            const materialImprovesProduction = itemsInIndustry.find(x => x[0] === material.factorName);\\r\\n\\r\\n            if (materialImprovesProduction) {\\r\\n                const materialData = ns.corporation.getMaterialData(material.name);\\r\\n\\r\\n                const factor = materialImprovesProduction[1];\\r\\n                sumOfAllMaterialsFactors += factor;\\r\\n\\r\\n                const size = materialData.size;\\r\\n                const name = material.name;\\r\\n                materialsToBuy.push({ name, factor, size });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        let fillXPercentOfWarehouseWithMultiplerMaterial = 0.5; // 0.5 was 789k profit 0.4 500k .6 was 402k\\r\\n\\r\\n        if(division.type === \\\"Chemical\\\"){\\r\\n            fillXPercentOfWarehouseWithMultiplerMaterial = 0.8;\\r\\n        }\\r\\n\\r\\n        for (const city of division.cities) {\\r\\n            const warehouse = ns.corporation.getWarehouse(divisionName, city);\\r\\n            const amountToFillWithMultipliers = warehouse.size * fillXPercentOfWarehouseWithMultiplerMaterial;\\r\\n\\r\\n            for (let material of materialsToBuy) {\\r\\n                const percentOf = material.factor / sumOfAllMaterialsFactors;\\r\\n                const spaceToFill = Math.floor(amountToFillWithMultipliers * percentOf);\\r\\n                const countToBuy = Math.floor(spaceToFill / material.size);\\r\\n\\r\\n                const materialInWarehouse = ns.corporation.getMaterial(divisionName, city, material.name);\\r\\n\\r\\n                let amountToBuy = 0;\\r\\n                if (materialInWarehouse.stored < (countToBuy * .95)) {\\r\\n                    if (countToBuy < 200) {\\r\\n                        ns.corporation.bulkPurchase(divisionName, city, material.name, countToBuy);\\r\\n                    } else {\\r\\n                        amountToBuy = Math.floor(countToBuy / 20);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                ns.corporation.buyMaterial(divisionName, city, material.name, amountToBuy)\\r\\n\\r\\n                let amountToSell = 0;\\r\\n                const freeSpacePercent = (warehouse.size - warehouse.sizeUsed) / warehouse.size\\r\\n                if (freeSpacePercent < 0.1 && materialInWarehouse.stored > countToBuy) {\\r\\n                    amountToSell = materialInWarehouse.stored - countToBuy;\\r\\n                    if (amountToSell > 30) {\\r\\n                        amountToSell = 30;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                ns.corporation.sellMaterial(divisionName, city, material.name, amountToSell, \\\"MP\\\");\\r\\n\\r\\n                material.countToBuy = countToBuy;\\r\\n                material.spaceToFill = spaceToFill;\\r\\n\\r\\n                const materialInGoals = materialGoals.find(x => x.name === material.name);\\r\\n\\r\\n                if (!materialInGoals) {\\r\\n                    materialGoals.push(material);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        materialGoalsGoals.push(materialGoals);\\r\\n    }\\r\\n\\r\\n    // ns.rm(\\\"stuff.txt\\\");\\r\\n    // ns.write(\\\"stuff.txt\\\", JSON.stringify(materialGoalsGoals), \\\"W\\\");\\r\\n}\",\"filename\":\"scripts/corporations/add-supporting-material.js\",\"server\":\"home\"}}],[\"scripts/corporations/upgrade-offices.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const capitalReserve = 400_000_000_000;\\r\\n    const liquidFunds = corporation.funds;\\r\\n    const investableAmount = liquidFunds - capitalReserve;\\r\\n\\r\\n    const employeeRatio = [\\r\\n        { type: \\\"Operations\\\", number: 2 },\\r\\n        { type: \\\"Engineer\\\", number: 2 },\\r\\n        { type: \\\"Business\\\", number: 1 },\\r\\n        { type: \\\"Management\\\", number: 2 },\\r\\n        { type: \\\"Research & Development\\\", number: 2 }\\r\\n    ];\\r\\n\\r\\n    const aevumEmployeeRatio = [\\r\\n        { type: \\\"Operations\\\", number: 1 },\\r\\n        { type: \\\"Engineer\\\", number: 1 },\\r\\n        { type: \\\"Business\\\", number: 1 },\\r\\n        { type: \\\"Management\\\", number: 1 },\\r\\n        { type: \\\"Research & Development\\\", number: 1 }\\r\\n    ];\\r\\n\\r\\n    for (const divisionName of corporation.divisions) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        for (let [key, city] of Object.entries(ns.enums.CityName)) {\\r\\n            if (!division.cities.includes(city)) {\\r\\n                ns.corporation.expandCity(divisionName, city);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (division.makesProducts) {\\r\\n            const aevum = \\\"Aevum\\\";\\r\\n            const aevumOffice = ns.corporation.getOffice(divisionName, aevum);\\r\\n            const aevumHeadCount = aevumOffice.numEmployees;\\r\\n\\r\\n            const ishima = \\\"Ishima\\\";\\r\\n            const ishimaHeadCount = ns.corporation.getOffice(divisionName, ishima).numEmployees;\\r\\n\\r\\n            const expandOtherOffices = aevumHeadCount - ishimaHeadCount > 69;\\r\\n            const expandAevum = !expandOtherOffices;\\r\\n\\r\\n            if (expandAevum) {\\r\\n                const costToExpand = ns.corporation.getOfficeSizeUpgradeCost(divisionName, aevum, 5);\\r\\n\\r\\n                let aevumHeadCountMax = ns.corporation.getUpgradeLevel(\\\"Wilson Analytics\\\") * 18;\\r\\n\\r\\n                if (aevumHeadCountMax < 90) {\\r\\n                    aevumHeadCountMax = 90;\\r\\n                }\\r\\n\\r\\n                if (costToExpand < investableAmount && aevumHeadCount < aevumHeadCountMax) {\\r\\n                    ns.corporation.upgradeOfficeSize(divisionName, aevum, 5);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            hireEmployees(aevumOffice, aevumEmployeeRatio, ns, divisionName);\\r\\n\\r\\n\\r\\n            const citiesWithOfficesWhoArentAevum = division.cities.filter(city => city !== aevum);\\r\\n\\r\\n            if (expandOtherOffices) {\\r\\n                const costToExpand = ns.corporation.getOfficeSizeUpgradeCost(divisionName, ishima, 9) * 5;\\r\\n\\r\\n                if (costToExpand < investableAmount) {\\r\\n                    for (const city of citiesWithOfficesWhoArentAevum) {\\r\\n                        ns.corporation.upgradeOfficeSize(divisionName, city, 9);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            for (const city of citiesWithOfficesWhoArentAevum) {\\r\\n                const office = ns.corporation.getOffice(divisionName, city);\\r\\n                hireEmployees(office, employeeRatio, ns, divisionName);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!division.makesProducts) {\\r\\n            const profit = division.lastCycleRevenue - division.lastCycleExpenses;\\r\\n\\r\\n            const constants = [\\r\\n                { minProfit: 0, officeSizeGoal: 6, minLiquidFunds: 20_000_000_000 },\\r\\n                { minProfit: 10_000_000, officeSizeGoal: 18, minLiquidFunds: 400_000_000_000 },\\r\\n                { minLoss: -500_000, officeSizeGoal: 32, minLiquidFunds: 10_000_000_000_000 },\\r\\n                { minLoss: -900_000, officeSizeGoal: 64, minLiquidFunds: 10_000_000_000_000 },\\r\\n            ]\\r\\n\\r\\n            for (const constant of constants) {\\r\\n                for (const city of division.cities) {\\r\\n                    const office = ns.corporation.getOffice(divisionName, city);\\r\\n\\r\\n                    let sizeNeeded = 0;\\r\\n\\r\\n                    if (profit > constant.minProfit && liquidFunds > constant.minLiquidFunds) {\\r\\n                        sizeNeeded = constant.officeSizeGoal - office.size;\\r\\n                    }\\r\\n\\r\\n                    if(profit < constant.minLoss && liquidFunds > constant.minLiquidFunds){\\r\\n                        sizeNeeded = constant.officeSizeGoal - office.size;\\r\\n                    }\\r\\n\\r\\n                    if (sizeNeeded > 0) {\\r\\n                        ns.corporation.upgradeOfficeSize(divisionName, city, sizeNeeded);\\r\\n                    }\\r\\n\\r\\n                    hireEmployees(office, employeeRatio, ns, divisionName)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction hireEmployees(office, employeeJobsGoals, ns, divisionName) {\\r\\n    if (office.size === office.numEmployees) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let employeesInRatio = 0;\\r\\n    for (const goal of employeeJobsGoals) {\\r\\n        employeesInRatio += goal.number;\\r\\n    }\\r\\n\\r\\n    for (let [type, numberOfEmployees] of Object.entries(office.employeeJobs)) {\\r\\n        const goal = employeeJobsGoals.find(x => x.type === type);\\r\\n\\r\\n        if (goal) {\\r\\n            const percent = goal.number / employeesInRatio;\\r\\n            const requiredEmployeeNumber = percent * office.size;\\r\\n\\r\\n            if (numberOfEmployees < requiredEmployeeNumber) {\\r\\n                ns.corporation.hireEmployee(divisionName, office.city, type);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/upgrade-offices.js\",\"server\":\"home\"}}],[\"scripts/corporations/level-upgrades.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n}\",\"filename\":\"scripts/corporations/level-upgrades.js\",\"server\":\"home\"}}],[\"scripts/corporations/upgrade-warehouse.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const capitalReserve = 40_000_000_000;\\r\\n\\r\\n    for (const divisionName of corporation.divisions) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        const industryData = ns.corporation.getIndustryData(division.type); \\r\\n\\r\\n        for (let city of division.cities) {\\r\\n            if (!ns.corporation.hasWarehouse(divisionName, city)) {\\r\\n                ns.corporation.purchaseWarehouse(divisionName, city);\\r\\n            }\\r\\n\\r\\n            const warehouse = ns.corporation.getWarehouse(division.name, city);\\r\\n\\r\\n            ns.corporation.setSmartSupply(divisionName, city, true);\\r\\n\\r\\n            for (let [material, value] of Object.entries(industryData.requiredMaterials)) {\\r\\n                ns.corporation.setSmartSupplyOption(divisionName, city, material, \\\"leftovers\\\");\\r\\n            }\\r\\n\\r\\n            const percentUsedOfWarehouse = warehouse.sizeUsed / warehouse.size;\\r\\n            const warehouseUpgradeCost = ns.corporation.getUpgradeWarehouseCost(divisionName, city);\\r\\n\\r\\n            const moneyLeft = corporation.funds - warehouseUpgradeCost;\\r\\n            const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n            if (warehouse.size < 300 && percentUsedOfWarehouse > 0.5){\\r\\n                ns.corporation.upgradeWarehouse(divisionName, city);\\r\\n            }\\r\\n\\r\\n            if (warehouse.size < 2000 && percentUsedOfWarehouse > 0.5 && moneyLeft > capitalReserve && profit > 100) { //&& \\r\\n                ns.corporation.upgradeWarehouse(divisionName, city);\\r\\n            }\\r\\n\\r\\n            if (warehouse.size < 6000 && percentUsedOfWarehouse > 0.5 && moneyLeft > capitalReserve && profit > 800_000) { \\r\\n                ns.corporation.upgradeWarehouse(divisionName, city);\\r\\n            }\\r\\n\\r\\n            if(division.type === \\\"Chemical\\\" && warehouse.size < 8000 && percentUsedOfWarehouse > 0.8 && moneyLeft > capitalReserve && profit > 1_000_000){\\r\\n                ns.corporation.upgradeWarehouse(divisionName, city);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/upgrade-warehouse.js\",\"server\":\"home\"}}],[\"scripts/corporations/expand-to-tobacco.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const gidgetsSmokes = \\\"Gidget's Smokes\\\";\\r\\n    const industry = \\\"Tobacco\\\";\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    if (corporation.divisions.length > 0 && corporation.funds > 750_000_000_000 && !corporation.divisions.includes(gidgetsSmokes)) {\\r\\n        ns.corporation.expandIndustry(industry, gidgetsSmokes);\\r\\n        const division = ns.corporation.getDivision(gidgetsSmokes);\\r\\n\\r\\n        const otherEmployeeGoals = [\\r\\n            { type: \\\"Operations\\\", number: 2 },\\r\\n            { type: \\\"Engineer\\\", number: 2 },\\r\\n            { type: \\\"Business\\\", number: 1 },\\r\\n            { type: \\\"Management\\\", number: 2 },\\r\\n            { type: \\\"Research & Development\\\", number: 2 }\\r\\n        ];\\r\\n\\r\\n        for (let [key, city] of Object.entries(ns.enums.CityName)) {\\r\\n            if (!division.cities.includes(city)) {\\r\\n                ns.corporation.expandCity(gidgetsSmokes, city);\\r\\n            }\\r\\n\\r\\n            const office = ns.corporation.getOffice(gidgetsSmokes, city);\\r\\n\\r\\n            if (office.size < 9) {\\r\\n                ns.corporation.upgradeOfficeSize(gidgetsSmokes, city, 3);\\r\\n            }\\r\\n\\r\\n            for (let [type, numberOfEmployees] of Object.entries(office.employeeJobs)) {\\r\\n                const goal = otherEmployeeGoals.find(x => x.type === type);\\r\\n\\r\\n                if (goal) {\\r\\n                    if (numberOfEmployees < goal.number) {\\r\\n                        ns.corporation.hireEmployee(gidgetsSmokes, city, type);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/expand-to-tobacco.js\",\"server\":\"home\"}}],[\"scripts/corporations/product-management.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const profitPerSecond = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    const divisionsProductNames = new Map();\\r\\n\\r\\n    if (corporation.divisions.includes(\\\"Gidget's Smokes\\\")){\\r\\n        divisionsProductNames.set(\\\"Gidget's Smokes\\\", { division: \\\"Gidget's Smokes\\\", productNames: [\\\"These Smokes Probably Won't Kill U v.\\\", \\\"These Smokes WILL Kill You v.\\\", \\\"This Leaf is Highly Addictive v.\\\", \\\"Behold, the bringer of Death v.\\\", \\\"You will live so fast and DIE young if you smoke these v.\\\"] });\\r\\n    }\\r\\n\\r\\n    if (corporation.divisions.includes(\\\"Gidget's Computers & Hardware\\\")){\\r\\n        divisionsProductNames.set(\\\"Gidget's Computers & Hardware\\\", { division: \\\"Gidget's Computers & Hardware\\\", productNames: [\\\"Desktop Computer v.\\\", \\\"Router v.\\\", \\\"Laptop Computer v.\\\", \\\"Smart Phone v.\\\", \\\"Computer Monitor v.\\\"] });\\r\\n    }\\r\\n\\r\\n    const includedDivisions = Array.from(divisionsProductNames.keys());\\r\\n\\r\\n    for (const divisionName of includedDivisions) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n        const divisionConstants = divisionsProductNames.get(divisionName);\\r\\n\\r\\n        const products = [];\\r\\n        let oneDeveloping = false;\\r\\n\\r\\n        for (const productName of division.products) {\\r\\n            const product = ns.corporation.getProduct(divisionName, \\\"Aevum\\\", productName);\\r\\n\\r\\n            if (product.developmentProgress < 100) {\\r\\n                oneDeveloping = true;\\r\\n            }\\r\\n\\r\\n            products.push(product);\\r\\n        }\\r\\n\\r\\n        let mimimumSpend = 1_000_000_000;\\r\\n\\r\\n        if(profitPerSecond > mimimumSpend){\\r\\n            mimimumSpend = profitPerSecond;\\r\\n        }\\r\\n\\r\\n        if (division.products.length < division.maxProducts && !oneDeveloping) {\\r\\n            const productName = divisionConstants.productNames[division.products.length];\\r\\n            ns.corporation.makeProduct(divisionName, \\\"Aevum\\\", productName + 1, mimimumSpend, mimimumSpend);\\r\\n        }\\r\\n\\r\\n        if (division.products.length === division.maxProducts && !oneDeveloping) {\\r\\n\\r\\n            const lowestRatedProduct = products\\r\\n                .sort((a, b) => b.rating - a.rating)\\r\\n                .pop();\\r\\n\\r\\n            ns.corporation.discontinueProduct(divisionName, lowestRatedProduct.name);\\r\\n\\r\\n            const splitName = lowestRatedProduct.name.split(\\\"v.\\\");\\r\\n\\r\\n            ns.corporation.makeProduct(divisionName, \\\"Aevum\\\", `${splitName[0]}v.${Number(splitName[1]) + 1}`, mimimumSpend, mimimumSpend);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/corporations/product-management.js\",\"server\":\"home\"}}],[\"scripts/corporations/invest.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const capitalReserve = 400_000_000_000;\\r\\n    const liquidFunds = corporation.funds;\\r\\n    const investableAmount = liquidFunds - capitalReserve;\\r\\n\\r\\n    initialUpgrades(corporation, ns);\\r\\n\\r\\n    if (investableAmount < 0 || corporation.divisions.length === 0) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const upgradeGoals = [\\r\\n        { name: \\\"FocusWires\\\", goalLvl: 20, topPriority: true },\\r\\n        { name: \\\"Neural Accelerators\\\", goalLvl: 20, topPriority: true },\\r\\n        { name: \\\"Speech Processor Implants\\\", goalLvl: 20, topPriority: true },\\r\\n        { name: \\\"Nuoptimal Nootropic Injector Implants\\\", goalLvl: 20, topPriority: true },\\r\\n        { name: \\\"Wilson Analytics\\\", goalLvl: 20, topPriority: false }, // if this was top it would take forever to get to the less important ones.\\r\\n        { name: \\\"DreamSense\\\", goalLvl: 14, topPriority: false },\\r\\n        { name: \\\"ABC SalesBots\\\", goalLvl: 20, topPriority: false },\\r\\n        { name: \\\"Project Insight\\\", goalLvl: 14, topPriority: false },\\r\\n        { name: \\\"Smart Storage\\\", goalLvl: 20, topPriority: false },\\r\\n        { name: \\\"Smart Factories\\\", goalLvl: 20, topPriority: false },\\r\\n    ]\\r\\n\\r\\n    let cheapestUpgrade;\\r\\n\\r\\n    if (investableAmount > 5_000_000_000_000_000) {\\r\\n        if (!ns.corporation.hasUnlock(\\\"Shady Accounting\\\")) {\\r\\n            ns.corporation.purchaseUnlock(\\\"Shady Accounting\\\");\\r\\n        }\\r\\n\\r\\n        if (!ns.corporation.hasUnlock(\\\"Government Partnership\\\")) {\\r\\n            ns.corporation.purchaseUnlock(\\\"Government Partnership\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const upgrade of upgradeGoals) {\\r\\n        if (cheapestUpgrade && cheapestUpgrade.topPriority && upgrade.topPriority === false) {\\r\\n            continue;\\r\\n        }\\r\\n\\r\\n        upgrade.cost = ns.corporation.getUpgradeLevelCost(upgrade.name);\\r\\n        upgrade.currentLvl = ns.corporation.getUpgradeLevel(upgrade.name);\\r\\n        upgrade.atGoal = upgrade.currentLvl >= upgrade.goalLvl;\\r\\n        upgrade.upgradeType = true;\\r\\n\\r\\n        if (!cheapestUpgrade || cheapestUpgrade.cost > upgrade.cost) {\\r\\n            if (!upgrade.atGoal) {\\r\\n                cheapestUpgrade = upgrade;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const divisionName of corporation.divisions) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        if (division.numAdVerts === 0) {\\r\\n            ns.corporation.hireAdVert(divisionName);\\r\\n        }\\r\\n\\r\\n        if (division.makesProducts) {\\r\\n            const cost = ns.corporation.getHireAdVertCost(divisionName);\\r\\n\\r\\n            if (!cheapestUpgrade || cheapestUpgrade.cost > cost) {\\r\\n                cheapestUpgrade = { adVertType: true, division: divisionName, cost };\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (!cheapestUpgrade) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (investableAmount > cheapestUpgrade.cost) {\\r\\n        if (cheapestUpgrade.adVertType) {\\r\\n            if (ns.corporation.getHireAdVertCost(cheapestUpgrade.division) === cheapestUpgrade.cost) {\\r\\n                ns.corporation.hireAdVert(cheapestUpgrade.division);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (cheapestUpgrade.upgradeType) {\\r\\n            if (ns.corporation.getUpgradeLevelCost(cheapestUpgrade.name) === cheapestUpgrade.cost) {\\r\\n                ns.corporation.levelUpgrade(cheapestUpgrade.name);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction initialUpgrades(corporation, ns) {\\r\\n    const initialUpgrades = [\\r\\n        \\\"FocusWires\\\",\\r\\n        \\\"Neural Accelerators\\\",\\r\\n        \\\"Speech Processor Implants\\\",\\r\\n        \\\"Nuoptimal Nootropic Injector Implants\\\",\\r\\n        \\\"Smart Factories\\\",\\r\\n    ];\\r\\n\\r\\n    const smartSupplyName = \\\"Smart Supply\\\";\\r\\n    if (!ns.corporation.hasUnlock(smartSupplyName)) {\\r\\n        ns.corporation.purchaseUnlock(smartSupplyName);\\r\\n    }\\r\\n\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    if(profit > 100_000){\\r\\n        for (const upgrade of initialUpgrades) {\\r\\n            const upgradeLevel = ns.corporation.getUpgradeLevel(upgrade);\\r\\n            const upgradeCost = ns.corporation.getUpgradeLevelCost(upgrade);\\r\\n    \\r\\n            const reserve = 10_000_000_000;\\r\\n            const fundsLessReserve = ns.corporation.getCorporation().funds - reserve;\\r\\n    \\r\\n            if (upgradeLevel < 2 && upgradeCost < fundsLessReserve) {\\r\\n                ns.corporation.levelUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const thingsToUpgrade = [\\r\\n        \\\"Smart Factories\\\",\\r\\n        \\\"Smart Storage\\\",\\r\\n    ]\\r\\n\\r\\n    if (corporation.funds > 200_000_000_000 && profit > 1_000_000) {\\r\\n        for (const upgrade of thingsToUpgrade) {\\r\\n            const level = ns.corporation.getUpgradeLevel(upgrade);\\r\\n            if (level < 10) {\\r\\n                ns.corporation.levelUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/invest.js\",\"server\":\"home\"}}],[\"scripts/corporations/research.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const researchGoals = [\\r\\n        { name: \\\"Hi-Tech R&D Laboratory\\\", prereqs: [] },\\r\\n        { name: \\\"Market-TA.II\\\", prereqs: [\\\"Market-TA.I\\\"] },\\r\\n        { name: \\\"uPgrade: Capacity.I\\\", prereqs: [\\\"uPgrade: Fulcrum\\\"], productOnly: true},\\r\\n        { name: \\\"uPgrade: Capacity.II\\\", prereqs: [], productOnly: true},\\r\\n        { name: \\\"Drones - Assembly\\\", prereqs: [ \\\"Drones\\\"] },\\r\\n        { name: \\\"Self-Correcting Assemblers\\\", prereqs: []}\\r\\n    ];\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    for (const divisionName of corporation.divisions) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        let totalSpent = 0;\\r\\n        for (const research of researchGoals) {\\r\\n            if(research.productOnly && division.makesProducts === false){\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            let cost = ns.corporation.getResearchCost(divisionName, research.name);\\r\\n\\r\\n            for (const prereqName of research.prereqs) {\\r\\n                cost += ns.corporation.getResearchCost(divisionName, prereqName);\\r\\n            }\\r\\n\\r\\n            if (ns.corporation.hasResearched(divisionName, research.name)) {\\r\\n                totalSpent += cost;\\r\\n                continue;\\r\\n            }           \\r\\n\\r\\n            const researchPointsToSpend = division.researchPoints;\\r\\n\\r\\n            if ((cost * 2) + totalSpent < researchPointsToSpend) {\\r\\n                for (const prereqName of research.prereqs) {\\r\\n                    ns.corporation.research(divisionName, prereqName)\\r\\n                }\\r\\n\\r\\n                ns.corporation.research(divisionName, research.name);\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/research.js\",\"server\":\"home\"}}],[\"scripts/corporations/coffee-party.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const divisionsToOperateOn = corporation.divisions.filter(divisionName => divisionName !== \\\"Gidget's Farm\\\");\\r\\n\\r\\n    for (const divisionName of divisionsToOperateOn) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        for(const city of division.cities){\\r\\n            const office = ns.corporation.getOffice(divisionName);\\r\\n\\r\\n            if (office.avgEnergy < 20){\\r\\n                ns.corporation.buyTea(divisionName, city);\\r\\n            }\\r\\n\\r\\n            if(office.avgMoral < 20) {\\r\\n                ns.corporation.throwParty(divisionName, city, 50_000);\\r\\n            }            \\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/coffee-party.js\",\"server\":\"home\"}}],[\"scripts/corporations/tea-party.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const corporateProfits = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    const divisionalCorporateProfitsFile = \\\"data/divisionalCorporateProfits.txt\\\";\\r\\n    let divisionalCorporateProfits = new Map();\\r\\n    if (ns.fileExists(divisionalCorporateProfitsFile)) {\\r\\n        divisionalCorporateProfits = new Map(JSON.parse(ns.read(divisionalCorporateProfitsFile)));\\r\\n    }\\r\\n\\r\\n    for (const divisionName of corporation.divisions) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        const divisionalProfitsLastCycle = division.lastCycleRevenue - division.lastCycleExpenses;\\r\\n\\r\\n        let divisionProfitsRecord;\\r\\n\\r\\n        if (divisionalCorporateProfits.has(divisionName)) {\\r\\n            divisionProfitsRecord = divisionalCorporateProfits.get(divisionName);\\r\\n        } else {\\r\\n            divisionProfitsRecord = { sumOfProfitsInThisAccountingPeriod: 0, count: 0, lastProfit: 0, teaPartyCost: 0, partyEffect: [] };\\r\\n        }\\r\\n\\r\\n        if (divisionProfitsRecord.lastProfit !== divisionalProfitsLastCycle) {\\r\\n            divisionProfitsRecord.count++;\\r\\n            divisionProfitsRecord.sumOfProfitsInThisAccountingPeriod += divisionalProfitsLastCycle;\\r\\n            divisionProfitsRecord.lastProfit = divisionalProfitsLastCycle;\\r\\n\\r\\n            let employeeCount = 0;\\r\\n            let morales = [];\\r\\n            let energies = [];\\r\\n\\r\\n            for (const city of division.cities) {\\r\\n                const office = ns.corporation.getOffice(divisionName, city);\\r\\n\\r\\n                morales.push(office.avgMorale);\\r\\n                energies.push(office.avgEnergy);\\r\\n\\r\\n                employeeCount += office.numEmployees;\\r\\n            }\\r\\n\\r\\n            const averageMorale = averageArray(morales);\\r\\n            const averageEnergy = averageArray(energies);\\r\\n\\r\\n            const teaCostPerHead = 500_000;\\r\\n            divisionProfitsRecord.teaPartyCost = employeeCount * teaCostPerHead;\\r\\n\\r\\n            let minimumMoraleAndEnergy = 70;\\r\\n            if(corporateProfits > 1_000_000_000_000){\\r\\n                minimumMoraleAndEnergy = 95;\\r\\n            }\\r\\n\\r\\n            const divisionIsStrugglingAndWeAreProfitableAndHaveMoney = (averageMorale < minimumMoraleAndEnergy || averageEnergy < minimumMoraleAndEnergy) && corporateProfits > 5_000_000 && corporation.funds > 100_000_000_000;\\r\\n\\r\\n\\r\\n            const divisionalProfitsCanSustain = divisionProfitsRecord.sumOfProfitsInThisAccountingPeriod > divisionProfitsRecord.teaPartyCost;\\r\\n            const shouldTreatOurEmployees = divisionalProfitsCanSustain || divisionIsStrugglingAndWeAreProfitableAndHaveMoney\\r\\n\\r\\n            if (shouldTreatOurEmployees) {\\r\\n                const goal = 95;\\r\\n\\r\\n                let tea = false;\\r\\n                let party = false;\\r\\n\\r\\n                if (averageEnergy <= averageMorale) {\\r\\n                    if (averageEnergy < goal) {\\r\\n                        tea = true;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (averageMorale < averageEnergy) {\\r\\n                    if (averageMorale < goal) {\\r\\n                        party = true;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                let effects = [];\\r\\n\\r\\n                for (const city of division.cities) {\\r\\n                    if (party) {\\r\\n                        const effect = ns.corporation.throwParty(divisionName, city, teaCostPerHead);\\r\\n                        effects.push(effect);\\r\\n                    }\\r\\n\\r\\n                    if (tea) {\\r\\n                        const effect = ns.corporation.buyTea(divisionName, city);\\r\\n                        effects.push(effect);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (party) {\\r\\n                    divisionProfitsRecord.partyEffect = recordEffectiveness(averageMorale, effects, divisionProfitsRecord.partyEffect);\\r\\n                }\\r\\n\\r\\n                resetProfitRecord(divisionProfitsRecord);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        divisionalCorporateProfits.set(divisionName, divisionProfitsRecord);\\r\\n    }\\r\\n\\r\\n    ns.rm(divisionalCorporateProfitsFile);\\r\\n    ns.write(divisionalCorporateProfitsFile, JSON.stringify(Array.from(divisionalCorporateProfits.entries()), \\\"W\\\"));\\r\\n}\\r\\n\\r\\nfunction recordEffectiveness(average, effects, array) {\\r\\n    const mapToWorkOn = new Map(array);\\r\\n\\r\\n    const averageBracket = Math.floor(average / 10);\\r\\n    const averageEffect = averageArray(effects);\\r\\n    let newAverageOverTime;\\r\\n\\r\\n    if (mapToWorkOn.has(averageBracket)) {\\r\\n        let previousEffect = mapToWorkOn.get(averageBracket);\\r\\n        previousEffect += averageEffect;\\r\\n        newAverageOverTime = previousEffect / 2;\\r\\n    } else {\\r\\n        newAverageOverTime = averageEffect;\\r\\n    }\\r\\n\\r\\n    mapToWorkOn.set(averageBracket, newAverageOverTime);\\r\\n\\r\\n   return Array.from(mapToWorkOn);\\r\\n}\\r\\n\\r\\nfunction averageArray(array) {\\r\\n    return array.reduce((acc, x) => acc + x, 0) / array.length;\\r\\n}\\r\\n\\r\\nfunction resetProfitRecord(divisionProfitsRecord) {\\r\\n    divisionProfitsRecord.count = 0;\\r\\n    divisionProfitsRecord.sumOfProfitsInThisAccountingPeriod = 0;\\r\\n}\\r\\n\",\"filename\":\"scripts/corporations/tea-party.js\",\"server\":\"home\"}}],[\"scripts/corporations/import-export.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const corporateProfits = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    const divisionName = \\\"Gidget's Import/Export\\\";\\r\\n    const unlocksNeeded = [\\r\\n        \\\"Export\\\",\\r\\n        \\\"Market Research - Demand\\\",\\r\\n    ]\\r\\n\\r\\n    const materialNames = [\\r\\n        \\\"Water\\\",\\r\\n        \\\"Ore\\\",\\r\\n        \\\"Minerals\\\",\\r\\n        \\\"Food\\\",\\r\\n        \\\"Plants\\\",\\r\\n        \\\"Metal\\\",\\r\\n        \\\"Hardware\\\",\\r\\n        \\\"Chemicals\\\",\\r\\n        \\\"Drugs\\\",\\r\\n        \\\"Robots\\\",\\r\\n        \\\"AI Cores\\\",\\r\\n        \\\"Real Estate\\\"\\r\\n    ]\\r\\n\\r\\n    if (corporation.funds > 400_000_000_000 && !corporation.divisions.includes(divisionName)) {\\r\\n        ns.corporation.expandIndustry(\\\"Agriculture\\\", divisionName);\\r\\n\\r\\n        for (const unlockName of unlocksNeeded) {\\r\\n            if (!ns.corporation.hasUnlock(unlockName)) {\\r\\n                ns.corporation.purchaseUnlock(unlockName);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (corporation.divisions.includes(divisionName)) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        for (let [key, city] of Object.entries(ns.enums.CityName)) {\\r\\n            if (!division.cities.includes(city)) {\\r\\n                ns.corporation.expandCity(divisionName, city);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (let city of division.cities) {\\r\\n            if (!ns.corporation.hasWarehouse(divisionName, city)) {\\r\\n                ns.corporation.purchaseWarehouse(divisionName, city);\\r\\n            }\\r\\n\\r\\n            const warehouse = ns.corporation.getWarehouse(divisionName, city);\\r\\n\\r\\n            if (warehouse.smartSupplyEnabled) {\\r\\n                ns.corporation.setSmartSupply(divisionName, city, false);\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        let allMaterials = [];\\r\\n\\r\\n        for (const materialName of materialNames) {\\r\\n            let materials = []\\r\\n\\r\\n            let lowestPrice;\\r\\n            let highestPrice;\\r\\n\\r\\n            for (let city of division.cities) {\\r\\n                let materialFromCity = ns.corporation.getMaterial(divisionName, city, materialName);\\r\\n                materialFromCity.city = city;\\r\\n                materials.push(materialFromCity);\\r\\n\\r\\n                if (!lowestPrice || lowestPrice > materialFromCity.marketPrice) {\\r\\n                    lowestPrice = materialFromCity.marketPrice;\\r\\n                }\\r\\n\\r\\n                if (!highestPrice || highestPrice < materialFromCity.marketPrice) {\\r\\n                    highestPrice = materialFromCity.marketPrice;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            for (const materialFromCity of materials) {\\r\\n                materialFromCity.delta = materialFromCity.marketPrice - lowestPrice;\\r\\n            }\\r\\n\\r\\n            const delta = highestPrice - lowestPrice;\\r\\n            materials = materials.sort((a, b) => b.marketPrice - a.marketPrice);\\r\\n\\r\\n            allMaterials.push({ materials, delta });\\r\\n        }\\r\\n\\r\\n        allMaterials = allMaterials.sort((a, b) => b.delta - a.delta);\\r\\n\\r\\n        const filename = \\\"junk.txt\\\";\\r\\n        ns.rm(filename);\\r\\n        ns.write(filename, JSON.stringify(allMaterials), \\\"W\\\");\\r\\n\\r\\n        const materialsToImportExport = allMaterials.filter(x => x.delta > 500);\\r\\n\\r\\n        // if all stored === 0, then do another round\\r\\n        for (const materialToImportExport of materialsToImportExport) {\\r\\n            const exportOrders = []\\r\\n            // ns.tprint(materialToImportExport);\\r\\n            const inventoryCount = materialToImportExport.materials.reduce((acc, b) => acc + b.stored, 0);\\r\\n\\r\\n            if (inventoryCount > 0) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            for (const materialFromCity of materialToImportExport.materials) {\\r\\n                const materialName = materialFromCity.name;\\r\\n\\r\\n                for (const exportMaterial of materialFromCity.exports) {\\r\\n                    ns.corporation.cancelExportMaterial(divisionName, materialFromCity.city, divisionName, exportMaterial.city, materialName);\\r\\n                }\\r\\n\\r\\n                if (materialFromCity.delta > 0) {\\r\\n                    ns.corporation.sellMaterial(divisionName, materialFromCity.city, materialName, \\\"MAX\\\", \\\"MP\\\");\\r\\n\\r\\n                    if (materialFromCity.delta > 500) {\\r\\n                        exportOrders.push({ city: materialFromCity.city, demand: materialFromCity.demand });\\r\\n                    }\\r\\n                } else {\\r\\n                    ns.corporation.sellMaterial(divisionName, materialFromCity.city, materialName, 0, 0);\\r\\n\\r\\n                    let purchaseAmount = 0;\\r\\n                    for (const exportOrder of exportOrders) {\\r\\n                        ns.corporation.exportMaterial(divisionName, materialFromCity.city, divisionName, exportOrder.city, materialName, exportOrder.demand);\\r\\n                        purchaseAmount += exportOrder.demand;\\r\\n                    }\\r\\n\\r\\n                    const materialData = ns.corporation.getMaterialData(materialName); // {\\\"name\\\":\\\"Real Estate\\\",\\\"size\\\":0.005,\\\"demandBase\\\":50,\\\"demandRange\\\":[5,99],\\\"competitionBase\\\":50,\\\"competitionRange\\\":[25,75],\\\"baseCost\\\":80000,\\\"maxVolatility\\\":1.5,\\\"baseMarkup\\\":1.5}\\r\\n\\r\\n                    const spaceNeeded = purchaseAmount * materialData.size;\\r\\n\\r\\n                    const warehouse = ns.corporation.getWarehouse(divisionName, materialFromCity.city);\\r\\n                    const freeSpace = warehouse.size - warehouse.sizeUsed;\\r\\n\\r\\n                    if (freeSpace > spaceNeeded) {\\r\\n                        ns.corporation.bulkPurchase(divisionName, materialFromCity.city, materialName, purchaseAmount);\\r\\n                    } else {\\r\\n                        ns.corporation.upgradeWarehouse(divisionName, materialFromCity.city);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/import-export.js\",\"server\":\"home\"}}],[\"scripts/corporations/adjust-prices-export.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    if (corporation.state !== \\\"START\\\") {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const gidgetsFarm = \\\"Gidget's Farm\\\";\\r\\n    const gidgetsSmokes = \\\"Gidget's Smokes\\\";\\r\\n    const chemist = \\\"Chemist Gidget's Lab\\\";\\r\\n    const water = \\\"Gidget's Municipal Water\\\";\\r\\n    const hardware = \\\"Gidget's Computers & Hardware\\\";\\r\\n    const metal = \\\"Gidget's Metallurgy\\\";\\r\\n    const mining = \\\"Gidget's Land Destroyer\\\";\\r\\n\\r\\n    const divisionalTies = [\\r\\n        {\\r\\n            name: gidgetsFarm, materialsSold: [\\\"Food\\\", \\\"Plants\\\"], exports: [\\r\\n                { importer: gidgetsSmokes, material: \\\"Plants\\\" },\\r\\n                { importer: chemist, material: \\\"Plants\\\" }\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: chemist, materialsSold: [\\\"Chemicals\\\"], exports: [\\r\\n                { importer: gidgetsFarm, material: \\\"Chemicals\\\" }\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: water, materialsSold: [\\\"Water\\\"], exports: [\\r\\n                { importer: gidgetsFarm, material: \\\"Water\\\" },\\r\\n                { importer: chemist, material: \\\"Water\\\" },\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: hardware, materialsSold: [\\\"Hardware\\\"], exports: [\\r\\n                { importer: water, material: \\\"Hardware\\\" },\\r\\n                { importer: mining, material: \\\"Hardware\\\" },\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: metal, materialsSold: [\\\"Metal\\\"], exports: [\\r\\n                { importer: hardware, material: \\\"Metal\\\" },\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: mining, materialsSold: [\\\"Ore\\\", \\\"Minerals\\\"], exports: [\\r\\n                    { importer: metal, material: \\\"Ore\\\" },\\r\\n                ]\\r\\n        },\\r\\n    ]\\r\\n\\r\\n    const rawMaterialProducers = [];\\r\\n    const importExportRelationships = [];\\r\\n\\r\\n    for (const division of divisionalTies) {\\r\\n        if (corporation.divisions.includes(division.name)) {\\r\\n            rawMaterialProducers.push({ producer: division.name, materials: division.materialsSold });\\r\\n            for (const EXPORT of division.exports) {\\r\\n                if(corporation.divisions.includes(EXPORT.importer)){\\r\\n                    importExportRelationships.push({ exporter: division.name, importer: EXPORT.importer, material: EXPORT.material });\\r\\n                }                \\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const divisionName of corporation.divisions) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        const divisionHasExportRelationship = importExportRelationships.find(x => x.exporter === divisionName);\\r\\n\\r\\n        const exportRelationships = importExportRelationships.filter(x => x.exporter === divisionName);\\r\\n\\r\\n        for (const exportRelationship of exportRelationships) {\\r\\n            for (const city of division.cities) {\\r\\n                ns.corporation.cancelExportMaterial(exportRelationship.exporter, city, exportRelationship.importer, city, exportRelationship.material);\\r\\n                ns.corporation.exportMaterial(exportRelationship.exporter, city, exportRelationship.importer, city, exportRelationship.material, \\\"-(IPROD)\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (divisionHasExportRelationship) {\\r\\n            for (const city of division.cities) {\\r\\n\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (const productName of division.products) {\\r\\n            if (ns.corporation.hasResearched(divisionName, \\\"Market-TA.II\\\")) {\\r\\n                ns.corporation.setProductMarketTA2(divisionName, productName, true);\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            for (const city of division.cities) {\\r\\n                const product = ns.corporation.getProduct(divisionName, city, productName);\\r\\n\\r\\n                if (product.developmentProgress !== 100) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                if (product.desiredSellPrice === 0) {\\r\\n                    let mostExpensivePrice = 0;\\r\\n\\r\\n                    for (const productNameForPrice of division.products) {\\r\\n                        const product = ns.corporation.getProduct(divisionName, city, productNameForPrice);\\r\\n                        if (product.desiredSellPrice === 0) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        let price = product.desiredSellPrice;\\r\\n\\r\\n                        if (isNaN(price)) {\\r\\n                            price = Number(price.split(')')[1]);\\r\\n                        }\\r\\n\\r\\n                        if (price > mostExpensivePrice) {\\r\\n                            mostExpensivePrice = price;\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    if (mostExpensivePrice === 0) {\\r\\n                        mostExpensivePrice = product.productionCost * 2;\\r\\n                    }\\r\\n\\r\\n                    ns.corporation.sellProduct(divisionName, city, productName, \\\"MAX\\\", `${mostExpensivePrice}`, false)\\r\\n                } else {\\r\\n                    if (product.stored === 0) {\\r\\n                        const priceToSet = adjustPriceUp(product.desiredSellPrice, product.productionCost);\\r\\n\\r\\n                        ns.corporation.sellProduct(divisionName, city, productName, \\\"MAX\\\", priceToSet, false)\\r\\n                    }\\r\\n\\r\\n                    if (product.stored > 20) {\\r\\n                        const priceToSet = adjustPriceDown(product.desiredSellPrice, product.productionCost);\\r\\n\\r\\n                        ns.corporation.sellProduct(divisionName, city, productName, \\\"MAX\\\", priceToSet, false);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        const rawMaterialProducer = rawMaterialProducers.find(x => x.producer === divisionName);\\r\\n\\r\\n        if (rawMaterialProducer) {\\r\\n            for (const city of division.cities) {\\r\\n                for (const materialName of rawMaterialProducer.materials) {\\r\\n\\r\\n                    const material = ns.corporation.getMaterial(divisionName, city, materialName);\\r\\n\\r\\n                    const warehouse = ns.corporation.getWarehouse(divisionName, city);\\r\\n\\r\\n                    const percentUsed = warehouse.sizeUsed / warehouse.size;\\r\\n\\r\\n                    if (ns.corporation.hasResearched(divisionName, \\\"Market-TA.II\\\") && material.stored === 0) {\\r\\n                        ns.corporation.setMaterialMarketTA2(divisionName, city, materialName, true);\\r\\n                        continue;\\r\\n                    } else if (ns.corporation.hasResearched(divisionName, \\\"Market-TA.II\\\") && percentUsed < 0.8) {\\r\\n                        ns.corporation.setMaterialMarketTA2(divisionName, city, materialName, true);\\r\\n                        continue;\\r\\n                    } else if (ns.corporation.hasResearched(divisionName, \\\"Market-TA.II\\\")) {\\r\\n                        ns.corporation.setMaterialMarketTA2(divisionName, city, materialName, false);\\r\\n                    }\\r\\n\\r\\n                    const marketPrice = material.marketPrice;\\r\\n\\r\\n                    if (material.desiredSellPrice === 0 || material.desiredSellPrice === \\\"MP\\\" || material.desiredSellPrice === \\\"MP+5\\\") {\\r\\n                        ns.corporation.sellMaterial(divisionName, city, material.name, \\\"MAX\\\", marketPrice);\\r\\n                    } else {\\r\\n                        if (material.stored === 0) {\\r\\n                            const priceToSet = adjustPriceUp(material.desiredSellPrice, marketPrice);\\r\\n                            ns.corporation.sellMaterial(divisionName, city, material.name, \\\"MAX\\\", priceToSet);\\r\\n                        }\\r\\n\\r\\n                        if (material.stored > 20) {\\r\\n                            const priceToSet = adjustPriceDown(material.desiredSellPrice, marketPrice);\\r\\n\\r\\n                            ns.corporation.sellMaterial(divisionName, city, material.name, \\\"MAX\\\", priceToSet);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction adjustPriceUp(oldPrice, marketPrice) {\\r\\n\\r\\n    if (isNaN(oldPrice)) {\\r\\n        const adjuster = Number(oldPrice.split(')')[1]);\\r\\n        oldPrice = adjuster + marketPrice;\\r\\n    }\\r\\n\\r\\n    let newPrice = 0;\\r\\n    if (oldPrice >= 0) {\\r\\n        if (oldPrice > 100) {\\r\\n            newPrice = oldPrice * 1.05;\\r\\n        } else {\\r\\n            newPrice = oldPrice + 10;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (oldPrice < 0) {\\r\\n        newPrice = 10;\\r\\n    }\\r\\n\\r\\n    if (newPrice <= 0) {\\r\\n        return oldPrice;\\r\\n    }\\r\\n\\r\\n    return newPrice;\\r\\n}\\r\\n\\r\\nfunction adjustPriceDown(oldPrice, marketPrice) {\\r\\n\\r\\n    if (isNaN(oldPrice)) {\\r\\n        const adjuster = Number(oldPrice.split(')')[1]);\\r\\n        oldPrice = adjuster + marketPrice;\\r\\n    }\\r\\n\\r\\n    let newPrice = 0;\\r\\n    if (oldPrice >= 0) {\\r\\n        if (oldPrice > 100) {\\r\\n            newPrice = oldPrice * 0.97;\\r\\n        } else {\\r\\n            newPrice = oldPrice - 5;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (oldPrice < 0) {\\r\\n        newPrice = 10;\\r\\n    }\\r\\n\\r\\n    if (newPrice <= 0) {\\r\\n        return oldPrice;\\r\\n    }\\r\\n\\r\\n    return newPrice;\\r\\n}\\r\\n\",\"filename\":\"scripts/corporations/adjust-prices-export.js\",\"server\":\"home\"}}],[\"scripts/corporations/go-public.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    if (profit > 200_000_000 && corporation.public === false){\\r\\n        ns.corporation.goPublic(0);\\r\\n    }\\r\\n\\r\\n    if(corporation.public && corporation.dividendRate !== .01){\\r\\n        ns.corporation.issueDividends(.01);\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/go-public.js\",\"server\":\"home\"}}],[\"scripts/corporations/get-investments.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    // ns.tprint(ns.corporation.getInvestmentOffer())\\r\\n\\r\\n    ///{\\\"funds\\\":96283140000,\\\"shares\\\":100000000,\\\"round\\\":1}\\r\\n\\r\\n    const investmentWeWillTake = [\\r\\n        { round: 1, investment: 200_000_000_000 },\\r\\n        { round: 2, investment: 1_000_000_000_000 },\\r\\n    ]\\r\\n\\r\\n    const investmentOffer = ns.corporation.getInvestmentOffer();\\r\\n\\r\\n    if (corporation.public === false) {\\r\\n        for (const minimumInvestment of investmentWeWillTake) {\\r\\n            if(investmentOffer.round === minimumInvestment.round && investmentOffer.funds > minimumInvestment.investment) {\\r\\n                ns.corporation.acceptInvestmentOffer();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (profit > 200_000_000 && corporation.public === false) {\\r\\n        ns.corporation.goPublic(0);\\r\\n    }\\r\\n\\r\\n    if (corporation.public && corporation.dividendRate !== .01 && !ns.corporation.hasUnlock(\\\"Government Partnership\\\")) {\\r\\n        ns.corporation.issueDividends(.01);\\r\\n    }\\r\\n\\r\\n    if (corporation.public && corporation.dividendRate !== .5 && ns.corporation.hasUnlock(\\\"Government Partnership\\\")) {\\r\\n        ns.corporation.issueDividends(.5);\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/get-investments.js\",\"server\":\"home\"}}],[\"scripts/corporations/expand.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const divisionsGoal = [\\r\\n        { order: 0, fundsNeeded: 0, name: \\\"Gidget's Farm\\\", industry: \\\"Agriculture\\\", profitNeeded: 0 },\\r\\n        { order: 1, fundsNeeded: 750_000_000_000, name: \\\"Gidget's Smokes\\\", industry: \\\"Tobacco\\\", profitNeeded: 10_000_000 },\\r\\n        { order: 2, fundsNeeded: 2_000_000_000_000, name: \\\"Chemist Gidget's Lab\\\", industry: \\\"Chemical\\\", profitNeeded: 2_000_000_000 },\\r\\n        { order: 3, fundsNeeded: 3_000_000_000_000, name: \\\"Gidget's Municipal Water\\\", industry: \\\"Water Utilities\\\", profitNeeded: 10_000_000_000 },\\r\\n        { order: 4, fundsNeeded: 100_000_000_000_000, name: \\\"Gidget's Computers & Hardware\\\", industry: \\\"Computer Hardware\\\", profitNeeded: 1_000_000_000_000 },\\r\\n        { order: 5, fundsNeeded: 200_000_000_000_000, name: \\\"Gidget's Metallurgy\\\", industry: \\\"Refinery\\\", profitNeeded: 2_000_000_000_000 }, \\r\\n        { order: 6, fundsNeeded: 300_000_000_000_000, name: \\\"Gidget's Land Destroyer\\\", industry: \\\"Mining\\\", profitNeeded: 3_000_000_000_000 },\\r\\n    ]\\r\\n\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n    for (const divisionGoal of divisionsGoal) {\\r\\n        if (corporation.divisions.length === divisionGoal.order && corporation.funds > divisionGoal.fundsNeeded && !corporation.divisions.includes(divisionGoal.name) && profit >= divisionGoal.profitNeeded) {\\r\\n            ns.corporation.expandIndustry(divisionGoal.industry, divisionGoal.name);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/expand.js\",\"server\":\"home\"}}],[\"scripts/corporations/bribe-factions.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let corporation = ns.corporation.getCorporation();\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    if(profit > 1_000_000_000_000){\\r\\n        const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n        const player = ns.getPlayer();\\r\\n\\r\\n        const mostRepExpensiveForEachFaction = [];\\r\\n\\r\\n        for (const faction of player.factions) {\\r\\n            const maximumAugRep = Math.max(...ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction)\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .filter(x => {\\r\\n                    const prereqs = ns.singularity.getAugmentationPrereq(x);\\r\\n                    return prereqs.every(y => ownedAugmentations.includes(y));\\r\\n                })\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n    \\r\\n            if (maximumAugRep > 0) {\\r\\n                mostRepExpensiveForEachFaction.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(mostRepExpensiveForEachFaction.length > 0){\\r\\n            for (const factionWithRep of mostRepExpensiveForEachFaction) {\\r\\n                \\r\\n                let currentFactionRep = ns.singularity.getFactionRep(factionWithRep.faction);\\r\\n                const repNeeded = factionWithRep.maximumAugRep - currentFactionRep;\\r\\n                \\r\\n                corporation = ns.corporation.getCorporation();\\r\\n                const capitalReserve = 400_000_000_000;\\r\\n                const liquidFunds = corporation.funds;\\r\\n                const investableAmount = liquidFunds - capitalReserve;\\r\\n\\r\\n                const amountToDonate = 1_000_000_000_000;\\r\\n                \\r\\n                let amountSpent = amountToDonate;\\r\\n                while(currentFactionRep < repNeeded && investableAmount > amountSpent){\\r\\n\\r\\n                    ns.corporation.bribe(factionWithRep.faction, amountToDonate)\\r\\n                    \\r\\n                    amountSpent += amountToDonate;\\r\\n                    currentFactionRep = ns.singularity.getFactionRep(factionWithRep.faction);           \\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"scripts/corporations/bribe-factions.js\",\"server\":\"home\"}}],[\"scripts/singularity/do-work-get-augs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const player = ns.getPlayer();\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const organizationsToJoinInTheOrderWeWantToComplete = organizations.toJoinInOrderInWhichIWantToComplete;\\r\\n    const ownedAugmentations = JSON.parse(ns.read(\\\"data/ownedAugs.txt\\\"));\\r\\n\\r\\n    const doNoWorkFor = organizations.doNoWorkFor;\\r\\n    const stopAtAugments = organizations.stopAtAugments;\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavor = [];\\r\\n\\r\\n    for (const faction of organizationsToJoinInTheOrderWeWantToComplete) {\\r\\n        if (player.factions.includes(faction) && !doNoWorkFor.includes(faction)) {\\r\\n\\r\\n            let augmentsForFaction = ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction);\\r\\n\\r\\n            let stopAtAugmentForFaction = stopAtAugments\\r\\n                .find(x => x.faction === faction);\\r\\n\\r\\n            if (stopAtAugmentForFaction) {\\r\\n                if (ownedAugmentations.includes(stopAtAugmentForFaction.augmentToStopAt) && stopAtAugmentForFaction.final) {\\r\\n                    augmentsForFaction = [];\\r\\n                } else if (ownedAugmentations.includes(stopAtAugmentForFaction.augmentToStopAt) && !stopAtAugmentForFaction.final) {\\r\\n                    augmentsForFaction = augmentsForFaction;\\r\\n                } else {\\r\\n                    augmentsForFaction = augmentsForFaction.filter(x => x === stopAtAugmentForFaction.augmentToStopAt);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            const maximumAugRep = Math.max(...augmentsForFaction\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n            const favor = ns.singularity.getFactionFavor(faction);\\r\\n\\r\\n            if (maximumAugRep > 0 && favor < 75) {\\r\\n                factionsWithAugsToBuyAndNotEnoughtFavor.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavorFile = 'data/factionsWithAugsToBuyAndNotEnoughtFavor.txt';\\r\\n    ns.rm(factionsWithAugsToBuyAndNotEnoughtFavorFile);\\r\\n    ns.write(factionsWithAugsToBuyAndNotEnoughtFavorFile, JSON.stringify(factionsWithAugsToBuyAndNotEnoughtFavor), \\\"W\\\");\\r\\n}\",\"filename\":\"scripts/singularity/do-work-get-augs.js\",\"server\":\"home\"}}],[\"scripts/singularity/do-work-get-augments.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n\\r\\n    const ownedAugmentations = JSON.parse(ns.read(\\\"data/ownedAugs.txt\\\"));\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const organizationsToJoinInTheOrderWeWantToComplete = organizations.toJoinInOrderInWhichIWantToComplete;\\r\\n    const doNoWorkFor = organizations.doNoWorkFor;\\r\\n    const stopAtAugments = organizations.stopAtAugments;\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavor = [];\\r\\n\\r\\n    for (const faction of organizationsToJoinInTheOrderWeWantToComplete) {\\r\\n        if (player.factions.includes(faction) && !doNoWorkFor.includes(faction)) {\\r\\n\\r\\n            let augmentsForFaction = ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction);\\r\\n\\r\\n            let stopAtAugmentForFaction = stopAtAugments\\r\\n                .find(x => x.faction === faction);\\r\\n\\r\\n            if (stopAtAugmentForFaction) {\\r\\n                if (ownedAugmentations.includes(stopAtAugmentForFaction.augmentToStopAt) && stopAtAugmentForFaction.final) {\\r\\n                    augmentsForFaction = [];\\r\\n                } else if (ownedAugmentations.includes(stopAtAugmentForFaction.augmentToStopAt) && !stopAtAugmentForFaction.final) {\\r\\n                    augmentsForFaction = augmentsForFaction;\\r\\n                } else {\\r\\n                    augmentsForFaction = augmentsForFaction.filter(x => x === stopAtAugmentForFaction.augmentToStopAt);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            const maximumAugRep = Math.max(...augmentsForFaction\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n            const favor = ns.singularity.getFactionFavor(faction);\\r\\n\\r\\n            if (maximumAugRep > 0 && favor < 75) {\\r\\n                factionsWithAugsToBuyAndNotEnoughtFavor.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavorFile = \\\"data/factionsWithAugsToBuyAndNotEnoughtFavor.txt\\\";\\r\\n    ns.rm(factionsWithAugsToBuyAndNotEnoughtFavorFile);\\r\\n    ns.write(factionsWithAugsToBuyAndNotEnoughtFavorFile, JSON.stringify(factionsWithAugsToBuyAndNotEnoughtFavor), \\\"W\\\");\\r\\n\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/do-work-get-augments.js\",\"server\":\"home\"}}],[\"scripts/singularity/apply-to-jobs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const companiesWeWantToBecomePartOf = organizations.companiesWeWantToBecomePartOf;\\r\\n\\r\\n    for (const companyName of companiesWeWantToBecomePartOf) {\\r\\n        ns.singularity.applyToCompany(companyName, \\\"software\\\");\\r\\n    }\\r\\n}\",\"filename\":\"scripts/singularity/apply-to-jobs.js\",\"server\":\"home\"}}],[\"scripts/stock/second-part-of-quotes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const latestStockQuotesFile = \\\"data/latestQuotes.txt\\\";\\r\\n    const stockRecords = JSON.parse(ns.read(latestStockQuotesFile));\\r\\n\\r\\n    for (const quote of stockRecords) {\\r\\n        quote.price = ns.stock.getPrice(quote.symbol);\\r\\n        quote.maxShares = ns.stock.getMaxShares(quote.symbol);\\r\\n\\r\\n        const position = ns.stock.getPosition(quote.symbol);\\r\\n        quote.investedShares = position[0];\\r\\n        quote.averagePrice = position[1];\\r\\n        quote.sharesShort = position[2];\\r\\n        quote.averageShortPrice = position[3];\\r\\n    }\\r\\n\\r\\n\\r\\n    ns.rm(latestStockQuotesFile);\\r\\n    ns.write(latestStockQuotesFile, JSON.stringify(stockRecords), \\\"W\\\")\\r\\n}\",\"filename\":\"scripts/stock/second-part-of-quotes.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"CLOUD-000\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"analytics/2023-07-07-11-15-Bachman&Associates-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-07-11-15-Bachman&Associates-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-07T15:01:39.037Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-07T15:01:39.037Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Bachman & Associates\\\",\\\"firstTime\\\":\\\"2023-07-07T15:01:39.037Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":333650.9080521832,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-07T15:01:39.037Z\\\"},\\\"moneySpent\\\":{\\\"augments\\\":0,\\\"homeCores\\\":23730468750000,\\\"homeRam\\\":31587660778186.953,\\\"fluxGovernors\\\":0,\\\"augment\\\":null},\\\"lastSaved\\\":\\\"2023-07-07T16:15:57.700Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":375000.40990502154,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-07T16:10:26.619Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$108,452,850,558,874.11\\\",\\\"moneyRightNow\\\":\\\"$103,101,209,025,358.40\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T16:10:26.620Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$108,452,850,558,874.11\\\",\\\"moneyRightNow\\\":\\\"$103,681,640,147,085.58\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T16:10:30.684Z\\\"},\\\"augsBought\\\":[\\\"SmartJaw\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"FocusWire\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"CashRoot Starter Kit\\\",\\\"Nanofiber Weave\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\"]}\"}}],[\"analytics/2023-07-07-14-03-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-07-14-03-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-07T16:19:40.262Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-07T16:19:40.262Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-07T16:19:40.262Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-07T16:19:40.262Z\\\"},\\\"augsBought\\\":[\\\"Neural Accelerator\\\"],\\\"moneySpent\\\":{\\\"augments\\\":0,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0,\\\"augment\\\":null},\\\"lastSaved\\\":\\\"2023-07-07T19:03:34.187Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":207528.18490936968,\\\"targetRepForGettingToFavor\\\":207510.3723,\\\"time\\\":\\\"2023-07-07T19:03:30.139Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$11,781,091,031,741.60\\\",\\\"moneyRightNow\\\":\\\"$1,303,091,345,518.27\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T19:03:30.139Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$11,781,091,031,741.60\\\",\\\"moneyRightNow\\\":\\\"$2,544,403,997,543.49\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T19:03:34.186Z\\\"}}\"}}],[\"analytics/2023-07-08-19-48-Daedalus-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-19-48-Daedalus-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-07T19:06:59.469Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-07T19:06:59.469Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-07T19:06:59.470Z\\\"},{\\\"factionToMax\\\":\\\"Daedalus\\\",\\\"firstTime\\\":\\\"2023-07-07T21:55:21.354Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-07T19:06:59.470Z\\\"},\\\"augsBought\\\":[\\\"PCMatrix\\\",\\\"Synfibril Muscle\\\"],\\\"moneySpent\\\":{\\\"augments\\\":4137500000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0},\\\"lastSaved\\\":\\\"2023-07-08T00:48:28.885Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":32865.1277346334,\\\"targetRepForGettingToFavor\\\":21865.9969,\\\"time\\\":\\\"2023-07-07T19:21:42.026Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$20,200,143,877,934.50\\\",\\\"moneyRightNow\\\":\\\"$3,911,461,428,002.28\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$225,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T20:39:02.138Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$20,200,143,877,934.50\\\",\\\"moneyRightNow\\\":\\\"$4,117,056,489,229.67\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$225,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T20:39:06.169Z\\\"},\\\"moneyLeft\\\":7852910581520.66}\"}}],[\"analytics/2023-07-08-22-54-NWO-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-22-54-NWO-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T01:27:34.503Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T01:27:34.503Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-08T01:27:34.503Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T01:27:34.503Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"BitRunners Neurolink\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Synthetic Heart\\\",\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"DermaForce Particle Barrier\\\",\\\"The Red Pill\\\"],\\\"moneySpent\\\":{\\\"augments\\\":501848779077.36707,\\\"homeCores\\\":0,\\\"homeRam\\\":99817008059070.77,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":75733371162620.36,\\\"lastSaved\\\":\\\"2023-07-08T03:54:59.353Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":462501.05086586776,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T03:54:55.304Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$526,824,656,393,874.44\\\",\\\"moneyRightNow\\\":\\\"$251,999,971,224,510.60\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$18,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T03:54:55.304Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$526,824,656,393,874.44\\\",\\\"moneyRightNow\\\":\\\"$253,602,470,575,079.72\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$18,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T03:54:59.351Z\\\"}}\"}}],[\"analytics/2023-07-08-00-56-OmniTekIncorporated-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-00-56-OmniTekIncorporated-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T04:26:57.384Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T04:26:57.384Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"OmniTek Incorporated\\\",\\\"firstTime\\\":\\\"2023-07-08T04:26:57.384Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":15.124617264295333,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T04:26:57.384Z\\\"},\\\"augsBought\\\":[\\\"Hydroflame Left Arm\\\",\\\"Xanipher\\\",\\\"PC Direct-Neural Interface\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"Combat Rib III\\\",\\\"Augmented Targeting III\\\",\\\"NutriGen Implant\\\"],\\\"moneySpent\\\":{\\\"augments\\\":2534418700549.75,\\\"homeCores\\\":177978515625000,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":280042565488.5333,\\\"lastSaved\\\":\\\"2023-07-08T05:56:46.954Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":462548.0785199993,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T05:56:42.882Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$505,066,407,135,123.06\\\",\\\"moneyRightNow\\\":\\\"$180,386,298,617,236.44\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$375,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T05:56:42.883Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$505,066,407,135,123.06\\\",\\\"moneyRightNow\\\":\\\"$181,269,916,019,448.78\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$375,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T05:56:46.945Z\\\"}}\"}}],[\"analytics/2023-07-08-02-29-BladeIndustries-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-02-29-BladeIndustries-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T06:21:45.808Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T06:21:45.808Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Blade Industries\\\",\\\"firstTime\\\":\\\"2023-07-08T06:21:45.808Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T06:21:45.809Z\\\"},\\\"augsBought\\\":[\\\"OmniTek InfoLoad\\\",\\\"HyperSight Corneal Implant\\\",\\\"INFRARET Enhancement\\\"],\\\"moneySpent\\\":{\\\"augments\\\":8208300000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":70843557655495.1,\\\"lastSaved\\\":\\\"2023-07-08T07:29:39.410Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":462652.03280345845,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T07:29:35.219Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$572,996,898,778,520.20\\\",\\\"moneyRightNow\\\":\\\"$140,624,600,817,489.31\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T07:29:35.219Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$572,996,898,778,520.20\\\",\\\"moneyRightNow\\\":\\\"$143,621,626,658,752.25\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T07:29:39.320Z\\\"}}\"}}],[\"contracts/2023-07-08T15:46:33.989Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-08T15:46:33.989Z.txt\",\"text\":\"[{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-301865-NiteSec.cct\\\",\\\"type\\\":\\\"Spiralize Matrix\\\",\\\"attemptsLeft\\\":9},{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-605082-ECorp.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-715836-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-574766-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-546533.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-207182.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-562846-Chongqing.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-147112-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10}]\"}}],[\"analytics/2023-07-08-10-55-CyberSec-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-10-55-CyberSec-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T07:45:28.397Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T07:45:28.397Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"ECorp\\\",\\\"firstTime\\\":\\\"2023-07-08T07:45:28.397Z\\\"},{\\\"factionToMax\\\":\\\"CyberSec\\\",\\\"firstTime\\\":\\\"2023-07-08T15:55:34.597Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1625000,\\\"currentFactionRep\\\":7.83489646900019,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T07:45:28.397Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Neurotrainer II\\\",\\\"BitWire\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neurotrainer I\\\"],\\\"moneySpent\\\":{\\\"augments\\\":2927417203.1,\\\"homeCores\\\":0,\\\"homeRam\\\":132545749.31540185,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":76065861.37635517,\\\"lastSaved\\\":\\\"2023-07-08T15:55:38.636Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":18750,\\\"currentFactionRep\\\":19144.520172309567,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-08T15:55:34.597Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$3,136,028,813.79\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,250,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T15:55:34.597Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$3,136,028,813.79\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,250,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T15:55:38.627Z\\\"}}\"}}],[\"contracts/failure/unitalife-contract-457057-BachmanAssociates.cct-AlgorithmicStockTraderIV.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/unitalife-contract-457057-BachmanAssociates.cct-AlgorithmicStockTraderIV.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-457057-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[2,[104,1,164,22,87,58,184,182,187,31,33,15,132,75,200,78,154]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [2, [104,67,1,164,22,87,58,118,184,182,187,31,33,15,132,75,200,78,154,61]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},\\\"wrongResult\\\":348}\"}}],[\"contracts/2023-07-08T16:02:50.327Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-08T16:02:50.327Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-287914-ECorp.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,3,2,4,0,0,3,2,4,3,2,1,4,3,3,1,2,1,5,6,2,4,2,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,2,4,0,0,3,2,4,3,2,1,4,3,3,1,2,1,5,6,2,4,2,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"max-hardware\\\",\\\"name\\\":\\\"contract-489132.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"5ddddddddM0C1ag3juL3juL3jQaVwdNEQdNGShqNEQdNGSrBfBf2rBfBr1OvIK6r1OvIa\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 5ddddddddM0C1ag3juL3juL3jQaVwdNEQdNGShqNEQdNGSrBfBf2rBfBr1OvIK6r1OvIa\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-522441-TianDiHui.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,7],\\\"description\\\":\\\"You are in a grid with 8 rows and 7 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 7]\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-895014-CyberSec.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[2,7,-9,5,4,-8,-10,-5,4,-6,-4,0,6,10,-3,6,2,-8,-1,6,-3,-10,-3,8,6,-2,-8,2,3,-4,0,0,9,-9,-8,5,4,4],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 2,7,-9,5,4,-8,-10,-5,4,-6,-4,0,6,10,-3,6,2,-8,-1,6,-3,-10,-3,8,6,-2,-8,2,3,-4,0,0,9,-9,-8,5,4,4\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-875528.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[11,9],\\\"description\\\":\\\"You are in a grid with 11 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [11, 9]\\\"},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-125441.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[147,[1,2,4,5,7,8,10,11,12]],\\\"description\\\":\\\"How many different distinct ways can the number 147 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,7,8,10,11,12]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-338676.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[149,[2,3,4,6,9,11,12,13,14]],\\\"description\\\":\\\"How many different distinct ways can the number 149 be written as a sum of integers contained in the set:\\\\n\\\\n [2,3,4,6,9,11,12,13,14]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-265891-TheBlackHand.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0],[1,0,0,0],[0,0,0,0],[1,0,1,0],[0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,\\\\n1,0,0,0,\\\\n0,0,0,0,\\\\n1,0,1,0,\\\\n0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-457057-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[2,[104,67,1,164,22,87,58,118,184,182,187,31,33,15,132,75,200,78,154,61]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [2, [104,67,1,164,22,87,58,118,184,182,187,31,33,15,132,75,200,78,154,61]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-98816-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[8,[[1,3],[3,5],[6,7],[4,5],[1,7],[4,7],[2,7],[2,5]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [8,[[1,3],[3,5],[6,7],[4,5],[1,7],[4,7],[2,7],[2,5]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 7. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-852569.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0],[1,0,0,0,0,0],[0,1,0,0,0,0],[0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,\\\\n1,0,0,0,0,0,\\\\n0,1,0,0,0,0,\\\\n0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-193066-Chongqing.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[3],[4,8],[1,6,7],[3,8,3,9],[1,3,6,1,2],[4,4,7,8,8,1],[1,4,3,6,1,4,6],[1,9,8,7,9,9,4,3],[3,2,1,2,1,8,4,2,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,8,3,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,3,6,1,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,4,7,8,8,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,4,3,6,1,4,6],\\\\n&nbsp;&nbsp;&nbsp;[1,9,8,7,9,9,4,3],\\\\n&nbsp;&nbsp;[3,2,1,2,1,8,4,2,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-774587-TianDiHui.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[8,0,1,5,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 8,0,1,5,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-321076.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[12,[[7,11],[1,8],[2,9],[2,8],[1,2],[0,4],[0,3],[2,3],[5,8],[3,5],[4,7],[1,6],[9,10],[4,10],[6,8],[3,10],[0,1],[7,8]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [12,[[7,11],[1,8],[2,9],[2,8],[1,2],[0,4],[0,3],[2,3],[5,8],[3,5],[4,7],[1,6],[9,10],[4,10],[6,8],[3,10],[0,1],[7,8]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 11. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-885023.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,1,0,1,0,1,1,1,0],[0,0,1,1,1,1,0,0,1],[0,1,0,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-450371-NWO.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"zzzzzzzzzzVVVVVVVVVff66666dddddd3Dxjjjjjjjjjjjll3nMIEooooooooooIrrQQ3333333333GGGGG220\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; zzzzzzzzzzVVVVVVVVVff66666dddddd3Dxjjjjjjjjjjjll3nMIEooooooooooIrrQQ3333333333GGGGG220\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-409303-CyberSec.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"koU6koU6koU8koU6ko66SU6ko66Sko66SkoSkoSkoSkXSkoSkoSkXSkoSXSkoSXSuKvMuK5CCCCCCZA\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; koU6koU6koU8koU6ko66SU6ko66Sko66SkoSkoSkoSkXSkoSkoSkXSkoSXSkoSXSuKvMuK5CCCCCCZA\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-741436-TianDiHui.cct\\\",\\\"type\\\":\\\"Spiralize Matrix\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[[41,7],[46,49],[18,23],[1,16],[46,1],[49,27]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a 2D matrix, return the elements of the matrix as an array in spiral order:\\\\n\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[41, 7]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[46,49]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[18,23]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 1,16]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[46, 1]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[49,27]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;]\\\\n\\\\nHere is an example of what spiral order should be:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1, 2, 3]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4, 5, 6]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7, 8, 9]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;]\\\\n\\\\n Answer: [1, 2, 3, 6, 9, 8 ,7, 4, 5]\\\\n\\\\n Note that the matrix will not always be square:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,&nbsp;&nbsp;2,&nbsp;&nbsp;3,&nbsp;&nbsp;4]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,&nbsp;&nbsp;6,&nbsp;&nbsp;7,&nbsp;&nbsp;8]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,&nbsp;10,&nbsp;11,&nbsp;12]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;]\\\\n\\\\n Answer: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-481575.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[10,10,2,4,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 10,10,2,4,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-926552.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"ppppppppD6ggxxxxxxxxWk88uVVqdddddddHHH811EEE00WWyy333NvvvvvvvWWWWWWWWWA88iii\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; ppppppppD6ggxxxxxxxxWk88uVVqdddddddHHH811EEE00WWyy333NvvvvvvvWWWWWWWWWA88iii\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-550315.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":59,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 59 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-895133.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,2,3,1,0,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,2,3,1,0,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-858682.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[197,[1,2,4,5,6,10,12,13]],\\\"description\\\":\\\"How many different distinct ways can the number 197 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,6,10,12,13]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-938387.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":8,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 8 be written as a sum of at least two positive integers?\\\"}]\"}}],[\"analytics/2023-07-09-05-42-NiteSec-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-09-05-42-NiteSec-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T16:31:11.237Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T16:31:11.237Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NiteSec\\\",\\\"firstTime\\\":\\\"2023-07-08T16:31:11.237Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-08T16:31:11.237Z\\\"},\\\"augsBought\\\":[\\\"Cranial Signal Processors - Gen III\\\",\\\"DataJack\\\",\\\"Neuregen Gene Modification\\\",\\\"Neural-Retention Enhancement\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Speech Processor Implant\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"Speech Enhancement\\\",\\\"Wired Reflexes\\\"],\\\"moneySpent\\\":{\\\"augments\\\":20381378226.862747,\\\"homeCores\\\":7500000000,\\\"homeRam\\\":14539978074.787807,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":12810898749.805788,\\\"lastSaved\\\":\\\"2023-07-09T10:42:24.377Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":112505.95319020352,\\\"targetRepForGettingToFavor\\\":274320.6381,\\\"time\\\":\\\"2023-07-09T04:32:21.711Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$25,622,206,359.90\\\",\\\"moneyRightNow\\\":\\\"$5,243,979,923.03\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$55,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-09T04:32:21.712Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$37,197,430,004.03\\\",\\\"moneyRightNow\\\":\\\"$55,232,255,051.46\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$55,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-09T10:42:24.369Z\\\"}}\"}}],[\"contracts/failure/blade-contract-989459-Sector12.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/blade-contract-989459-Sector12.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-989459-Sector12.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[179,52,138,20,181,47,87,38,133,124,174,123,169,54,138],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":256}\"}}],[\"contracts/2023-07-09T10:42:27.655Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-09T10:42:27.655Z.txt\",\"text\":\"[{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-306430.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,3,0,2,0,0,4,0,5,0,7,9,4,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,3,0,2,0,0,4,0,5,0,7,9,4,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-93220.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":596871453,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 596871453?\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-688654.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-610288.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 12. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-908915-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,0,1,0,0],[1,0,0,0,1],[0,0,0,1,1],[0,0,1,0,0],[0,1,0,1,0],[0,0,0,1,0],[1,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,1,0,0,\\\\n1,0,0,0,1,\\\\n0,0,0,1,1,\\\\n0,0,1,0,0,\\\\n0,1,0,1,0,\\\\n0,0,0,1,0,\\\\n1,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-225615.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-876968-BitRunners.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"251150140129\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 251150140129\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-793514-NWO.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-308718.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-726515.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-206621.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(((())(aa\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (((())(aa\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-517629.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,1,0,1],[0,0,0,0,1,1,1,1],[1,0,0,0,0,1,1,0],[0,0,0,0,0,0,0,0],[0,1,0,1,1,1,0,0],[0,1,1,0,1,0,0,0],[0,1,0,0,1,0,0,0],[1,0,0,1,0,0,1,0],[1,1,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,0,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-989459-Sector12.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-248819.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[7],[3,4],[1,2,9],[1,8,8,1],[4,7,4,6,4],[9,3,4,6,9,3]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,2,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,8,8,1],\\\\n&nbsp;&nbsp;&nbsp;[4,7,4,6,4],\\\\n&nbsp;&nbsp;[9,3,4,6,9,3]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-759274-BladeIndustries.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[197,[1,3,4,6,7,8,9,10,13,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 197 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,6,7,8,9,10,13,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-755946-Aevum.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-239892.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1110100011010100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1110100011010100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-650735.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-923111.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,0,1,1,1,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,0,1,0,0,\\\\n0,0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,1,0,1,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,\\\\n0,0,1,1,1,0,0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-140416.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-149794.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[17,[4,5,6,7,8,10,11,12,13,14]],\\\"description\\\":\\\"How many different distinct ways can the number 17 be written as a sum of integers contained in the set:\\\\n\\\\n [4,5,6,7,8,10,11,12,13,14]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-95536.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":21,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 21 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-389211.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-80334.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-204128.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[3,3,10,0,0,0,4,0,6,0,4,10],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,10,0,0,0,4,0,6,0,4,10\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-90930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[7,11],\\\"description\\\":\\\"You are in a grid with 7 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [7, 11]\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-693793.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-188719-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[84,[2,5,6,7,8,9,10,12,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 84 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,7,8,9,10,12,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-889582.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":42771,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 42771 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-18930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[5,14],\\\"description\\\":\\\"You are in a grid with 5 rows and 14 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [5, 14]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-53463.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"12010722233\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 12010722233\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"}]\"}}],[\"contracts/2023-07-10T11:30:35.720Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T11:30:35.720Z.txt\",\"text\":\"[{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-306430.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,3,0,2,0,0,4,0,5,0,7,9,4,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,3,0,2,0,0,4,0,5,0,7,9,4,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-93220.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":596871453,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 596871453?\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-688654.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-610288.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 12. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-908915-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,0,1,0,0],[1,0,0,0,1],[0,0,0,1,1],[0,0,1,0,0],[0,1,0,1,0],[0,0,0,1,0],[1,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,1,0,0,\\\\n1,0,0,0,1,\\\\n0,0,0,1,1,\\\\n0,0,1,0,0,\\\\n0,1,0,1,0,\\\\n0,0,0,1,0,\\\\n1,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-225615.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-876968-BitRunners.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"251150140129\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 251150140129\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-793514-NWO.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-308718.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-726515.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-206621.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(((())(aa\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (((())(aa\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-517629.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,1,0,1],[0,0,0,0,1,1,1,1],[1,0,0,0,0,1,1,0],[0,0,0,0,0,0,0,0],[0,1,0,1,1,1,0,0],[0,1,1,0,1,0,0,0],[0,1,0,0,1,0,0,0],[1,0,0,1,0,0,1,0],[1,1,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,0,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-989459-Sector12.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-248819.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[7],[3,4],[1,2,9],[1,8,8,1],[4,7,4,6,4],[9,3,4,6,9,3]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,2,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,8,8,1],\\\\n&nbsp;&nbsp;&nbsp;[4,7,4,6,4],\\\\n&nbsp;&nbsp;[9,3,4,6,9,3]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-759274-BladeIndustries.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[197,[1,3,4,6,7,8,9,10,13,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 197 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,6,7,8,9,10,13,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-755946-Aevum.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-239892.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1110100011010100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1110100011010100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-650735.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-923111.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,0,1,1,1,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,0,1,0,0,\\\\n0,0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,1,0,1,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,\\\\n0,0,1,1,1,0,0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-140416.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-149794.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[17,[4,5,6,7,8,10,11,12,13,14]],\\\"description\\\":\\\"How many different distinct ways can the number 17 be written as a sum of integers contained in the set:\\\\n\\\\n [4,5,6,7,8,10,11,12,13,14]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-95536.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":21,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 21 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-389211.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-80334.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-204128.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[3,3,10,0,0,0,4,0,6,0,4,10],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,10,0,0,0,4,0,6,0,4,10\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-90930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[7,11],\\\"description\\\":\\\"You are in a grid with 7 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [7, 11]\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-693793.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-188719-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[84,[2,5,6,7,8,9,10,12,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 84 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,7,8,9,10,12,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-889582.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":42771,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 42771 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-18930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[5,14],\\\"description\\\":\\\"You are in a grid with 5 rows and 14 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [5, 14]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-53463.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"12010722233\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 12010722233\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"}]\"}}],[\"contracts/2023-07-10T11:32:16.363Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T11:32:16.363Z.txt\",\"text\":\"[{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-977017-BitRunners.cct\\\",\\\"type\\\":\\\"Encryption II: Vigenère Cipher\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"FLASHMEDIAMOUSELOGINDEBUG\\\",\\\"MACINTOSH\\\"],\\\"description\\\":\\\"Vigenère cipher is a type of polyalphabetic substitution. It uses  the Vigenère square to encrypt and decrypt plaintext with a keyword.\\\\n\\\\n &nbsp;&nbsp;Vigenère square:\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----------------------------------------------------\\\\n &nbsp;&nbsp;&nbsp;&nbsp; A | A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \\\\n &nbsp;&nbsp;&nbsp;&nbsp; B | B C D E F G H I J K L M N O P Q R S T U V W X Y Z A \\\\n &nbsp;&nbsp;&nbsp;&nbsp; C | C D E F G H I J K L M N O P Q R S T U V W X Y Z A B\\\\n &nbsp;&nbsp;&nbsp;&nbsp; D | D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\\\\n &nbsp;&nbsp;&nbsp;&nbsp; E | E F G H I J K L M N O P Q R S T U V W X Y Z A B C D\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...\\\\n &nbsp;&nbsp;&nbsp;&nbsp; Y | Y Z A B C D E F G H I J K L M N O P Q R S T U V W X\\\\n &nbsp;&nbsp;&nbsp;&nbsp; Z | Z A B C D E F G H I J K L M N O P Q R S T U V W X Y\\\\n\\\\n For encryption each letter of the plaintext is paired with the corresponding letter of a repeating keyword. For example, the plaintext DASHBOARD is encrypted with the keyword LINUX:\\\\n &nbsp;&nbsp; Plaintext: DASHBOARD\\\\n &nbsp;&nbsp; Keyword:&nbsp;&nbsp;&nbsp;LINUXLINU\\\\n So, the first letter D is paired with the first letter of the key L. Therefore, row D and column L of the  Vigenère square are used to get the first cipher letter O. This must be repeated for the whole ciphertext.\\\\n\\\\n You are given an array with two elements:\\\\n &nbsp;&nbsp;[\\\\\\\"FLASHMEDIAMOUSELOGINDEBUG\\\\\\\", \\\\\\\"MACINTOSH\\\\\\\"]\\\\n The first element is the plaintext, the second element is the keyword.\\\\n\\\\n Return the ciphertext as uppercase string.\\\"}]\"}}],[\"contracts/2023-07-10T12:00:27.917Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T12:00:27.917Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-872924-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11000000100000010111100101110010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11000000100000010111100101110010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-358562-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[124,[2,5,6,9,10,11,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 124 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-373303.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,1],[6,1,7],[2,7,1,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[3,1],\\\\n&nbsp;&nbsp;&nbsp;[6,1,7],\\\\n&nbsp;&nbsp;[2,7,1,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-959133.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0],[0,0,1,0,0,1,0,0],[0,0,0,0,1,1,1,0],[0,0,1,0,1,0,1,0],[1,0,0,1,0,0,0,0],[0,0,0,1,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,1],[1,0,1,0,0,0,0,0],[1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-769367.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,8],\\\"description\\\":\\\"You are in a grid with 9 rows and 8 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [9, 8]\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-633776.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":915078480,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 915078480?\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-310837.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-806259.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010100000000000100000100000111101001011001001110100101110000010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010100000000000100000100000111101001011001001110100101110000010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-545916-BitRunners.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,1,1,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-691109-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"}]\"}}],[\"contracts/failure/fulcrumtech-contract-772507-NiteSec.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/fulcrumtech-contract-772507-NiteSec.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-772507-NiteSec.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[129,63,116,46,105,9,146,49,190,102,143,96,122,89,173,62,178],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 129,121,121,63,116,108,46,105,9,146,49,190,102,115,143,116,96,122,95,89,173,62,178\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":278}\"}}],[\"contracts/2023-07-10T22:53:06.799Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T22:53:06.799Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-872924-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11000000100000010111100101110010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11000000100000010111100101110010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-310546-NiteSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0110000000010000\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0110000000010000' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-358562-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[124,[2,5,6,9,10,11,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 124 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-373303.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,1],[6,1,7],[2,7,1,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[3,1],\\\\n&nbsp;&nbsp;&nbsp;[6,1,7],\\\\n&nbsp;&nbsp;[2,7,1,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-959133.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0],[0,0,1,0,0,1,0,0],[0,0,0,0,1,1,1,0],[0,0,1,0,1,0,1,0],[1,0,0,1,0,0,0,0],[0,0,0,1,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,1],[1,0,1,0,0,0,0,0],[1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-373990-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100000000000000100000000000000000111011110101110011000111010001\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100000000000000100000000000000000111011110101110011000111010001' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-772507-NiteSec.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[129,121,121,63,116,108,46,105,9,146,49,190,102,115,143,116,96,122,95,89,173,62,178],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 129,121,121,63,116,108,46,105,9,146,49,190,102,115,143,116,96,122,95,89,173,62,178\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-769367.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,8],\\\"description\\\":\\\"You are in a grid with 9 rows and 8 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [9, 8]\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-633776.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":915078480,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 915078480?\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-310837.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-719753-Sector12.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"2515122107\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 2515122107\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-806259.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010100000000000100000100000111101001011001001110100101110000010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010100000000000100000100000111101001011001001110100101110000010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-387600-BladeIndustries.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[51,[1,3,4,5,6,7,8,9]],\\\"description\\\":\\\"How many different distinct ways can the number 51 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,5,6,7,8,9]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-545916-BitRunners.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,1,1,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-691109-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"}]\"}}],[\"analytics/2023-07-11-02-27-Bachman&Associates-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-02-27-Bachman&Associates-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-09T10:51:29.538Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-09T10:51:29.538Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"The Black Hand\\\",\\\"firstTime\\\":\\\"2023-07-09T10:51:29.539Z\\\"},{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-10T11:30:36.002Z\\\"},{\\\"factionToMax\\\":\\\"Bachman & Associates\\\",\\\"firstTime\\\":\\\"2023-07-10T20:03:02.082Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":175000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-09T10:51:29.539Z\\\"},\\\"augsBought\\\":[\\\"SmartJaw\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"FocusWire\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"Neuroreceptor Management Implant\\\",\\\"Nanofiber Weave\\\"],\\\"moneySpent\\\":{\\\"augments\\\":22646728750,\\\"homeCores\\\":23730468750000,\\\"homeRam\\\":31587660778186.953,\\\"fluxGovernors\\\":57032927790864.44},\\\"moneyLeft\\\":12203039917625.707,\\\"lastSaved\\\":\\\"2023-07-11T07:27:30.663Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":175000,\\\"currentFactionRep\\\":162129.75593228705,\\\"targetRepForGettingToFavor\\\":162120.6286,\\\"time\\\":\\\"2023-07-09T18:56:46.726Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$56,926,395,005.04\\\",\\\"moneyRightNow\\\":\\\"$6,976,811,949.53\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-09T18:56:46.726Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$286,650,154,139.07\\\",\\\"moneyRightNow\\\":\\\"$300,169,387,386.01\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-10T08:59:23.830Z\\\"},\\\"amountOfRamIncrease\\\":null,\\\"amountOfCoresIncrease\\\":null}\"}}],[\"contracts/2023-07-11T07:27:33.925Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T07:27:33.925Z.txt\",\"text\":\"[{\\\"server\\\":\\\"crush-fitness\\\",\\\"name\\\":\\\"contract-703070-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a))()aa)))())))a))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a))()aa)))())))a))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-760582-NWO.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[19,26],[5,11],[23,33],[18,24],[16,24],[4,6],[19,23],[19,20],[15,22],[17,24],[23,26],[18,28],[11,14],[3,5],[14,17],[23,24]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[19,26],[5,11],[23,33],[18,24],[16,24],[4,6],[19,23],[19,20],[15,22],[17,24],[23,26],[18,28],[11,14],[3,5],[14,17],[23,24]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-660870-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,-5,1,9,9,0,5,-3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,-5,1,9,9,0,5,-3\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-657153-CyberSec.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")())()()(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )())()()(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"}]\"}}],[\"analytics/2023-07-11-07-24-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-07-24-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T10:42:16.637Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T10:42:16.638Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-11T10:42:16.638Z\\\"},{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-11T10:46:46.120Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-11T10:42:16.638Z\\\"},\\\"augsBought\\\":[\\\"Neural Accelerator\\\"],\\\"moneySpent\\\":{\\\"augments\\\":1750000000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":4554283656849.052,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":1755961103764.4956,\\\"lastSaved\\\":\\\"2023-07-11T12:24:47.532Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1000000,\\\"currentFactionRep\\\":78668.58510156769,\\\"targetRepForGettingToFavor\\\":78604.3905,\\\"time\\\":\\\"2023-07-11T11:26:08.909Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$74,796,262,687,719.81\\\",\\\"moneyRightNow\\\":\\\"$5,775,539,522,926.99\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T12:24:43.465Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$74,796,262,687,719.81\\\",\\\"moneyRightNow\\\":\\\"$6,311,994,760,613.55\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T12:24:47.531Z\\\"}}\"}}],[\"contracts/2023-07-11T12:24:50.788Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T12:24:50.788Z.txt\",\"text\":\"[{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-294274.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"27278324\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 27278324\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-34323.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,1,0,6,4,3,2,1,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,1,0,6,4,3,2,1,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-156862.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[3,3,8,10,9,5,2,0,9,0,5,10,10,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,8,10,9,5,2,0,9,0,5,10,10,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-330757.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010100001111101\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010100001111101' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"}]\"}}],[\"analytics/2023-07-11-12-29-Daedalus-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-12-29-Daedalus-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T12:24:51.094Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T12:24:51.094Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-11T12:24:51.094Z\\\"},{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-11T12:29:47.178Z\\\"},{\\\"factionToMax\\\":\\\"Daedalus\\\",\\\"firstTime\\\":\\\"2023-07-11T15:04:35.038Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T12:24:51.094Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"BitRunners Neurolink\\\",\\\"Synfibril Muscle\\\",\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"DermaForce Particle Barrier\\\"],\\\"moneySpent\\\":{\\\"augments\\\":27917957472.5,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":91422048319347.48,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":41005533440689.86,\\\"lastSaved\\\":\\\"2023-07-11T17:29:31.733Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1000000,\\\"currentFactionRep\\\":45618.14880600499,\\\"targetRepForGettingToFavor\\\":13348.8089,\\\"time\\\":\\\"2023-07-11T12:48:04.959Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$12,712,609,677,232.98\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T14:27:37.793Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$13,879,516,076,246.31\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T14:27:41.820Z\\\"}}\"}}],[\"contracts/2023-07-11T17:29:34.923Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T17:29:34.923Z.txt\",\"text\":\"[{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-978804-BladeIndustries.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":36677,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 36677 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"analytics/2023-07-11-13-33-NWO-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-13-33-NWO-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T17:29:35.209Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T17:29:35.209Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-11T17:29:35.209Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T17:29:35.209Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Synthetic Heart\\\",\\\"NutriGen Implant\\\",\\\"The Red Pill\\\"],\\\"moneySpent\\\":{\\\"augments\\\":102280939975,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":33234729138126.324,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":27397945380899.656,\\\"lastSaved\\\":\\\"2023-07-11T18:33:24.220Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":188501.26059445622,\\\"targetRepForGettingToFavor\\\":125.34820000000002,\\\"time\\\":\\\"2023-07-11T17:53:45.496Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$438,057,836,945,340.10\\\",\\\"moneyRightNow\\\":\\\"$58,736,735,518,839.44\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$102,280,939,975.00\\\",\\\"time\\\":\\\"2023-07-11T18:33:20.148Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$438,057,836,945,340.10\\\",\\\"moneyRightNow\\\":\\\"$60,734,955,459,000.98\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$102,280,939,975.00\\\",\\\"time\\\":\\\"2023-07-11T18:33:24.219Z\\\"}}\"}}],[\"analytics/2023-07-11-15-02-OmniTekIncorporated-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-15-02-OmniTekIncorporated-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T18:52:58.390Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T18:52:58.390Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"OmniTek Incorporated\\\",\\\"firstTime\\\":\\\"2023-07-11T18:52:58.390Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T18:52:58.391Z\\\"},\\\"augsBought\\\":[\\\"Hydroflame Left Arm\\\",\\\"Xanipher\\\",\\\"PC Direct-Neural Interface\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"Combat Rib III\\\",\\\"Augmented Targeting III\\\",\\\"INFRARET Enhancement\\\"],\\\"moneySpent\\\":{\\\"augments\\\":2536876847832,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":158008228467501.8,\\\"repPurchased\\\":1011071000000},\\\"moneyLeft\\\":3118364148690.9688,\\\"lastSaved\\\":\\\"2023-07-11T20:02:57.795Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":462635.4572515714,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-11T20:02:53.557Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$569,163,675,385,318.20\\\",\\\"moneyRightNow\\\":\\\"$163,160,637,846,968.20\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$2,536,876,847,832.00\\\",\\\"time\\\":\\\"2023-07-11T20:02:53.557Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$569,163,675,385,318.20\\\",\\\"moneyRightNow\\\":\\\"$164,674,540,464,024.78\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$2,536,876,847,832.00\\\",\\\"time\\\":\\\"2023-07-11T20:02:57.609Z\\\"}}\"}}],[\"contracts/2023-07-11T18:33:27.509Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T18:33:27.509Z.txt\",\"text\":\"[{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-315110.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"640193486\\\",65],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 640193486\\\\n\\\\n You are also given a target number of 65. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"640193486\\\\\\\", 65]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"}]\"}}],[\"analytics/2023-07-11-16-04-BladeIndustries-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-16-04-BladeIndustries-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T20:16:37.898Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T20:16:37.898Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Blade Industries\\\",\\\"firstTime\\\":\\\"2023-07-11T20:16:37.898Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T20:16:37.899Z\\\"},\\\"augsBought\\\":[\\\"OmniTek InfoLoad\\\",\\\"HyperSight Corneal Implant\\\"],\\\"moneySpent\\\":{\\\"augments\\\":8100000000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":85747668719937.4,\\\"repPurchased\\\":4751786000000},\\\"moneyLeft\\\":13842981133569.93,\\\"lastSaved\\\":\\\"2023-07-11T21:04:19.385Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":462578.8960435048,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-11T21:04:14.492Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$530,007,418,535,109.50\\\",\\\"moneyRightNow\\\":\\\"$102,174,957,837,653.20\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$8,100,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T21:04:14.492Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$530,007,418,535,109.50\\\",\\\"moneyRightNow\\\":\\\"$104,350,535,853,507.34\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$8,100,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T21:04:18.527Z\\\"}}\"}}],[\"contracts/2023-07-11T21:04:22.607Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T21:04:22.607Z.txt\",\"text\":\"[{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-461331.cct\\\",\\\"type\\\":\\\"Compression II: LZ Decompression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"5QFg8D941R640269V6p8o0r4N989p8ok5ZyGC04NHYU621B92079\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following LZ-encoded string:\\\\n &nbsp; &nbsp; 5QFg8D941R640269V6p8o0r4N989p8ok5ZyGC04NHYU621B92079\\\\n Decode it and output the original string.\\\\n\\\\n Example: decoding '5aaabb450723abb' chunk-by-chunk\\\\n &nbsp; &nbsp; 5aaabb &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;aaabb\\\\n &nbsp; &nbsp; 5aaabb45 &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;aaabbaaab\\\\n &nbsp; &nbsp; 5aaabb450 &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;aaabbaaab\\\\n &nbsp; &nbsp; 5aaabb45072 &nbsp; &nbsp; &nbsp;-> &nbsp;aaabbaaababababa\\\\n &nbsp; &nbsp; 5aaabb450723abb &nbsp;-> &nbsp;aaabbaaababababaabb\\\"}]\"}}],[\"contracts/2023-07-11T22:03:07.982Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T22:03:07.982Z.txt\",\"text\":\"[{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-708430-Sector12.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-444562.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,1,0],[0,1,1,0,0,0,0,1,0,1,0,1],[0,0,1,1,0,0,0,1,0,1,0,0],[0,0,1,0,1,0,0,0,0,1,0,0],[0,0,0,0,0,1,1,1,0,0,1,1],[0,0,1,1,1,1,1,1,0,0,0,0],[0,1,0,0,1,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0,0,1,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1,1,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,1,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"}]\"}}],[\"contracts/2023-07-12T00:04:23.916Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-12T00:04:23.916Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-729164-TianDiHui.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[2],[7,6],[8,8,1],[2,7,3,5],[6,7,2,3,2],[1,5,3,1,3,1],[7,3,6,1,2,5,5],[2,4,9,7,5,9,9,9],[6,4,4,5,1,7,5,7,3],[6,4,8,1,7,8,7,6,7,5],[2,8,2,9,2,4,6,1,4,7,5]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,8,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,3,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,7,2,3,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,5,3,1,3,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,3,6,1,2,5,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,4,9,7,5,9,9,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[6,4,4,5,1,7,5,7,3],\\\\n&nbsp;&nbsp;&nbsp;[6,4,8,1,7,8,7,6,7,5],\\\\n&nbsp;&nbsp;[2,8,2,9,2,4,6,1,4,7,5]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-336770-NWO.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[3],[6,7],[8,1,4],[6,9,3,1],[8,4,5,6,3]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[8,1,4],\\\\n&nbsp;&nbsp;&nbsp;[6,9,3,1],\\\\n&nbsp;&nbsp;[8,4,5,6,3]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-723216-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,5,1,4,7,8,3,0,9,0,3,9,1,10,0,1,5,0,0,0,8,6,10,3,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,5,1,4,7,8,3,0,9,0,3,9,1,10,0,1,5,0,0,0,8,6,10,3,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-176172-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"88599944\\\",-84],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 88599944\\\\n\\\\n You are also given a target number of -84. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"88599944\\\\\\\", -84]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"the-hub\\\",\\\"name\\\":\\\"contract-271928.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"884220150\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 884220150\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"the-hub\\\",\\\"name\\\":\\\"contract-512438-Sector12.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1100101010011111\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1100101010011111' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-627073-TheBlackHand.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"280206263\\\",22],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 280206263\\\\n\\\\n You are also given a target number of 22. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"280206263\\\\\\\", 22]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-804374.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[1,10,3,0,1,6,0,10,0,10,9,1,6,3,1,0,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,10,3,0,1,6,0,10,0,10,9,1,6,3,1,0,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-713319-ECorp.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0],[0,1],[1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,\\\\n0,1,\\\\n1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"omnia\\\",\\\"name\\\":\\\"contract-939274.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":75,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 75 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"omnia\\\",\\\"name\\\":\\\"contract-95916.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[6,0,9,7,8,8,4,3,4,7,0,6,10,3,6,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 6,0,9,7,8,8,4,3,4,7,0,6,10,3,6,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-512616.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((a(a))()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((a(a))()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-142431-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,10],[11,16],[21,23],[24,29]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,10],[11,16],[21,23],[24,29]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-8446-NiteSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100000010000100111011101110101110011110111001110111000110011101\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100000010000100111011101110101110011110111001110111000110011101' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"global-pharm\\\",\\\"name\\\":\\\"contract-202045.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[2,5],[6,13],[15,22],[7,9],[15,16],[25,29]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[2,5],[6,13],[15,22],[7,9],[15,16],[25,29]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-778253.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,3,0,3,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,0,3,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-708430-Sector12.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-868385-ECorp.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"4811648251\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 4811648251\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-941799-NiteSec.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,6,1,9,5,2,10,5,6,3,7,2,3,7,7,3,1,6,1,5,9,0,4,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,6,1,9,5,2,10,5,6,3,7,2,3,7,7,3,1,6,1,5,9,0,4,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-670821.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[9,8],[5,3,1],[6,3,2,3],[8,3,8,4,7],[6,8,6,3,5,9],[1,6,2,8,3,1,3],[1,5,8,2,6,5,8,4],[6,1,4,2,4,7,1,6,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,3,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,3,2,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,3,8,4,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,8,6,3,5,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,6,2,8,3,1,3],\\\\n&nbsp;&nbsp;&nbsp;[1,5,8,2,6,5,8,4],\\\\n&nbsp;&nbsp;[6,1,4,2,4,7,1,6,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-348053-NWO.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,1,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,0,1,0,\\\\n0,0,0,0,1,0,0,\\\\n0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-585222-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1100101000010101\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1100101000010101' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-101786-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1110000010001011011111101001000001101110001101010000110101011100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1110000010001011011111101001000001101110001101010000110101011100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-111223.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[0,2,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,2,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-288053-BladeIndustries.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,2,1,2,3,0,5,4,1,1,2,3,1,0,0,1,4,3,3,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,2,1,2,3,0,5,4,1,1,2,3,1,0,0,1,4,3,3,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-367042.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"()(a))(a)aaa)((a(((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ()(a))(a)aaa)((a(((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-867548-ECorp.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[12,[[6,10],[0,6],[8,11],[6,8],[0,2],[4,11],[0,1],[1,5],[7,11],[0,9],[8,9],[2,7],[6,7],[4,9],[3,9]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [12,[[6,10],[0,6],[8,11],[6,8],[0,2],[4,11],[0,1],[1,5],[7,11],[0,9],[8,9],[2,7],[6,7],[4,9],[3,9]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 11. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-275073.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":155085324086,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 155085324086 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-444562.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,1,0],[0,1,1,0,0,0,0,1,0,1,0,1],[0,0,1,1,0,0,0,1,0,1,0,0],[0,0,1,0,1,0,0,0,0,1,0,0],[0,0,0,0,0,1,1,1,0,0,1,1],[0,0,1,1,1,1,1,1,0,0,0,0],[0,1,0,0,1,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0,0,1,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1,1,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,1,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"}]\"}}],[\"contracts/2023-07-12T21:20:44.230Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-12T21:20:44.230Z.txt\",\"text\":\"[{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-750531.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"3358\\\",53],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 3358\\\\n\\\\n You are also given a target number of 53. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"3358\\\\\\\", 53]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-461484.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,0],[0,0,0,0,1,0,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,0],[0,0,0,0,1,0,1],[0,1,1,0,0,0,0],[0,0,1,0,0,0,0],[1,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-523040.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-2,-9,-2,-9,4,2,10,-5,-2,3,7,2,0,6,5,-7,8,-1,-8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -2,-9,-2,-9,4,2,10,-5,-2,3,7,2,0,6,5,-7,8,-1,-8\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-741432.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[111,[1,2,3,4,6,7,8,11,12,15]],\\\"description\\\":\\\"How many different distinct ways can the number 111 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,3,4,6,7,8,11,12,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-149047-NiteSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"01101011010010011111101000011100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '01101011010010011111101000011100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-55508.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":194455156,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 194455156?\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-713464-BladeIndustries.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,-6,9,7,-4,8,0,-10,-10,-1,5,1,4,-1,9,1,6,-4,-4,6,8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,-6,9,7,-4,8,0,-10,-10,-1,5,1,4,-1,9,1,6,-4,-4,6,8\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-9550.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[2],[4,4],[9,6,8],[6,1,4,4],[3,3,1,5,5],[9,5,1,2,3,2],[4,4,4,3,1,2,1],[2,6,2,2,1,4,3,9],[8,7,3,3,6,7,5,7,4],[5,1,4,5,2,1,5,4,3,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,6,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,1,4,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,3,1,5,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,5,1,2,3,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,4,4,3,1,2,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[2,6,2,2,1,4,3,9],\\\\n&nbsp;&nbsp;&nbsp;[8,7,3,3,6,7,5,7,4],\\\\n&nbsp;&nbsp;[5,1,4,5,2,1,5,4,3,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-367378.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[7,[[1,3],[5,6],[2,4],[4,5],[2,3],[0,6]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [7,[[1,3],[5,6],[2,4],[4,5],[2,3],[0,6]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 6. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"}]\"}}],[\"contracts/2023-07-13T01:43:07.575Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-13T01:43:07.575Z.txt\",\"text\":\"[{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-313731.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[13,15],[2,12],[5,9],[5,14],[3,12],[5,8],[10,15],[11,15],[23,27],[16,25],[10,18],[9,11],[19,21],[13,15],[11,20],[21,23],[15,20]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[13,15],[2,12],[5,9],[5,14],[3,12],[5,8],[10,15],[11,15],[23,27],[16,25],[10,18],[9,11],[19,21],[13,15],[11,20],[21,23],[15,20]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-579159-NWO.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a()a))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a()a))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-922188.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"10170141214\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 10170141214\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-202147-Aevum.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"91119053\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 91119053\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-33073.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":97,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 97 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-158550.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"724124252400\\\",-100],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 724124252400\\\\n\\\\n You are also given a target number of -100. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"724124252400\\\\\\\", -100]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-409368-ECorp.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0000000010011001\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0000000010011001' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-613982-Aevum.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,1,1],[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,0,0,0],[0,0,0,1,0,0,0,0,0,0],[1,1,0,0,0,0,1,0,1,0],[0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,\\\\n0,1,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,1,0,0,1,1,\\\\n0,0,0,0,0,0,0,0,0,1,\\\\n0,0,0,0,0,0,0,0,0,1,\\\\n0,0,0,0,0,0,1,0,0,0,\\\\n0,0,0,1,0,0,0,0,0,0,\\\\n1,1,0,0,0,0,1,0,1,0,\\\\n0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-193179.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"yYDDDDDDDDDDDDDDGGrrrrQQQQQQQQQQQQQqqGGHHpHHppkWWoooooooooooooaaaggggggFF\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; yYDDDDDDDDDDDDDDGGrrrrQQQQQQQQQQQQQqqGGHHpHHppkWWoooooooooooooaaaggggggFF\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-454624.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":81239038,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 81239038?\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-670555.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":486152158932188,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 486152158932188 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-915610-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[9],[3,7],[1,3,1],[1,2,5,6],[6,9,9,4,8],[7,4,1,8,6,5],[6,8,5,2,5,5,3],[6,6,2,6,3,9,4,9],[6,3,4,8,5,5,4,6,7],[6,3,5,1,4,9,1,4,6,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,3,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,2,5,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,9,9,4,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,4,1,8,6,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,8,5,2,5,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[6,6,2,6,3,9,4,9],\\\\n&nbsp;&nbsp;&nbsp;[6,3,4,8,5,5,4,6,7],\\\\n&nbsp;&nbsp;[6,3,5,1,4,9,1,4,6,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"}]\"}}],[\"contracts/2023-07-13T11:39:25.939Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-13T11:39:25.939Z.txt\",\"text\":\"[]\"}}],[\"contracts/2023-07-13T12:06:58.738Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-13T12:06:58.738Z.txt\",\"text\":\"[{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-782097.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[7,[[0,5],[3,4],[2,4],[1,6],[3,5],[4,6],[1,4],[0,1]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [7,[[0,5],[3,4],[2,4],[1,6],[3,5],[4,6],[1,4],[0,1]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 6. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-773336.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,1,1,0],[0,0,0,0,1,0,1,1],[1,0,0,0,1,0,0,0],[0,0,0,1,0,0,1,0],[0,0,0,0,0,1,0,1],[0,0,0,0,0,1,1,0],[0,1,1,0,0,0,0,1],[0,0,0,0,0,1,0,0],[1,0,0,0,0,0,0,0],[1,0,1,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-432225-CyberSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":23,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 23 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-410663.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[3],[1,9],[5,4,4],[9,7,8,5],[2,2,3,8,2],[9,8,4,6,5,8],[8,1,1,7,6,5,3],[1,5,1,2,7,7,8,4],[6,2,3,2,9,9,1,5,3],[9,6,3,3,4,2,7,9,7,6],[4,2,2,3,1,5,9,6,3,4,5],[6,3,8,1,9,7,7,9,1,6,8,5]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,7,8,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,2,3,8,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,8,4,6,5,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,1,1,7,6,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,5,1,2,7,7,8,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,2,3,2,9,9,1,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[9,6,3,3,4,2,7,9,7,6],\\\\n&nbsp;&nbsp;&nbsp;[4,2,2,3,1,5,9,6,3,4,5],\\\\n&nbsp;&nbsp;[6,3,8,1,9,7,7,9,1,6,8,5]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"netlink\\\",\\\"name\\\":\\\"contract-795996-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":73,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 73 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-391770-TheBlackHand.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,0,1,0],[0,0,1,0,1,0,1,0,0],[0,0,0,1,0,0,1,0,0],[0,0,0,1,1,1,0,1,1],[0,0,1,0,1,1,0,1,0],[0,1,1,0,1,0,0,0,0],[1,1,0,1,0,1,1,0,1],[0,1,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,1,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,0,1,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-440346.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[15,22],[5,12],[13,21]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[15,22],[5,12],[13,21]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"nwo\\\",\\\"name\\\":\\\"contract-593748-NiteSec.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"666RB6666R1lbVoooooooooFiqXWXi68O5iANQyv4BRCCD4vXClee3MRmMoe3MRmRmR\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 666RB6666R1lbVoooooooooFiqXWXi68O5iANQyv4BRCCD4vXClee3MRmMoe3MRmRmR\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-178512-ECorp.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[0,1,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,0,1,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,1,0,\\\\n0,1,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-195663.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[1,0,0,4,2,7,6,3,5,5,10,10,3,0,9,7,10,2,0,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,0,0,4,2,7,6,3,5,5,10,10,3,0,9,7,10,2,0,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-233152.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[13,3],\\\"description\\\":\\\"You are in a grid with 13 rows and 3 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [13, 3]\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-510847-BladeIndustries.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"()((a((a(a)())(a()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ()((a((a(a)())(a()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-632773.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[23,29],[14,20],[24,30],[4,11],[4,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[23,29],[14,20],[24,30],[4,11],[4,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"}]\"}}],[\"contracts/2023-07-13T23:55:09.875Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-13T23:55:09.875Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-968783-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[72,[2,7,9,10,11,12,13,14,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 72 be written as a sum of integers contained in the set:\\\\n\\\\n [2,7,9,10,11,12,13,14,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-401139.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"MNFQerwPERzhONkIylMk83cIylMk83caaaauGSlk8QkMi6FmnFdgji6Fm73\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; MNFQerwPERzhONkIylMk83cIylMk83caaaauGSlk8QkMi6FmnFdgji6Fm73\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-151497-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11000000000000001010100100001111\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11000000000000001010100100001111' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-21990.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":41,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 41 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-377673.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[8,1,6,3,6,0,0,10,8,0,2,6,1,1,2,4,0,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 8,1,6,3,6,0,0,10,8,0,2,6,1,1,2,4,0,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-242228-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":33283024047570444,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 33283024047570444 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"contracts/2023-07-14T11:18:31.118Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-14T11:18:31.118Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-968783-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[72,[2,7,9,10,11,12,13,14,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 72 be written as a sum of integers contained in the set:\\\\n\\\\n [2,7,9,10,11,12,13,14,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-401139.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"MNFQerwPERzhONkIylMk83cIylMk83caaaauGSlk8QkMi6FmnFdgji6Fm73\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; MNFQerwPERzhONkIylMk83cIylMk83caaaauGSlk8QkMi6FmnFdgji6Fm73\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-307979.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-6,-3,-2,0,-8,-6,-9,-8,2,2,-4,-2,-5,-9,-1,-1,1,1,9,-10,-10,-4,-5,-9,9,2,-10,-3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -6,-3,-2,0,-8,-6,-9,-8,2,2,-4,-2,-5,-9,-1,-1,1,1,9,-10,-10,-4,-5,-9,9,2,-10,-3\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-170537-ECorp.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[0,4,8,0,1,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,4,8,0,1,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-395864.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"A55jrr6vvJJm00000055BBTTT66UDnnneeeeeeGGGGGGGGGimmVGGJJJJJJJJJJJJJhmYYYYYYYYYYll66FFeennk\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; A55jrr6vvJJm00000055BBTTT66UDnnneeeeeeGGGGGGGGGimmVGGJJJJJJJJJJJJJhmYYYYYYYYYYll66FFeennk\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-151497-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11000000000000001010100100001111\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11000000000000001010100100001111' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-424542-NWO.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[16,[1,3,4,5,7,9,10,11]],\\\"description\\\":\\\"How many different distinct ways can the number 16 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,5,7,9,10,11]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-21990.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":41,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 41 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-855488.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,6,2,0,2,1,2,3,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,6,2,0,2,1,2,3,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-377673.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[8,1,6,3,6,0,0,10,8,0,2,6,1,1,2,4,0,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 8,1,6,3,6,0,0,10,8,0,2,6,1,1,2,4,0,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-216499.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[5,9],\\\"description\\\":\\\"You are in a grid with 5 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [5, 9]\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-242228-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":33283024047570444,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 33283024047570444 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"contracts/2023-07-14T11:23:56.906Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-14T11:23:56.906Z.txt\",\"text\":\"[{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-243939.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[11,11],\\\"description\\\":\\\"You are in a grid with 11 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [11, 11]\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-912092.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,15],[14,15],[1,2],[7,15],[25,30],[7,14],[13,21],[18,22],[14,16],[23,27],[12,14],[21,24],[15,17],[4,13],[8,17],[16,17],[17,24],[2,10],[19,28]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,15],[14,15],[1,2],[7,15],[25,30],[7,14],[13,21],[18,22],[14,16],[23,27],[12,14],[21,24],[15,17],[4,13],[8,17],[16,17],[17,24],[2,10],[19,28]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"}]\"}}],[\"contracts/2023-07-14T12:44:38.173Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-14T12:44:38.173Z.txt\",\"text\":\"[{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-48939-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[26,[1,3,5,8,10,11,15,16,17]],\\\"description\\\":\\\"How many different distinct ways can the number 26 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,5,8,10,11,15,16,17]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-470979.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"2209419733\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 2209419733\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-234597.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[5,8],[1,1,1],[2,8,3,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[5,8],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1],\\\\n&nbsp;&nbsp;[2,8,3,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-448836-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"66hhhhhhhhhhhhhh22YttttttttttttDD666666666666CCKTxxxxxx2\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 66hhhhhhhhhhhhhh22YttttttttttttDD666666666666CCKTxxxxxx2\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-558999-NWO.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1110100010011110000011110010100011001110000000011010011111100101\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1110100010011110000011110010100011001110000000011010011111100101' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-190826.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(())a)())a)((a)()()(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (())a)())a)((a)()()(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-480856-CyberSec.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,5,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,5,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"}]\"}}],[\"analytics/2023-07-14-13-42-Chongqing-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-14-13-42-Chongqing-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T21:37:36.719Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T21:37:36.719Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"CyberSec\\\",\\\"firstTime\\\":\\\"2023-07-11T21:37:36.719Z\\\"},{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-14T02:08:45.834Z\\\"},{\\\"factionToMax\\\":\\\"Chongqing\\\",\\\"firstTime\\\":\\\"2023-07-14T12:31:21.811Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":18750,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T21:37:36.720Z\\\"},\\\"augsBought\\\":[\\\"Neurotrainer I\\\"],\\\"moneySpent\\\":{\\\"augments\\\":4000000,\\\"homeCores\\\":0,\\\"homeRam\\\":100683790.34535334,\\\"fluxGovernors\\\":124980102.68536004,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":21525525.99539931,\\\"lastSaved\\\":\\\"2023-07-14T18:42:23.498Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1250000,\\\"currentFactionRep\\\":1318070.89911256,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-14T11:18:31.206Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$3,672.06\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$2,509,649,050,250.00\\\",\\\"time\\\":\\\"2023-07-14T11:18:31.207Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$251,189,419.03\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$4,000,000.00\\\",\\\"time\\\":\\\"2023-07-14T18:42:23.494Z\\\"},\\\"amountOfRamIncrease\\\":null,\\\"amountOfCoresIncrease\\\":null}\"}}],[\"contracts/failure/defcomm-contract-100448.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/defcomm-contract-100448.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-100448.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[152,38,124,58,150,20,97],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 152,38,124,112,58,135,150,20,97,44,5\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":178}\"}}],[\"contracts/2023-07-14T17:49:59.207Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-14T17:49:59.207Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-950777-Chongqing.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[14,11],\\\"description\\\":\\\"You are in a grid with 14 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [14, 11]\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-92525-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"5149180136\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 5149180136\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-536552-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Xcxhhhhhhhhhh6uh6uhT6HV8V8V8V8V8tIV8V8tI8t5idt00l0H00lA0l0H00lARlARlARlA\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Xcxhhhhhhhhhh6uh6uhT6HV8V8V8V8V8tIV8V8tI8t5idt00l0H00lA0l0H00lARlARlARlA\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-58197.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[14,20],[13,18],[19,21],[17,25],[21,26],[5,11],[21,27],[15,25],[13,14],[2,12],[16,20]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[14,20],[13,18],[19,21],[17,25],[21,26],[5,11],[21,27],[15,25],[13,14],[2,12],[16,20]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-324718-Chongqing.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,7,4,1,3,3,2,1,4,2,1,4,2,0,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,7,4,1,3,3,2,1,4,2,1,4,2,0,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-512878-TheBlackHand.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[24,26],[18,21],[2,10],[7,11],[9,13],[16,23]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[24,26],[18,21],[2,10],[7,11],[9,13],[16,23]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-349696-BladeIndustries.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[2,9,4,0,1,4,0,2,0,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,9,4,0,1,4,0,2,0,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-43533-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"()(a))((()(()))))))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ()(a))((()(()))))))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-177119-Chongqing.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,3,2,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,2,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-72852.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":95,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 95 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-743761-TheBlackHand.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":9273759208585,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 9273759208585 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-210549-TianDiHui.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((()a((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((()a((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-16187.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":61,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 61 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-53046.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"oMMMhd3xnWCxnWCxnWWCxnWzc13m3m3m0Q7lb7m3Uh3Uh3eeeeeeeeemcKeeemcKL6KeeXMe7e6IEqemumum\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; oMMMhd3xnWCxnWCxnWWCxnWzc13m3m3m0Q7lb7m3Uh3Uh3eeeeeeeeemcKeeemcKL6KeeXMe7e6IEqemumum\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-712707.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[11,3],\\\"description\\\":\\\"You are in a grid with 11 rows and 3 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [11, 3]\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-684196-TianDiHui.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[8],[1,5],[5,6,3],[5,7,4,9],[4,8,7,6,9],[8,4,1,9,9,6],[2,7,2,8,1,1,1],[7,8,8,5,5,1,8,7],[4,2,4,2,1,2,9,2,3],[1,4,7,4,4,4,4,4,1,9]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,6,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,4,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,8,7,6,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,4,1,9,9,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,2,8,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,8,8,5,5,1,8,7],\\\\n&nbsp;&nbsp;&nbsp;[4,2,4,2,1,2,9,2,3],\\\\n&nbsp;&nbsp;[1,4,7,4,4,4,4,4,1,9]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-449584.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,9,8,9,0,6,2,1,10,0,6,6,5,9,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,9,8,9,0,6,2,1,10,0,6,6,5,9,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-100448.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[152,38,124,112,58,135,150,20,97,44,5],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 152,38,124,112,58,135,150,20,97,44,5\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-438064.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11011101010011011011100011010111\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11011101010011011011100011010111' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-511574-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11101010000000000000100100011110\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11101010000000000000100100011110' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-819392.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"BaJqIBE7eIBE7eIBE70170QgZ8QG0UH1VE1uX0UH1VE1uXFKHB67cR67cR67cR6cwwwwwR6\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; BaJqIBE7eIBE7eIBE70170QgZ8QG0UH1VE1uX0UH1VE1uXFKHB67cR67cR67cR6cwwwwwR6\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-204399.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":17,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 17 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-748358-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":359879067,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 359879067?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-482287.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,-7,-4,10,-8,6,-9,-2,0,6],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,-7,-4,10,-8,6,-9,-2,0,6\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-268040.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,1,1,2,2,5,1,0,4,1,1,2,4,2,2,4,4,0,6,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,1,1,2,2,5,1,0,4,1,1,2,4,2,2,4,4,0,6,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-386141-CyberSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":1726876013836,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 1726876013836 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-558415-NiteSec.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"6RjtC6RjtC6RjtZC6OpbtZC6OpNbtZC6OpNeqBqpCpONeqBqpDVjpD2vwWh7FwWh7FwWh7h7FwWh7h\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 6RjtC6RjtC6RjtZC6OpbtZC6OpNbtZC6OpNeqBqpCpONeqBqpDVjpD2vwWh7FwWh7FwWh7h7FwWh7h\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"}]\"}}],[\"contracts/2023-07-15T15:33:56.046Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-15T15:33:56.046Z.txt\",\"text\":\"[{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-342582.cct\\\",\\\"type\\\":\\\"Encryption I: Caesar Cipher\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"CLOUD MEDIA MACRO LOGIN LINUX\\\",14],\\\"description\\\":\\\"Caesar cipher is one of the simplest encryption technique. It is a type of substitution cipher in which each letter in the plaintext  is replaced by a letter some fixed number of positions down the alphabet. For example, with a left shift of 3, D would be replaced by A,  E would become B, and A would become X (because of rotation).\\\\n\\\\n You are given an array with two elements:\\\\n &nbsp;&nbsp;[\\\\\\\"CLOUD MEDIA MACRO LOGIN LINUX\\\\\\\", 14]\\\\n The first element is the plaintext, the second element is the left shift value.\\\\n\\\\n Return the ciphertext as uppercase string. Spaces remains the same.\\\"}]\"}}],[\"contracts/2023-07-15T15:58:32.433Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-15T15:58:32.433Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-913737-TianDiHui.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"166255161155\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 166255161155\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-350855-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-4,1,-9,-10,-8,1,-10,7,-8,5,10,7,-3,5,1,-10,9,-9,-5,2,0,-1,5,5,0,-5,-6,10],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -4,1,-9,-10,-8,1,-10,7,-8,5,10,7,-3,5,1,-10,9,-9,-5,2,0,-1,5,5,0,-5,-6,10\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-293360.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[9,6],[7,5,3],[5,3,4,2],[8,4,8,9,1],[9,6,1,5,7,3],[4,2,4,1,4,1,3],[8,1,3,4,8,8,2,7],[4,7,2,2,8,8,7,4,4],[1,4,3,6,6,1,4,1,5,8],[3,9,7,6,9,1,5,3,8,5,7],[6,6,6,9,4,6,5,6,1,2,5,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,3,4,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,4,8,9,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,6,1,5,7,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,2,4,1,4,1,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,1,3,4,8,8,2,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,7,2,2,8,8,7,4,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,4,3,6,6,1,4,1,5,8],\\\\n&nbsp;&nbsp;&nbsp;[3,9,7,6,9,1,5,3,8,5,7],\\\\n&nbsp;&nbsp;[6,6,6,9,4,6,5,6,1,2,5,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-781131.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0],[0,1,0,0,0,1,1,1,0,1],[0,0,0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,1],[0,1,0,0,1,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,1,0,0,0,0,0,\\\\n0,1,0,0,0,1,1,1,0,1,\\\\n0,0,0,0,0,0,1,1,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,1,1,\\\\n0,1,0,0,1,0,0,0,0,0,\\\\n0,0,0,1,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-915824.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[10,16],[1,9],[7,13],[5,12],[7,10],[1,7],[11,14],[23,31],[16,24]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[10,16],[1,9],[7,13],[5,12],[7,10],[1,7],[11,14],[23,31],[16,24]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-925739.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[3,10],[6,16],[21,26],[23,25],[12,17],[9,14],[3,8],[18,22],[13,22],[20,22],[12,19],[12,21]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[3,10],[6,16],[21,26],[23,25],[12,17],[9,14],[3,8],[18,22],[13,22],[20,22],[12,19],[12,21]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"}]\"}}],[\"contracts/failure/catalyst-contract-299807-TianDiHui.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/catalyst-contract-299807-TianDiHui.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-299807-TianDiHui.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[27,101,17,115,9,135,64,195,189,196],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 27,70,101,47,17,115,9,135,64,195,189,196,174,11,8\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":258}\"}}],[\"contracts/failure/syscore-contract-62815-OmniTekIncorporated.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/syscore-contract-62815-OmniTekIncorporated.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-62815-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[17,186,44,129,73,176,46,194,37,196,97,174,102,159,143,193,92,172,75,165,10,108],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 17,186,55,44,51,129,73,176,46,194,91,37,48,157,196,133,113,97,150,174,163,102,159,143,172,193,92,124,170,172,165,149,75,99,165,10,108,49\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":328}\"}}],[\"contracts/2023-07-16T00:10:02.517Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-16T00:10:02.517Z.txt\",\"text\":\"[{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-497299-Sector12.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"aA64ZN0A64az0A64az0A62w0A62w0eYC62wYCNMY3666666sX0d5tttttttKdputtYgaputtYgaoSuty\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; aA64ZN0A64az0A64az0A62w0A62w0eYC62wYCNMY3666666sX0d5tttttttKdputtYgaputtYgaoSuty\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-62815-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[17,186,55,44,51,129,73,176,46,194,91,37,48,157,196,133,113,97,150,174,163,102,159,143,172,193,92,124,170,172,165,149,75,99,165,10,108,49],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 17,186,55,44,51,129,73,176,46,194,91,37,48,157,196,133,113,97,150,174,163,102,159,143,172,193,92,124,170,172,165,149,75,99,165,10,108,49\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-744706.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[168,[1,3,4,6,7,8,9,10,13,14,15,19]],\\\"description\\\":\\\"How many different distinct ways can the number 168 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,6,7,8,9,10,13,14,15,19]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-343293-Aevum.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,0,8,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,0,8,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-928249-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"21246484\\\",37],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 21246484\\\\n\\\\n You are also given a target number of 37. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"21246484\\\\\\\", 37]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-882299.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[8],[1,4],[4,4,9]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[8],\\\\n&nbsp;&nbsp;&nbsp;[1,4],\\\\n&nbsp;&nbsp;[4,4,9]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-751483-NWO.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"LgzLzLzLzLzLBOyzLB8OvisLB8O8O8O8O8Oq7dC48jNxpxpxpxpxpxpxxpxpXxpXxpXxpXHZXxpXxpX\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; LgzLzLzLzLzLBOyzLB8OvisLB8O8O8O8O8Oq7dC48jNxpxpxpxpxpxpxxpxpXxpXxpXxpXHZXxpXxpX\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-327756.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"ggggggggjjjjjjjjjCCCCCCCCCC7IIiiVVVVVttttttttttttuXXjjjjddyyyyyyyyQQQQ\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; ggggggggjjjjjjjjjCCCCCCCCCC7IIiiVVVVVttttttttttttuXXjjjjddyyyyyyyyQQQQ\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-297619.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[33,[1,3,4,6,7,8,12,14,15,19]],\\\"description\\\":\\\"How many different distinct ways can the number 33 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,6,7,8,12,14,15,19]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-500495.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,7],[5,7,4],[2,2,8,1],[5,2,5,1,1],[5,4,1,2,2,6],[1,4,5,7,6,1,6],[7,8,3,7,9,3,6,7],[7,2,6,4,4,1,4,6,7],[4,1,8,4,4,9,1,6,4,2],[9,5,2,3,8,7,4,4,4,2,9],[1,1,1,8,8,7,6,1,2,5,3,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,2,8,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,2,5,1,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,1,2,2,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,4,5,7,6,1,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,8,3,7,9,3,6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,2,6,4,4,1,4,6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,1,8,4,4,9,1,6,4,2],\\\\n&nbsp;&nbsp;&nbsp;[9,5,2,3,8,7,4,4,4,2,9],\\\\n&nbsp;&nbsp;[1,1,1,8,8,7,6,1,2,5,3,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-563784-BitRunners.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a))())a((a)a()a(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a))())a((a)a()a(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-975255.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"6683199557\\\",38],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 6683199557\\\\n\\\\n You are also given a target number of 38. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"6683199557\\\\\\\", 38]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-445487-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"ZZZZZmllllll88jjJwggggggdddMxc0111111111AAAA22222222227SSvp66qqqqqggnnDiiVVI\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; ZZZZZmllllll88jjJwggggggdddMxc0111111111AAAA22222222227SSvp66qqqqqggnnDiiVVI\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-96034.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":45,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 45 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-979969-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"39738\\\",64],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 39738\\\\n\\\\n You are also given a target number of 64. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"39738\\\\\\\", 64]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-299807-TianDiHui.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[27,70,101,47,17,115,9,135,64,195,189,196,174,11,8],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 27,70,101,47,17,115,9,135,64,195,189,196,174,11,8\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"}]\"}}],[\"analytics/2023-07-16-07-01-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-16-07-01-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-14T18:42:29.092Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-14T18:42:29.092Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Chongqing\\\",\\\"firstTime\\\":\\\"2023-07-14T18:42:29.093Z\\\"},{\\\"factionToMax\\\":\\\"NiteSec\\\",\\\"firstTime\\\":\\\"2023-07-14T19:25:47.953Z\\\"},{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-16T00:08:31.564Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":37500,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-14T18:42:29.093Z\\\"},\\\"augsBought\\\":[\\\"BitRunners Neurolink\\\",\\\"Artificial Bio-neural Network Implant\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"PCMatrix\\\",\\\"Neural Accelerator\\\",\\\"Neuroreceptor Management Implant\\\",\\\"CashRoot Starter Kit\\\",\\\"Nanofiber Weave\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Nuoptimal Nootropic Injector Implant\\\"],\\\"moneySpent\\\":{\\\"augments\\\":216402166430.733,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":695822032676.5732,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":124475476249.71924,\\\"lastSaved\\\":\\\"2023-07-16T12:01:43.917Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":112500.98808245687,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-15T07:50:20.980Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$4,889,904,294.25\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$21,378,646,141.86\\\",\\\"time\\\":\\\"2023-07-15T07:50:20.981Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$1,036,699,675,357.03\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$216,402,166,430.73\\\",\\\"time\\\":\\\"2023-07-16T12:01:43.912Z\\\"}}\"}}],[\"contracts/2023-07-16T12:01:46.791Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-16T12:01:46.791Z.txt\",\"text\":\"[{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-247364-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[144,20,5,28,21,119,82,182,65,121,95,5,138,140,90,143,191,73,181,131,13,136,2,145,160,65,99,117,98,187,164,135,2,98,188,25,15,142,107,84,119,127],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 144,20,5,28,21,119,82,182,65,121,95,5,138,140,90,143,191,73,181,131,13,136,2,145,160,65,99,117,98,187,164,135,2,98,188,25,15,142,107,84,119,127\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"}]\"}}],[\"contracts/2023-07-16T13:38:32.194Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-16T13:38:32.194Z.txt\",\"text\":\"[{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-47298.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,-8,-10,2,-7,6,-10,3,4,5,-1,2,-9,6,-7,-6,-6,8,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 4,-8,-10,2,-7,6,-10,3,4,5,-1,2,-9,6,-7,-6,-6,8,-7\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-118250.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010000000000000000000000001001111100111011001111010010000101011\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010000000000000000000000001001111100111011001111010010000101011' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-837393-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[5,0,0,5,0,6,4,0,2,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 5,0,0,5,0,6,4,0,2,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-313690.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[1,3,3,3,5,5,2,3,2,1,0,1,4,1,5,0,3,1,1,2,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,3,3,3,5,5,2,3,2,1,0,1,4,1,5,0,3,1,1,2,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-676548-CyberSec.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")(())()aa))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )(())()aa))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-116290.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,4,6,-6,0,6,-8,-7,-1,7,8,-4,-9,9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,4,6,-6,0,6,-8,-7,-1,7,8,-4,-9,9\\\"}]\"}}],[\"contracts/failure/aevum-police-contract-796033-BladeIndustries.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/aevum-police-contract-796033-BladeIndustries.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-796033-BladeIndustries.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[168,20,198,32,156,13,106,17,148,85,196,76,152,109,190,78,182,11,96,65,148,73,192,44,197,3,147,115,130],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":359}\"}}],[\"contracts/failure/phantasy-contract-768611.cct-AlgorithmicStockTraderI.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/phantasy-contract-768611.cct-AlgorithmicStockTraderI.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-768611.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader I\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[44,148,32,191,62,135,29,79,33,122,36,122,7,116,4,128,28,123,6,163,138,154,34,174,151,157],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89\\\\n\\\\n Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\\"},\\\"wrongResult\\\":159}\"}}],[\"contracts/2023-07-16T20:19:53.413Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-16T20:19:53.413Z.txt\",\"text\":\"[{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-768611.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader I\\\",\\\"attemptsLeft\\\":4,\\\"input\\\":[44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89\\\\n\\\\n Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\\"},{\\\"server\\\":\\\"crush-fitness\\\",\\\"name\\\":\\\"contract-687545.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,1,0,0,0,0,1,1,1,0],[0,0,0,1,1,0,0,1,1,0,0],[0,0,0,1,0,0,1,0,1,1,0],[0,1,0,0,0,1,0,1,0,0,1],[1,1,0,1,0,0,0,0,1,1,0],[0,0,0,1,0,1,0,1,0,1,1],[0,0,1,1,1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1],[1,1,0,1,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,1,0,0,0,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,1,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,1,0,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,1,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-939391.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"62285191\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 62285191\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-972324.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"NNNNNNNNNNNNNNPYYYYYYYY2nnnggw4WWWWWWW66666666666666eeQQKKEEERRP535tt\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; NNNNNNNNNNNNNNPYYYYYYYY2nnnggw4WWWWWWW66666666666666eeQQKKEEERRP535tt\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-697251.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[7,2,8,5,4,3,0,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 7,2,8,5,4,3,0,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-202226.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":637990270,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 637990270?\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-558172.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)a)(()()()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)a)(()()()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-218953-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((((a))a()))()((((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((((a))a()))()((((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-796033-BladeIndustries.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-845127-BachmanAssociates.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":1625456266023211,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 1625456266023211 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"contracts/failure/run4theh111z-contract-988917.cct-AlgorithmicStockTraderIV.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/run4theh111z-contract-988917.cct-AlgorithmicStockTraderIV.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-988917.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,[71,149,42,177,70,119,53,125,21,101,37,117,81,133,83,128,84,105]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [3, [71,129,131,149,117,42,177,72,70,119,80,53,113,125,21,101,61,37,40,117,81,106,133,83,128,84,105]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},\\\"wrongResult\\\":295}\"}}],[\"contracts/2023-07-17T04:41:28.605Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-17T04:41:28.605Z.txt\",\"text\":\"[{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-43393.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,1,0,0,0,0,0],[0,0,1,0,1,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,1,0,0,0,0,0,\\\\n0,0,1,0,1,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-768611.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader I\\\",\\\"attemptsLeft\\\":4,\\\"input\\\":[44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89\\\\n\\\\n Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\\"},{\\\"server\\\":\\\"crush-fitness\\\",\\\"name\\\":\\\"contract-687545.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,1,0,0,0,0,1,1,1,0],[0,0,0,1,1,0,0,1,1,0,0],[0,0,0,1,0,0,1,0,1,1,0],[0,1,0,0,0,1,0,1,0,0,1],[1,1,0,1,0,0,0,0,1,1,0],[0,0,0,1,0,1,0,1,0,1,1],[0,0,1,1,1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1],[1,1,0,1,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,1,0,0,0,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,1,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,1,0,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,1,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-939391.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"62285191\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 62285191\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-972324.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"NNNNNNNNNNNNNNPYYYYYYYY2nnnggw4WWWWWWW66666666666666eeQQKKEEERRP535tt\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; NNNNNNNNNNNNNNPYYYYYYYY2nnnggw4WWWWWWW66666666666666eeQQKKEEERRP535tt\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-697251.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[7,2,8,5,4,3,0,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 7,2,8,5,4,3,0,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-202226.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":637990270,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 637990270?\\\"},{\\\"server\\\":\\\"max-hardware\\\",\\\"name\\\":\\\"contract-129622.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"71934678\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 71934678\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-558172.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)a)(()()()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)a)(()()()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-218953-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((((a))a()))()((((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((((a))a()))()((((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-157685-CyberSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11100110000001001111011110000011\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11100110000001001111011110000011' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-796033-BladeIndustries.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-274937-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":675368096,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 675368096?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-21596.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[13,[[6,9],[3,12],[0,8],[2,9],[10,12],[1,3],[4,11],[0,10],[7,9],[2,7],[7,11],[5,9],[4,5],[10,11],[8,11],[2,3],[9,12],[6,8],[1,7],[3,11],[1,4],[0,3],[3,5]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [13,[[6,9],[3,12],[0,8],[2,9],[10,12],[1,3],[4,11],[0,10],[7,9],[2,7],[7,11],[5,9],[4,5],[10,11],[8,11],[2,3],[9,12],[6,8],[1,7],[3,11],[1,4],[0,3],[3,5]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 12. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-659175-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,1,1,0,0],[0,0,0,0,0,0,1,0,0],[0,1,0,0,0,1,0,0,0],[1,0,1,0,0,0,0,0,0],[1,0,1,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-988917.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[3,[71,129,131,149,117,42,177,72,70,119,80,53,113,125,21,101,61,37,40,117,81,106,133,83,128,84,105]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [3, [71,129,131,149,117,42,177,72,70,119,80,53,113,125,21,101,61,37,40,117,81,106,133,83,128,84,105]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-960938-NWO.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-8,-4,10,-10,-7,5,1,1,0],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -8,-4,10,-10,-7,5,1,1,0\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-845127-BachmanAssociates.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":1625456266023211,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 1625456266023211 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"analytics/2023-07-17-06-06-Daedalus-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-17-06-06-Daedalus-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-16T15:53:06.295Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-16T15:53:06.295Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Bachman & Associates\\\",\\\"firstTime\\\":\\\"2023-07-16T15:53:06.295Z\\\"},{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-17T01:31:18.498Z\\\"},{\\\"factionToMax\\\":\\\"Daedalus\\\",\\\"firstTime\\\":\\\"2023-07-17T04:41:47.261Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":0.46197959594147,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-16T15:53:06.295Z\\\"},\\\"augsBought\\\":[\\\"Hydroflame Left Arm\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Xanipher\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\",\\\"The Red Pill\\\"],\\\"moneySpent\\\":{\\\"augments\\\":3024870935197.57,\\\"homeCores\\\":3164062500000,\\\"homeRam\\\":9996095182970.555,\\\"fluxGovernors\\\":712114491862.0477,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":164737053720.6671,\\\"lastSaved\\\":\\\"2023-07-17T11:06:19.607Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":2500000,\\\"currentFactionRep\\\":2500111.4825186455,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-17T11:06:15.484Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$9,434,446,404,033.54\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$3,024,870,935,197.57\\\",\\\"time\\\":\\\"2023-07-17T11:06:15.484Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$17,061,880,163,750.84\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$3,024,870,935,197.57\\\",\\\"time\\\":\\\"2023-07-17T11:06:19.605Z\\\"},\\\"amountOfRamIncrease\\\":null,\\\"amountOfCoresIncrease\\\":null}\"}}],[\"contracts/2023-07-17T11:06:22.474Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-17T11:06:22.474Z.txt\",\"text\":\"[]\"}}],[\"contracts/failure/zer0-contract-752976-Chongqing.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/zer0-contract-752976-Chongqing.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-752976-Chongqing.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[79,180,45,175,10,141,24,186,19,194,44,191,25,190,33,200,11,91,37,176,31,50,35,191],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 79,180,111,45,175,35,10,141,104,80,64,24,72,186,19,94,118,138,194,44,191,25,190,33,200,11,91,37,176,176,31,50,35,191,114,95\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":357}\"}}],[\"contracts/failure/icarus-contract-151400.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/icarus-contract-151400.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-151400.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,169,49,195,51,185,20,161,31,159,45,191,44,165,7,158,16,199,3,162,70,139,1,185],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 8,39,169,89,49,95,195,51,55,185,183,20,117,161,31,144,159,45,170,191,44,165,156,101,7,103,158,106,105,26,16,143,199,118,71,5,3,73,92,162,70,139,1,15,185\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":376}\"}}],[\"contracts/2023-07-17T11:37:10.279Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-17T11:37:10.279Z.txt\",\"text\":\"[{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-466235-CyberSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":12,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 12 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-114396-BladeIndustries.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-10,-4,-5,-4,-8,9,0,1,1,-2,3,6,7,3,-4,-7,5,-8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -10,-4,-5,-4,-8,9,0,1,1,-2,3,6,7,3,-4,-7,5,-8\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-170562.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":203303262363,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 203303262363 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-617759.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,3],\\\"description\\\":\\\"You are in a grid with 4 rows and 3 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [4, 3]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-668090.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[2,11],[21,28],[3,7],[3,5]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[2,11],[21,28],[3,7],[3,5]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-752976-Chongqing.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[79,180,111,45,175,35,10,141,104,80,64,24,72,186,19,94,118,138,194,44,191,25,190,33,200,11,91,37,176,176,31,50,35,191,114,95],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 79,180,111,45,175,35,10,141,104,80,64,24,72,186,19,94,118,138,194,44,191,25,190,33,200,11,91,37,176,176,31,50,35,191,114,95\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-982890-CyberSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[13,11],\\\"description\\\":\\\"You are in a grid with 13 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [13, 11]\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-700283-TianDiHui.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":65,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 65 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-879575-NWO.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[24,30],[4,13],[3,7],[3,13],[15,22],[7,16]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[24,30],[4,13],[3,7],[3,13],[15,22],[7,16]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-139555.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"X2yt0amgB78Y78Y78kY78kY78kY00000RaRuvrbbbbbbbbrbiiiiiiiiiiDirdp\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; X2yt0amgB78Y78Y78kY78kY78kY00000RaRuvrbbbbbbbbrbiiiiiiiiiiDirdp\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-507336.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":177120045,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 177120045 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-284449.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"2715148182\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 2715148182\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"nwo\\\",\\\"name\\\":\\\"contract-853005-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[10,0,5,8,0,0,8,5,0,0,7,9,0,8,10,7,10,9,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 10,0,5,8,0,0,8,5,0,0,7,9,0,8,10,7,10,9,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"nwo\\\",\\\"name\\\":\\\"contract-945507-BladeIndustries.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,4,0,2,10,0,10,6,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,4,0,2,10,0,10,6,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-78126.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[11,18],[12,21],[4,13],[2,6],[22,26],[10,19],[3,11],[17,23],[4,6],[10,12],[17,22],[15,23],[24,27],[21,30],[15,17],[6,11],[15,21]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[11,18],[12,21],[4,13],[2,6],[22,26],[10,19],[3,11],[17,23],[4,6],[10,12],[17,22],[15,23],[24,27],[21,30],[15,17],[6,11],[15,21]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-180242.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[9,18],[25,27],[24,30],[16,17],[25,31],[4,14],[13,17],[25,27],[25,29],[16,21],[14,19],[24,34],[21,30],[18,22]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[9,18],[25,27],[24,30],[16,17],[25,31],[4,14],[13,17],[25,27],[25,29],[16,21],[14,19],[24,34],[21,30],[18,22]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-129080.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[7,10,0,10,10,10,7,0,5,0,10,6,7,0,5,8,9,6,0,1,7,5,5,0,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 7,10,0,10,10,10,7,0,5,0,10,6,7,0,5,8,9,6,0,1,7,5,5,0,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"the-hub\\\",\\\"name\\\":\\\"contract-183995.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"59391098\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 59391098\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-151400.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[8,39,169,89,49,95,195,51,55,185,183,20,117,161,31,144,159,45,170,191,44,165,156,101,7,103,158,106,105,26,16,143,199,118,71,5,3,73,92,162,70,139,1,15,185],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 8,39,169,89,49,95,195,51,55,185,183,20,117,161,31,144,159,45,170,191,44,165,156,101,7,103,158,106,105,26,16,143,199,118,71,5,3,73,92,162,70,139,1,15,185\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"}]\"}}],[\"analytics/2023-07-18-19-23-CyberSec-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-18-19-23-CyberSec-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-17T15:01:59.454Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-17T15:01:59.454Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"CyberSec\\\",\\\"firstTime\\\":\\\"2023-07-17T15:01:59.454Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":56250,\\\"currentFactionRep\\\":9575.57211897485,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-17T15:01:59.454Z\\\"},\\\"augsBought\\\":[\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"BitWire\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neurotrainer I\\\",\\\"Wired Reflexes\\\"],\\\"moneySpent\\\":{\\\"augments\\\":1527220125,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":105853232.25,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":180990271.22235352,\\\"lastSaved\\\":\\\"2023-07-18T00:23:57.041Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":56250,\\\"currentFactionRep\\\":56366.304164084075,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-18T00:17:40.293Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$417,766,412.90\\\",\\\"moneyRightNow\\\":\\\"$15,180.11\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,527,220,125.00\\\",\\\"time\\\":\\\"2023-07-18T00:17:40.297Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$427,568,338.06\\\",\\\"moneyRightNow\\\":\\\"$1,814,063,628.47\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,527,220,125.00\\\",\\\"time\\\":\\\"2023-07-18T00:23:57.034Z\\\"}}\"}}],[\"contracts/2023-07-18T00:23:59.915Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-18T00:23:59.915Z.txt\",\"text\":\"[]\"}}],[\"contracts/failure/joesguns-contract-665303-BachmanAssociates.cct-AlgorithmicStockTraderIV.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/joesguns-contract-665303-BachmanAssociates.cct-AlgorithmicStockTraderIV.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-665303-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,[27,130,53,133,11,164,19,177,78,176,28,137,108,178,11,165,55,138,84,100,14,124,6,159,46,161,2,122]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [9, [27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},\\\"wrongResult\\\":1216}\"}}],[\"contracts/2023-07-18T11:38:52.713Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-18T11:38:52.713Z.txt\",\"text\":\"[{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-665303-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[9,[27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [9, [27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-351757-TianDiHui.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[153,[2,5,6,9,10,11,14,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 153 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,14,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-839291-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":78,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 78 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-872421.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"9909267137\\\",40],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 9909267137\\\\n\\\\n You are also given a target number of 40. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"9909267137\\\\\\\", 40]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-984796-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[37,[5,6,8,9,11,12,13,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 37 be written as a sum of integers contained in the set:\\\\n\\\\n [5,6,8,9,11,12,13,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"}]\"}}],[\"contracts/2023-07-19T01:25:07.967Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-19T01:25:07.967Z.txt\",\"text\":\"[{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-665303-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[9,[27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [9, [27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-351757-TianDiHui.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[153,[2,5,6,9,10,11,14,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 153 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,14,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-839291-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":78,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 78 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-872421.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"9909267137\\\",40],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 9909267137\\\\n\\\\n You are also given a target number of 40. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"9909267137\\\\\\\", 40]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-984796-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[37,[5,6,8,9,11,12,13,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 37 be written as a sum of integers contained in the set:\\\\n\\\\n [5,6,8,9,11,12,13,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"}]\"}}],[\"contracts/2023-07-19T11:36:24.027Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-19T11:36:24.027Z.txt\",\"text\":\"[{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-281744.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,9,4,10,-4,1,8,3,-5,10,-10,2,-10,-1,10,8,1,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 8,9,4,10,-4,1,8,3,-5,10,-10,2,-10,-1,10,8,1,-5\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-665303-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[9,[27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [9, [27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-351757-TianDiHui.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[153,[2,5,6,9,10,11,14,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 153 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,14,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-800650-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"355877\\\",8],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 355877\\\\n\\\\n You are also given a target number of 8. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"355877\\\\\\\", 8]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-839291-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":78,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 78 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-280659-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"p4zroASVvUEuOp7BC5vrN1rKSMIKSMIKSMWSH7w6RsI5AQXaawRwntUtUtUtUtcJty2dUtcJfty2mtzty\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; p4zroASVvUEuOp7BC5vrN1rKSMIKSMIKSMWSH7w6RsI5AQXaawRwntUtUtUtUtcJty2dUtcJfty2mtzty\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-872421.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"9909267137\\\",40],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 9909267137\\\\n\\\\n You are also given a target number of 40. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"9909267137\\\\\\\", 40]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-984796-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[37,[5,6,8,9,11,12,13,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 37 be written as a sum of integers contained in the set:\\\\n\\\\n [5,6,8,9,11,12,13,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"}]\"}}],[\"analytics/2023-07-19-12-48-Chongqing-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-19-12-48-Chongqing-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-18T12:23:04.481Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-18T12:23:04.481Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Chongqing\\\",\\\"firstTime\\\":\\\"2023-07-18T12:23:04.481Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":0.0538667088,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-18T12:23:04.481Z\\\"},\\\"augsBought\\\":[\\\"Neuralstimulator\\\",\\\"Neuregen Gene Modification\\\",\\\"Speech Processor Implant\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"Speech Enhancement\\\"],\\\"moneySpent\\\":{\\\"augments\\\":13703262375,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":4830547361.117641,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":1096928387.9418674,\\\"lastSaved\\\":\\\"2023-07-19T17:48:45.411Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":206240.08301470877,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-19T11:36:24.281Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$4,160,871,565.61\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$12,090,540,000.00\\\",\\\"time\\\":\\\"2023-07-19T11:36:24.283Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$877,193,741.98\\\",\\\"moneyRightNow\\\":\\\"$19,630,738,124.06\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$13,703,262,375.00\\\",\\\"time\\\":\\\"2023-07-19T17:48:45.405Z\\\"}}\"}}],[\"contracts/2023-07-19T17:48:48.121Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-19T17:48:48.121Z.txt\",\"text\":\"[{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-482557.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0],[0,0,0,0,0,0,1],[0,0,0,1,0,1,0],[0,1,0,1,1,0,0],[0,1,0,1,0,0,0],[0,0,0,0,0,0,0],[1,0,0,0,1,0,0],[1,0,0,0,1,0,0],[1,0,1,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-928339.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[2,7],[1,6,8],[6,6,2,3],[9,3,9,2,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,6,8],\\\\n&nbsp;&nbsp;&nbsp;[6,6,2,3],\\\\n&nbsp;&nbsp;[9,3,9,2,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-683482-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"429563\\\",88],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 429563\\\\n\\\\n You are also given a target number of 88. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"429563\\\\\\\", 88]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-101955-CyberSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[1,0,0,0,0],[0,0,0,1,0],[0,0,0,0,0],[0,0,1,1,0],[1,0,0,0,0],[1,1,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n1,0,0,0,0,\\\\n0,0,0,1,0,\\\\n0,0,0,0,0,\\\\n0,0,1,1,0,\\\\n1,0,0,0,0,\\\\n1,1,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"max-hardware\\\",\\\"name\\\":\\\"contract-363580.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((a(a)aaaa(a()))(a(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((a(a)aaaa(a()))(a(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-686649-ECorp.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,0,0,0],[0,1,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,1,0,0,0,0,\\\\n0,1,0,0,0,0,1,0,0,\\\\n0,0,0,0,0,0,0,1,0,\\\\n0,0,0,0,0,1,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,1,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,1,0,0,0,0,0,0,1,\\\\n0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-580876.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")((((a(())a()))aa\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )((((a(())a()))aa\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-833725-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0],[0,0,1,0,1,1,0],[0,0,0,0,0,1,0],[0,1,1,0,1,0,0],[0,0,0,0,0,1,1],[1,1,1,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-969263-CyberSec.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,0,0,0,0,1],[0,0,0,0,0,1,1,1,0,1,1],[0,0,0,0,0,1,0,0,0,0,0],[0,1,1,0,0,0,0,0,0,0,0],[1,1,1,0,0,1,0,0,0,0,1],[0,0,1,1,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0],[0,1,0,1,0,1,1,0,1,1,0],[1,0,0,0,1,0,0,0,0,0,0],[0,1,0,1,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,0,0,1,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,1,1,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-584719.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[1,0,3,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,0,3,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-860676.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,1],[0,0,0,1,0,1],[0,0,1,0,0,1],[0,0,1,1,0,0],[0,0,1,0,0,1],[0,0,0,0,0,0],[0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-90682-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0110000010010000\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0110000010010000' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-951732.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[1,2],[25,26],[6,7],[18,19],[19,21],[11,18],[17,19],[23,30]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[1,2],[25,26],[6,7],[18,19],[19,21],[11,18],[17,19],[23,30]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-875972.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[27,[1,4,6,7,9,10,11,12,13]],\\\"description\\\":\\\"How many different distinct ways can the number 27 be written as a sum of integers contained in the set:\\\\n\\\\n [1,4,6,7,9,10,11,12,13]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-795055-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[19,28],[20,29],[15,16],[12,14],[3,7],[15,19],[12,16]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[19,28],[20,29],[15,16],[12,14],[3,7],[15,19],[12,16]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"stormtech\\\",\\\"name\\\":\\\"contract-600398-ECorp.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"AqLFevqLFcp7oyIwFcp7oyXpcp7NIBrTH6xlI6xlI6xl5ljxlexxle2zIGbibibibM02Qj4qiwdaMQ6M\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; AqLFevqLFcp7oyIwFcp7oyXpcp7NIBrTH6xlI6xlI6xl5ljxlexxle2zIGbibibibM02Qj4qiwdaMQ6M\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-576645-NiteSec.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[8,[[1,5],[2,5],[5,6],[5,7],[1,3],[0,3],[5,6],[4,7],[2,3],[2,4],[1,4]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [8,[[1,5],[2,5],[5,6],[5,7],[1,3],[0,3],[5,6],[4,7],[2,3],[2,4],[1,4]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 7. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-495044.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[3,9],[3,12],[20,22],[23,25],[23,31],[12,17],[13,16],[4,11],[10,19]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[3,9],[3,12],[20,22],[23,25],[23,31],[12,17],[13,16],[4,11],[10,19]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-15650-CyberSec.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[2,5,9,3,8,7,4,0,10,5,9,5,7,10,5,3,8,2,9,10,7,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,5,9,3,8,7,4,0,10,5,9,5,7,10,5,3,8,2,9,10,7,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-313946-BladeIndustries.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[13,5],\\\"description\\\":\\\"You are in a grid with 13 rows and 5 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [13, 5]\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-523738-TheBlackHand.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"52204140202\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 52204140202\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-202598-CyberSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[175,[3,4,5,6,7,9,10,12,15]],\\\"description\\\":\\\"How many different distinct ways can the number 175 be written as a sum of integers contained in the set:\\\\n\\\\n [3,4,5,6,7,9,10,12,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-39560.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[14,10],\\\"description\\\":\\\"You are in a grid with 14 rows and 10 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [14, 10]\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-808154-CyberSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":31,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 31 be written as a sum of at least two positive integers?\\\"}]\"}}],[\"analytics/2023-07-20-04-20-NiteSec-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-20-04-20-NiteSec-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-19T18:25:41.782Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-19T18:25:41.782Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NiteSec\\\",\\\"firstTime\\\":\\\"2023-07-19T18:25:41.782Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":150000,\\\"currentFactionRep\\\":0.4850529923899739,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-19T18:25:41.782Z\\\"},\\\"augsBought\\\":[\\\"Cranial Signal Processors - Gen III\\\",\\\"Neural-Retention Enhancement\\\",\\\"Embedded Netburner Module\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Neurotrainer II\\\"],\\\"moneySpent\\\":{\\\"augments\\\":16882762650,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":735604102.0243528,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":242492867.6541854,\\\"lastSaved\\\":\\\"2023-07-20T09:20:20.822Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":150000,\\\"currentFactionRep\\\":150002.03570172685,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-20T07:31:58.717Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$493,779,692.90\\\",\\\"moneyRightNow\\\":\\\"$5,517,622,556.06\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$16,882,762,650.00\\\",\\\"time\\\":\\\"2023-07-20T07:31:58.717Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$410,032,490.32\\\",\\\"moneyRightNow\\\":\\\"$17,860,859,619.68\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$16,882,762,650.00\\\",\\\"time\\\":\\\"2023-07-20T09:20:20.814Z\\\"}}\"}}],[\"contracts/2023-07-20T09:20:23.522Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-20T09:20:23.522Z.txt\",\"text\":\"[{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-160196.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[16,19],[4,8],[19,27],[14,20],[9,11],[14,24],[18,22]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[16,19],[4,8],[19,27],[14,20],[9,11],[14,24],[18,22]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-198363.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"EHGiHGSFzoYvTdfvrLZyTdfvrvrvrvrvrvrvrekmvrekmvreowtlrlrlrlrlrlslrlIlslr\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; EHGiHGSFzoYvTdfvrLZyTdfvrvrvrvrvrvrvrekmvrekmvreowtlrlrlrlrlrlslrlIlslr\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-551996.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[7],[7,9],[3,6,2],[5,7,8,1],[8,9,5,6,6],[6,5,6,1,3,9]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,6,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[5,7,8,1],\\\\n&nbsp;&nbsp;&nbsp;[8,9,5,6,6],\\\\n&nbsp;&nbsp;[6,5,6,1,3,9]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-185836-CyberSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,7],\\\"description\\\":\\\"You are in a grid with 9 rows and 7 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [9, 7]\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-203937-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":81,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 81 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-646201-CyberSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[12,4],\\\"description\\\":\\\"You are in a grid with 12 rows and 4 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [12, 4]\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-726800-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[0,7,3,4,3,3,3,4,1,0,3,1,0,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,7,3,4,3,3,3,4,1,0,3,1,0,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-814551.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"wwwwwwwfPPGGGGGGcHHgMMhhooE8IIMmPPPPPPPPPPPPM0kkSSSSSSSSSS7777777777777yyyyyyzzzzzzzzz\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; wwwwwwwfPPGGGGGGcHHgMMhhooE8IIMmPPPPPPPPPPPPM0kkSSSSSSSSSS7777777777777yyyyyyzzzzzzzzz\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-184215.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,1,0,0,0,1,1],[1,0,0,0,0,0,1,1,1,1,0,0],[0,0,0,0,0,1,0,1,1,1,1,1],[0,0,0,0,1,1,0,0,0,1,0,0],[0,0,0,0,1,1,0,1,1,1,0,0],[0,0,1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,1,0,0],[0,1,0,0,0,1,1,1,1,0,1,0],[0,0,0,0,1,0,0,1,0,0,0,0],[0,0,0,1,1,0,0,0,0,0,1,1],[0,1,1,0,0,0,0,0,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,1,0,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,1,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,1,1,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,0,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,1,1,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,1,0,0,0,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-698434-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":470074817,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 470074817?\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-113752.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((()a))(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((()a))(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-509231.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[15,22],[16,21],[21,31],[4,6]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[15,22],[16,21],[21,31],[4,6]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-153104.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[193,[2,3,4,5,7,8,9,10,13]],\\\"description\\\":\\\"How many different distinct ways can the number 193 be written as a sum of integers contained in the set:\\\\n\\\\n [2,3,4,5,7,8,9,10,13]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-283509.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":86,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 86 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-424311-BitRunners.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[11,[[4,7],[0,2],[7,8],[3,6],[0,10],[2,3],[8,9],[5,9],[6,9],[2,7],[6,9],[2,9],[6,7],[1,7],[9,10]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [11,[[4,7],[0,2],[7,8],[3,6],[0,10],[2,3],[8,9],[5,9],[6,9],[2,7],[6,9],[2,9],[6,7],[1,7],[9,10]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 10. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-290448-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"qcgqcYvNfpYUha6ha6ha6hlb42Bee3wiywywyfViywywyfVibuIbP0kVibuIQrVkVibebebebebebveWQeWQeWQeWJeW\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; qcgqcYvNfpYUha6ha6ha6hlb42Bee3wiywywyfViywywyfVibuIbP0kVibuIQrVkVibebebebebebveWQeWQeWQeWJeW\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-758844.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"22832320932\\\",81],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 22832320932\\\\n\\\\n You are also given a target number of 81. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"22832320932\\\\\\\", 81]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"omnia\\\",\\\"name\\\":\\\"contract-180064.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[120,[1,2,4,5,7,8,9,10,11,12]],\\\"description\\\":\\\"How many different distinct ways can the number 120 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,7,8,9,10,11,12]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-775664.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,1,0,0,0,0,0,0,1],[0,1,0,0,0,0,1,0,1,1],[0,0,0,0,1,0,0,1,0,0],[0,1,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,1,1,1],[0,1,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,1],[0,1,0,1,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,1],[0,1,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,1,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,0,0,0,0,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"}]\"}}],[\"analytics/2023-07-21-03-35-TheBlackHand-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-21-03-35-TheBlackHand-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-20T13:19:37.890Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-20T13:19:37.890Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"The Black Hand\\\",\\\"firstTime\\\":\\\"2023-07-20T13:19:37.890Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-20T13:19:37.891Z\\\"},\\\"augsBought\\\":[\\\"Enhanced Myelin Sheathing\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"The Black Hand\\\",\\\"DataJack\\\",\\\"Social Negotiation Assistant (S.N.A)\\\"],\\\"moneySpent\\\":{\\\"augments\\\":26784039000,\\\"homeCores\\\":0,\\\"homeRam\\\":475182451795.6437,\\\"fluxGovernors\\\":670881065159.001,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":159955728162.7616,\\\"lastSaved\\\":\\\"2023-07-21T08:35:25.556Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":375012.4444733313,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-21T08:32:58.201Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$44,332,067,495.85\\\",\\\"moneyRightNow\\\":\\\"$836,033,121.15\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$26,784,039,000.00\\\",\\\"time\\\":\\\"2023-07-21T08:32:58.201Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$49,129,547,840.44\\\",\\\"moneyRightNow\\\":\\\"$1,332,803,284,117.41\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$26,784,039,000.00\\\",\\\"time\\\":\\\"2023-07-21T08:35:25.555Z\\\"},\\\"amountOfRamIncrease\\\":null,\\\"amountOfCoresIncrease\\\":null}\"}}],[\"contracts/failure/nectar-net-contract-394118-BitRunners.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/nectar-net-contract-394118-BitRunners.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-394118-BitRunners.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[83,18,162,4,95,11,195,119,187,88,196,1,159,29,59,17,164,79,89,61,177,49,170],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 83,18,162,4,46,95,11,119,195,120,119,187,88,196,77,1,159,129,29,59,17,164,79,89,61,109,127,177,49,84,170\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":350}\"}}],[\"contracts/2023-07-21T08:35:28.271Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-21T08:35:28.271Z.txt\",\"text\":\"[{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-704097.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,0,5,0,8,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,0,5,0,8,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-999646.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100000011101010100010011011010101001111011100111111100010011110\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100000011101010100010011011010101001111011100111111100010011110' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-797194-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,0,0,1,0],[0,1,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,1,0],[0,1,1,0,1,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,0,\\\\n0,0,0,0,0,0,1,0,1,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n0,1,1,0,1,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-605259.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":66,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 66 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-36453-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2,0,8,-2,-7,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,2,0,8,-2,-7,-7\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-305165.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":72,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 72 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-771627.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":11,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 11 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-678006.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"W0i1EEEEEE6z0z6yCCxz0z6yCCxzN3yCx2Cx2Cx2CsLhx2Cx2CsLhNzigs0777777777SFNUWSFNUWSFNUFNUPW0FNU\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; W0i1EEEEEE6z0z6yCCxz0z6yCCxzN3yCx2Cx2Cx2CsLhx2Cx2CsLhNzigs0777777777SFNUWSFNUWSFNUFNUPW0FNU\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-202243-TheBlackHand.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"663317949728\\\",63],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 663317949728\\\\n\\\\n You are also given a target number of 63. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"663317949728\\\\\\\", 63]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-813507-BitRunners.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"95163141220\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 95163141220\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-314967.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":668710506,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 668710506?\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-620424.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":50,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 50 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-273352.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"469324190930\\\",79],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 469324190930\\\\n\\\\n You are also given a target number of 79. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"469324190930\\\\\\\", 79]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-294288-BitRunners.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0000101001010001\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0000101001010001' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-524316-ECorp.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[7,17],[5,12],[5,14],[4,11],[8,18],[20,27],[19,27],[19,25],[5,9],[13,22],[25,28],[25,31],[9,19],[15,19],[2,9],[22,27]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[7,17],[5,12],[5,14],[4,11],[8,18],[20,27],[19,27],[19,25],[5,9],[13,22],[25,28],[25,31],[9,19],[15,19],[2,9],[22,27]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-57092.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,0,5,1,4,4,3,6,3,1,1,4,4,0,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,0,5,1,4,4,3,6,3,1,1,4,4,0,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-904886.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":28,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 28 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"the-hub\\\",\\\"name\\\":\\\"contract-625337.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[6,4,3,2,4,8,2,6,3,0,4,0,2,2,0,5,6,3,3,7,5,0,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 6,4,3,2,4,8,2,6,3,0,4,0,2,2,0,5,6,3,3,7,5,0,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-394118-BitRunners.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[83,18,162,4,46,95,11,119,195,120,119,187,88,196,77,1,159,129,29,59,17,164,79,89,61,109,127,177,49,84,170],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 83,18,162,4,46,95,11,119,195,120,119,187,88,196,77,1,159,129,29,59,17,164,79,89,61,109,127,177,49,84,170\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"}]\"}}],[\"analytics/2023-07-22-00-43-Bachman&Associates-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-22-00-43-Bachman&Associates-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-21T09:07:14.531Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-21T09:07:14.531Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-21T09:07:14.532Z\\\"},{\\\"factionToMax\\\":\\\"Bachman & Associates\\\",\\\"firstTime\\\":\\\"2023-07-21T15:38:51.410Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-21T09:07:14.532Z\\\"},\\\"augsBought\\\":[\\\"FocusWire\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"CashRoot Starter Kit\\\",\\\"Nanofiber Weave\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\"],\\\"moneySpent\\\":{\\\"augments\\\":13504345725,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":529136852962.8832,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":478094288875.795,\\\"lastSaved\\\":\\\"2023-07-22T05:43:08.455Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1125000,\\\"currentFactionRep\\\":462513.38379352586,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-22T05:43:03.775Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$721,453,082,023.73\\\",\\\"moneyRightNow\\\":\\\"$517,995,312,219.22\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$13,504,345,725.00\\\",\\\"time\\\":\\\"2023-07-22T05:43:03.776Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$721,453,082,023.73\\\",\\\"moneyRightNow\\\":\\\"$1,020,735,487,563.68\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$13,504,345,725.00\\\",\\\"time\\\":\\\"2023-07-22T05:43:08.447Z\\\"}}\"}}],[\"contracts/2023-07-22T05:43:11.146Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T05:43:11.146Z.txt\",\"text\":\"[{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-11351.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[9,1,0,1,4,8,2,9,3,0,0,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 9,1,0,1,4,8,2,9,3,0,0,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-380792-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[8],[6,7],[8,5,3],[1,9,2,9],[7,5,6,6,4],[7,7,7,8,3,3],[1,5,4,5,4,8,9]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,9,2,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,5,6,6,4],\\\\n&nbsp;&nbsp;&nbsp;[7,7,7,8,3,3],\\\\n&nbsp;&nbsp;[1,5,4,5,4,8,9]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-347251-TianDiHui.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"64125109196\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 64125109196\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-489407-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[22,23],[14,20],[7,12],[21,25],[2,7],[5,7],[6,16],[5,10],[7,13],[24,34],[11,19],[23,31],[15,19],[17,19],[16,21],[25,32],[5,11],[2,10],[10,18],[22,26]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[22,23],[14,20],[7,12],[21,25],[2,7],[5,7],[6,16],[5,10],[7,13],[24,34],[11,19],[23,31],[15,19],[17,19],[16,21],[25,32],[5,11],[2,10],[10,18],[22,26]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-740419-Sector12.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[12,[[0,10],[5,9],[2,8],[9,10],[1,7],[6,11],[1,4],[0,5],[0,6],[1,5],[0,3],[1,2],[1,10],[8,10],[3,11],[5,11],[7,8],[1,3]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [12,[[0,10],[5,9],[2,8],[9,10],[1,7],[6,11],[1,4],[0,5],[0,6],[1,5],[0,3],[1,2],[1,10],[8,10],[3,11],[5,11],[7,8],[1,3]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 11. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-995428.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":976679328,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 976679328?\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-399060-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[17,26],[24,30],[6,10],[20,25],[24,27]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[17,26],[24,30],[6,10],[20,25],[24,27]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-829895-NWO.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1242558141\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 1242558141\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-881035.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"rmmTTTTTkiiGGGGGGGiiiiiiiwwwwww1T4xxW00000000MPPHHHHWWWWWWW\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; rmmTTTTTkiiGGGGGGGiiiiiiiwwwwww1T4xxW00000000MPPHHHHWWWWWWW\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-611935.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[8,11],[1,5],[7,17]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[8,11],[1,5],[7,17]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-387094-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[20,30],[25,29],[12,16],[21,23],[11,18],[8,16],[15,16],[10,20],[21,29],[20,23],[5,15],[20,30]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[20,30],[25,29],[12,16],[21,23],[11,18],[8,16],[15,16],[10,20],[21,29],[20,23],[5,15],[20,30]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-797670.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,10],[1,3],[3,12],[11,16],[11,19],[24,34],[1,10],[9,19],[7,15],[24,28],[9,19],[6,13],[18,24],[10,20],[2,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,10],[1,3],[3,12],[11,16],[11,19],[24,34],[1,10],[9,19],[7,15],[24,28],[9,19],[6,13],[18,24],[10,20],[2,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-188827.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"16442178219\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 16442178219\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-464359-NiteSec.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"ii44XXTTMM6cdBtttttttttttoooooooooooooo222222233v882222000rrrrrrrjjjjj\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; ii44XXTTMM6cdBtttttttttttoooooooooooooo222222233v882222000rrrrrrrjjjjj\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"}]\"}}],[\"analytics/2023-07-22-09-43-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-22-09-43-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-22T06:02:37.619Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-22T06:02:37.619Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-22T06:02:37.620Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":3.2864092291602076,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-22T06:02:37.620Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core Implant\\\",\\\"Neuroreceptor Management Implant\\\"],\\\"moneySpent\\\":{\\\"augments\\\":10635000000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":544271461926.7823,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":444192826113.2349,\\\"lastSaved\\\":\\\"2023-07-22T14:43:13.384Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":424401.7324430114,\\\"targetRepForGettingToFavor\\\":46.7456,\\\"time\\\":\\\"2023-07-22T12:46:06.443Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$56,130,176,702.47\\\",\\\"moneyRightNow\\\":\\\"$8,419,609.39\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$10,635,000,000.00\\\",\\\"time\\\":\\\"2023-07-22T14:30:11.871Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$78,940,357,809.55\\\",\\\"moneyRightNow\\\":\\\"$999,099,288,040.02\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$10,635,000,000.00\\\",\\\"time\\\":\\\"2023-07-22T14:43:13.379Z\\\"}}\"}}],[\"contracts/2023-07-22T14:43:15.941Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T14:43:15.941Z.txt\",\"text\":\"[{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-753491-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader I\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[55,2,86,172,107,98,152,148,14,103,31,116,22,49],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 55,2,86,172,107,98,152,148,14,103,31,116,22,49\\\\n\\\\n Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\\"}]\"}}],[\"contracts/2023-07-22T14:56:24.747Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T14:56:24.747Z.txt\",\"text\":\"[{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-847565-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"215407675\\\",-39],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 215407675\\\\n\\\\n You are also given a target number of -39. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"215407675\\\\\\\", -39]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-372294-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":193172784,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 193172784?\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-355180.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2619,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2619 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"contracts/2023-07-22T19:15:14.104Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T19:15:14.104Z.txt\",\"text\":\"[{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-847565-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"215407675\\\",-39],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 215407675\\\\n\\\\n You are also given a target number of -39. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"215407675\\\\\\\", -39]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-372294-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":193172784,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 193172784?\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-355180.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2619,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2619 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"analytics/2023-07-22-14-28-NWO-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-22-14-28-NWO-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-22T18:07:08.879Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-22T18:07:08.879Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-22T18:07:08.879Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5250000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-22T18:07:08.880Z\\\"},\\\"augsBought\\\":[\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\"],\\\"moneySpent\\\":{\\\"augments\\\":1281000000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":429379128590.6032,\\\"repPurchased\\\":93720000000},\\\"moneyLeft\\\":275337831020.79755,\\\"lastSaved\\\":\\\"2023-07-22T19:28:26.372Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5250000,\\\"currentFactionRep\\\":85420.86318980539,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-22T19:27:56.980Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$1,379,208,116,078.57\\\",\\\"moneyRightNow\\\":\\\"$592.87\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,281,000,000.00\\\",\\\"time\\\":\\\"2023-07-22T19:27:56.981Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$1,287,219,116,506.24\\\",\\\"moneyRightNow\\\":\\\"$799,717,959,611.40\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,281,000,000.00\\\",\\\"time\\\":\\\"2023-07-22T19:28:26.347Z\\\"}}\"}}],[\"contracts/2023-07-22T19:28:28.997Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T19:28:28.997Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-816744.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[5],[7,3],[2,9,6],[2,7,6,6],[9,1,9,5,9],[8,3,8,4,4,5],[6,2,5,4,4,7,1],[4,6,5,4,2,7,4,7],[8,9,5,6,1,3,5,5,5]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,9,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,6,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,1,9,5,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,3,8,4,4,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[6,2,5,4,4,7,1],\\\\n&nbsp;&nbsp;&nbsp;[4,6,5,4,2,7,4,7],\\\\n&nbsp;&nbsp;[8,9,5,6,1,3,5,5,5]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-751646.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":1771645887127,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 1771645887127 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-825287-BladeIndustries.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[14,10],\\\"description\\\":\\\"You are in a grid with 14 rows and 10 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [14, 10]\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-829370-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,1,1],[0,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,0,0,0,0,0,\\\\n0,0,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n1,1,0,0,0,0,0,1,1,\\\\n0,0,0,0,1,0,0,0,0,\\\\n0,0,1,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,1,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"}]\"}}],[\"analytics/2023-07-22-17-47-OmniTekIncorporated-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-22-17-47-OmniTekIncorporated-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-22T21:38:23.035Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-22T21:38:23.035Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"OmniTek Incorporated\\\",\\\"firstTime\\\":\\\"2023-07-22T21:38:23.035Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-22T21:38:23.035Z\\\"},\\\"augsBought\\\":[\\\"Augmented Targeting III\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\"],\\\"moneySpent\\\":{\\\"augments\\\":1184325000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":492252175215.5397,\\\"repPurchased\\\":273260000000},\\\"moneyLeft\\\":1105056896.8406372,\\\"lastSaved\\\":\\\"2023-07-22T22:47:33.683Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":85407.69418403886,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-22T22:43:45.648Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$668,528,618,551.94\\\",\\\"moneyRightNow\\\":\\\"$36,502,335,303.15\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,184,325,000.00\\\",\\\"time\\\":\\\"2023-07-22T22:43:45.648Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$766,198,261,105.09\\\",\\\"moneyRightNow\\\":\\\"$767,801,557,112.38\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,184,325,000.00\\\",\\\"time\\\":\\\"2023-07-22T22:47:33.635Z\\\"}}\"}}],[\"contracts/2023-07-22T22:47:36.350Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T22:47:36.350Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-582184.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,-8,4,-2,-7,5,5,-7,1,3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,-8,4,-2,-7,5,5,-7,1,3\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-471181.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[9,6,2,1,4,4,0,10],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 9,6,2,1,4,4,0,10\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-690374.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"axRv7rLNcTMzusBusBusBusBusBsBusBusBBsBusBuL4sBusBuL4szlzlzlzlzl4kY0KcHFl4kY0KcHF6OHF6OHF6OHieR\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; axRv7rLNcTMzusBusBusBusBusBsBusBusBBsBusBuL4sBusBuL4szlzlzlzlzl4kY0KcHFl4kY0KcHF6OHF6OHF6OHieR\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-379736-Sector12.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"))))((a((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ))))((a((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-741659.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[3,6],[0,6],[1,2],[0,8],[4,7],[5,6],[1,3],[4,5],[7,8],[3,4],[3,8],[1,6],[5,8],[1,8],[6,7],[2,3]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[3,6],[0,6],[1,2],[0,8],[4,7],[5,6],[1,3],[4,5],[7,8],[3,4],[3,8],[1,6],[5,8],[1,8],[6,7],[2,3]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-274629.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[6,7,6,5,1,-9,-9,6,9,3,-5,1,2,1,10,6,-1,9,6,7,-10,5,8,2,2,-4,-2,-3,-3,-3,-5,7,-5,-10,8,-8,-6,5,10],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 6,7,6,5,1,-9,-9,6,9,3,-5,1,2,1,10,6,-1,9,6,7,-10,5,8,2,2,-4,-2,-3,-3,-3,-5,7,-5,-10,8,-8,-6,5,10\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-575293.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[9,0,5,9,0,0,3,0,3,4,2,5,1,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 9,0,5,9,0,0,3,0,3,4,2,5,1,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-967890.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":312328765,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 312328765?\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-588254.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"5725283224\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 5725283224\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-67120.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"4281543629\\\",58],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 4281543629\\\\n\\\\n You are also given a target number of 58. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"4281543629\\\\\\\", 58]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-5790.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"NMGpXdr41IG3cxkxGj6fNOtOtOtOsssssstssstsssDvP4QsssDvP4Cl3fsDK7yad0dXd\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; NMGpXdr41IG3cxkxGj6fNOtOtOtOsssssstssstsssDvP4QsssDvP4Cl3fsDK7yad0dXd\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-776549-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,1,0,1,0,0,0,1],[0,0,0,1,0,0,0,0],[1,0,0,0,1,1,0,0],[0,1,1,0,0,1,1,0],[0,0,0,0,0,0,0,0],[1,0,0,0,0,1,0,0],[0,0,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,\\\\n0,1,0,1,0,0,0,1,\\\\n0,0,0,1,0,0,0,0,\\\\n1,0,0,0,1,1,0,0,\\\\n0,1,1,0,0,1,1,0,\\\\n0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,1,0,0,\\\\n0,0,0,0,0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-908432-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[1,4,5,5,1,1,3,2,4,3,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,4,5,5,1,1,3,2,4,3,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-618789.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[152,[1,2,3,5,6,7,9,10,12,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 152 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,3,5,6,7,9,10,12,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"}]\"}}],[\"analytics/2023-07-23-11-59-ECorp-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-23-11-59-ECorp-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-23T00:56:11.917Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-23T00:56:11.917Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Blade Industries\\\",\\\"firstTime\\\":\\\"2023-07-23T00:56:11.917Z\\\"},{\\\"factionToMax\\\":\\\"ECorp\\\",\\\"firstTime\\\":\\\"2023-07-23T14:49:04.700Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-23T00:56:11.917Z\\\"},\\\"augsBought\\\":[\\\"Hydroflame Left Arm\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"ECorp HVMind Implant\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"BitRunners Neurolink\\\",\\\"Xanipher\\\",\\\"Artificial Bio-neural Network Implant\\\",\\\"Neotra\\\",\\\"Synthetic Heart\\\",\\\"OmniTek InfoLoad\\\",\\\"SmartJaw\\\",\\\"HyperSight Corneal Implant\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"Neural Accelerator\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"Synfibril Muscle\\\"],\\\"moneySpent\\\":{\\\"augments\\\":3523374747269026.5,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":11334270935597.5,\\\"lastSaved\\\":\\\"2023-07-23T16:59:30.520Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":85453.09018885919,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-23T01:53:57.167Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$2,308,060,639,891.18\\\",\\\"moneyRightNow\\\":\\\"$233,863,763,984.28\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,059,000,000.00\\\",\\\"time\\\":\\\"2023-07-23T02:07:05.581Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$2,308,060,639,891.18\\\",\\\"moneyRightNow\\\":\\\"$1,837,790,952,925.58\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,059,000,000.00\\\",\\\"time\\\":\\\"2023-07-23T02:07:10.071Z\\\"}}\"}}],[\"analytics/2023-07-23-12-00-Daedalus-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-23-12-00-Daedalus-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-23T17:00:28.477Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-23T17:00:28.477Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Daedalus\\\",\\\"firstTime\\\":\\\"2023-07-23T17:00:28.477Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":7500000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-23T17:00:28.477Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"PCMatrix\\\",\\\"The Red Pill\\\"],\\\"moneySpent\\\":{\\\"augments\\\":133051500000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":45584400824051.39,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":40791342748081.83,\\\"lastSaved\\\":\\\"2023-07-23T17:00:34.804Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":7500000,\\\"currentFactionRep\\\":7500126.051371851,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-23T17:00:30.625Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$84,474,904,563,461.88\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$133,051,500,000.00\\\",\\\"time\\\":\\\"2023-07-23T17:00:30.625Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$86,508,795,072,133.22\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$133,051,500,000.00\\\",\\\"time\\\":\\\"2023-07-23T17:00:34.804Z\\\"}}\"}}],[\"analytics/end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-23T17:03:10.432Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-23T17:03:10.432Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Illuminati\\\",\\\"firstTime\\\":\\\"2023-07-23T17:03:10.432Z\\\"},{\\\"factionToMax\\\":\\\"CyberSec\\\",\\\"firstTime\\\":\\\"2023-07-24T11:47:54.128Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5625000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-23T17:03:10.432Z\\\"},\\\"augsBought\\\":[],\\\"moneySpent\\\":{\\\"augments\\\":0,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":0,\\\"lastSaved\\\":\\\"2023-07-24T11:49:16.382Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5625000,\\\"currentFactionRep\\\":5625265.904895162,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-23T17:03:12.454Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$13,900,414,011,565,530.00\\\",\\\"moneyRightNow\\\":\\\"$228,017,966,566,475.30\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$75,000,285,000,000.00\\\",\\\"time\\\":\\\"2023-07-23T17:03:12.454Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$13,900,414,011,565,530.00\\\",\\\"moneyRightNow\\\":\\\"$231,548,724,433,651.28\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$75,000,285,000,000.00\\\",\\\"time\\\":\\\"2023-07-23T17:03:16.593Z\\\"}}\"}}],[\"contracts/2023-07-23T16:59:33.190Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-23T16:59:33.190Z.txt\",\"text\":\"[{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T15:25:43.759Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T15:25:43.759Z.txt\",\"text\":\"[{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T16:11:41.072Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T16:11:41.072Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"data/factionToMax.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/factionToMax.txt\",\"text\":\"CyberSec\"}}],[\"data/ramObservations.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/ramObservations.txt\",\"text\":\"[44415,44415,67730.25,3431.75,3361.75,1609.8999999999999,111891.5,236.25,3431.75,1650.7,309.75,1926.1,2067.2,80255,42904.75,1609.8999999999999,2101.75,1728.8999999999999,236.25,39044.25,2595.25,76422.5,39042.5,309.75,2311.75,281.75,1666,211.75,67730.25,58406.25,5561.5,1609.8999999999999,2383.5,3431.75,56871.5,38683.75,1615,3431.75,1615,239.75,38638.25,1657.5,3116.75,113657.25]\"}}],[\"data/typeOfServerPurchase.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/typeOfServerPurchase.txt\",\"text\":\"{\\\"max\\\":false,\\\"min\\\":true,\\\"average\\\":false,\\\"lastPurchaseDate\\\":\\\"2023-07-24T16:30:23.207Z\\\"}\"}}],[\"data/enviroment.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/enviroment.txt\",\"text\":\"[{\\\"name\\\":\\\"n00dles\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"n00dles\\\",\\\"ip\\\":\\\"42.0.6.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":3.5,\\\"maxRam\\\":4,\\\"organizationName\\\":\\\"Noodle Bar\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":5.712000000000001,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":775,\\\"moneyMax\\\":70000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":3000}},{\\\"name\\\":\\\"foodnstuff\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"foodnstuff\\\",\\\"ip\\\":\\\"10.5.2.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"FoodNStuff\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":10,\\\"hackDifficulty\\\":4.934,\\\"minDifficulty\\\":3,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":2000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":5}},{\\\"name\\\":\\\"sigma-cosmetics\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"sigma-cosmetics\\\",\\\"ip\\\":\\\"0.6.7.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Sigma Cosmetics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":10,\\\"hackDifficulty\\\":100,\\\"minDifficulty\\\":3,\\\"moneyAvailable\\\":598628.6699170523,\\\"moneyMax\\\":2300000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":5,\\\"serverGrowth\\\":10}},{\\\"name\\\":\\\"joesguns\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"joesguns\\\",\\\"ip\\\":\\\"13.4.5.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Joe's Guns\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":93.8,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":2500000,\\\"moneyMax\\\":2500000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":10,\\\"serverGrowth\\\":20}},{\\\"name\\\":\\\"hong-fang-tea\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"hong-fang-tea\\\",\\\"ip\\\":\\\"87.8.6.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"HongFang Teahouse\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":100,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":2964371.164055575,\\\"moneyMax\\\":3000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":30,\\\"serverGrowth\\\":20}},{\\\"name\\\":\\\"harakiri-sushi\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"harakiri-sushi\\\",\\\"ip\\\":\\\"94.1.4.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"HaraKiri Sushi Bar Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":61.202,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":4000000,\\\"moneyMax\\\":4000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":40,\\\"serverGrowth\\\":40}},{\\\"name\\\":\\\"iron-gym\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"iron-gym\\\",\\\"ip\\\":\\\"64.9.4.4\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Iron Gym Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":30,\\\"hackDifficulty\\\":10,\\\"minDifficulty\\\":10,\\\"moneyAvailable\\\":11250584.134062514,\\\"moneyMax\\\":20000000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":100,\\\"serverGrowth\\\":20}},{\\\"name\\\":\\\"darkweb\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"darkweb\\\",\\\"ip\\\":\\\"84.2.1.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"darkweb\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"CLOUD-000\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"CLOUD-000\\\",\\\"ip\\\":\\\"0.7.4.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":65535.75,\\\"maxRam\\\":65536,\\\"organizationName\\\":\\\"\\\",\\\"purchasedByPlayer\\\":true,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"zer0\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"zer0\\\",\\\"ip\\\":\\\"45.3.0.8\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"ZER0 Nightclub\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":25,\\\"hackDifficulty\\\":8.484,\\\"minDifficulty\\\":8,\\\"moneyAvailable\\\":4219096.622528873,\\\"moneyMax\\\":7500000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":75,\\\"serverGrowth\\\":40}},{\\\"name\\\":\\\"nectar-net\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"nectar-net\\\",\\\"ip\\\":\\\"83.6.6.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Nectar Nightclub Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":20,\\\"hackDifficulty\\\":72.69600000000003,\\\"minDifficulty\\\":7,\\\"moneyAvailable\\\":2154131.5703422353,\\\"moneyMax\\\":2750000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":20,\\\"serverGrowth\\\":25}},{\\\"name\\\":\\\"silver-helix\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"silver-helix\\\",\\\"ip\\\":\\\"10.5.6.0\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":63,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Silver Helix\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":30,\\\"hackDifficulty\\\":10,\\\"minDifficulty\\\":10,\\\"moneyAvailable\\\":18107737.383234084,\\\"moneyMax\\\":45000000,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":150,\\\"serverGrowth\\\":30}},{\\\"name\\\":\\\"computek\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"computek\\\",\\\"ip\\\":\\\"84.5.9.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"CompuTek\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":63,\\\"hackDifficulty\\\":63,\\\"minDifficulty\\\":21,\\\"moneyAvailable\\\":49156514.800000004,\\\"moneyMax\\\":245782574,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":399,\\\"serverGrowth\\\":52}},{\\\"name\\\":\\\"netlink\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"netlink\\\",\\\"ip\\\":\\\"32.7.0.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"NetLink Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":68,\\\"hackDifficulty\\\":68,\\\"minDifficulty\\\":23,\\\"moneyAvailable\\\":55000000,\\\"moneyMax\\\":275000000,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":418,\\\"serverGrowth\\\":60}},{\\\"name\\\":\\\"johnson-ortho\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"johnson-ortho\\\",\\\"ip\\\":\\\"46.6.3.7\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":true,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Johnson Orthopedics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":49,\\\"hackDifficulty\\\":49,\\\"minDifficulty\\\":16,\\\"moneyAvailable\\\":15938206.8,\\\"moneyMax\\\":79691034,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":3,\\\"requiredHackingSkill\\\":299,\\\"serverGrowth\\\":42}},{\\\"name\\\":\\\"avmnite-02h\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"avmnite-02h\\\",\\\"ip\\\":\\\"98.1.8.4\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":127.75,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"NiteSec\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":216,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"rothman-uni\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"rothman-uni\\\",\\\"ip\\\":\\\"39.8.4.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Rothman University\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":55,\\\"hackDifficulty\\\":55,\\\"minDifficulty\\\":18,\\\"moneyAvailable\\\":35412301.800000004,\\\"moneyMax\\\":177061509,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":413,\\\"serverGrowth\\\":39}},{\\\"name\\\":\\\"alpha-ent\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"alpha-ent\\\",\\\"ip\\\":\\\"0.4.0.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Alpha Enterprises\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":53,\\\"hackDifficulty\\\":53,\\\"minDifficulty\\\":18,\\\"moneyAvailable\\\":137469858.6,\\\"moneyMax\\\":687349293,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":502,\\\"serverGrowth\\\":58}},{\\\"name\\\":\\\"aevum-police\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"aevum-police\\\",\\\"ip\\\":\\\"97.8.4.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Aevum Police Headquarters\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":75,\\\"hackDifficulty\\\":75,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":41959730.6,\\\"moneyMax\\\":209798653,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":427,\\\"serverGrowth\\\":39}},{\\\"name\\\":\\\"galactic-cyber\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"galactic-cyber\\\",\\\"ip\\\":\\\"31.7.7.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Galactic Cybersystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":60,\\\"hackDifficulty\\\":60,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":157845129.8,\\\"moneyMax\\\":789225649,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":837,\\\"serverGrowth\\\":75}},{\\\"name\\\":\\\"unitalife\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"unitalife\\\",\\\"ip\\\":\\\"5.4.0.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"UnitaLife Group\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":79,\\\"hackDifficulty\\\":79,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":208695086.60000002,\\\"moneyMax\\\":1043475433,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":782,\\\"serverGrowth\\\":75}},{\\\"name\\\":\\\"icarus\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"icarus\\\",\\\"ip\\\":\\\"18.5.1.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Icarus Microsystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":87,\\\"hackDifficulty\\\":87,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":180810429.60000002,\\\"moneyMax\\\":904052148,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":859,\\\"serverGrowth\\\":87}},{\\\"name\\\":\\\"univ-energy\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"univ-energy\\\",\\\"ip\\\":\\\"56.1.1.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Universal Energy\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":89,\\\"hackDifficulty\\\":89,\\\"minDifficulty\\\":30,\\\"moneyAvailable\\\":223326967.8,\\\"moneyMax\\\":1116634839,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":831,\\\"serverGrowth\\\":81}},{\\\"name\\\":\\\"solaris\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"solaris\\\",\\\"ip\\\":\\\"72.8.9.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Solaris Space Systems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":70,\\\"hackDifficulty\\\":70,\\\"minDifficulty\\\":23,\\\"moneyAvailable\\\":159280367.6,\\\"moneyMax\\\":796401838,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":839,\\\"serverGrowth\\\":73}},{\\\"name\\\":\\\"taiyang-digital\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"taiyang-digital\\\",\\\"ip\\\":\\\"68.6.2.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Taiyang Digital\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":77,\\\"hackDifficulty\\\":77,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":172440843.4,\\\"moneyMax\\\":862204217,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":875,\\\"serverGrowth\\\":80}},{\\\"name\\\":\\\"titan-labs\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"titan-labs\\\",\\\"ip\\\":\\\"95.6.0.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Titan Laboratories\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":72,\\\"hackDifficulty\\\":72,\\\"minDifficulty\\\":24,\\\"moneyAvailable\\\":154487552.4,\\\"moneyMax\\\":772437762,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":865,\\\"serverGrowth\\\":74}},{\\\"name\\\":\\\"run4theh111z\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"run4theh111z\\\",\\\"ip\\\":\\\"2.4.5.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"The Runners\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":520,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"fulcrumtech\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"fulcrumtech\\\",\\\"ip\\\":\\\"46.2.3.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":1024,\\\"organizationName\\\":\\\"Fulcrum Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":94,\\\"hackDifficulty\\\":94,\\\"minDifficulty\\\":31,\\\"moneyAvailable\\\":340802285.40000004,\\\"moneyMax\\\":1704011427,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1036,\\\"serverGrowth\\\":91}},{\\\"name\\\":\\\"helios\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"helios\\\",\\\"ip\\\":\\\"61.6.9.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Helios Labs\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":94,\\\"hackDifficulty\\\":94,\\\"minDifficulty\\\":31,\\\"moneyAvailable\\\":125210190.60000001,\\\"moneyMax\\\":626050953,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":861,\\\"serverGrowth\\\":73}},{\\\"name\\\":\\\"vitalife\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"vitalife\\\",\\\"ip\\\":\\\"99.7.9.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"VitaLife\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":87,\\\"hackDifficulty\\\":87,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":158737226.8,\\\"moneyMax\\\":793686134,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":784,\\\"serverGrowth\\\":68}},{\\\"name\\\":\\\"kuai-gong\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"vitalife\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"kuai-gong\\\",\\\"ip\\\":\\\"26.1.2.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"KuaiGong International\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":95,\\\"hackDifficulty\\\":95,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":5980051534.400001,\\\"moneyMax\\\":29900257672,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1082,\\\"serverGrowth\\\":93}},{\\\"name\\\":\\\"clarkinc\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"vitalife\\\",\\\"kuai-gong\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"clarkinc\\\",\\\"ip\\\":\\\"25.5.9.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Clarke Incorporated\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":55,\\\"hackDifficulty\\\":55,\\\"minDifficulty\\\":18,\\\"moneyAvailable\\\":4799026376,\\\"moneyMax\\\":23995131880,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1024,\\\"serverGrowth\\\":62}},{\\\"name\\\":\\\"powerhouse-fitness\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"vitalife\\\",\\\"kuai-gong\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"powerhouse-fitness\\\",\\\"ip\\\":\\\"43.4.6.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Powerhouse Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":60,\\\"hackDifficulty\\\":60,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":180000000,\\\"moneyMax\\\":900000000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1012,\\\"serverGrowth\\\":56}},{\\\"name\\\":\\\"4sigma\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"helios\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"4sigma\\\",\\\"ip\\\":\\\"81.0.7.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Four Sigma\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":70,\\\"hackDifficulty\\\":70,\\\"minDifficulty\\\":23,\\\"moneyAvailable\\\":3338986017.4,\\\"moneyMax\\\":16694930087,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1032,\\\"serverGrowth\\\":95}},{\\\"name\\\":\\\"b-and-a\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"helios\\\",\\\"4sigma\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"b-and-a\\\",\\\"ip\\\":\\\"73.2.5.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Bachman & Associates\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":75,\\\"hackDifficulty\\\":75,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":3866198594.6000004,\\\"moneyMax\\\":19330992973,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1090,\\\"serverGrowth\\\":77}},{\\\"name\\\":\\\"megacorp\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"helios\\\",\\\"4sigma\\\",\\\"b-and-a\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"megacorp\\\",\\\"ip\\\":\\\"85.5.4.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"MegaCorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":9031935412.6,\\\"moneyMax\\\":45159677063,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1301,\\\"serverGrowth\\\":99}},{\\\"name\\\":\\\"fulcrumassets\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"helios\\\",\\\"4sigma\\\",\\\"b-and-a\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"fulcrumassets\\\",\\\"ip\\\":\\\"3.7.1.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Fulcrum Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":200000,\\\"moneyMax\\\":1000000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1386,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"omnitek\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"omnitek\\\",\\\"ip\\\":\\\"57.8.8.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":512,\\\"organizationName\\\":\\\"OmniTek Incorporated\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":96,\\\"hackDifficulty\\\":96,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":3965703763,\\\"moneyMax\\\":19828518815,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1022,\\\"serverGrowth\\\":96}},{\\\"name\\\":\\\"blade\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"omnitek\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"blade\\\",\\\"ip\\\":\\\"71.7.6.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Blade Industries\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":96,\\\"hackDifficulty\\\":96,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":5902648362.8,\\\"moneyMax\\\":29513241814,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1189,\\\"serverGrowth\\\":62}},{\\\"name\\\":\\\"ecorp\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"omnitek\\\",\\\"blade\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"ecorp\\\",\\\"ip\\\":\\\"25.6.8.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"ECorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":12580011794.2,\\\"moneyMax\\\":62900058971,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1177,\\\"serverGrowth\\\":99}},{\\\"name\\\":\\\"The-Cave\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"omnitek\\\",\\\"blade\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"The-Cave\\\",\\\"ip\\\":\\\"66.2.3.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Helios\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":925,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"stormtech\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"titan-labs\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"stormtech\\\",\\\"ip\\\":\\\"45.6.9.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Storm Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":87,\\\"hackDifficulty\\\":87,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":207393733.20000002,\\\"moneyMax\\\":1036968666,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":996,\\\"serverGrowth\\\":83}},{\\\"name\\\":\\\".\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"titan-labs\\\",\\\"stormtech\\\"],\\\"server\\\":{\\\"hostname\\\":\\\".\\\",\\\"ip\\\":\\\"21.5.4.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\".\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":515,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"nwo\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"titan-labs\\\",\\\"stormtech\\\",\\\".\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"nwo\\\",\\\"ip\\\":\\\"6.9.4.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"NWO\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":5668064556.6,\\\"moneyMax\\\":28340322783,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1268,\\\"serverGrowth\\\":94}},{\\\"name\\\":\\\"I.I.I.I\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"I.I.I.I\\\",\\\"ip\\\":\\\"3.7.8.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"I.I.I.I\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":342,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"millenium-fitness\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"millenium-fitness\\\",\\\"ip\\\":\\\"19.8.7.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Millenium Fitness Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":55,\\\"hackDifficulty\\\":55,\\\"minDifficulty\\\":18,\\\"moneyAvailable\\\":50000000,\\\"moneyMax\\\":250000000,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":507,\\\"serverGrowth\\\":31}},{\\\"name\\\":\\\"snap-fitness\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"snap-fitness\\\",\\\"ip\\\":\\\"10.7.3.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Snap Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":45,\\\"hackDifficulty\\\":45,\\\"minDifficulty\\\":15,\\\"moneyAvailable\\\":90000000,\\\"moneyMax\\\":450000000,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":769,\\\"serverGrowth\\\":45}},{\\\"name\\\":\\\"omnia\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"omnia\\\",\\\"ip\\\":\\\"51.5.4.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Omnia Cybersystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":95,\\\"hackDifficulty\\\":95,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":186407601.8,\\\"moneyMax\\\":932038009,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":918,\\\"serverGrowth\\\":63}},{\\\"name\\\":\\\"defcomm\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"defcomm\\\",\\\"ip\\\":\\\"11.9.7.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"DefComm\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":86,\\\"hackDifficulty\\\":86,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":184069765.20000002,\\\"moneyMax\\\":920348826,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":893,\\\"serverGrowth\\\":69}},{\\\"name\\\":\\\"zeus-med\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"zeus-med\\\",\\\"ip\\\":\\\"75.9.5.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Zeus Medical\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":87,\\\"hackDifficulty\\\":87,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":289543677,\\\"moneyMax\\\":1447718385,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":817,\\\"serverGrowth\\\":76}},{\\\"name\\\":\\\"infocomm\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"zeus-med\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"infocomm\\\",\\\"ip\\\":\\\"10.3.9.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"InfoComm\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":83,\\\"hackDifficulty\\\":83,\\\"minDifficulty\\\":28,\\\"moneyAvailable\\\":160029464,\\\"moneyMax\\\":800147320,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":926,\\\"serverGrowth\\\":64}},{\\\"name\\\":\\\"nova-med\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"zeus-med\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"nova-med\\\",\\\"ip\\\":\\\"16.3.9.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Nova Medical\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":72,\\\"hackDifficulty\\\":72,\\\"minDifficulty\\\":24,\\\"moneyAvailable\\\":231833219.4,\\\"moneyMax\\\":1159166097,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":804,\\\"serverGrowth\\\":68}},{\\\"name\\\":\\\"microdyne\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"zeus-med\\\",\\\"infocomm\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"microdyne\\\",\\\"ip\\\":\\\"73.9.2.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Microdyne Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":72,\\\"hackDifficulty\\\":72,\\\"minDifficulty\\\":24,\\\"moneyAvailable\\\":107483560.2,\\\"moneyMax\\\":537417801,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":828,\\\"serverGrowth\\\":79}},{\\\"name\\\":\\\"applied-energetics\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"zeus-med\\\",\\\"infocomm\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"applied-energetics\\\",\\\"ip\\\":\\\"43.3.4.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Applied Energetics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":63,\\\"hackDifficulty\\\":63,\\\"minDifficulty\\\":21,\\\"moneyAvailable\\\":170924266.20000002,\\\"moneyMax\\\":854621331,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":791,\\\"serverGrowth\\\":75}},{\\\"name\\\":\\\"zb-def\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"defcomm\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"zb-def\\\",\\\"ip\\\":\\\"60.3.0.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"ZB Defense Industries\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":62,\\\"hackDifficulty\\\":62,\\\"minDifficulty\\\":21,\\\"moneyAvailable\\\":209964880.60000002,\\\"moneyMax\\\":1049824403,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":777,\\\"serverGrowth\\\":68}},{\\\"name\\\":\\\"syscore\\\",\\\"lineage\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"computek\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"syscore\\\",\\\"ip\\\":\\\"41.2.7.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"SysCore Securities\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":65,\\\"hackDifficulty\\\":65,\\\"minDifficulty\\\":22,\\\"moneyAvailable\\\":117846055.4,\\\"moneyMax\\\":589230277,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":578,\\\"serverGrowth\\\":67}},{\\\"name\\\":\\\"CSEC\\\",\\\"lineage\\\":[\\\"joesguns\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"CSEC\\\",\\\"ip\\\":\\\"88.9.6.0\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":7,\\\"maxRam\\\":8,\\\"organizationName\\\":\\\"CyberSec\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":60,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"neo-net\\\",\\\"lineage\\\":[\\\"joesguns\\\",\\\"CSEC\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"neo-net\\\",\\\"ip\\\":\\\"72.1.9.8\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Neo Nightclub Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":25,\\\"hackDifficulty\\\":15.158,\\\"minDifficulty\\\":8,\\\"moneyAvailable\\\":1527.4396339757507,\\\"moneyMax\\\":5000000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":50,\\\"serverGrowth\\\":25}},{\\\"name\\\":\\\"omega-net\\\",\\\"lineage\\\":[\\\"joesguns\\\",\\\"CSEC\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"omega-net\\\",\\\"ip\\\":\\\"37.8.2.8\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Omega Software\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":28,\\\"hackDifficulty\\\":16.584000000000007,\\\"minDifficulty\\\":9,\\\"moneyAvailable\\\":69977499,\\\"moneyMax\\\":69977499,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":202,\\\"serverGrowth\\\":38}},{\\\"name\\\":\\\"crush-fitness\\\",\\\"lineage\\\":[\\\"joesguns\\\",\\\"CSEC\\\",\\\"neo-net\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"crush-fitness\\\",\\\"ip\\\":\\\"39.2.4.5\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Crush Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":42,\\\"hackDifficulty\\\":16.69199999999999,\\\"minDifficulty\\\":14,\\\"moneyAvailable\\\":17103457.52328664,\\\"moneyMax\\\":49686168,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":225,\\\"serverGrowth\\\":28}},{\\\"name\\\":\\\"catalyst\\\",\\\"lineage\\\":[\\\"joesguns\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"crush-fitness\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"catalyst\\\",\\\"ip\\\":\\\"50.6.8.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Catalyst Ventures\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":66,\\\"hackDifficulty\\\":66,\\\"minDifficulty\\\":22,\\\"moneyAvailable\\\":77010199,\\\"moneyMax\\\":385050995,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":424,\\\"serverGrowth\\\":28}}]\"}}],[\"data/ramNeededToStartBatches.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/ramNeededToStartBatches.txt\",\"text\":\"38457\"}}],[\"data/memoryStarvedQueue.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/memoryStarvedQueue.txt\",\"text\":\"[[\\\"omega-net\\\",{\\\"name\\\":\\\"omega-net\\\",\\\"moneyThreshhold\\\":52483124.25,\\\"securityThreshholdTarget\\\":14,\\\"hackDifficulty\\\":16.584000000000007,\\\"moneyAvailable\\\":69977499,\\\"minDifficulty\\\":9,\\\"pids\\\":[46],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":161}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"crush-fitness\\\",{\\\"name\\\":\\\"crush-fitness\\\",\\\"moneyThreshhold\\\":37264626,\\\"securityThreshholdTarget\\\":19,\\\"hackDifficulty\\\":16.69199999999999,\\\"moneyAvailable\\\":17103457.52328664,\\\"minDifficulty\\\":14,\\\"pids\\\":[47],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":24}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"sigma-cosmetics\\\",{\\\"name\\\":\\\"sigma-cosmetics\\\",\\\"moneyThreshhold\\\":1725000,\\\"securityThreshholdTarget\\\":8,\\\"hackDifficulty\\\":100,\\\"moneyAvailable\\\":598628.6699170523,\\\"minDifficulty\\\":3,\\\"pids\\\":[3903],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":1961}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"silver-helix\\\",{\\\"name\\\":\\\"silver-helix\\\",\\\"moneyThreshhold\\\":33750000,\\\"securityThreshholdTarget\\\":15,\\\"hackDifficulty\\\":17.061999999999976,\\\"moneyAvailable\\\":18107737.383234084,\\\"minDifficulty\\\":10,\\\"pids\\\":[571],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":161}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"iron-gym\\\",{\\\"name\\\":\\\"iron-gym\\\",\\\"moneyThreshhold\\\":15000000,\\\"securityThreshholdTarget\\\":15,\\\"hackDifficulty\\\":10,\\\"moneyAvailable\\\":11250584.134062514,\\\"minDifficulty\\\":10,\\\"pids\\\":[3740],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":121}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"zer0\\\",{\\\"name\\\":\\\"zer0\\\",\\\"moneyThreshhold\\\":5625000,\\\"securityThreshholdTarget\\\":13,\\\"hackDifficulty\\\":8.484,\\\"moneyAvailable\\\":4219096.622528873,\\\"minDifficulty\\\":8,\\\"pids\\\":[3870],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":121}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"neo-net\\\",{\\\"name\\\":\\\"neo-net\\\",\\\"moneyThreshhold\\\":3750000,\\\"securityThreshholdTarget\\\":13,\\\"hackDifficulty\\\":15.158,\\\"moneyAvailable\\\":1527.4396339757507,\\\"minDifficulty\\\":8,\\\"pids\\\":[3427],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":161}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"harakiri-sushi\\\",{\\\"name\\\":\\\"harakiri-sushi\\\",\\\"moneyThreshhold\\\":3000000,\\\"securityThreshholdTarget\\\":10,\\\"hackDifficulty\\\":61.202,\\\"moneyAvailable\\\":4000000,\\\"minDifficulty\\\":5,\\\"pids\\\":[2913],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":1141}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"hong-fang-tea\\\",{\\\"name\\\":\\\"hong-fang-tea\\\",\\\"moneyThreshhold\\\":2250000,\\\"securityThreshholdTarget\\\":10,\\\"hackDifficulty\\\":100,\\\"moneyAvailable\\\":2964371.164055575,\\\"minDifficulty\\\":5,\\\"pids\\\":[1239],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":1921}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"nectar-net\\\",{\\\"name\\\":\\\"nectar-net\\\",\\\"moneyThreshhold\\\":2062500,\\\"securityThreshholdTarget\\\":12,\\\"hackDifficulty\\\":72.69600000000003,\\\"moneyAvailable\\\":2154131.5703422353,\\\"minDifficulty\\\":7,\\\"pids\\\":[3194],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":1321}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"joesguns\\\",{\\\"name\\\":\\\"joesguns\\\",\\\"moneyThreshhold\\\":1875000,\\\"securityThreshholdTarget\\\":10,\\\"hackDifficulty\\\":93.8,\\\"moneyAvailable\\\":2500000,\\\"minDifficulty\\\":5,\\\"pids\\\":[4811],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":1781}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"johnson-ortho\\\",{\\\"name\\\":\\\"johnson-ortho\\\",\\\"moneyThreshhold\\\":59768275.5,\\\"securityThreshholdTarget\\\":21,\\\"hackDifficulty\\\":49,\\\"moneyAvailable\\\":15938206.8,\\\"minDifficulty\\\":16,\\\"pids\\\":[980],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":681}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"foodnstuff\\\",{\\\"name\\\":\\\"foodnstuff\\\",\\\"moneyThreshhold\\\":1500000,\\\"securityThreshholdTarget\\\":8,\\\"hackDifficulty\\\":4.934,\\\"moneyAvailable\\\":0,\\\"minDifficulty\\\":3,\\\"pids\\\":[4912,4913,4914,4915,4916,4917,4918,4919,4920,4921,4922,4923,4924,4925,4926,4927],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":26219},{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":108},{\\\"machineToRunOn\\\":\\\"avmnite-02h\\\",\\\"threads\\\":73},{\\\"machineToRunOn\\\":\\\"silver-helix\\\",\\\"threads\\\":36},{\\\"machineToRunOn\\\":\\\"iron-gym\\\",\\\"threads\\\":18},{\\\"machineToRunOn\\\":\\\"zer0\\\",\\\"threads\\\":18},{\\\"machineToRunOn\\\":\\\"neo-net\\\",\\\"threads\\\":18},{\\\"machineToRunOn\\\":\\\"omega-net\\\",\\\"threads\\\":18},{\\\"machineToRunOn\\\":\\\"foodnstuff\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"sigma-cosmetics\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"joesguns\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"hong-fang-tea\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"harakiri-sushi\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"nectar-net\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"CSEC\\\",\\\"threads\\\":4},{\\\"machineToRunOn\\\":\\\"n00dles\\\",\\\"threads\\\":2}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"n00dles\\\",{\\\"name\\\":\\\"n00dles\\\",\\\"moneyThreshhold\\\":52500,\\\"securityThreshholdTarget\\\":6,\\\"hackDifficulty\\\":5.712000000000001,\\\"moneyAvailable\\\":775,\\\"minDifficulty\\\":1,\\\"pids\\\":[4812],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":138}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}]]\"}}],[\"data/ramToReserveOnHome.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/ramToReserveOnHome.txt\",\"text\":\"{\\\"ramToReserve\\\":1027.7,\\\"ramToReserveInLimitedEnvironment\\\":16.55,\\\"earlyGameLimiter\\\":\\\"scripts/stock/invest-in-stocks.js\\\"}\"}}],[\"data/ownedAugs.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/ownedAugs.txt\",\"text\":\"[]\"}}],[\"data/scriptsToRun.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/scriptsToRun.txt\",\"text\":\"[\\\"scripts/hacking/hack-all-machines.js\\\",\\\"scripts/precalculate-important-data.js\\\",\\\"scripts/script-registry.js\\\",\\\"scripts/stock/get-stock-quotes.js\\\",\\\"scripts/stock/second-part-of-quotes.js\\\",\\\"scripts/stock/populate-forecast.js\\\",\\\"scripts/stock/invest-in-stocks.js\\\",\\\"scripts/stock/buy-4s.js\\\",\\\"scripts/contracts/get.js\\\",\\\"scripts/contracts/populate-input.js\\\",\\\"scripts/contracts/populate-description.js\\\",\\\"scripts/contracts/do.js\\\",\\\"scripts/contracts/save-contracts-for-thomas.js\\\",\\\"scripts/singularity/apply-to-jobs.js\\\",\\\"scripts/singularity/do-work-get-augments.js\\\",\\\"scripts/singularity/backdoor-all-machines.js\\\",\\\"scripts/singularity/join-organziations.js\\\",\\\"scripts/singularity/do-work.js\\\",\\\"scripts/singularity/finish-round.js\\\",\\\"scripts/singularity/finish-bitnode.js\\\",\\\"scripts/singularity/study-computer-science.js\\\",\\\"scripts/singularity/create-early-programs.js\\\",\\\"scripts/singularity/do-job.js\\\",\\\"scripts/singularity/buy-rep.js\\\",\\\"scripts/singularity/workout.js\\\",\\\"scripts/singularity/upgade-home-machine.js\\\",\\\"scripts/singularity/travel-to-get-augs.js\\\",\\\"scripts/investments/invest-in-nodes.js\\\",\\\"scripts/investments/purchase-server.js\\\",\\\"scripts/investments/invest-in-programs.js\\\",\\\"scripts/corporations/invest.js\\\",\\\"scripts/corporations/start-company.js\\\",\\\"scripts/corporations/get-corporate-info.js\\\",\\\"scripts/corporations/add-supporting-material.js\\\",\\\"scripts/corporations/upgrade-offices.js\\\",\\\"scripts/corporations/upgrade-warehouse.js\\\",\\\"scripts/corporations/expand.js\\\",\\\"scripts/corporations/product-management.js\\\",\\\"scripts/corporations/research.js\\\",\\\"scripts/corporations/tea-party.js\\\",\\\"scripts/corporations/adjust-prices-export.js\\\",\\\"scripts/corporations/get-investments.js\\\",\\\"scripts/corporations/bribe-factions.js\\\"]\"}}],[\"data/latestQuotes.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/latestQuotes.txt\",\"text\":\"[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14996.33819912516,\\\"ask\\\":15026.360898222507,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":15011.349548673834,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.677943819018735,\\\"bias\\\":0.17794381901873502},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28465.989909014188,\\\"ask\\\":28752.08025985855,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":28609.03508443637,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3492296079124799,\\\"bias\\\":0.15077039208752008},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":77762.4428577843,\\\"ask\\\":78543.97494680726,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":78153.20890229578,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.36971723488707897,\\\"bias\\\":0.13028276511292103},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22487.809640174088,\\\"ask\\\":22577.941141737912,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":22532.875390956,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33510302423845234,\\\"bias\\\":0.16489697576154766},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22610.063815581478,\\\"ask\\\":22883.022332469784,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":22746.54307402563,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.33514080003132735,\\\"bias\\\":0.16485919996867265},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50224.67697669578,\\\"ask\\\":50628.08803674956,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":50426.38250672267,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6165021609296871,\\\"bias\\\":0.11650216092968713},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":241760.65453048318,\\\"ask\\\":244190.40985239754,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":242975.53219144038,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5863237762296748,\\\"bias\\\":0.0863237762296748},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":50769.02333468041,\\\"ask\\\":51691.16502996218,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":51230.0941823213,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7584835269799141,\\\"bias\\\":0.25848352697991406},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6276.568759875329,\\\"ask\\\":6314.341490626835,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":6295.455125251083,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.484252814070611,\\\"bias\\\":0.015747185929389007},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5358.00188294885,\\\"ask\\\":5422.686010308394,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":5390.343946628622,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3890697168588196,\\\"bias\\\":0.11093028314118042},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26488.783950620338,\\\"ask\\\":26916.022401436792,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":26702.403176028565,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6009962530813411,\\\"bias\\\":0.10099625308134108},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3614.337949182174,\\\"ask\\\":3672.6337225560796,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":3643.4858358691267,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.4449165942341333,\\\"bias\\\":0.05508340576586668},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19790.522497593527,\\\"ask\\\":19909.622933887968,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":19850.07271574075,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.43332680393971523,\\\"bias\\\":0.06667319606028477},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13529.894044782071,\\\"ask\\\":13803.225237605951,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":13666.559641194011,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6142061488323839,\\\"bias\\\":0.11420614883238389},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17123.82159643725,\\\"ask\\\":17261.362332151606,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":17192.591964294428,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5603039486944865,\\\"bias\\\":0.06030394869448652},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27176.987745423783,\\\"ask\\\":27560.14769349622,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":27368.567719460003,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5694869940115859,\\\"bias\\\":0.06948699401158587},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35595.28415234151,\\\"ask\\\":36241.81807236386,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":35918.55111235269,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.37758188510668644,\\\"bias\\\":0.12241811489331356},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33530.32750313136,\\\"ask\\\":33799.647402754905,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":33664.98745294313,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4133722024279322,\\\"bias\\\":0.08662779757206779},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14112.109501317733,\\\"ask\\\":14253.939747562132,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":14183.024624439933,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.44438290274596204,\\\"bias\\\":0.05561709725403796},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":97888.96871773024,\\\"ask\\\":99666.97218586257,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":98777.97045179641,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3415159215676414,\\\"bias\\\":0.15848407843235862},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10872.38125692614,\\\"ask\\\":11092.02532272263,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":10982.203289824385,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5550001137412142,\\\"bias\\\":0.05500011374121416},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2387.511360243944,\\\"ask\\\":2406.688158318193,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":2397.0997592810686,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44970816910131345,\\\"bias\\\":0.05029183089868655},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":135405.44856206552,\\\"ask\\\":139250.63371392948,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":137328.0411379975,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5761068606298774,\\\"bias\\\":0.07610686062987737},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":208.97553168466644,\\\"ask\\\":211.92181309814612,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":210.4486723914063,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.2992702291757255,\\\"bias\\\":0.2007297708242745},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14352.046236693042,\\\"ask\\\":14583.530853413899,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":14467.78854505347,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.55610893331147,\\\"bias\\\":0.056108933311470044},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":21.459310979201092,\\\"ask\\\":21.718377107722638,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":21.588844043461865,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5718953243464542,\\\"bias\\\":0.07189532434645418},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1289.7905720822782,\\\"ask\\\":1318.4815655967475,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":1304.136068839513,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5659975613376262,\\\"bias\\\":0.06599756133762624},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5534.925179976297,\\\"ask\\\":5635.458634304827,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":5585.191907140562,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.559447513689198,\\\"bias\\\":0.059447513689197984},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":47079.64107045672,\\\"ask\\\":48126.913167069506,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":47603.277118763115,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42813491333756204,\\\"bias\\\":0.07186508666243796},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":38.530957518172336,\\\"ask\\\":39.07419357583035,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":38.80257554700135,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5601636642861177,\\\"bias\\\":0.060163664286117746},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":442.067409514908,\\\"ask\\\":450.0968881942907,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":446.0821488545994,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3715401961599572,\\\"bias\\\":0.1284598038400428},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7110.717841112587,\\\"ask\\\":7167.832040639595,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":7139.274940876091,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42599491548528085,\\\"bias\\\":0.07400508451471915},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22485.634610075656,\\\"ask\\\":22620.954377036993,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:37 AM\\\",\\\"price\\\":22553.294493556325,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5930702568022221,\\\"bias\\\":0.09307025680222214}]\"}}],[\"data/stockHistory.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/stockHistory.txt\",\"text\":\"[[\\\"ECP\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15538.42830136777,\\\"ask\\\":15569.53626593507,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":15553.982283651421,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3296598517271106,\\\"bias\\\":0.1703401482728894},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15534.250465845374,\\\"ask\\\":15565.350066377596,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":15549.800266111486,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.329705663600938,\\\"bias\\\":0.170294336399062},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15500.298212282874,\\\"ask\\\":15531.329840335491,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":15515.814026309183,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3300786807139311,\\\"bias\\\":0.1699213192860689},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15527.889546244234,\\\"ask\\\":15558.97641220268,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":15543.432979223458,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32977621196117757,\\\"bias\\\":0.17022378803882243},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15558.449363644071,\\\"ask\\\":15589.597410418131,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":15574.023387031102,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3294412013427621,\\\"bias\\\":0.1705587986572379},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15579.828580169331,\\\"ask\\\":15611.019428177677,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":15595.424004173505,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3296755700386106,\\\"bias\\\":0.1703244299613894},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15640.358800835827,\\\"ask\\\":15671.670830467128,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":15656.014815651479,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32901383135019,\\\"bias\\\":0.17098616864980998},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15629.071940716554,\\\"ask\\\":15660.361374031301,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":15644.716657373929,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3291373125764075,\\\"bias\\\":0.1708626874235925},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15665.005740587474,\\\"ask\\\":15696.367113441502,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":15680.686427014489,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32953015391967955,\\\"bias\\\":0.17046984608032045},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15639.996622350849,\\\"ask\\\":15671.307926900097,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":15655.652274625474,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32980274352691197,\\\"bias\\\":0.17019725647308803},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15584.071762474056,\\\"ask\\\":15615.27110534187,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":15599.671433907963,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3291919751818513,\\\"bias\\\":0.17080802481814872},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15599.217862550244,\\\"ask\\\":15630.447527940734,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":15614.83269524549,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3290259675121522,\\\"bias\\\":0.17097403248784782},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15548.167192967945,\\\"ask\\\":15579.294654815727,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":15563.730923891837,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3295873416427081,\\\"bias\\\":0.1704126583572919},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15556.576949256927,\\\"ask\\\":15587.721247453637,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":15572.149098355283,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3296795151386293,\\\"bias\\\":0.1703204848613707},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15518.78052700015,\\\"ask\\\":15549.849156683831,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":15534.314841841991,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3292646948533885,\\\"bias\\\":0.1707353051466115},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15565.576197256127,\\\"ask\\\":15596.738511965346,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":15581.157354610737,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32874985587961775,\\\"bias\\\":0.17125014412038225},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15512.484663444382,\\\"ask\\\":15543.540688796622,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":15528.012676120503,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3293359601056066,\\\"bias\\\":0.17066403989439338},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15544.295988951497,\\\"ask\\\":15575.415700641088,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":15559.855844796293,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3289859807539278,\\\"bias\\\":0.17101401924607218},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15507.363181757299,\\\"ask\\\":15538.408953892947,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":15522.886067825124,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3293932729367633,\\\"bias\\\":0.1706067270632367},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15507.363181757299,\\\"ask\\\":15538.408953892947,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":15484.090165871834,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3289658121182836,\\\"bias\\\":0.17103418788171643},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15456.56523629967,\\\"ask\\\":15487.509310846815,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":15472.037273573244,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3288325745485011,\\\"bias\\\":0.17116742545149888,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15502.2559644094,\\\"ask\\\":15533.291511885693,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":15517.773738147547,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32832659122180574,\\\"bias\\\":0.17167340877819426,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15452.939025774234,\\\"ask\\\":15483.875840640647,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":15468.407433207441,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32777870793876923,\\\"bias\\\":0.17222129206123077,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15449.803979147984,\\\"ask\\\":15480.734517644774,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":15465.26924839638,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32781365477572416,\\\"bias\\\":0.17218634522427584,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15395.549565761428,\\\"ask\\\":15426.371486814001,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":15410.960526287716,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32842044501165657,\\\"bias\\\":0.17157955498834343,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15361.390494716094,\\\"ask\\\":15392.144029240048,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":15376.767261978071,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32880198587612386,\\\"bias\\\":0.17119801412387614,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15299.330225763537,\\\"ask\\\":15329.959515504803,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":15314.64487063417,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.328107537515059,\\\"bias\\\":0.171892462484941,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15237.183562737198,\\\"ask\\\":15267.68843473467,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":15252.435998735935,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32740645368950594,\\\"bias\\\":0.17259354631049406,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15303.073451384109,\\\"ask\\\":15333.710235070563,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":15318.391843227337,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3266601104102017,\\\"bias\\\":0.1733398895897983,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15270.683602828547,\\\"ask\\\":15301.255541973347,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":15285.969572400947,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.326292448233545,\\\"bias\\\":0.17370755176645503,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15204.036526248672,\\\"ask\\\":15234.475037812732,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":15219.255782030703,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3255309990956733,\\\"bias\\\":0.1744690009043267,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15189.946251278281,\\\"ask\\\":15220.35655408364,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":15205.151402680962,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3256928374692846,\\\"bias\\\":0.17430716253071538,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15124.854810325325,\\\"ask\\\":15155.134799935586,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":15139.994805130456,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3264429871083939,\\\"bias\\\":0.17355701289160608,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15189.218799203061,\\\"ask\\\":15219.62764564791,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":15204.423222425487,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3257044132980998,\\\"bias\\\":0.1742955867019002,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15205.667992708706,\\\"ask\\\":15236.109770471885,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":15220.888881590296,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32551565955962647,\\\"bias\\\":0.17448434044037353,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15246.502258340905,\\\"ask\\\":15277.02578638563,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":15261.764022363268,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3259842308785332,\\\"bias\\\":0.17401576912146682,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15218.006675086559,\\\"ask\\\":15248.47315491656,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":15233.23991500156,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32631007387114325,\\\"bias\\\":0.17368992612885675,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15161.793264901373,\\\"ask\\\":15192.147205371644,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":15176.970235136509,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3256661063079448,\\\"bias\\\":0.1743338936920552,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15130.81047023568,\\\"ask\\\":15161.102383089003,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":15145.956426662342,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3260230833014876,\\\"bias\\\":0.1739769166985124,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15169.798936639252,\\\"ask\\\":15200.168904480372,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":15184.983920559813,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32647138005234844,\\\"bias\\\":0.17352861994765156,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15178.352400590624,\\\"ask\\\":15208.739492483695,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":15193.54594653716,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32637353625089444,\\\"bias\\\":0.17362646374910556,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15140.460440711588,\\\"ask\\\":15170.771672825123,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":15155.616056768356,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32680807039363624,\\\"bias\\\":0.17319192960636376,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15081.157416195692,\\\"ask\\\":15111.349923535423,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":15096.253669865559,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.326127034783175,\\\"bias\\\":0.173872965216825,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15091.327701842654,\\\"ask\\\":15121.540570114608,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":15106.434135978632,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3260097800079784,\\\"bias\\\":0.17399021999202158,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15029.92755065255,\\\"ask\\\":15060.0174956989,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":15044.972523175726,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3252989964212242,\\\"bias\\\":0.17470100357877583,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15085.709503573044,\\\"ask\\\":15115.911124200815,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":15100.81031388693,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3246506125135871,\\\"bias\\\":0.17534938748641288,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15028.023601760224,\\\"ask\\\":15058.10973509708,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":15043.066668428652,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32397752416760567,\\\"bias\\\":0.17602247583239433,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14970.100735479751,\\\"ask\\\":15000.070907122352,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":14985.085821301052,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3246585968277136,\\\"bias\\\":0.17534140317228641,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":15013.168111232875,\\\"ask\\\":15043.224503847956,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":15028.196307540416,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3241541583988122,\\\"bias\\\":0.17584584160118782,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14978.526746533107,\\\"ask\\\":15008.513787066706,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":14993.520266799907,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32374747354702904,\\\"bias\\\":0.17625252645297096,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14920.398262889828,\\\"ask\\\":14950.268930082799,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":14935.333596486314,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3244341369939754,\\\"bias\\\":0.17556586300602461,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14875.449513661091,\\\"ask\\\":14905.23019336812,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":14890.339853514606,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32496463968178574,\\\"bias\\\":0.17503536031821426,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14813.377876203234,\\\"ask\\\":14843.034288367804,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":14828.20608228552,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32423119917154053,\\\"bias\\\":0.17576880082845947,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14843.192426394633,\\\"ask\\\":14872.908527348374,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":14858.050476871504,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.32458496505655177,\\\"bias\\\":0.17541503494344823,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14814.285163923842,\\\"ask\\\":14843.943392480243,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":14829.114278202043,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6750727458353122,\\\"bias\\\":0.17507274583531218,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14825.324143726068,\\\"ask\\\":14855.004472342134,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":14840.164308034102,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6749422890171928,\\\"bias\\\":0.17494228901719278,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14792.813415368673,\\\"ask\\\":14822.428657441482,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":14807.621036405078,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6753267663357907,\\\"bias\\\":0.1753267663357907,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14811.77671632337,\\\"ask\\\":14841.429922962654,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":14826.603319643013,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6755515223806405,\\\"bias\\\":0.17555152238064053,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14809.728140138448,\\\"ask\\\":14839.377245524109,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":14824.55269283128,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.67557580578845,\\\"bias\\\":0.17557580578845,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14810.495756741902,\\\"ask\\\":14840.146398897541,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":14825.321077819723,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6755667053578134,\\\"bias\\\":0.17556670535781338,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14805.723780009186,\\\"ask\\\":14835.36486865785,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":14820.54432433352,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6755101191182308,\\\"bias\\\":0.17551011911823078,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14832.940250666259,\\\"ask\\\":14862.635826743668,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":14847.788038704964,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6758327488037483,\\\"bias\\\":0.17583274880374833,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14834.590404274777,\\\"ask\\\":14864.289283963013,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":14849.439844118895,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6758523100667232,\\\"bias\\\":0.1758523100667232,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14782.487896644432,\\\"ask\\\":14812.082467008084,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":14797.285181826259,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6764721209125785,\\\"bias\\\":0.17647212091257847,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14837.412421897425,\\\"ask\\\":14867.116951270591,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":14852.264686584009,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.677127805363618,\\\"bias\\\":0.17712780536361805,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14829.955883348082,\\\"ask\\\":14859.645484716144,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":14844.800684032114,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6770387450643668,\\\"bias\\\":0.1770387450643668,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14803.10382356223,\\\"ask\\\":14832.739667052843,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":14817.921745307538,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6773598841324664,\\\"bias\\\":0.1773598841324664,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14863.095470026234,\\\"ask\\\":14892.851416913172,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":14877.973443469704,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6766411084221431,\\\"bias\\\":0.1766411084221431,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14836.57930738876,\\\"ask\\\":14866.282168865011,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":14851.430738126886,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6769568041268162,\\\"bias\\\":0.17695680412681625,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14892.907073606035,\\\"ask\\\":14922.722703383022,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":14907.81488849453,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6776286288976681,\\\"bias\\\":0.17762862889766806,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14874.622367289143,\\\"ask\\\":14904.401391047477,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":14889.51187916831,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6774102779888068,\\\"bias\\\":0.17741027798880682,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14811.745039330863,\\\"ask\\\":14841.398182552744,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":14826.571610941804,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6766571537483712,\\\"bias\\\":0.1766571537483712,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14848.16490460392,\\\"ask\\\":14877.890960468992,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":14863.027932536457,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6770915272622247,\\\"bias\\\":0.17709152726222466,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14872.375573737068,\\\"ask\\\":14902.150099410213,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":14887.262836573642,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6773802837786276,\\\"bias\\\":0.17738028377862758,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14909.576516135996,\\\"ask\\\":14939.4255181703,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":14924.501017153148,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6778239730659804,\\\"bias\\\":0.1778239730659804,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14957.981574478104,\\\"ask\\\":14987.927483536116,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":14972.954529007111,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6784012919309106,\\\"bias\\\":0.1784012919309106,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":14996.33819912516,\\\"ask\\\":15026.360898222507,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":15011.349548673834,\\\"maxShares\\\":22900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.677943819018735,\\\"bias\\\":0.17794381901873502,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[14826.603319643013,14824.55269283128,14825.321077819723,14820.54432433352,14847.788038704964,14849.439844118895,14797.285181826259,14852.264686584009,14844.800684032114,14817.921745307538,14877.973443469704,14851.430738126886,14907.81488849453,14889.51187916831,14826.571610941804,14863.027932536457,14887.262836573642,14924.501017153148,14972.954529007111,15011.349548673834]}],[\\\"MGCP\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27453.02730004233,\\\"ask\\\":27728.937122153307,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":27590.98221109782,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.654495882156821,\\\"bias\\\":0.15449588215682097},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27445.645972251197,\\\"ask\\\":27721.481610163268,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":27583.563791207234,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6544543314952067,\\\"bias\\\":0.1544543314952067},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27505.76362408438,\\\"ask\\\":27782.20345950231,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":27643.983541793346,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6541160107380876,\\\"bias\\\":0.15411601073808756},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27456.88893910197,\\\"ask\\\":27732.837571655753,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":27594.863255378863,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6538416762534969,\\\"bias\\\":0.15384167625349687},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27402.958274629244,\\\"ask\\\":27678.36489045466,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":27540.661582541954,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6541444458939423,\\\"bias\\\":0.15414444589394227},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27440.613298256143,\\\"ask\\\":27716.398356530073,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":27578.50582739311,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6543562592570806,\\\"bias\\\":0.15435625925708063},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27547.22463673272,\\\"ask\\\":27824.081165745105,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":27685.652901238915,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6549559589512082,\\\"bias\\\":0.15495595895120817},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27567.11843927764,\\\"ask\\\":27844.17490600405,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":27705.646672640847,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6550678636273121,\\\"bias\\\":0.15506786362731206},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27630.499766126246,\\\"ask\\\":27908.193231112436,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":27769.346498619343,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6554243900800106,\\\"bias\\\":0.15542439008001063},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27586.387785126604,\\\"ask\\\":27863.637913620336,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":27725.01284937347,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.65567292126849,\\\"bias\\\":0.15567292126848997},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27685.384048420576,\\\"ask\\\":27963.629114233845,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":27824.506581327212,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6551142748222182,\\\"bias\\\":0.15511427482221818},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27712.291367883445,\\\"ask\\\":27990.80685901795,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":27851.5491134507,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6549635198484531,\\\"bias\\\":0.15496351984845314},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27803.281579940725,\\\"ask\\\":28082.71154556827,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":27942.9965627545,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6554723252498172,\\\"bias\\\":0.15547232524981724},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27788.251356847053,\\\"ask\\\":28067.530264956065,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":27927.89081090156,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6553882327423979,\\\"bias\\\":0.15538823274239788},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27855.930417082072,\\\"ask\\\":28135.88951675124,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":27995.909966916657,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6550097803731382,\\\"bias\\\":0.15500978037313817},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27939.92779897708,\\\"ask\\\":28220.731093439157,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":28080.32944620812,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6545423604907463,\\\"bias\\\":0.15454236049074632},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28035.552301023017,\\\"ask\\\":28317.316645756913,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":28176.434473389967,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.65507128226797,\\\"bias\\\":0.15507128226796996},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":27978.177680734425,\\\"ask\\\":28259.365396118686,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":28118.771538426558,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6553892856790325,\\\"bias\\\":0.15538928567903254},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28044.81135854389,\\\"ask\\\":28326.66875913227,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":28185.74005883808,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.655019205836266,\\\"bias\\\":0.15501920583626605},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28044.81135854389,\\\"ask\\\":28326.66875913227,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":28256.360366269106,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6546308000696969,\\\"bias\\\":0.15463080006969687},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28136.980529118413,\\\"ask\\\":28419.76425302915,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":28278.372391073783,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6545103409248325,\\\"bias\\\":0.1545103409248325,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28220.155484713687,\\\"ask\\\":28503.775137826382,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":28361.965311270036,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.654053597148359,\\\"bias\\\":0.15405359714835898,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28310.21807241905,\\\"ask\\\":28594.74287716698,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":28452.480474793017,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6545452480753715,\\\"bias\\\":0.1545452480753715,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28315.962731301206,\\\"ask\\\":28600.54527131428,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":28458.254001307745,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6545766081210548,\\\"bias\\\":0.15457660812105478,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28415.749097542972,\\\"ask\\\":28701.334515608727,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":28558.54180657585,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6540318751668286,\\\"bias\\\":0.1540318751668286,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28478.93710077505,\\\"ask\\\":28765.15757414967,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":28622.04733746236,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6543743953162174,\\\"bias\\\":0.15437439531621744,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28363.881728895467,\\\"ask\\\":28648.945866874314,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":28506.413797884892,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6550006002775679,\\\"bias\\\":0.1550006002775679,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28479.5671895757,\\\"ask\\\":28765.79399550108,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":28622.680592538392,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6556327886367006,\\\"bias\\\":0.1556327886367006,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28356.94374946775,\\\"ask\\\":28641.93815901014,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":28499.440954238948,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6563057888057187,\\\"bias\\\":0.15630578880571866,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28296.924622168797,\\\"ask\\\":28581.315824401645,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":28439.120223285223,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6566373208418377,\\\"bias\\\":0.15663732084183768,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28420.964530847832,\\\"ask\\\":28706.602365328712,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":28563.783448088274,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6559506992660877,\\\"bias\\\":0.15595069926608773,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28394.625525119187,\\\"ask\\\":28679.99864597465,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":28537.31208554692,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6558060385676143,\\\"bias\\\":0.15580603856761432,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28516.824852909613,\\\"ask\\\":28803.426107712723,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":28660.12548031117,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.656476566627997,\\\"bias\\\":0.15647656662799703,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28638.17852014667,\\\"ask\\\":28925.999409796383,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":28782.08896497153,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6558106788478912,\\\"bias\\\":0.15581067884789124,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28669.19229026576,\\\"ask\\\":28957.324876097573,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":28813.25858318167,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6556419433756793,\\\"bias\\\":0.15564194337567927,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28746.182358311613,\\\"ask\\\":29035.08871367153,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":28890.635535991572,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6552239726254062,\\\"bias\\\":0.15522397262540621,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28692.455987583682,\\\"ask\\\":28980.822379418692,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":28836.63918350119,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6549333171059644,\\\"bias\\\":0.15493331710596436,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28798.835277254137,\\\"ask\\\":29088.270807678797,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":28943.55304246647,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6543588909840892,\\\"bias\\\":0.15435889098408917,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28857.805575095186,\\\"ask\\\":29147.833771829806,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":29002.819673462498,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.654042816056471,\\\"bias\\\":0.15404281605647097,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28783.637051976002,\\\"ask\\\":29072.919836417972,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":28928.27844419699,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6536458846977482,\\\"bias\\\":0.1536458846977482,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28767.416595669834,\\\"ask\\\":29056.536360450435,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":28911.976478060136,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6535592517409419,\\\"bias\\\":0.15355925174094187,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28695.60025047652,\\\"ask\\\":28983.998242943617,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":28839.79924671007,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6539435637655865,\\\"bias\\\":0.1539435637655865,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28808.438797160266,\\\"ask\\\":29097.97084537293,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":28953.204821266598,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6533382177245558,\\\"bias\\\":0.1533382177245558,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28827.866354576745,\\\"ask\\\":29117.59365462274,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":28972.730004599744,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6532348109745421,\\\"bias\\\":0.15323481097454206,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28710.578108795497,\\\"ask\\\":28999.12663250198,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":28854.85237064874,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6526088172344049,\\\"bias\\\":0.1526088172344049,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28817.13431879635,\\\"ask\\\":29106.75375918626,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":28961.944038991307,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6531752083783097,\\\"bias\\\":0.15317520837830967,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28927.750486623383,\\\"ask\\\":29218.48164729296,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":29073.116066958173,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6525872368482654,\\\"bias\\\":0.15258723684826536,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":29039.678806468306,\\\"ask\\\":29331.534874875022,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":29185.606840671666,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.65199684067978,\\\"bias\\\":0.15199684067978003,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":29123.222850760812,\\\"ask\\\":29415.918557803634,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":29269.570704282225,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6524341193037861,\\\"bias\\\":0.15243411930378614,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":29056.02396398814,\\\"ask\\\":29348.04430533475,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":29202.034134661448,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6527866590434311,\\\"bias\\\":0.15278665904343114,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28943.263701092437,\\\"ask\\\":29234.150773465222,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":29088.70723727883,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.653381901653892,\\\"bias\\\":0.15338190165389198,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":29030.720789415507,\\\"ask\\\":29322.48682750008,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":29176.603808457796,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6529184316506941,\\\"bias\\\":0.15291843165069408,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":29152.366533623222,\\\"ask\\\":29445.355142001343,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":29298.860837812284,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6535591968785422,\\\"bias\\\":0.15355919687854225,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":29211.040841568272,\\\"ask\\\":29504.619141483527,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":29357.8299915259,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.6538682619966366,\\\"bias\\\":0.1538682619966366,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":29154.152053739137,\\\"ask\\\":29447.158607043042,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":29300.65533039109,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.346431982678435,\\\"bias\\\":0.153568017321565,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":29132.44378668526,\\\"ask\\\":29425.23216645094,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":29278.837976568102,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3465464150808576,\\\"bias\\\":0.1534535849191424,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":29068.558710234047,\\\"ask\\\":29360.705028929864,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":29214.631869581957,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.346883665857616,\\\"bias\\\":0.15311633414238401,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":29105.82246876755,\\\"ask\\\":29398.343297599382,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":29252.082883183466,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3470799497587166,\\\"bias\\\":0.1529200502412834,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":29109.848572028044,\\\"ask\\\":29402.409864209225,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":29256.129218118636,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3470587968806788,\\\"bias\\\":0.1529412031193212,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":29111.35739129039,\\\"ask\\\":29403.93384748426,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":29257.645619387324,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3470508696448946,\\\"bias\\\":0.15294913035510538,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":29101.977643143484,\\\"ask\\\":29394.459830511754,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":29248.21873682762,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.34700157319021335,\\\"bias\\\":0.15299842680978665,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":29048.57938850197,\\\"ask\\\":29340.52490999445,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":29194.55214924821,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3467203253933668,\\\"bias\\\":0.15327967460663322,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":29045.348115052962,\\\"ask\\\":29337.2611614354,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":29191.304638244183,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3467032731431797,\\\"bias\\\":0.15329672685682028,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28943.334144289438,\\\"ask\\\":29234.22192463405,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":29088.778034461746,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3472435843503735,\\\"bias\\\":0.1527564156496265,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28836.192896077744,\\\"ask\\\":29126.00387995792,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":28981.098388017832,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3478111527913265,\\\"bias\\\":0.15218884720867348,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28821.70127329124,\\\"ask\\\":29111.366612721304,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":28966.533943006274,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.34788767372064805,\\\"bias\\\":0.15211232627935195,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28769.514870863077,\\\"ask\\\":29058.65572383657,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":28914.085297349826,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.34761174987872256,\\\"bias\\\":0.15238825012127744,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28653.39299244587,\\\"ask\\\":28941.366791364922,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":28797.3798919054,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.34822932455329814,\\\"bias\\\":0.15177067544670186,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28704.602776922595,\\\"ask\\\":28993.091247042415,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":28848.847011982507,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3479580776687996,\\\"bias\\\":0.1520419223312004,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28596.036588562787,\\\"ask\\\":28883.433941211653,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":28739.735264887222,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3485353119273751,\\\"bias\\\":0.15146468807262492,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28560.927920505917,\\\"ask\\\":28847.972422219544,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":28704.450171362732,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3487215006769382,\\\"bias\\\":0.1512784993230618,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28440.196463443877,\\\"ask\\\":28726.027583679494,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":28583.112023561687,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3493636929230047,\\\"bias\\\":0.15063630707699532,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28510.12665200623,\\\"ask\\\":28796.660588207298,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":28653.393620106766,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.34899330077849994,\\\"bias\\\":0.15100669922150006,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28556.61382720603,\\\"ask\\\":28843.614971198047,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":28700.11439920204,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.34874707686765105,\\\"bias\\\":0.15125292313234895,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28485.362108892998,\\\"ask\\\":28771.647155213526,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":28628.504632053264,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.34912541261187824,\\\"bias\\\":0.15087458738812176,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28393.181515681834,\\\"ask\\\":28678.540123879637,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":28535.860819780737,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3496152382750659,\\\"bias\\\":0.1503847617249341,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":28465.989909014188,\\\"ask\\\":28752.08025985855,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":28609.03508443637,\\\"maxShares\\\":19200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0044,\\\"forecast\\\":0.3492296079124799,\\\"bias\\\":0.15077039208752008,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[29252.082883183466,29256.129218118636,29257.645619387324,29248.21873682762,29194.55214924821,29191.304638244183,29088.778034461746,28981.098388017832,28966.533943006274,28914.085297349826,28797.3798919054,28848.847011982507,28739.735264887222,28704.450171362732,28583.112023561687,28653.393620106766,28700.11439920204,28628.504632053264,28535.860819780737,28609.03508443637]}],[\\\"BLD\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74633.63725755547,\\\"ask\\\":75383.72406416405,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":75008.68066085977,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6288858325341377,\\\"bias\\\":0.12888583253413766},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74666.93891322707,\\\"ask\\\":75417.36040984241,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":75042.14966153474,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6288283234568139,\\\"bias\\\":0.12882832345681394},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74938.28719924636,\\\"ask\\\":75691.43581431416,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":75314.86150678026,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6292965004742402,\\\"bias\\\":0.12929650047424024},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74717.62604139866,\\\"ask\\\":75468.55695638759,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":75093.09149889313,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6289146532848703,\\\"bias\\\":0.12891465328487028},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74961.59331354604,\\\"ask\\\":75714.97616091835,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":75338.2847372322,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6284937224019176,\\\"bias\\\":0.1284937224019176},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74791.08502611404,\\\"ask\\\":75542.7542223564,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":75166.91962423522,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6282007831492665,\\\"bias\\\":0.12820078314926653},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74312.08097223705,\\\"ask\\\":75058.93605738514,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":74685.5085148111,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6273744209476529,\\\"bias\\\":0.12737442094765294},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74223.15072042393,\\\"ask\\\":74969.11203419702,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":74596.13137731048,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6275270342390517,\\\"bias\\\":0.12752703423905165},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":73941.10075572078,\\\"ask\\\":74684.22739648179,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":74312.66407610128,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6280134889325604,\\\"bias\\\":0.12801348893256037},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74137.26408335008,\\\"ask\\\":74882.36221484102,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":74509.81314909556,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6283531045416573,\\\"bias\\\":0.12835310454165727},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74578.6624318389,\\\"ask\\\":75328.19672763626,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":74953.42957973758,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6291172930920252,\\\"bias\\\":0.12911729309202524},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74698.91785096593,\\\"ask\\\":75449.66074394045,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":75074.28929745319,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6293254900975899,\\\"bias\\\":0.12932549009758987},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":75105.83569478149,\\\"ask\\\":75860.66821432703,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":75483.25195455426,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.62862099730044,\\\"bias\\\":0.12862099730043997},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":75173.23386013073,\\\"ask\\\":75928.74374817223,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":75550.98880415148,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6287364186809924,\\\"bias\\\":0.1287364186809924},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":74870.69917471678,\\\"ask\\\":75623.16851315614,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":75246.93384393647,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6282162254364217,\\\"bias\\\":0.12821622543642175},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":75245.26672726044,\\\"ask\\\":76001.50056371532,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":75623.38364548789,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.628857673136089,\\\"bias\\\":0.12885767313608898},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":75672.5277510256,\\\"ask\\\":76433.05566812132,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":76052.79170957346,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6281259877592044,\\\"bias\\\":0.12812598775920436},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":75929.98719403915,\\\"ask\\\":76693.10264322546,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":76311.54491863231,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6276900667397218,\\\"bias\\\":0.12769006673972183},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":76230.0124886849,\\\"ask\\\":76996.14326746564,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":76613.07787807527,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6271855197048459,\\\"bias\\\":0.12718551970484593},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":76230.0124886849,\\\"ask\\\":76996.14326746564,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":76931.55134472216,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6266568212829897,\\\"bias\\\":0.12665682128298972},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":76645.82666745181,\\\"ask\\\":77416.13648320509,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":77030.98157532845,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6264931235968271,\\\"bias\\\":0.12649312359682707,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":77021.72792962402,\\\"ask\\\":77795.81564750968,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":77408.77178856685,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6271134955972814,\\\"bias\\\":0.12711349559728136,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":77429.54787295284,\\\"ask\\\":78207.73428373628,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":77818.64107834456,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.627786544877845,\\\"bias\\\":0.12778654487784502,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":77403.48923255646,\\\"ask\\\":78181.41374745652,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":77792.4514900065,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6277435242898395,\\\"bias\\\":0.12774352428983948,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":77856.04343065685,\\\"ask\\\":78638.5162289549,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":78247.27982980588,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6284904010620714,\\\"bias\\\":0.12849040106207144,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":77569.86378952929,\\\"ask\\\":78349.46041052957,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":77959.66210002944,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6280163595326954,\\\"bias\\\":0.1280163595326954,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":78091.90459027592,\\\"ask\\\":78876.74785248975,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":78484.32622138284,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6288779023996579,\\\"bias\\\":0.1288779023996579,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":77567.02410286486,\\\"ask\\\":78346.59218430068,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":77956.80814358278,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6297499933044003,\\\"bias\\\":0.1297499933044003,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":78123.51925778243,\\\"ask\\\":78908.68025534808,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":78516.09975656527,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.630680868808,\\\"bias\\\":0.130680868808,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":78398.4367799231,\\\"ask\\\":79186.36076766101,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":78792.39877379205,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6302210013956612,\\\"bias\\\":0.13022100139566117,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":77832.38944887715,\\\"ask\\\":78614.6245187151,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":78223.50698379613,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6311680524987827,\\\"bias\\\":0.13116805249878272,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":77952.17206066057,\\\"ask\\\":78735.61097584307,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":78343.89151825182,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6313699177122509,\\\"bias\\\":0.13136991771225093,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":78508.7565198752,\\\"ask\\\":79297.78924871815,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":78903.27288429668,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6323079089532141,\\\"bias\\\":0.1323079089532141,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":79063.05031764566,\\\"ask\\\":79857.653838426,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":79460.35207803584,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6332420398270125,\\\"bias\\\":0.13324203982701255,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":78921.25126892205,\\\"ask\\\":79714.42967363482,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":79317.84047127844,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6330026417663674,\\\"bias\\\":0.13300264176636745,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":78571.18302032561,\\\"ask\\\":79360.84315118314,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":78966.01308575438,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6335952254601857,\\\"bias\\\":0.13359522546018565,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":78815.27485755052,\\\"ask\\\":79607.38817270179,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":79211.33151512616,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6340102568084933,\\\"bias\\\":0.13401025680849332,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":79300.083038762,\\\"ask\\\":80097.06879794553,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":79698.57591835376,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6331859334906539,\\\"bias\\\":0.13318593349065388,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":79569.48591198225,\\\"ask\\\":80369.17923773082,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":79969.33257485654,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6336384005219604,\\\"bias\\\":0.1336384005219604,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":79909.65175064125,\\\"ask\\\":80712.76382853714,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":80311.2077895892,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6342097152422903,\\\"bias\\\":0.1342097152422903,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":79984.40526699895,\\\"ask\\\":80788.26863651651,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":80386.33695175774,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6343352651342486,\\\"bias\\\":0.13433526513424865,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":80316.51644228493,\\\"ask\\\":81123.71761255915,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":80720.11702742205,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6337774783677265,\\\"bias\\\":0.13377747836772647,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":79795.92971289044,\\\"ask\\\":80597.89885573355,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":80196.914284312,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6329047173111076,\\\"bias\\\":0.13290471731110765,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":79706.75047321068,\\\"ask\\\":80507.82334228816,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":80107.28690774943,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6330534166567627,\\\"bias\\\":0.13305341665676274,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":79170.15840232963,\\\"ask\\\":79965.83838627263,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":79567.99839430113,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6321516196940886,\\\"bias\\\":0.13215161969408862,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":79657.65156081914,\\\"ask\\\":80458.23097349069,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":80057.94126715492,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6313378912415473,\\\"bias\\\":0.13133789124154727,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":80164.95230585229,\\\"ask\\\":80970.63021847392,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":80567.79126216311,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6321743182359717,\\\"bias\\\":0.1321743182359717,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":80679.5644656065,\\\"ask\\\":81490.41435973319,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":81084.98941266985,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6313258363319103,\\\"bias\\\":0.1313258363319103,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":81064.65018675645,\\\"ask\\\":81879.37028913591,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":81472.01023794619,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6319526580645817,\\\"bias\\\":0.13195265806458167,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":81375.69831342656,\\\"ask\\\":82193.54452763185,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":81784.6214205292,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6314463507283312,\\\"bias\\\":0.13144635072833122,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":80853.09111182956,\\\"ask\\\":81665.68499235045,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":81259.38805209001,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6305967257038624,\\\"bias\\\":0.13059672570386238,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":81258.4263160461,\\\"ask\\\":82075.09391721238,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":81666.76011662924,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6299420141800943,\\\"bias\\\":0.12994201418009432,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":80697.41848148343,\\\"ask\\\":81508.44781295562,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":81102.93314721953,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6308453700663871,\\\"bias\\\":0.13084537006638708,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":80428.84928553482,\\\"ask\\\":81237.17942910803,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":80833.01435732143,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.6304084492830552,\\\"bias\\\":0.13040844928305517,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":80169.30911235865,\\\"ask\\\":80975.03081198034,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":80572.1699621695,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.369169366318884,\\\"bias\\\":0.13083063368111603,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":80268.42118609628,\\\"ask\\\":81075.13898696157,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":80671.78008652893,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3690076224351445,\\\"bias\\\":0.1309923775648555,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":79976.80598461727,\\\"ask\\\":80780.59297943754,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":80378.69948202741,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3694852530194809,\\\"bias\\\":0.13051474698051913,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":79807.06969411843,\\\"ask\\\":80609.15079657188,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":80208.11024534516,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3697628360593391,\\\"bias\\\":0.13023716394066093,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":79788.75848912864,\\\"ask\\\":80590.65555937112,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":80189.70702424989,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3697329471445174,\\\"bias\\\":0.13026705285548262,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":79781.89773556803,\\\"ask\\\":80583.72585351342,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":80182.81179454073,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.36974414931157634,\\\"bias\\\":0.13025585068842366,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":79824.55993295691,\\\"ask\\\":80626.8168167052,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":80225.68837483106,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.36967449690957976,\\\"bias\\\":0.13032550309042024,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":79581.85065302803,\\\"ask\\\":80381.66824753082,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":79981.75945027942,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3700719645325602,\\\"bias\\\":0.1299280354674398,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":79596.5392848134,\\\"ask\\\":80396.50450375625,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":79996.52189428483,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.37009594569228343,\\\"bias\\\":0.12990405430771657,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":79133.79266171665,\\\"ask\\\":79929.10716082937,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":79531.44991127301,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.36933631241254866,\\\"bias\\\":0.13066368758745134,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":78648.97100839116,\\\"ask\\\":79439.41292807348,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":79044.19196823232,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3685308526050835,\\\"bias\\\":0.1314691473949165,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":78714.57958820608,\\\"ask\\\":79505.6808906001,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":79110.1302394031,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3684211816972576,\\\"bias\\\":0.13157881830274237,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":78478.39849102996,\\\"ask\\\":79267.12611405538,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":78872.76230254267,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3680251946451591,\\\"bias\\\":0.1319748053548409,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":79006.06351919792,\\\"ask\\\":79800.09430833558,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":79403.07891376676,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.36891255334161593,\\\"bias\\\":0.13108744665838407,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":78772.49104839517,\\\"ask\\\":79564.1743755147,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":79168.33271195494,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.36930124764847,\\\"bias\\\":0.13069875235153,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":78279.42335494836,\\\"ask\\\":79066.1512278624,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":78672.78729140539,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.36847800024070443,\\\"bias\\\":0.13152199975929557,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":78439.07001672445,\\\"ask\\\":79227.40237870158,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":78833.23619771302,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3682097682160959,\\\"bias\\\":0.1317902317839041,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":77890.48688171522,\\\"ask\\\":78673.30584535054,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":78281.89636353288,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.36913796755609235,\\\"bias\\\":0.13086203244390765,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":78208.23772318488,\\\"ask\\\":78994.25016261387,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":78601.24394289938,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3696718135055807,\\\"bias\\\":0.1303281864944193,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":77997.2372574752,\\\"ask\\\":78781.12908920861,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":78389.18317334191,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.36931924578635955,\\\"bias\\\":0.13068075421364045,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":77674.88966840557,\\\"ask\\\":78455.54182587698,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":78065.21574714128,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.3698615655275062,\\\"bias\\\":0.1301384344724938,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":78093.27482513143,\\\"ask\\\":78878.13185854984,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":78485.70334184064,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.36916059267083057,\\\"bias\\\":0.13083940732916943,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":77762.4428577843,\\\"ask\\\":78543.97494680726,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":78153.20890229578,\\\"maxShares\\\":15800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.36971723488707897,\\\"bias\\\":0.13028276511292103,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[80208.11024534516,80189.70702424989,80182.81179454073,80225.68837483106,79981.75945027942,79996.52189428483,79531.44991127301,79044.19196823232,79110.1302394031,78872.76230254267,79403.07891376676,79168.33271195494,78672.78729140539,78833.23619771302,78281.89636353288,78601.24394289938,78389.18317334191,78065.21574714128,78485.70334184064,78153.20890229578]}],[\\\"CLRK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23579.98152926906,\\\"ask\\\":23674.490473274145,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":23627.2360012716,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33525023934823417,\\\"bias\\\":0.16474976065176583},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23570.328829406386,\\\"ask\\\":23664.79908523567,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":23617.56395732103,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33518276977648875,\\\"bias\\\":0.16481723022351125},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23491.973205150553,\\\"ask\\\":23586.129410381614,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":23539.051307766083,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33573250465186516,\\\"bias\\\":0.16426749534813484},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23428.4695548539,\\\"ask\\\":23522.37123643648,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":23475.42039564519,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33617775719195414,\\\"bias\\\":0.16382224280804586},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23358.468463308956,\\\"ask\\\":23452.089579394364,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":23405.27902135166,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3366687027277848,\\\"bias\\\":0.16333129727221518},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23309.694933084436,\\\"ask\\\":23403.12056407876,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":23356.407748581598,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3363269460472712,\\\"bias\\\":0.1636730539527288},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23172.604685351485,\\\"ask\\\":23265.48085643506,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":23219.042770893273,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33729524373405534,\\\"bias\\\":0.16270475626594466},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23198.08688602972,\\\"ask\\\":23291.06519018214,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":23244.57603810593,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3374741651503902,\\\"bias\\\":0.1625258348496098},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23279.303382594797,\\\"ask\\\":23372.607203767522,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":23325.95529318116,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3369051622419758,\\\"bias\\\":0.1630948377580242},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23222.7579349736,\\\"ask\\\":23315.835121085718,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":23269.29652802966,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33730228435088105,\\\"bias\\\":0.16269771564911895},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23096.548108753494,\\\"ask\\\":23189.11944385872,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":23142.833776306106,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3381913371358166,\\\"bias\\\":0.16180866286418338},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23130.72944890776,\\\"ask\\\":23223.43778337232,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":23177.08361614004,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3384308030906088,\\\"bias\\\":0.1615691969093912},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23246.376269029224,\\\"ask\\\":23339.54811780289,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":23292.962193416057,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33762300479382695,\\\"bias\\\":0.16237699520617305},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23227.24586899546,\\\"ask\\\":23320.34104281909,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":23273.793455907275,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33748926802227447,\\\"bias\\\":0.16251073197772553},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23141.422555139397,\\\"ask\\\":23234.173747745168,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":23187.798151442283,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33809196258533647,\\\"bias\\\":0.16190803741466353},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23035.650561799383,\\\"ask\\\":23127.977818560103,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":23081.814190179743,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3373485350963156,\\\"bias\\\":0.16265146490368437},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22916.221766989056,\\\"ask\\\":23008.070351225488,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":22962.146059107272,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3381961996295487,\\\"bias\\\":0.16180380037045128},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22987.780977919097,\\\"ask\\\":23079.916372620177,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":23033.848675269637,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33769094390294074,\\\"bias\\\":0.16230905609705926},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23071.147855835035,\\\"ask\\\":23163.617386319347,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":23117.38262107719,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3382795696288119,\\\"bias\\\":0.1617204303711881},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23071.147855835035,\\\"ask\\\":23163.617386319347,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":23029.519391533075,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3388965724873648,\\\"bias\\\":0.16110342751263518},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22956.229173386368,\\\"ask\\\":23048.238107949037,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":23002.233640667702,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3390876768842394,\\\"bias\\\":0.1609123231157606,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23059.56187058697,\\\"ask\\\":23151.984964256655,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":23105.773417421813,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33836336348612944,\\\"bias\\\":0.16163663651387056,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23171.623826039595,\\\"ask\\\":23264.49606582332,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":23218.059945931458,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33757786211094365,\\\"bias\\\":0.16242213788905635,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23164.46625849983,\\\"ask\\\":23257.309810638108,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":23210.88803456897,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3376280487808596,\\\"bias\\\":0.1623719512191404,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23040.825959811762,\\\"ask\\\":23133.173959650685,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":23086.999959731223,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33675673815239876,\\\"bias\\\":0.16324326184760124,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22963.071086386753,\\\"ask\\\":23055.10744344642,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":23009.089264916587,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.336203982856093,\\\"bias\\\":0.163796017143907,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23104.909325559933,\\\"ask\\\":23197.514172556166,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":23151.21174905805,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3351922480333478,\\\"bias\\\":0.1648077519666522,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22962.299118396568,\\\"ask\\\":23054.33238139615,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":23008.31574989636,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33621580702144854,\\\"bias\\\":0.16378419297855146,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22812.08828902588,\\\"ask\\\":22903.519504613156,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":22857.803896819518,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3351373367317753,\\\"bias\\\":0.16486266326822469,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22738.647523656073,\\\"ask\\\":22829.784387478343,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":22784.215955567208,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3356698064030135,\\\"bias\\\":0.16433019359698647,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22890.42556908506,\\\"ask\\\":22982.170761746722,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":22936.29816541589,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3345729198989605,\\\"bias\\\":0.16542708010103951,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22922.758064484537,\\\"ask\\\":23014.632846306115,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":22968.695455395326,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33480658398223295,\\\"bias\\\":0.16519341601776705,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23072.975958244213,\\\"ask\\\":23165.452815792283,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":23119.214387018248,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33588913290358646,\\\"bias\\\":0.16411086709641354,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22924.426068253862,\\\"ask\\\":23016.307535461292,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":22970.366801857577,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3348256972833964,\\\"bias\\\":0.1651743027166036,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22962.229373169976,\\\"ask\\\":23054.262356629573,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":23008.245864899774,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33509807638293465,\\\"bias\\\":0.16490192361706535,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23056.127174470326,\\\"ask\\\":23148.536501822913,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":23102.33183814662,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3344237547477744,\\\"bias\\\":0.16557624525222558,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23121.86695737889,\\\"ask\\\":23214.539770835316,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":23168.203364107103,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33489586120066334,\\\"bias\\\":0.16510413879933666,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22992.062555441753,\\\"ask\\\":23084.215110774185,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":23038.13883310797,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33396374630481546,\\\"bias\\\":0.16603625369518454,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22920.595412771057,\\\"ask\\\":23012.461526649902,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":22966.52846971048,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3344814526042221,\\\"bias\\\":0.16551854739577793,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22831.013305398963,\\\"ask\\\":22922.520372755273,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":22876.766839077118,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3351308981669986,\\\"bias\\\":0.1648691018330014,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22811.427709100823,\\\"ask\\\":22902.85627707317,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":22857.141993086996,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33498934369212235,\\\"bias\\\":0.16501065630787765,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22724.825162524437,\\\"ask\\\":22815.906626101692,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":22770.365894313065,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33561818650813086,\\\"bias\\\":0.16438181349186914,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22860.895933996948,\\\"ask\\\":22952.52277140776,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":22906.709352702353,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33660246515572967,\\\"bias\\\":0.16339753484427033,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22837.444569855885,\\\"ask\\\":22928.977413823246,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":22883.210991839565,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33643467514412556,\\\"bias\\\":0.16356532485587444,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22979.50796378679,\\\"ask\\\":23071.610200114592,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":23025.55908195069,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33541719505315654,\\\"bias\\\":0.16458280494684346,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":23109.375224249277,\\\"ask\\\":23201.99797063905,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":23155.686597444164,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.336347324542063,\\\"bias\\\":0.163652675457937,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22975.084178600642,\\\"ask\\\":23067.168684326498,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":23021.12643146357,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33730388638704256,\\\"bias\\\":0.16269611361295744,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22840.51261620417,\\\"ask\\\":22932.057756950482,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":22886.285186577326,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33826245813946443,\\\"bias\\\":0.16173754186053557,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22940.57057976127,\\\"ask\\\":23032.516754429653,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":22986.543667095462,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33755393073724604,\\\"bias\\\":0.16244606926275396,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22860.06509259809,\\\"ask\\\":22951.688599983256,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":22905.876846290674,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3369818501289552,\\\"bias\\\":0.1630181498710448,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22725.24973469529,\\\"ask\\\":22816.332899964615,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":22770.791317329953,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3360147606370424,\\\"bias\\\":0.1639852393629576,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22829.8127993834,\\\"ask\\\":22921.315055092353,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":22875.563927237876,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3367692869631151,\\\"bias\\\":0.1632307130368849,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22685.068548486637,\\\"ask\\\":22775.99066691745,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":22730.529607702043,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33572777777695734,\\\"bias\\\":0.16427222222304266,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22615.75671138185,\\\"ask\\\":22706.40102685833,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":22661.07886912009,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33522432305497424,\\\"bias\\\":0.16477567694502576,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22682.955201548957,\\\"ask\\\":22773.86884965136,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":22728.41202560016,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.334734722956765,\\\"bias\\\":0.16526527704323501,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22657.246656591633,\\\"ask\\\":22748.057264433686,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":22702.65196051266,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33454720106281444,\\\"bias\\\":0.16545279893718556,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22581.67582267924,\\\"ask\\\":22672.183541407412,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":22626.929682043326,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.335100898055323,\\\"bias\\\":0.164899101944677,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22625.755809172442,\\\"ask\\\":22716.440201193174,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":22671.09800518281,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33542278515721663,\\\"bias\\\":0.16457721484278337,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22630.52154818414,\\\"ask\\\":22721.225041363232,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":22675.873294773686,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33545745060927173,\\\"bias\\\":0.16454254939072827,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22628.73555545304,\\\"ask\\\":22719.431890344636,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":22674.08372289884,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3354704372737916,\\\"bias\\\":0.1645295627262084,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22617.63517164164,\\\"ask\\\":22708.287016016955,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":22662.961093829297,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3355511858260043,\\\"bias\\\":0.1644488141739957,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22680.94505079803,\\\"ask\\\":22771.850642183992,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":22726.39784649101,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3360115007295633,\\\"bias\\\":0.16398849927043668,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22677.103497752058,\\\"ask\\\":22767.993692131826,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":22722.54859494194,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33598372070382326,\\\"bias\\\":0.16401627929617674,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22556.04475268091,\\\"ask\\\":22646.449741669614,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":22601.247247175263,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3368639993679483,\\\"bias\\\":0.1631360006320517,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22429.147077805395,\\\"ask\\\":22519.043458878765,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":22474.09526834208,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3359410227118639,\\\"bias\\\":0.16405897728813612,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22411.98776420965,\\\"ask\\\":22501.815370479027,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":22456.90156734434,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3358154140657634,\\\"bias\\\":0.16418458593423663,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22473.89299160778,\\\"ask\\\":22563.968715021034,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":22518.930853314407,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3353619119384885,\\\"bias\\\":0.16463808806151148,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22336.0557393296,\\\"ask\\\":22425.579008825913,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":22380.817374077757,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3363779042848352,\\\"bias\\\":0.16362209571516478,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22396.842010428907,\\\"ask\\\":22486.60891227431,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":22441.72546135161,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3359326163081194,\\\"bias\\\":0.16406738369188062,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22526.320510309462,\\\"ask\\\":22616.606364058196,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":22571.46343718383,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3349841255025915,\\\"bias\\\":0.1650158744974085,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22484.234063228832,\\\"ask\\\":22574.351233822934,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":22529.292648525883,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33467524542911564,\\\"bias\\\":0.16532475457088436,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22629.57503972959,\\\"ask\\\":22720.274739287623,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":22674.924889508606,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33360656498389746,\\\"bias\\\":0.16639343501610254,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22545.162376812517,\\\"ask\\\":22635.523749064272,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":22590.343062938395,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.3342295683895448,\\\"bias\\\":0.16577043161045518,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22601.13936196133,\\\"ask\\\":22691.72509086699,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":22646.43222641416,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33464115686397133,\\\"bias\\\":0.16535884313602867,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22687.224079165037,\\\"ask\\\":22778.154836997364,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":22732.6894580812,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33527098658275334,\\\"bias\\\":0.16472901341724666,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22575.61816299717,\\\"ask\\\":22666.101602528222,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":22620.859882762696,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33445662427696304,\\\"bias\\\":0.16554337572303696,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":22487.809640174088,\\\"ask\\\":22577.941141737912,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":22532.875390956,\\\"maxShares\\\":14000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.33510302423845234,\\\"bias\\\":0.16489697576154766,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[22671.09800518281,22675.873294773686,22674.08372289884,22662.961093829297,22726.39784649101,22722.54859494194,22601.247247175263,22474.09526834208,22456.90156734434,22518.930853314407,22380.817374077757,22441.72546135161,22571.46343718383,22529.292648525883,22674.924889508606,22590.343062938395,22646.43222641416,22732.6894580812,22620.859882762696,22532.875390956]}],[\\\"OMTK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22037.207971526692,\\\"ask\\\":22303.250723698042,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":22170.229347612367,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6625397526798719,\\\"bias\\\":0.16253975267987186},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22046.50221445129,\\\"ask\\\":22312.657170762577,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":22179.579692606934,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6626083041927615,\\\"bias\\\":0.1626083041927615},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22122.231640007987,\\\"ask\\\":22389.300834857175,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":22255.76623743258,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6620497469510057,\\\"bias\\\":0.1620497469510057},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22060.650549733196,\\\"ask\\\":22326.97631089698,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":22193.813430315087,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6615973940127503,\\\"bias\\\":0.1615973940127503},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22128.735802057352,\\\"ask\\\":22395.883517977563,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":22262.309660017458,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.662096128142167,\\\"bias\\\":0.162096128142167},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22176.420440383066,\\\"ask\\\":22444.14382598125,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":22310.282133182158,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6624454248807424,\\\"bias\\\":0.16244542488074243},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22311.53353564421,\\\"ask\\\":22580.88806524957,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":22446.21080044689,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6634351474658482,\\\"bias\\\":0.1634351474658482},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22336.80124009251,\\\"ask\\\":22606.460812407513,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":22471.631026250012,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6636202369845061,\\\"bias\\\":0.16362023698450612},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22417.336738080452,\\\"ask\\\":22687.968569928507,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":22552.65265400448,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.664210170929157,\\\"bias\\\":0.16421017092915702},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22361.263649113727,\\\"ask\\\":22631.218542261984,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":22496.241095687856,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6646219442380468,\\\"bias\\\":0.16462194423804677},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22236.12843148953,\\\"ask\\\":22504.572637905905,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":22370.350534697718,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6655483646300416,\\\"bias\\\":0.16554836463004163},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22202.28970095587,\\\"ask\\\":22470.325391510665,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":22336.307546233267,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6652960507211404,\\\"bias\\\":0.1652960507211404},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22316.6081753377,\\\"ask\\\":22586.02396819892,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":22451.31607176831,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6644449496592995,\\\"bias\\\":0.16444494965929946},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22297.69516776561,\\\"ask\\\":22566.882634579684,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":22432.288901172647,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6645844326217626,\\\"bias\\\":0.1645844326217626},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22212.856483235322,\\\"ask\\\":22481.019740578202,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":22346.938111906762,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.663955826986628,\\\"bias\\\":0.16395582698662803},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22317.895078667952,\\\"ask\\\":22587.32640758547,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":22452.610743126712,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6631805241887792,\\\"bias\\\":0.16318052418877915},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22198.75198290819,\\\"ask\\\":22466.744964593196,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":22332.748473750693,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6623047167184077,\\\"bias\\\":0.16230471671840774},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22270.14000900249,\\\"ask\\\":22538.99481796429,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":22404.56741348339,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6617827678556409,\\\"bias\\\":0.16178276785564094},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22353.315183811534,\\\"ask\\\":22623.174119632193,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":22488.244651721863,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6611785368094039,\\\"bias\\\":0.16117853680940386},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22353.315183811534,\\\"ask\\\":22623.174119632193,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":22576.603924549643,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6618118284926138,\\\"bias\\\":0.16181182849261377},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22413.762944391834,\\\"ask\\\":22684.351631849284,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":22549.05728812056,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6620095029032314,\\\"bias\\\":0.16200950290323135,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22310.33981203613,\\\"ask\\\":22579.679930491293,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":22445.009871263712,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6627605237484004,\\\"bias\\\":0.16276052374840044,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22199.23841791495,\\\"ask\\\":22467.23727205477,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":22333.23784498486,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6635750976880967,\\\"bias\\\":0.16357509768809675,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22206.302496474975,\\\"ask\\\":22474.386631241276,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":22340.344563858125,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6635230460222342,\\\"bias\\\":0.16352304602223422,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22329.021703869097,\\\"ask\\\":22598.587358241763,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":22463.80453105543,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6644267272452431,\\\"bias\\\":0.1644267272452431,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22406.886586330886,\\\"ask\\\":22677.392259405304,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":22542.139422868095,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6638533448570524,\\\"bias\\\":0.16385334485705239,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22265.25331395973,\\\"ask\\\":22534.04912861518,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":22399.651221287455,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6648956453911548,\\\"bias\\\":0.16489564539115475,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22123.749462546133,\\\"ask\\\":22390.83698120866,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":22257.293221877397,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6638409702356762,\\\"bias\\\":0.16384097023567623,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":21974.7330525991,\\\"ask\\\":22240.02158039708,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":22107.37731649809,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6627299217816031,\\\"bias\\\":0.16272992178160306,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22047.825156122555,\\\"ask\\\":22313.996083560654,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":22180.910619841605,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6632711921697692,\\\"bias\\\":0.16327119216976915,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22199.385077166222,\\\"ask\\\":22467.38570184026,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":22333.38538950324,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6621488425131145,\\\"bias\\\":0.16214884251311446,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22167.139563386325,\\\"ask\\\":22434.75090620387,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":22300.945234795097,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6619129720833417,\\\"bias\\\":0.16191297208334166,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22316.742025558055,\\\"ask\\\":22586.15943431731,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":22451.450729937682,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.663005696708995,\\\"bias\\\":0.163005696708995,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22168.800414273835,\\\"ask\\\":22436.431807605106,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":22302.61611093947,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6640935014151131,\\\"bias\\\":0.16409350141511314,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22131.215734234913,\\\"ask\\\":22398.39338897417,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":22264.804561604542,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6643721757464834,\\\"bias\\\":0.16437217574648344,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22224.416811430892,\\\"ask\\\":22492.719630079955,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":22358.568220755424,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6636799560318241,\\\"bias\\\":0.16367995603182406,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22289.676736102094,\\\"ask\\\":22558.76740092425,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":22424.222068513172,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6631993251252201,\\\"bias\\\":0.16319932512522006,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22160.830478804193,\\\"ask\\\":22428.36565561068,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":22294.598067207437,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6641481894855172,\\\"bias\\\":0.16414818948551724,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22231.991282325933,\\\"ask\\\":22500.385543279564,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":22366.18841280275,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6636210920434066,\\\"bias\\\":0.16362109204340658,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22321.8269374317,\\\"ask\\\":22591.30573345703,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":22456.566335444364,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6642822567499853,\\\"bias\\\":0.1642822567499853,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22302.107046206213,\\\"ask\\\":22571.347775134258,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":22436.727410670235,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6641369956665067,\\\"bias\\\":0.16413699566650675,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22389.6357095244,\\\"ask\\\":22659.933122516642,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":22524.78441602052,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.664781181070244,\\\"bias\\\":0.16478118107024398,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22527.701350028856,\\\"ask\\\":22799.665551437658,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":22663.683450733257,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6637650582711639,\\\"bias\\\":0.16376505827116394,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22551.52519048717,\\\"ask\\\":22823.777003652,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":22687.651097069585,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6635918709334823,\\\"bias\\\":0.16359187093348226,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22695.99759027416,\\\"ask\\\":22969.993537038037,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":22832.9955636561,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.664639893627281,\\\"bias\\\":0.16463989362728104,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22564.66812008507,\\\"ask\\\":22837.078600408026,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":22700.873360246547,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6655981204395254,\\\"bias\\\":0.16559812043952538,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22429.651646463077,\\\"ask\\\":22700.432149237276,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":22565.041897850177,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6646012938007264,\\\"bias\\\":0.1646012938007264,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22565.747302888594,\\\"ask\\\":22838.17081157538,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":22701.959057231987,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6656000396342059,\\\"bias\\\":0.1656000396342059,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22667.552470073784,\\\"ask\\\":22941.205014984134,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":22804.37874252896,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.66485293653611,\\\"bias\\\":0.16485293653611,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22749.762903417002,\\\"ask\\\":23024.40792840795,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":22887.085415912476,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6642550496946247,\\\"bias\\\":0.16425504969462468,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22888.752363332653,\\\"ask\\\":23165.075329489588,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":23026.91384641112,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.663251535031971,\\\"bias\\\":0.16325153503197098,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22997.21147616688,\\\"ask\\\":23274.843807871108,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":23136.027642018995,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6624779622143123,\\\"bias\\\":0.16247796221431232,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22847.081901696125,\\\"ask\\\":23122.901803929883,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":22984.991852813004,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6635456148551646,\\\"bias\\\":0.1635456148551646,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22919.192867615307,\\\"ask\\\":23195.88332476962,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":23057.538096192464,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6640618047261421,\\\"bias\\\":0.16406180472614207,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22849.273887746825,\\\"ask\\\":23125.12025258884,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":22987.197070167833,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3364402258450781,\\\"bias\\\":0.1635597741549219,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22875.974244009907,\\\"ask\\\":23152.142947156906,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":23014.058595583407,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.33624909923590446,\\\"bias\\\":0.16375090076409554,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22954.815209326785,\\\"ask\\\":23231.93571487198,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":23093.375462099382,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3368134589851348,\\\"bias\\\":0.16318654101486518,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22908.761863242657,\\\"ask\\\":23185.32639277879,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":23047.044128010722,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.33714151190630504,\\\"bias\\\":0.16285848809369496,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22903.79355116078,\\\"ask\\\":23180.298101074186,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":23042.045826117483,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3371768393201775,\\\"bias\\\":0.1628231606798225,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22901.932039292682,\\\"ask\\\":23178.414116225795,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":23040.17307775924,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3371900738911948,\\\"bias\\\":0.16280992610880518,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22913.5074713581,\\\"ask\\\":23190.12929193788,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":23051.81838164799,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3372723636838645,\\\"bias\\\":0.16272763631613552,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22847.64469792956,\\\"ask\\\":23123.471394484044,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":22985.558046206803,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3377414577013421,\\\"bias\\\":0.16225854229865788,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22843.659414468853,\\\"ask\\\":23119.437998949365,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":22981.54870670911,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.337713150227778,\\\"bias\\\":0.16228684977222202,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22969.921565704157,\\\"ask\\\":23247.224441748876,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":23108.573003726517,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.336816153542717,\\\"bias\\\":0.163183846457283,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22836.860318622952,\\\"ask\\\":23112.55682146347,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":22974.70857004321,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3358653465661814,\\\"bias\\\":0.1641346534338186,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22818.867967488084,\\\"ask\\\":23094.347258846086,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":22956.607613167085,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.33599476439366477,\\\"bias\\\":0.16400523560633523,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22754.141532181093,\\\"ask\\\":23028.83941788147,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":22891.49047503128,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.33646129371789646,\\\"bias\\\":0.16353870628210354,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22610.445909816422,\\\"ask\\\":22883.409039512393,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":22746.927474664408,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3375006273194385,\\\"bias\\\":0.16249937268056153,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22547.253204534223,\\\"ask\\\":22819.453444428,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":22683.35332448111,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3379560608426793,\\\"bias\\\":0.16204393915732068,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22681.492233704394,\\\"ask\\\":22955.313065499617,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":22818.402649602005,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3369913038109442,\\\"bias\\\":0.16300869618905578,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22725.215246344247,\\\"ask\\\":22999.56392135042,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":22862.389583847333,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.33730553495633986,\\\"bias\\\":0.16269446504366014,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22574.931949468446,\\\"ask\\\":22847.46633920046,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":22711.199144334452,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3362224636697935,\\\"bias\\\":0.16377753633020647,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22488.21907464256,\\\"ask\\\":22759.706628863594,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":22623.962851753076,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3368539774842026,\\\"bias\\\":0.1631460225157974,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22545.721410649992,\\\"ask\\\":22817.903158062265,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":22681.81228435613,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3372711415723788,\\\"bias\\\":0.1627288584276212,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22634.158440456944,\\\"ask\\\":22907.407838128456,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":22770.7831392927,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3366328272491823,\\\"bias\\\":0.1633671727508177,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22519.506680299823,\\\"ask\\\":22791.371952094185,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":22655.439316197004,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3358010890511089,\\\"bias\\\":0.1641989109488911,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":22610.063815581478,\\\"ask\\\":22883.022332469784,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":22746.54307402563,\\\"maxShares\\\":10700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.33514080003132735,\\\"bias\\\":0.16485919996867265,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[23047.044128010722,23042.045826117483,23040.17307775924,23051.81838164799,22985.558046206803,22981.54870670911,23108.573003726517,22974.70857004321,22956.607613167085,22891.49047503128,22746.927474664408,22683.35332448111,22818.402649602005,22862.389583847333,22711.199144334452,22623.962851753076,22681.81228435613,22770.7831392927,22655.439316197004,22746.54307402563]}],[\\\"FSIG\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":52215.06275487484,\\\"ask\\\":52634.46084929151,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":52424.76180208317,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.37635270708396235,\\\"bias\\\":0.12364729291603765},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":52249.53169410074,\\\"ask\\\":52669.20664746701,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":52459.36917078387,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3764343308683668,\\\"bias\\\":0.1235656691316332},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":51970.114386456924,\\\"ask\\\":52387.545024099156,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":52178.82970527804,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3757699800776561,\\\"bias\\\":0.12423001992234389},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":51744.03341955659,\\\"ask\\\":52159.648145818086,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":51951.84078268734,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3763127681281037,\\\"bias\\\":0.12368723187189629},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":51993.992938110314,\\\"ask\\\":52411.61537134815,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":52202.80415472923,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3769102631219566,\\\"bias\\\":0.12308973687804342},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":51819.214690327775,\\\"ask\\\":52235.43328221796,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":52027.323986272866,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.37649510035540135,\\\"bias\\\":0.12350489964459865},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":51329.71824586518,\\\"ask\\\":51742.00513940626,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":51535.86169263572,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3753173185300625,\\\"bias\\\":0.1246826814699375},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":51420.705364462956,\\\"ask\\\":51833.72307823375,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":51627.21422134835,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3755383311970648,\\\"bias\\\":0.12446166880293519},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":51132.14607862755,\\\"ask\\\":51542.84604713058,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":51337.496062879065,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.37483594389244373,\\\"bias\\\":0.12516405610755627},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50932.240192281315,\\\"ask\\\":51341.334491014495,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":51136.787341647905,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3753272050559113,\\\"bias\\\":0.12467279494408873},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50487.527883301416,\\\"ask\\\":50893.05019561709,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":50690.289039459254,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.37422904222578196,\\\"bias\\\":0.12577095777421804},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50367.37332135079,\\\"ask\\\":50771.93053678332,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":50569.651929067055,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3745290768184349,\\\"bias\\\":0.1254709231815651},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49964.696553683105,\\\"ask\\\":50366.01941756812,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":50165.35798562561,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.37351787832694106,\\\"bias\\\":0.12648212167305894},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49898.45014433875,\\\"ask\\\":50299.24090855031,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":50098.84552644453,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.37368579910169175,\\\"bias\\\":0.12631420089830825},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50196.74875909833,\\\"ask\\\":50599.93549611919,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":50398.34212760876,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3729306784307404,\\\"bias\\\":0.1270693215692596},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49827.94769979216,\\\"ask\\\":50228.17217930856,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":50028.05993955036,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.37387118075049086,\\\"bias\\\":0.12612881924950914},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49412.84567512139,\\\"ask\\\":49809.73600182919,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":49611.29083847529,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3728116115731956,\\\"bias\\\":0.1271883884268044},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49165.37097884169,\\\"ask\\\":49560.27355698499,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":49362.82226791334,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3721714067467177,\\\"bias\\\":0.12782859325328227},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":48879.629462746525,\\\"ask\\\":49272.236928310755,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":49075.93319552864,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.37291866969527065,\\\"bias\\\":0.12708133030472935},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":48879.629462746525,\\\"ask\\\":49272.236928310755,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":49377.74749152448,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.37213712648778186,\\\"bias\\\":0.12786287351221814},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49086.37752052707,\\\"ask\\\":49480.64561306143,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":49283.51156679425,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3723816154809771,\\\"bias\\\":0.1276183845190229,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49442.53916659282,\\\"ask\\\":49839.66799524015,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":49641.10358091648,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3733075907962168,\\\"bias\\\":0.12669240920378322,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49058.24121277485,\\\"ask\\\":49452.283310869425,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":49255.262261822136,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.374300036355162,\\\"bias\\\":0.125699963644838,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49033.818841576365,\\\"ask\\\":49427.664776046855,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":49230.74180881161,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.37436264398484087,\\\"bias\\\":0.12563735601515913,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49457.95634243308,\\\"ask\\\":49855.20900381808,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":49656.58267312558,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3732758937489132,\\\"bias\\\":0.12672410625108682,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49189.472123771186,\\\"ask\\\":49584.5682854079,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":49387.02020458954,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3739675747363985,\\\"bias\\\":0.12603242526360148,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49679.233435742404,\\\"ask\\\":50078.26342317809,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":49878.74842946025,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.37522243280425294,\\\"bias\\\":0.12477756719574706,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50176.579951196734,\\\"ask\\\":50579.60468976057,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":50378.09232047865,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3739732652153057,\\\"bias\\\":0.12602673478469428,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49649.59181841982,\\\"ask\\\":50048.3837205758,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":49848.98776949781,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3753109316736132,\\\"bias\\\":0.12468906832638682,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49908.07792186477,\\\"ask\\\":50308.94601762272,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":50108.51196974375,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.37466177444525683,\\\"bias\\\":0.12533822555474317,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50445.06535643489,\\\"ask\\\":50850.24660427774,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":50647.655980356314,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3760103547752704,\\\"bias\\\":0.1239896452247296,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50330.47045374264,\\\"ask\\\":50734.73126060001,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":50532.600857171325,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3762926605276562,\\\"bias\\\":0.1237073394723438,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50862.13137600647,\\\"ask\\\":51270.662551717374,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":51066.396963861924,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3749858903424834,\\\"bias\\\":0.12501410965751658,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50336.350793421385,\\\"ask\\\":50740.65883192276,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":50538.50481267207,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.37629170592845695,\\\"bias\\\":0.12370829407154305,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50202.903709600745,\\\"ask\\\":50606.139883975055,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":50404.5217967879,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.37596287014669094,\\\"bias\\\":0.12403712985330906,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50533.82077335829,\\\"ask\\\":50939.71491611619,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":50736.76784473724,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3751452679807803,\\\"bias\\\":0.1248547320192197,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50766.08001041815,\\\"ask\\\":51173.839689216686,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":50969.95984981742,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3745714213102079,\\\"bias\\\":0.12542857868979213,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50308.254811379484,\\\"ask\\\":50712.337179342365,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":50510.295995360924,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3757128714403921,\\\"bias\\\":0.12428712855960788,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50056.66595766701,\\\"ask\\\":50458.72753162418,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":50257.6967446456,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3763375486059063,\\\"bias\\\":0.12366245139409371,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49742.05865755515,\\\"ask\\\":50141.59326524636,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":49941.825961400755,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3755554114968222,\\\"bias\\\":0.1244445885031778,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49673.311239036426,\\\"ask\\\":50072.29365862708,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":49872.80244883175,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.37538318129926096,\\\"bias\\\":0.12461681870073904,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49978.4533709435,\\\"ask\\\":50379.88673135268,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":50179.17005114809,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.37614869986005983,\\\"bias\\\":0.12385130013994017,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49500.67730445187,\\\"ask\\\":49898.27310609405,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":49699.47520527296,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3773441014228868,\\\"bias\\\":0.12265589857711318,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49582.61442504846,\\\"ask\\\":49980.86835617334,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":49781.7413906109,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3771410724604388,\\\"bias\\\":0.12285892753956118,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50079.79374410821,\\\"ask\\\":50482.04108341832,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":50280.917413763265,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3783730147176763,\\\"bias\\\":0.12162698528232369,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50536.009666169266,\\\"ask\\\":50941.921390395524,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":50738.965528282395,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.37948100984085137,\\\"bias\\\":0.12051899015914863,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":51012.15534125427,\\\"ask\\\":51421.891528734224,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":51217.02343499425,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3806165287769321,\\\"bias\\\":0.11938347122306792,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":51496.62889428358,\\\"ask\\\":51910.256435603136,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":51703.44266494336,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.3817503396125945,\\\"bias\\\":0.11824966038740548,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":51135.53712617165,\\\"ask\\\":51546.26433200436,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":51340.900729088,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.38091532386136523,\\\"bias\\\":0.11908467613863477,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50846.893879726544,\\\"ask\\\":51255.30266590908,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":51051.09827281781,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.381591333444248,\\\"bias\\\":0.118408666555752,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":51333.12649321615,\\\"ask\\\":51745.44076223797,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":51539.28362772706,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.38272363772099316,\\\"bias\\\":0.11727636227900684,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50955.2002031376,\\\"ask\\\":51364.47891962867,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":51159.83956138314,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.383593457098276,\\\"bias\\\":0.11640654290172398,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50436.4542433423,\\\"ask\\\":50841.566325618136,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":50639.01028448022,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.38479071461230874,\\\"bias\\\":0.11520928538769126,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50188.51254956001,\\\"ask\\\":50591.6331322874,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":50390.072840923705,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.38422155677304687,\\\"bias\\\":0.11577844322695313,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49949.27654161588,\\\"ask\\\":50350.47554998228,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":50149.87604579908,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6152239132220886,\\\"bias\\\":0.11522391322208858,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50040.63494894792,\\\"ask\\\":50442.56775978285,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":50241.60135436538,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6150131659615198,\\\"bias\\\":0.11501316596151978,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50310.57654452579,\\\"ask\\\":50714.67756094768,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":50512.62705273674,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6143927334357577,\\\"bias\\\":0.11439273343575773,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50152.76849622799,\\\"ask\\\":50555.6019781254,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":50354.185237176694,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6140327913120381,\\\"bias\\\":0.11403279131203814,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50135.74598639671,\\\"ask\\\":50538.44274130753,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":50337.09436385212,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.614071508683706,\\\"bias\\\":0.11407150868370597,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50142.124446360824,\\\"ask\\\":50544.87243388179,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":50343.49844012131,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6140569960732547,\\\"bias\\\":0.1140569960732547,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50102.487604594724,\\\"ask\\\":50504.91722390874,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":50303.70241425173,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6141472283016692,\\\"bias\\\":0.11414722830166923,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49877.43845084191,\\\"ask\\\":50278.06044643101,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":50077.74944863646,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6146622655195054,\\\"bias\\\":0.11466226551950542,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49863.82231826227,\\\"ask\\\":50264.33494732461,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":50064.07863279344,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6146309551117466,\\\"bias\\\":0.11463095511174659,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49436.13469780014,\\\"ask\\\":49833.21208493106,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":49634.6733913656,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6136392465017848,\\\"bias\\\":0.11363924650178481,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":48989.356885850844,\\\"ask\\\":49382.84569617897,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":49186.10129101491,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6126028684570202,\\\"bias\\\":0.11260286845702017,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":48928.97112108358,\\\"ask\\\":49321.974905188676,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":49125.47301313613,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6127418374598618,\\\"bias\\\":0.11274183745986177,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49146.82333752971,\\\"ask\\\":49541.576938634375,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":49344.200138082044,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6132438112110788,\\\"bias\\\":0.11324381121107885,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49635.7058774973,\\\"ask\\\":50034.38624599125,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":49835.04606174427,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6143702913841769,\\\"bias\\\":0.11437029138417687,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49418.914913709916,\\\"ask\\\":49815.853989322044,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":49617.38445151598,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6148720111354323,\\\"bias\\\":0.11487201113543233,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":49879.43972241567,\\\"ask\\\":50280.07779247523,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":50079.75875744545,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6159424800246454,\\\"bias\\\":0.11594248002464536,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50029.939093819085,\\\"ask\\\":50431.78599417104,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":50230.86254399506,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6155926511079661,\\\"bias\\\":0.11559265110796613,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50551.24050793398,\\\"ask\\\":50957.274568238674,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":50754.25753808633,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.616797102154186,\\\"bias\\\":0.11679710215418604,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50247.97588008566,\\\"ask\\\":50651.57407992571,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":50449.774980005684,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6175020147222681,\\\"bias\\\":0.11750201472226807,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50449.08124724962,\\\"ask\\\":50854.29475124359,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":50651.687999246606,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6170317413351445,\\\"bias\\\":0.11703174133514449,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50141.23088593394,\\\"ask\\\":50543.97169626273,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":50342.60129109833,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6163132056466732,\\\"bias\\\":0.11631320564667325,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50540.799631085465,\\\"ask\\\":50946.749828925516,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":50743.77473000549,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6172400899852432,\\\"bias\\\":0.11724008998524316,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":50224.67697669578,\\\"ask\\\":50628.08803674956,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":50426.38250672267,\\\"maxShares\\\":7800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0108,\\\"forecast\\\":0.6165021609296871,\\\"bias\\\":0.11650216092968713,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[50354.185237176694,50337.09436385212,50343.49844012131,50303.70241425173,50077.74944863646,50064.07863279344,49634.6733913656,49186.10129101491,49125.47301313613,49344.200138082044,49835.04606174427,49617.38445151598,50079.75875744545,50230.86254399506,50754.25753808633,50449.774980005684,50651.687999246606,50342.60129109833,50743.77473000549,50426.38250672267]}],[\\\"KGI\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":246128.7302902132,\\\"ask\\\":248602.38587101933,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":247365.55808061626,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4132869620884606,\\\"bias\\\":0.08671303791153939},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":246244.5710493674,\\\"ask\\\":248719.39085890877,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":247481.9809541381,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4132461505012542,\\\"bias\\\":0.08675384949874582},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":245304.25967322057,\\\"ask\\\":247769.62911717253,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":246536.94439519657,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4129136017240056,\\\"bias\\\":0.0870863982759944},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":246068.4046852496,\\\"ask\\\":248541.4539785687,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":247304.92933190917,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4131848837512595,\\\"bias\\\":0.0868151162487405},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":246915.89008319416,\\\"ask\\\":249397.4568176986,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":248156.6734504464,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41348388411839637,\\\"bias\\\":0.08651611588160363},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":247509.6523065308,\\\"ask\\\":249997.18650056628,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":248753.41940354856,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41369193067750204,\\\"bias\\\":0.08630806932249796},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":245838.18849597935,\\\"ask\\\":248308.92405875298,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":247073.55627736618,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.413105118615008,\\\"bias\\\":0.08689488138499202},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":246148.8785483443,\\\"ask\\\":248622.73662420703,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":247385.80758627568,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41321493627764583,\\\"bias\\\":0.08678506372235417},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":245162.4583177433,\\\"ask\\\":247626.4026224442,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":246394.43047009376,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41356411919560615,\\\"bias\\\":0.08643588080439385},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":244478.3259526007,\\\"ask\\\":246935.39455513938,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":245706.86025387005,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4138059957846146,\\\"bias\\\":0.08619400421538542},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":246013.65821863824,\\\"ask\\\":248486.15729621245,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":247249.90775742536,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41434729708523177,\\\"bias\\\":0.08565270291476823},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":245595.94413156054,\\\"ask\\\":248064.24507760635,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":246830.09460458346,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4144929767735926,\\\"bias\\\":0.08550702322640741},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":247007.12109976914,\\\"ask\\\":249489.6047289125,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":248248.36291434083,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4140016594506464,\\\"bias\\\":0.08599834054935362},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":246773.53830782534,\\\"ask\\\":249253.67437122055,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":248013.60633952296,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4139202579656014,\\\"bias\\\":0.08607974203439861},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":247825.33000428267,\\\"ask\\\":250316.03683849657,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":249070.68342138964,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4142871447822585,\\\"bias\\\":0.08571285521774152},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":249133.10136599626,\\\"ask\\\":251636.95163098112,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":250385.0264984887,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4138348390499004,\\\"bias\\\":0.08616516095009957},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":247649.83211475826,\\\"ask\\\":250138.77515108747,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":248894.30363292288,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4133187630539109,\\\"bias\\\":0.08668123694608909},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":246764.26655192568,\\\"ask\\\":249244.30943184454,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":248004.28799188512,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41362983693610544,\\\"bias\\\":0.08637016306389456},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":245740.05807513904,\\\"ask\\\":248209.80740252737,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":246974.93273883322,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4139898150928797,\\\"bias\\\":0.08601018490712031},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":245740.05807513904,\\\"ask\\\":248209.80740252737,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":248057.83955172467,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4136126876889724,\\\"bias\\\":0.08638731231102759},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":246481.52952272713,\\\"ask\\\":248958.73082446304,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":247720.1301735951,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4134949184729688,\\\"bias\\\":0.08650508152703118,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":247756.60976599666,\\\"ask\\\":250246.6259445494,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":249001.61785527304,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4139424202416049,\\\"bias\\\":0.08605757975839512,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":246380.57460516042,\\\"ask\\\":248856.76128460927,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":247618.66794488486,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4134617887803227,\\\"bias\\\":0.08653821121967731,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":246293.1142272637,\\\"ask\\\":248768.4219079397,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":247530.7680676017,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41349251909399604,\\\"bias\\\":0.08650748090600396,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":244783.52043591288,\\\"ask\\\":247243.6563196909,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":246013.5883778019,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4140260156130776,\\\"bias\\\":0.08597398438692239,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":245736.08790819367,\\\"ask\\\":248205.79733440664,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":246970.94262130017,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4143605807048923,\\\"bias\\\":0.08563941929510771,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":244003.97505330207,\\\"ask\\\":246456.27631011917,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":245230.12568171063,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41375265151433666,\\\"bias\\\":0.08624734848566334,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":242274.71916932985,\\\"ask\\\":244709.6409700266,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":243492.18006967823,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41313705391770256,\\\"bias\\\":0.08686294608229744,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":244108.13181111022,\\\"ask\\\":246561.4798695133,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":245334.80584031178,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4124797190377134,\\\"bias\\\":0.08752028096228659,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":245014.22055250677,\\\"ask\\\":247476.6750304214,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":246245.4477914641,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4121548583268661,\\\"bias\\\":0.0878451416731339,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":243148.9891564143,\\\"ask\\\":245592.69759014706,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":244370.8433732807,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41282873123421965,\\\"bias\\\":0.08717126876578035,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":242754.9228296558,\\\"ask\\\":245194.67079779305,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":243974.79681372445,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41268722530189506,\\\"bias\\\":0.08731277469810494,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":244583.1862322627,\\\"ask\\\":247041.3087069588,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":245812.24746961077,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4133448051717485,\\\"bias\\\":0.08665519482825151,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":242775.204186057,\\\"ask\\\":245215.15598692186,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":243995.18008648945,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4126994714071855,\\\"bias\\\":0.08730052859281451,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":242315.97522683674,\\\"ask\\\":244751.3116612773,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":243533.64344405703,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41253402242740805,\\\"bias\\\":0.08746597757259195,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":241182.5232375662,\\\"ask\\\":243606.46819472767,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":242394.49571614695,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4129450741277648,\\\"bias\\\":0.08705492587223518,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":240394.78329316227,\\\"ask\\\":242810.81126595783,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":241602.79727956007,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41265980736145963,\\\"bias\\\":0.08734019263854037,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":238845.09717940234,\\\"ask\\\":241245.55041738623,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":240045.3237983943,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.412093122571596,\\\"bias\\\":0.08790687742840397,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":237992.27339524488,\\\"ask\\\":240384.15553992067,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":239188.2144675828,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41240812891525763,\\\"bias\\\":0.08759187108474237,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":239065.45907186202,\\\"ask\\\":241468.12700223248,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":240266.79303704726,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41201314827115865,\\\"bias\\\":0.08798685172884135,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":238829.7975033743,\\\"ask\\\":241230.09697577002,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":240029.94723957218,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4120999679213927,\\\"bias\\\":0.0879000320786073,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":239875.80439303393,\\\"ask\\\":242286.6164974865,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":241081.21044526022,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41248494517346374,\\\"bias\\\":0.08751505482653626,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":238236.39159351407,\\\"ask\\\":240630.7271874187,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":239433.5593904664,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4130871760084493,\\\"bias\\\":0.0869128239915507,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":237955.568771493,\\\"ask\\\":240347.08202547784,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":239151.32539848544,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4131897460160735,\\\"bias\\\":0.0868102539839265,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":236266.479080035,\\\"ask\\\":238641.01655822629,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":237453.74781913066,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4125691319294369,\\\"bias\\\":0.0874308680705631,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":234741.84581363015,\\\"ask\\\":237101.0603444204,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":235921.4530790253,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4131369898224726,\\\"bias\\\":0.0868630101775274,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":236318.71759655137,\\\"ask\\\":238693.78008495888,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":237506.24884075514,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41255348998138636,\\\"bias\\\":0.08744651001861364,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":237918.87052881136,\\\"ask\\\":240310.01495623656,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":239114.44274252397,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41314560469343836,\\\"bias\\\":0.08685439530656164,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":236727.05338651338,\\\"ask\\\":239106.21975220696,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":237916.63656936018,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4135828785737552,\\\"bias\\\":0.0864171214262448,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":237685.15558017427,\\\"ask\\\":240073.95111364333,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":238879.5533469088,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4139326334176731,\\\"bias\\\":0.08606736658232689,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":236075.63036450927,\\\"ask\\\":238448.24976515758,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":237261.94006483344,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41451942671161135,\\\"bias\\\":0.08548057328838865,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":237323.98138223274,\\\"ask\\\":239709.14702426523,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":238516.564203249,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4140674115650442,\\\"bias\\\":0.08593258843495583,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":239064.2599633345,\\\"ask\\\":241466.91584236297,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":240265.58790284875,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4134372744748058,\\\"bias\\\":0.08656272552519417,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":238225.18669600278,\\\"ask\\\":240619.4096778721,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":239422.29818693746,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.41374216444023276,\\\"bias\\\":0.08625783555976724,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":239038.6762680513,\\\"ask\\\":241441.0750245141,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":240239.87564628272,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5865523881665196,\\\"bias\\\":0.08655238816651956,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":238727.36954500663,\\\"ask\\\":241126.63959068508,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":239927.00456784587,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5866652547405665,\\\"bias\\\":0.08666525474056652,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":239645.52492075867,\\\"ask\\\":242054.02265865574,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":240849.77378970722,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5863319365723036,\\\"bias\\\":0.08633193657230365,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":240183.13887199637,\\\"ask\\\":242597.03976518224,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":241390.0893185893,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5861382619624649,\\\"bias\\\":0.08613826196246488,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":240241.28028714584,\\\"ask\\\":242655.76551616236,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":241448.5229016541,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.586117410371997,\\\"bias\\\":0.08611741037199705,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":240263.07157792558,\\\"ask\\\":242677.7758148896,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":241470.4236964076,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5861095990186428,\\\"bias\\\":0.08610959901864279,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":240398.58856835365,\\\"ask\\\":242814.65478512098,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":241606.62167673733,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5860610301161089,\\\"bias\\\":0.08606103011610888,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":239627.7254315167,\\\"ask\\\":242036.04428007462,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":240831.88485579568,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5857841786978715,\\\"bias\\\":0.08578417869787147,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":239581.08230032242,\\\"ask\\\":241988.93237369249,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":240785.00733700747,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.585800879693889,\\\"bias\\\":0.08580087969388905,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":238112.38892924294,\\\"ask\\\":240505.4782652152,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":239308.93359722907,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5863301053415165,\\\"bias\\\":0.08633010534151653,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":239660.6308434531,\\\"ask\\\":242069.2803996687,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":240864.95562156092,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5868914364345729,\\\"bias\\\":0.08689143643457287,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":239871.50927132752,\\\"ask\\\":242282.27820872777,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":241076.89374002765,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5868149802830281,\\\"bias\\\":0.08681498028302814,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":239112.46852153484,\\\"ask\\\":241515.6089086859,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":240314.0387151104,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5870905665296791,\\\"bias\\\":0.08709056652967906,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":240808.28272262364,\\\"ask\\\":243228.46646857963,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":242018.37459560164,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5877082232349737,\\\"bias\\\":0.08770822323497374,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":241561.44118654277,\\\"ask\\\":243989.19436429694,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":242775.31777541986,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5879825418337273,\\\"bias\\\":0.08798254183372733,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":239967.11009143086,\\\"ask\\\":242378.83984109346,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":241172.97496626218,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5885670940343145,\\\"bias\\\":0.08856709403431451,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":240483.32650650595,\\\"ask\\\":242900.24436084265,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":241691.78543367432,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5883765688087592,\\\"bias\\\":0.08837656880875921,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":238709.9683624376,\\\"ask\\\":241109.06352185906,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":239909.51594214834,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5877200260212211,\\\"bias\\\":0.08772002602122109,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":239737.1345411706,\\\"ask\\\":242146.5529787703,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":240941.84375997048,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5873425677837428,\\\"bias\\\":0.08734256778374283,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":240421.21529061295,\\\"ask\\\":242837.5089116241,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":241629.36210111855,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5875917964622371,\\\"bias\\\":0.08759179646223714,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":241473.62400232375,\\\"ask\\\":243900.4945953119,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":242687.05929881783,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5872083761822929,\\\"bias\\\":0.08720837618229293,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":242845.5579052894,\\\"ask\\\":245286.21677870935,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":244065.8873419994,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.586712901248327,\\\"bias\\\":0.08671290124832698,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":241760.65453048318,\\\"ask\\\":244190.40985239754,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":242975.53219144038,\\\"maxShares\\\":15700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5863237762296748,\\\"bias\\\":0.0863237762296748,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[241390.0893185893,241448.5229016541,241470.4236964076,241606.62167673733,240831.88485579568,240785.00733700747,239308.93359722907,240864.95562156092,241076.89374002765,240314.0387151104,242018.37459560164,242775.31777541986,241172.97496626218,241691.78543367432,239909.51594214834,240941.84375997048,241629.36210111855,242687.05929881783,244065.8873419994,242975.53219144038]}],[\\\"FLCM\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":53585.2002052805,\\\"ask\\\":54558.49344816147,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":54071.84682672098,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.22748828136660318,\\\"bias\\\":0.27251171863339685},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":53624.50399813332,\\\"ask\\\":54598.51113432544,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":54111.50756622938,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2276881638733047,\\\"bias\\\":0.2723118361266953},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":53306.059535444714,\\\"ask\\\":54274.28261479688,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":53790.1710751208,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2260614032930849,\\\"bias\\\":0.2739385967069151},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":53048.52556037677,\\\"ask\\\":54012.070928779176,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":53530.29824457798,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2273912893735975,\\\"bias\\\":0.27260871062640246},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52765.31111908347,\\\"ask\\\":53723.71233012635,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":53244.51172460491,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.22592807951025562,\\\"bias\\\":0.2740719204897444},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52568.30576700915,\\\"ask\\\":53523.128677005276,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":53045.71722200722,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.226955193365305,\\\"bias\\\":0.273044806634695},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":53125.31466390672,\\\"ask\\\":54090.254788982726,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":53607.78472644473,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.22984835083591637,\\\"bias\\\":0.27015164916408363},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":53020.88701242741,\\\"ask\\\":53983.93036885898,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":53502.4086906432,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.23038042986844662,\\\"bias\\\":0.26961957013155335},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52690.494044881765,\\\"ask\\\":53647.53631814903,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":53169.0151815154,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.22868979455558983,\\\"bias\\\":0.2713102054444102},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52920.27951571949,\\\"ask\\\":53881.49549077797,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":53400.887503248734,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.22987298982508225,\\\"bias\\\":0.27012701017491775},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52407.365153127466,\\\"ask\\\":53359.26482291181,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":52883.31498801964,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.23251674081004262,\\\"bias\\\":0.2674832591899574},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52268.820060146696,\\\"ask\\\":53218.203270119084,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":52743.51166513289,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2332257388890623,\\\"bias\\\":0.2667742611109377},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52736.87141470015,\\\"ask\\\":53694.75606199037,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":53215.81373834526,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.23083685668109802,\\\"bias\\\":0.269163143318902},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52814.66560049536,\\\"ask\\\":53773.96326024199,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":53294.31443036868,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.23123390957822404,\\\"bias\\\":0.26876609042177596},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52466.16702433536,\\\"ask\\\":53419.134740216316,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":52942.65088227584,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.23301914766868023,\\\"bias\\\":0.26698085233131974},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52038.21113308626,\\\"ask\\\":52983.40568444403,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":52510.808408765144,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2352147655832486,\\\"bias\\\":0.2647852344167514},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52523.9410302068,\\\"ask\\\":53477.95812258189,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":53000.94957639435,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.23274323357106316,\\\"bias\\\":0.2672567664289368},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52231.81912685159,\\\"ask\\\":53180.530271436175,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":52706.174699143885,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.23124852102612625,\\\"bias\\\":0.26875147897387375},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52571.083364093574,\\\"ask\\\":53525.95672489446,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":53048.52004449402,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.22950288461050977,\\\"bias\\\":0.27049711538949023},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52571.083364093574,\\\"ask\\\":53525.95672489446,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":52688.48527445623,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.22765450414886165,\\\"bias\\\":0.2723454958511383},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52103.5908502068,\\\"ask\\\":53049.97292417624,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":52576.78188719152,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.22823312294789982,\\\"bias\\\":0.2717668770521002,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52523.65083472388,\\\"ask\\\":53477.66265614166,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":53000.656745432774,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.23042411186639794,\\\"bias\\\":0.26957588813360206,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52070.43529059817,\\\"ask\\\":53016.21514451418,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":52543.32521755618,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.22807775193793195,\\\"bias\\\":0.27192224806206805,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52041.63475723739,\\\"ask\\\":52986.891493493975,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":52514.26312536569,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2282282373293571,\\\"bias\\\":0.2717717626706429,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52541.806757068945,\\\"ask\\\":53496.1483530601,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":53018.97755506453,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2308402349475491,\\\"bias\\\":0.2691597650524509,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52860.45321455933,\\\"ask\\\":53820.58253631722,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":53340.51787543828,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.22920788138137924,\\\"bias\\\":0.27079211861862074,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":53445.244223239984,\\\"ask\\\":54415.99537966613,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":53930.61980145306,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.23220363314966214,\\\"bias\\\":0.26779636685033786,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52857.285898958515,\\\"ask\\\":53817.357691270576,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":53337.32179511455,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.22922479871985474,\\\"bias\\\":0.27077520128014526,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":52241.17964296628,\\\"ask\\\":53190.06080701612,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":52715.6202249912,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.23241818555790858,\\\"bias\\\":0.2675818144420914,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":51940.71943139549,\\\"ask\\\":52884.14319503335,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":52412.43131321442,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.23396605954694633,\\\"bias\\\":0.2660339404530537,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":51327.10224409974,\\\"ask\\\":52259.38058960306,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":51793.2414168514,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.23714650401251666,\\\"bias\\\":0.2628534959874833,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":51197.58093000952,\\\"ask\\\":52127.50671884924,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":51662.543824429384,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2364815286446365,\\\"bias\\\":0.2635184713553635,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":51798.49266067315,\\\"ask\\\":52739.33309245127,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":52268.912876562215,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2395744744012039,\\\"bias\\\":0.26042552559879606,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":51204.219580625795,\\\"ask\\\":52134.26595040507,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":51669.24276551543,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.24259695732327757,\\\"bias\\\":0.2574030426767224,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":51053.43300035724,\\\"ask\\\":51980.74056242225,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":51517.08678138975,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.24335719855045757,\\\"bias\\\":0.25664280144954243,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":50682.23674302778,\\\"ask\\\":51602.80209254796,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":51142.51941778787,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2414775489238707,\\\"bias\\\":0.2585224510761293,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":50424.728038211135,\\\"ask\\\":51340.616135777025,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":50882.672086994084,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.24015732798996323,\\\"bias\\\":0.25984267201003675,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":49919.959640436406,\\\"ask\\\":50826.67939172586,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":50373.31951608114,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2427847413566553,\\\"bias\\\":0.2572152586433447,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":49642.728119722065,\\\"ask\\\":50544.412384257885,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":50093.57025198998,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2442211688054582,\\\"bias\\\":0.2557788311945418,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":49296.297054689414,\\\"ask\\\":50191.68892853846,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":49743.99299161394,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2424236761295838,\\\"bias\\\":0.2575763238704162,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":49220.607187844435,\\\"ask\\\":50114.62427097379,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":49667.61572940912,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.24202758354214848,\\\"bias\\\":0.2579724164578515,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48886.92786013012,\\\"ask\\\":49774.884168386765,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":49330.90601425844,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.24378838272222328,\\\"bias\\\":0.25621161727777675,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48368.210527415744,\\\"ask\\\":49246.745128317336,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":48807.47782786654,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2465360842657698,\\\"bias\\\":0.2534639157342302,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48279.415417288066,\\\"ask\\\":49156.337190760496,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":48717.876304024285,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.24606991548314297,\\\"bias\\\":0.25393008451685706,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":47747.44042314724,\\\"ask\\\":48614.69968411257,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":48181.07005362991,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2432407700038065,\\\"bias\\\":0.2567592299961935,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48230.738973767526,\\\"ask\\\":49106.776614057955,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":48668.757793912744,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.24064185867754861,\\\"bias\\\":0.2593581413224514,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48735.65633467984,\\\"ask\\\":49620.86502693436,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":49178.26068080711,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.24335702396495754,\\\"bias\\\":0.2566429760350425,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48226.74532659399,\\\"ask\\\":49102.71042838883,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":48664.727877491416,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.24064880812398257,\\\"bias\\\":0.2593511918760174,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48605.135814109024,\\\"ask\\\":49487.973800641776,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":49046.5548073754,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.23861392015327276,\\\"bias\\\":0.26138607984672724,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48300.48248231699,\\\"ask\\\":49177.786906819216,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":48739.13469456811,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.236965238069434,\\\"bias\\\":0.26303476193056596,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48813.68480923763,\\\"ask\\\":49700.31076944578,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":49256.99778934171,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.23417044089668934,\\\"bias\\\":0.26582955910331063,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48414.70276383634,\\\"ask\\\":49294.081825137095,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":48854.39229448672,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.23636112296565756,\\\"bias\\\":0.2636388770343424,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":47867.67420916352,\\\"ask\\\":48737.117333043374,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":48302.395771103445,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.239373970283651,\\\"bias\\\":0.26062602971634896,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":47606.35719901937,\\\"ask\\\":48471.053898900645,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":48038.70554896001,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.2408045778507559,\\\"bias\\\":0.25919542214924407,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":47859.70654409762,\\\"ask\\\":48729.0049475222,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":48294.35574580991,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7578160477481685,\\\"bias\\\":0.25781604774816846,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":47956.96936012003,\\\"ask\\\":48828.03439390626,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":48392.50187701314,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7572921014762319,\\\"bias\\\":0.25729210147623194,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48244.41532703509,\\\"ask\\\":49120.701377374775,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":48682.558352204935,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7557499361168432,\\\"bias\\\":0.25574993611684316,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48076.33261038878,\\\"ask\\\":48949.565695138524,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":48512.94915276366,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.754855792539108,\\\"bias\\\":0.25485579253910795,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48094.46958871547,\\\"ask\\\":48968.032103949445,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":48531.250846332456,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.754951937850839,\\\"bias\\\":0.254951937850839,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48101.26821208246,\\\"ask\\\":48974.95421391645,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":48538.11121299946,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7549879777992357,\\\"bias\\\":0.25498797779923565,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48059.02351633483,\\\"ask\\\":48931.94220785252,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":48495.482862093675,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7552121165509889,\\\"bias\\\":0.25521211655098885,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":47819.287197977545,\\\"ask\\\":48687.85144577128,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":48253.56932187441,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7539326409082676,\\\"bias\\\":0.2539326409082676,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":47833.795907767984,\\\"ask\\\":48702.623684094746,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":48268.20979593137,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7540096858666755,\\\"bias\\\":0.2540096858666755,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":47378.36787495385,\\\"ask\\\":48238.92349730417,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":47808.64568612901,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7515679991489033,\\\"bias\\\":0.25156799914890327,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":47858.46316454508,\\\"ask\\\":48727.7389838809,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":48293.101074212995,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7541171923106864,\\\"bias\\\":0.2541171923106864,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":47924.090493134536,\\\"ask\\\":48794.55833256584,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":48359.32441285019,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7537687266187842,\\\"bias\\\":0.25376872661878425,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48161.177235539544,\\\"ask\\\":49035.95139319818,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":48598.564314368865,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7525132995444419,\\\"bias\\\":0.2525132995444419,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":47634.68752691942,\\\"ask\\\":48499.898803896765,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":48067.2931654081,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7497223574725593,\\\"bias\\\":0.24972235747255933,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":47866.86965207227,\\\"ask\\\":48736.29816240254,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":48301.58390723741,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7509395601176568,\\\"bias\\\":0.25093956011765683,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48362.49366855697,\\\"ask\\\":49240.92443145709,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":48801.70905000703,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7535378430967703,\\\"bias\\\":0.2535378430967703,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":48524.629609340176,\\\"ask\\\":49406.005323737874,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":48965.317466539025,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.752687853908943,\\\"bias\\\":0.252687853908943,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":49086.42561684489,\\\"ask\\\":49978.0054968683,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":49532.2155568566,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7556133585158582,\\\"bias\\\":0.2556133585158582,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":49415.59700990695,\\\"ask\\\":50313.15578506167,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":49864.37639748431,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7573274903608761,\\\"bias\\\":0.2573274903608761,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":49635.34586780721,\\\"ask\\\":50536.89604502267,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":50086.12095641495,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7561831669987238,\\\"bias\\\":0.2561831669987238,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":49973.95075310264,\\\"ask\\\":50881.65117041429,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":50427.80096175847,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7544355238553225,\\\"bias\\\":0.25443552385532253,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":50416.43487777457,\\\"ask\\\":51332.17234275937,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":50874.30361026697,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.756688371156005,\\\"bias\\\":0.25668837115600496,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":50769.02333468041,\\\"ask\\\":51691.16502996218,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":51230.0941823213,\\\"maxShares\\\":12600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.7584835269799141,\\\"bias\\\":0.25848352697991406,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[48512.94915276366,48531.250846332456,48538.11121299946,48495.482862093675,48253.56932187441,48268.20979593137,47808.64568612901,48293.101074212995,48359.32441285019,48598.564314368865,48067.2931654081,48301.58390723741,48801.70905000703,48965.317466539025,49532.2155568566,49864.37639748431,50086.12095641495,50427.80096175847,50874.30361026697,51230.0941823213]}],[\\\"STM\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6850.188389475365,\\\"ask\\\":6891.413194226469,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":6870.800791850917,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4815231936643815,\\\"bias\\\":0.01847680633561849},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6853.579921269426,\\\"ask\\\":6894.825136442561,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":6874.202528855994,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4814317149012043,\\\"bias\\\":0.01856828509879571},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6826.0547101247685,\\\"ask\\\":6867.134277086401,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":6846.594493605585,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4806829720480589,\\\"bias\\\":0.019317027951941124},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6848.423101420242,\\\"ask\\\":6889.637282572219,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":6869.030191996231,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4800499697381686,\\\"bias\\\":0.019950030261831397},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6823.700701136221,\\\"ask\\\":6864.766101544262,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":6844.2334013402415,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4793271762637578,\\\"bias\\\":0.020672823736242185},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6806.482785803453,\\\"ask\\\":6847.444567864456,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":6826.963676833955,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4788042293321616,\\\"bias\\\":0.0211957706678384},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6758.146914322464,\\\"ask\\\":6798.817808490904,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":6778.4823614066845,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4803202011805538,\\\"bias\\\":0.019679798819446204},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6749.174218736996,\\\"ask\\\":6789.791114737419,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":6769.482666737208,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4800585679225177,\\\"bias\\\":0.01994143207748228},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6720.728386726756,\\\"ask\\\":6761.174094169443,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":6740.9512404481,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47921453645110756,\\\"bias\\\":0.020785463548892436},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6740.512218538917,\\\"ask\\\":6781.0769861529925,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":6760.794602345955,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4798263988733433,\\\"bias\\\":0.020173601126656726},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6696.274820288142,\\\"ask\\\":6736.573364843536,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":6716.42409256584,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4784936763505335,\\\"bias\\\":0.021506323649466474},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6684.315426650944,\\\"ask\\\":6724.541998927679,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":6704.428712789311,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4781088911125606,\\\"bias\\\":0.021891108887439392},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6724.718231767299,\\\"ask\\\":6765.187950313541,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":6744.95309104042,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47678570070381104,\\\"bias\\\":0.023214299296188956},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6731.414157724194,\\\"ask\\\":6771.924172715513,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":6751.669165219854,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4770168497629556,\\\"bias\\\":0.022983150237044392},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6761.595027763452,\\\"ask\\\":6802.286672865337,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":6781.940850314395,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4780473189246265,\\\"bias\\\":0.021952681075373515},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6799.129436523312,\\\"ask\\\":6840.046965730071,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":6819.588201126691,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47682869979485815,\\\"bias\\\":0.023171300205141854},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6756.559611769226,\\\"ask\\\":6797.220953464927,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":6776.890282617077,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47828861171118164,\\\"bias\\\":0.021711388288818356},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6731.148602108018,\\\"ask\\\":6771.657018971256,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":6751.402810539637,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4774689770096203,\\\"bias\\\":0.02253102299037968},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6760.660414509757,\\\"ask\\\":6801.346435058461,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":6781.0034247841095,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47648113472145104,\\\"bias\\\":0.02351886527854896},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6760.660414509757,\\\"ask\\\":6801.346435058461,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":6749.869927554442,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4775659327025285,\\\"bias\\\":0.022434067297471494},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6719.983263457801,\\\"ask\\\":6760.424486708298,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":6740.20387508305,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47788765720176174,\\\"bias\\\":0.02211234279823826,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6756.5524770799475,\\\"ask\\\":6797.2137758387025,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":6776.8831264593255,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47668433428297985,\\\"bias\\\":0.02331566571702015,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6717.08871849955,\\\"ask\\\":6757.512522221713,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":6737.300620360632,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47805415957717856,\\\"bias\\\":0.02194584042282144,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6714.580460215029,\\\"ask\\\":6754.9891691029825,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":6734.784814659006,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4781361391384892,\\\"bias\\\":0.02186386086151082,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6671.300909052028,\\\"ask\\\":6711.449159256955,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":6691.375034154492,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4767177379935303,\\\"bias\\\":0.02328226200646971,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6698.610701188823,\\\"ask\\\":6738.923303201996,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":6718.76700219541,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47767082607116196,\\\"bias\\\":0.022329173928838042,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6648.959783126003,\\\"ask\\\":6688.973583225055,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":6668.966683175529,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4760034013591569,\\\"bias\\\":0.02399659864084308,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6599.409002381203,\\\"ask\\\":6639.12460319794,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":6619.266802789572,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4742016488121571,\\\"bias\\\":0.025798351187842905,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6651.944331981423,\\\"ask\\\":6691.976093257137,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":6671.96021261928,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4762553552611839,\\\"bias\\\":0.0237446447388161,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6677.917886461916,\\\"ask\\\":6718.105957995287,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":6698.011922228602,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47718250196140277,\\\"bias\\\":0.022817498038597228,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6624.4608254183,\\\"ask\\\":6664.327189462943,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":6644.394007440622,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4753412103941983,\\\"bias\\\":0.0246587896058017,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6635.773000282259,\\\"ask\\\":6675.7074416079295,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":6655.740220945095,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47576229302613726,\\\"bias\\\":0.024237706973862738,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6583.613986286033,\\\"ask\\\":6623.234531840411,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":6603.424259063222,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4776825375907785,\\\"bias\\\":0.0223174624092215,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6532.438800400908,\\\"ask\\\":6571.751370914855,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":6552.095085657882,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47593418552476896,\\\"bias\\\":0.02406581447523104,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6545.461975014365,\\\"ask\\\":6584.852919698503,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":6565.157447356434,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4764139654564336,\\\"bias\\\":0.023586034543566392,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6513.262398261057,\\\"ask\\\":6552.459564148284,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":6532.860981204671,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47757998684963665,\\\"bias\\\":0.02242001315036335,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6490.887749755444,\\\"ask\\\":6529.950263796099,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":6510.419006775772,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47835282399159695,\\\"bias\\\":0.021647176008403046,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6535.190001748351,\\\"ask\\\":6574.519129141018,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":6554.854565444685,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47983030855677866,\\\"bias\\\":0.020169691443221338,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6559.824797082956,\\\"ask\\\":6599.302178008229,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":6579.563487545593,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4790699997967687,\\\"bias\\\":0.020930000203231325,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6590.941856131893,\\\"ask\\\":6630.606501203899,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":6610.774178667896,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4780771683228125,\\\"bias\\\":0.021922831677187504,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6597.783209570699,\\\"ask\\\":6637.489026278245,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":6617.636117924472,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47784961080044785,\\\"bias\\\":0.022150389199552145,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6628.180744749212,\\\"ask\\\":6668.069495469868,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":6648.12512010954,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4768290904021201,\\\"bias\\\":0.023170909597879874,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6580.544627948576,\\\"ask\\\":6620.146701938236,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":6600.3456649434065,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4751517639521273,\\\"bias\\\":0.024848236047872674,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6572.3853103830015,\\\"ask\\\":6611.938281157623,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":6592.161795770313,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4748432843982298,\\\"bias\\\":0.025156715601770185,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6523.326836477794,\\\"ask\\\":6562.584570699325,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":6542.95570358856,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47673518726746666,\\\"bias\\\":0.023264812732533335,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6479.059728124795,\\\"ask\\\":6518.05106049064,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":6498.5553943077175,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47832471727530523,\\\"bias\\\":0.021675282724694767,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6524.843560611907,\\\"ask\\\":6564.110422561426,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":6544.476991586667,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47679304824458085,\\\"bias\\\":0.023206951755419147,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6478.696367450692,\\\"ask\\\":6517.685513092321,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":6498.190940271507,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4784460593205756,\\\"bias\\\":0.0215539406794244,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6444.565316683023,\\\"ask\\\":6483.349059812509,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":6463.957188247767,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47730454145641743,\\\"bias\\\":0.02269545854358257,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6472.003279648888,\\\"ask\\\":6510.95214592561,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":6491.477712787249,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4763382743454299,\\\"bias\\\":0.023661725654570087,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6518.4205555490735,\\\"ask\\\":6557.6487635062385,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":6538.034659527656,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4780352958093039,\\\"bias\\\":0.021964704190696127,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6482.361602855117,\\\"ask\\\":6521.372806081928,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":6501.867204468523,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47925711013851413,\\\"bias\\\":0.02074288986148587,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6432.740379490963,\\\"ask\\\":6471.452959507959,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":6452.096669499461,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.48085718648282993,\\\"bias\\\":0.019142813517170065,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6408.994056461903,\\\"ask\\\":6447.56372982075,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":6428.278893141327,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4801479153718582,\\\"bias\\\":0.01985208462814181,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6386.054173054329,\\\"ask\\\":6424.485792952348,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":6405.269983003339,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47943479190872124,\\\"bias\\\":0.020565208091278764,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6394.814356065693,\\\"ask\\\":6433.298695219548,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":6414.056525642621,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4791526850213313,\\\"bias\\\":0.020847314978668707,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6369.046240221211,\\\"ask\\\":6407.375505458248,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":6388.21087283973,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4799961331722088,\\\"bias\\\":0.020003866827791206,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6384.0766182066745,\\\"ask\\\":6422.496337072512,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":6403.286477639594,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47952405985345364,\\\"bias\\\":0.020475940146546356,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6385.702299716827,\\\"ask\\\":6424.131802022042,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":6404.917050869435,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4795762010780817,\\\"bias\\\":0.020423798921918312,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6386.311609686093,\\\"ask\\\":6424.744778851706,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":6405.5281942689,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47955671312873904,\\\"bias\\\":0.020443286871260957,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6390.100841042325,\\\"ask\\\":6428.556814007474,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":6409.3288275249,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.47943541565944614,\\\"bias\\\":0.02056458434055386,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6411.725149016095,\\\"ask\\\":6450.311258237856,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":6431.018203626976,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4787395034724639,\\\"bias\\\":0.021260496527536088,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6410.412298039941,\\\"ask\\\":6448.9905064534205,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":6429.701402246681,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4786959620240797,\\\"bias\\\":0.021304037975920287,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6452.006174644918,\\\"ask\\\":6490.834697260634,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":6471.420435952777,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.48007827175013135,\\\"bias\\\":0.019921728249868653,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6408.174761854163,\\\"ask\\\":6446.739504653686,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":6427.457133253924,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.48144090233820946,\\\"bias\\\":0.018559097661790536,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6414.106255888636,\\\"ask\\\":6452.706694740523,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":6433.406475314579,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4816126878795799,\\\"bias\\\":0.018387312120420107,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6392.758831519051,\\\"ask\\\":6431.230800414852,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":6411.994815966951,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.482226697832396,\\\"bias\\\":0.017773302167603977,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6345.418574218748,\\\"ask\\\":6383.60564688205,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":6364.5121105503995,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.480900713284885,\\\"bias\\\":0.019099286715115016,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6324.609968449577,\\\"ask\\\":6362.6718137963135,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":6343.6408911229455,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.48027232745602,\\\"bias\\\":0.01972767254398,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6280.713450807708,\\\"ask\\\":6318.511124533732,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":6299.61228767072,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4788935412199619,\\\"bias\\\":0.021106458780038084,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6294.926372478018,\\\"ask\\\":6332.80958033646,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":6313.867976407239,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4784159132438922,\\\"bias\\\":0.02158408675610779,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6246.113979699057,\\\"ask\\\":6283.7034319339555,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":6264.908705816507,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.480102675483484,\\\"bias\\\":0.01989732451651599,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6274.387139936479,\\\"ask\\\":6312.146741581031,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":6293.2669407587555,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4810033318694863,\\\"bias\\\":0.018996668130513705,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6255.609716564943,\\\"ask\\\":6293.256314658613,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":6274.433015611778,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4815735536325076,\\\"bias\\\":0.01842644636749241,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6284.415227680265,\\\"ask\\\":6322.235178900005,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":6303.3252032901355,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4824220451940083,\\\"bias\\\":0.017577954805991725,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6247.078628770688,\\\"ask\\\":6284.673886315947,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":6265.8762575433175,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.4834726179292696,\\\"bias\\\":0.0165273820707304,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":6276.568759875329,\\\"ask\\\":6314.341490626835,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":6295.455125251083,\\\"maxShares\\\":11000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008100000000000001,\\\"forecast\\\":0.484252814070611,\\\"bias\\\":0.015747185929389007,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[6403.286477639594,6404.917050869435,6405.5281942689,6409.3288275249,6431.018203626976,6429.701402246681,6471.420435952777,6427.457133253924,6433.406475314579,6411.994815966951,6364.5121105503995,6343.6408911229455,6299.61228767072,6313.867976407239,6264.908705816507,6293.2669407587555,6274.433015611778,6303.3252032901355,6265.8762575433175,6295.455125251083]}],[\\\"DCOMM\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5207.8518615492885,\\\"ask\\\":5270.723312594149,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":5239.287587071719,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6114344414357903,\\\"bias\\\":0.11143444143579029},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5205.879011311317,\\\"ask\\\":5268.72664525069,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":5237.302828281004,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6114766712808994,\\\"bias\\\":0.11147667128089944},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5221.947004371836,\\\"ask\\\":5284.988618106707,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":5253.467811239271,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6118207450437854,\\\"bias\\\":0.11182074504378536},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5235.0449781666275,\\\"ask\\\":5298.244716333628,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":5266.644847250128,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.611540270119955,\\\"bias\\\":0.11154027011995504},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5220.567429139965,\\\"ask\\\":5283.592388043064,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":5252.079908591514,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6112309493897802,\\\"bias\\\":0.11123094938978018},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5230.675823983391,\\\"ask\\\":5293.822815822225,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":5262.249319902808,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6114463218316655,\\\"bias\\\":0.11144632183166547},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5202.196130102759,\\\"ask\\\":5264.999302699573,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":5233.597716401166,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6108362031336175,\\\"bias\\\":0.11083620313361753},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5207.489907645087,\\\"ask\\\":5270.356989025109,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":5238.923448335098,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6109489905388501,\\\"bias\\\":0.1109489905388501},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5224.360774750688,\\\"ask\\\":5287.431528570615,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":5255.896151660651,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6113084354361189,\\\"bias\\\":0.1113084354361189},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5236.132331426014,\\\"ask\\\":5299.345196594136,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":5267.738764010075,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6110576346946175,\\\"bias\\\":0.11105763469461749},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5209.788250598314,\\\"ask\\\":5272.683078573344,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":5241.235664585829,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6116192143911805,\\\"bias\\\":0.1116192143911805},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5202.663254800886,\\\"ask\\\":5265.472066730072,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":5234.067660765479,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6117720757997515,\\\"bias\\\":0.11177207579975146},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5226.733857825685,\\\"ask\\\":5289.833260535855,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":5258.28355918077,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6112549519472033,\\\"bias\\\":0.11125495194720325},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5230.717438418616,\\\"ask\\\":5293.864932644998,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":5262.291185531807,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6111701584452764,\\\"bias\\\":0.11117015844527645},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5212.827638667913,\\\"ask\\\":5275.759159456659,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":5244.293399062286,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6107886357841228,\\\"bias\\\":0.11078863578412279},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5190.772029888479,\\\"ask\\\":5253.437285782505,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":5222.104657835492,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6103178944774362,\\\"bias\\\":0.11031789447743623},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5215.805143820143,\\\"ask\\\":5278.772610345134,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":5247.2888770826385,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6097858733435367,\\\"bias\\\":0.10978587334353673},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5230.8767928328225,\\\"ask\\\":5294.02621085495,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":5262.451501843886,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6094686348532252,\\\"bias\\\":0.10946863485322522},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5213.381031682271,\\\"ask\\\":5276.319233271997,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":5244.850132477134,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6098360043351851,\\\"bias\\\":0.10983600433518514},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5213.381031682271,\\\"ask\\\":5276.319233271997,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":5263.367202018443,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6102237829902549,\\\"bias\\\":0.11022378299025493},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5237.529919779989,\\\"ask\\\":5300.759657242121,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":5269.144788511055,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.610102790588371,\\\"bias\\\":0.11010279058837102,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5259.346195694446,\\\"ask\\\":5322.839308720938,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":5291.092752207692,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6105614099939339,\\\"bias\\\":0.11056140999393393,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5235.8007377397835,\\\"ask\\\":5299.00959976481,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":5267.405168752297,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6100642140231904,\\\"bias\\\":0.11006421402319044,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5237.297811345737,\\\"ask\\\":5300.524746693975,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":5268.911279019856,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.610095684707051,\\\"bias\\\":0.110095684707051,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5263.304565905251,\\\"ask\\\":5326.845466097266,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":5295.0750160012585,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6095489845663724,\\\"bias\\\":0.10954898456637241,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5246.864091318278,\\\"ask\\\":5310.206514955923,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":5278.5353031371005,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6092057248086493,\\\"bias\\\":0.10920572480864932,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5276.854339695914,\\\"ask\\\":5340.5588186459645,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":5308.706579170939,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6085815220936047,\\\"bias\\\":0.10858152209360472,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5307.1811848509515,\\\"ask\\\":5371.251782655992,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":5339.216483753472,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6092055558067317,\\\"bias\\\":0.10920555580673175,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5339.519471145579,\\\"ask\\\":5403.980470797236,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":5371.7499709714075,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6098709788261535,\\\"bias\\\":0.10987097882615349,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5355.477954904896,\\\"ask\\\":5420.131612308174,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":5387.804783606535,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6095426020423076,\\\"bias\\\":0.10954260204230759,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5388.557493928363,\\\"ask\\\":5453.610501903353,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":5421.083997915858,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6102192211619273,\\\"bias\\\":0.11021922116192728,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5395.600770871198,\\\"ask\\\":5460.738808346504,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":5428.169789608851,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6103632865263484,\\\"bias\\\":0.11036328652634841,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5428.3206350676555,\\\"ask\\\":5493.853680963844,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":5461.08715801575,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6096940243068544,\\\"bias\\\":0.10969402430685438,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5460.871028486051,\\\"ask\\\":5526.797036878236,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":5493.8340326821435,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6103517937878553,\\\"bias\\\":0.11035179378785531,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5469.204195848725,\\\"ask\\\":5535.230805858971,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":5502.217500853848,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.610520188163333,\\\"bias\\\":0.11052018816333298,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5489.900004352354,\\\"ask\\\":5556.176463157413,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":5523.038233754884,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6101019729042008,\\\"bias\\\":0.11010197290420076,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5504.385162043667,\\\"ask\\\":5570.836491967735,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":5537.610827005701,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6098114677149664,\\\"bias\\\":0.10981146771496642,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5475.778037252761,\\\"ask\\\":5541.884009533478,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":5508.83102339312,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6103851561185182,\\\"bias\\\":0.11038515611851818,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5491.577533716682,\\\"ask\\\":5557.874244385294,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":5524.725889050988,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6100666571085329,\\\"bias\\\":0.11006665710853292,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5511.516842274934,\\\"ask\\\":5578.054268942236,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":5544.785555608585,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6096670172919978,\\\"bias\\\":0.10966701729199779,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5515.895816174937,\\\"ask\\\":5582.486107718297,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":5549.190961946617,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6095798853789227,\\\"bias\\\":0.10957988537892271,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5496.512226964291,\\\"ask\\\":5562.868511394443,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":5529.690369179367,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.609193449145139,\\\"bias\\\":0.10919344914513895,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5526.967912646381,\\\"ask\\\":5593.691871350361,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":5560.329891998371,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6085884179492848,\\\"bias\\\":0.10858841794928475,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5532.219909219263,\\\"ask\\\":5599.0072723084295,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":5565.613590763846,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6084852318971965,\\\"bias\\\":0.1084852318971965,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5564.065624039802,\\\"ask\\\":5631.237442438673,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":5597.651533239237,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6078607466428267,\\\"bias\\\":0.10786074664282674,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5535.118676269272,\\\"ask\\\":5601.941034534093,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":5568.529855401683,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6084248247741496,\\\"bias\\\":0.10842482477414961,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5565.057433442448,\\\"ask\\\":5632.241225395476,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":5598.649329418962,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6090112809443442,\\\"bias\\\":0.1090112809443442,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5595.398719537684,\\\"ask\\\":5662.948804683007,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":5629.173762110346,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6084169398252635,\\\"bias\\\":0.10841693982526346,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5572.807652039735,\\\"ask\\\":5640.085007999973,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":5606.446330019854,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6079774388486566,\\\"bias\\\":0.10797743884865663,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5590.968618650093,\\\"ask\\\":5658.465221692146,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":5624.716920171119,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6083293215591401,\\\"bias\\\":0.1083293215591401,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5621.661286948779,\\\"ask\\\":5689.528425221802,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":5655.59485608529,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6089240156381849,\\\"bias\\\":0.10892401563818488,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5645.597266280853,\\\"ask\\\":5713.7533700991335,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":5679.675318189993,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6093877936664227,\\\"bias\\\":0.1093877936664227,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5612.458885313451,\\\"ask\\\":5680.214928194499,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":5646.336906753975,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6087419208941184,\\\"bias\\\":0.10874192089411838,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5596.586711522684,\\\"ask\\\":5664.151138623561,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":5630.368925073122,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6090503179146131,\\\"bias\\\":0.10905031791461306,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5581.240681988074,\\\"ask\\\":5648.619845150908,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":5614.930263569491,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.39064984025902083,\\\"bias\\\":0.10935015974097917,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5575.386553707273,\\\"ask\\\":5642.695043289253,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":5609.040798498263,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3905350231326237,\\\"bias\\\":0.10946497686737627,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5558.173930345387,\\\"ask\\\":5625.274621657403,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":5591.724276001395,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3901960306070662,\\\"bias\\\":0.1098039693929338,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5548.152019767749,\\\"ask\\\":5615.131722219674,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":5581.641870993712,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3899976860847091,\\\"bias\\\":0.11000231391529092,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5547.070815486791,\\\"ask\\\":5614.037465170736,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":5580.554140328763,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.38997624504372064,\\\"bias\\\":0.11002375495627936,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5546.66570985676,\\\"ask\\\":5613.627468929478,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":5580.146589393119,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3899682093615827,\\\"bias\\\":0.11003179063841728,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5549.18477663259,\\\"ask\\\":5616.17694697423,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":5582.68086180341,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.39001818126228505,\\\"bias\\\":0.10998181873771495,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5534.848152892684,\\\"ask\\\":5601.667245281731,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":5568.257699087208,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.389733301187906,\\\"bias\\\":0.110266698812094,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5533.980644320434,\\\"ask\\\":5600.789263768971,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":5567.384954044703,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.38971601574500303,\\\"bias\\\":0.11028398425499697,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5506.631977574633,\\\"ask\\\":5573.110432032275,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":5539.871204803454,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.39026374073281267,\\\"bias\\\":0.10973625926718733,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5477.952183436213,\\\"ask\\\":5544.084402954557,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":5511.018293195385,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3896892170385716,\\\"bias\\\":0.11031078296142838,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5474.073832785088,\\\"ask\\\":5540.159231168812,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":5507.11653197695,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.38976737161046693,\\\"bias\\\":0.11023262838953307,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5460.117676118225,\\\"ask\\\":5526.034589713214,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":5493.076132915719,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3894856150764763,\\\"bias\\\":0.11051438492352372,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5429.114512579221,\\\"ask\\\":5494.657142509755,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":5461.885827544488,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.38885451850607644,\\\"bias\\\":0.11114548149392356,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5415.47645321395,\\\"ask\\\":5480.854438564621,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":5448.165445889285,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.38913442161116635,\\\"bias\\\":0.11086557838883365,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5386.6595513525435,\\\"ask\\\":5451.689646539898,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":5419.174598946221,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3897275169166673,\\\"bias\\\":0.1102724830833327,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5395.989958203462,\\\"ask\\\":5461.1326941173875,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":5428.561326160425,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3895365103899284,\\\"bias\\\":0.11046348961007157,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5363.904525400481,\\\"ask\\\":5428.659912025034,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":5396.282218712758,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.39019727324584486,\\\"bias\\\":0.10980272675415514,\\\"countOfNegative\\\":18,\\\"countOfPositive\\\":2,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5345.384139107758,\\\"ask\\\":5409.915939579884,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":5377.650039343821,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.38981683493447944,\\\"bias\\\":0.11018316506552056,\\\"countOfNegative\\\":18,\\\"countOfPositive\\\":2,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5333.130777309708,\\\"ask\\\":5397.514649872804,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":5365.322713591256,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.38956367891000204,\\\"bias\\\":0.11043632108999796,\\\"countOfNegative\\\":18,\\\"countOfPositive\\\":2,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5314.399525109379,\\\"ask\\\":5378.557265855167,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":5346.478395482273,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.38917443256662126,\\\"bias\\\":0.11082556743337874,\\\"countOfNegative\\\":18,\\\"countOfPositive\\\":2,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5338.71141126347,\\\"ask\\\":5403.162655665041,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":5370.937033464255,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.38866743670271,\\\"bias\\\":0.11133256329729002,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":5358.00188294885,\\\"ask\\\":5422.686010308394,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":5390.343946628622,\\\"maxShares\\\":15300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3890697168588196,\\\"bias\\\":0.11093028314118042,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[5581.641870993712,5580.554140328763,5580.146589393119,5582.68086180341,5568.257699087208,5567.384954044703,5539.871204803454,5511.018293195385,5507.11653197695,5493.076132915719,5461.885827544488,5448.165445889285,5419.174598946221,5428.561326160425,5396.282218712758,5377.650039343821,5365.322713591256,5346.478395482273,5370.937033464255,5390.343946628622]}],[\\\"HLS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24044.073802449664,\\\"ask\\\":24431.881444424656,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":24237.97762343716,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6025430890654736,\\\"bias\\\":0.1025430890654736},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24035.259084574154,\\\"ask\\\":24422.924553680186,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":24229.09181912717,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6025806958329736,\\\"bias\\\":0.10258069583297358},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":23963.6809041939,\\\"ask\\\":24350.19188651961,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":24156.936395356755,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6022742930069962,\\\"bias\\\":0.1022742930069962},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":23905.65367391552,\\\"ask\\\":24291.228733172225,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":24098.441203543873,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6025225478354492,\\\"bias\\\":0.10252254783544923},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":23841.669354270074,\\\"ask\\\":24226.212408371204,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":24033.94088132064,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6022474062178849,\\\"bias\\\":0.10224740621788486},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":23886.343958070272,\\\"ask\\\":24271.607570297212,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":24078.975764183742,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.602438997766887,\\\"bias\\\":0.10243899776688703},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24012.892701698893,\\\"ask\\\":24400.19742269404,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":24206.545062196466,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6018962807027465,\\\"bias\\\":0.10189628070274648},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":23989.26858750111,\\\"ask\\\":24376.192274396286,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":24182.730430948697,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6019966259618306,\\\"bias\\\":0.10199662596183057},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24064.480310047522,\\\"ask\\\":24452.617089241834,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":24258.548699644678,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6023164081971468,\\\"bias\\\":0.10231640819714682},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24116.953417756467,\\\"ask\\\":24505.9365373977,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":24311.444977577085,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6025395112867854,\\\"bias\\\":0.1025395112867854},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":23999.51101382898,\\\"ask\\\":24386.5999011488,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":24193.05545748889,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6020377307840022,\\\"bias\\\":0.10203773078400225},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":23967.74624825093,\\\"ask\\\":24354.322800642076,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":24161.034524446502,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6019024988533527,\\\"bias\\\":0.10190249885335267},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24075.058179954944,\\\"ask\\\":24463.365569954218,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":24269.21187495458,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6014462459422882,\\\"bias\\\":0.10144624594228824},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24057.31424555054,\\\"ask\\\":24445.335443059423,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":24251.32484430498,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.601371422314214,\\\"bias\\\":0.10137142231421403},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24137.212780514223,\\\"ask\\\":24526.5226640709,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":24331.86772229256,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6017080944816646,\\\"bias\\\":0.10170809448166462},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24236.463525138555,\\\"ask\\\":24627.37422715692,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":24431.918876147738,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6021263119537241,\\\"bias\\\":0.10212631195372412},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24349.576319355518,\\\"ask\\\":24742.31142128061,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":24545.943870318064,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6026029405879378,\\\"bias\\\":0.10260294058793784},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24281.675093020673,\\\"ask\\\":24673.315013875846,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":24477.49505344826,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6023160219357118,\\\"bias\\\":0.10231602193571177},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24360.534149790114,\\\"ask\\\":24753.445990915763,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":24556.99007035294,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6019837324642753,\\\"bias\\\":0.10198373246427528},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24360.534149790114,\\\"ask\\\":24753.445990915763,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":24473.373457170732,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6023321737743083,\\\"bias\\\":0.10233217377430825},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24251.824043630837,\\\"ask\\\":24642.98249594746,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":24447.40326978915,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6022234675162753,\\\"bias\\\":0.10222346751627531,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24349.583340696998,\\\"ask\\\":24742.318555869533,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":24545.950948283265,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6018114038995312,\\\"bias\\\":0.10181140389953125,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24244.07441498426,\\\"ask\\\":24635.10787329046,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":24439.59114413736,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6022544817282359,\\\"bias\\\":0.10225448172823592,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24250.782911721984,\\\"ask\\\":24641.92457158847,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":24446.353741655228,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6022827762238454,\\\"bias\\\":0.1022827762238454,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24367.320013631048,\\\"ask\\\":24760.341304173482,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":24563.830658902265,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6017912564918957,\\\"bias\\\":0.10179125649189569,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24441.2093665113,\\\"ask\\\":24835.422420809868,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":24638.315893660583,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6020999194908159,\\\"bias\\\":0.10209991949081587,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24576.40494855447,\\\"ask\\\":24972.798576756966,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":24774.60176265572,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6026646811535933,\\\"bias\\\":0.10266468115359328,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24713.092839586534,\\\"ask\\\":25111.69111119277,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":24912.39197538965,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6020936855673902,\\\"bias\\\":0.10209368556739018,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24858.819747051533,\\\"ask\\\":25259.76845264914,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":25059.294099850336,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6014916647209502,\\\"bias\\\":0.10149166472095017,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24787.127002851623,\\\"ask\\\":25186.919373865356,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":24987.02318835849,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6017852128984548,\\\"bias\\\":0.10178521289845477,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24935.292460160104,\\\"ask\\\":25337.474596614302,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":25136.383528387203,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.601176790122608,\\\"bias\\\":0.10117679012260805,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24903.791247508914,\\\"ask\\\":25305.46529988809,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":25104.6282736985,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6010488099468452,\\\"bias\\\":0.10104880994684518,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25049.94053842058,\\\"ask\\\":25453.97183742736,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":25251.95618792397,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6004557993576372,\\\"bias\\\":0.10045579935763715,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24905.4151662741,\\\"ask\\\":25307.11541089142,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":25106.26528858276,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5998728573874067,\\\"bias\\\":0.0998728573874067,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24942.194302978427,\\\"ask\\\":25344.48775947808,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":25143.341031228254,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5997253698851756,\\\"bias\\\":0.09972536988517555,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25033.532509121465,\\\"ask\\\":25437.299162494393,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":25235.41583580793,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6000905637523075,\\\"bias\\\":0.10009056375230752,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25097.4530574735,\\\"ask\\\":25502.25068743275,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":25299.851872453124,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6003461347036937,\\\"bias\\\":0.10034613470369369,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25224.340190989788,\\\"ask\\\":25631.184387618654,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":25427.76228930422,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5998388069934741,\\\"bias\\\":0.09983880699347414,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25154.103214191713,\\\"ask\\\":25559.814556356094,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":25356.958885273903,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5995600303696114,\\\"bias\\\":0.09956003036961136,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25066.027121355015,\\\"ask\\\":25470.317881376868,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":25268.17250136594,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5999098607769274,\\\"bias\\\":0.09990986077692743,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25085.299986558675,\\\"ask\\\":25489.90159924511,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":25287.600792901892,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5998330416914797,\\\"bias\\\":0.09983304169147966,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":24999.980892251257,\\\"ask\\\":25403.206390513373,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":25201.593641382315,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6001737485398482,\\\"bias\\\":0.10017374853984817,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25134.03509091743,\\\"ask\\\":25539.42275367416,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":25336.728922295795,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5996365996657841,\\\"bias\\\":0.09963659966578409,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25157.148247886726,\\\"ask\\\":25562.9087034978,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":25360.028475692263,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5997282250796754,\\\"bias\\\":0.09972822507967538,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25297.291611312772,\\\"ask\\\":25705.312443753304,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":25501.30202753304,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6002837828381884,\\\"bias\\\":0.1002837828381884,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25425.32092829831,\\\"ask\\\":25835.40674972248,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":25630.363839010395,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6007913179695681,\\\"bias\\\":0.10079131796956808,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25292.927784234038,\\\"ask\\\":25700.878232366842,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":25496.90300830044,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6002637365209431,\\\"bias\\\":0.10026373652094311,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25426.37914290388,\\\"ask\\\":25836.482032305557,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":25631.43058760472,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6007927512707648,\\\"bias\\\":0.10079275127076481,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25526.127736080452,\\\"ask\\\":25937.839473759173,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":25731.983604919813,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6003973377089222,\\\"bias\\\":0.10039733770892223,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25606.630243124695,\\\"ask\\\":26019.64040833638,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":25813.135325730538,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6000807116436726,\\\"bias\\\":0.1000807116436726,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25742.66803767653,\\\"ask\\\":26157.872360864858,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":25950.270199270693,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6006124004742573,\\\"bias\\\":0.10061240047425735,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25848.739765492966,\\\"ask\\\":26265.65492300092,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":26057.197344246943,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6001978307357032,\\\"bias\\\":0.10019783073570321,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25996.438593435236,\\\"ask\\\":26415.73599010355,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":26206.087291769392,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6007703577639562,\\\"bias\\\":0.10077035776395615,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26067.787379682763,\\\"ask\\\":26488.23556322603,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":26278.011471454396,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6004937874679771,\\\"bias\\\":0.1004937874679771,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26137.15056192198,\\\"ask\\\":26558.717506469107,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":26347.934034195543,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6007611891002109,\\\"bias\\\":0.10076118910021092,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26163.709154212047,\\\"ask\\\":26585.70446315095,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":26374.706808681498,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6008635749870594,\\\"bias\\\":0.10086357498705945,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26242.119578976824,\\\"ask\\\":26665.37957218613,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":26453.749575581478,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6011658545954824,\\\"bias\\\":0.10116585459548244,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26196.3262598442,\\\"ask\\\":26618.84765113201,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":26407.586955488106,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6009890084141186,\\\"bias\\\":0.10098900841411862,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26191.38586015169,\\\"ask\\\":26613.82756757349,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":26402.60671386259,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6009699591714103,\\\"bias\\\":0.10096995917141027,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26193.237064348825,\\\"ask\\\":26615.708629902838,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":26404.47284712583,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.600977095716731,\\\"bias\\\":0.10097709571673097,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26204.749213883584,\\\"ask\\\":26627.406459268805,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":26416.077836576194,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6010214760055292,\\\"bias\\\":0.10102147600552924,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26139.226260327057,\\\"ask\\\":26560.826683880718,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":26350.026472103887,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6007682464181421,\\\"bias\\\":0.10076824641814208,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26135.261448784717,\\\"ask\\\":26556.797923765116,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":26346.029686274916,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.600752959518974,\\\"bias\\\":0.100752959518974,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26010.24873784722,\\\"ask\\\":26429.76887878024,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":26220.00880831373,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6002687119159852,\\\"bias\\\":0.10026871191598519,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25879.129319405445,\\\"ask\\\":26296.534631008763,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":26087.831975207104,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6007767342312674,\\\"bias\\\":0.10077673423126743,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25896.873078932516,\\\"ask\\\":26314.56458020562,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":26105.71882956907,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6007076376972977,\\\"bias\\\":0.10070763769729774,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":25960.93068767983,\\\"ask\\\":26379.655376190793,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":26170.29303193531,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6004585307709975,\\\"bias\\\":0.10045853077099753,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26104.399276883225,\\\"ask\\\":26525.437974897468,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":26314.918625890346,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6010136974503647,\\\"bias\\\":0.1010136974503647,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26168.01861831923,\\\"ask\\\":26590.083434743738,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":26379.051026531484,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6012598791318371,\\\"bias\\\":0.1012598791318371,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26033.241684922672,\\\"ask\\\":26453.132679840783,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":26243.187182381727,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6017841125773168,\\\"bias\\\":0.10178411257731679,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26076.88008952137,\\\"ask\\\":26497.474929674943,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":26287.177509598157,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6019547289123905,\\\"bias\\\":0.10195472891239055,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26227.83319560807,\\\"ask\\\":26650.862763279165,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":26439.347979443617,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6013645362606347,\\\"bias\\\":0.10136453626063469,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26315.77453867293,\\\"ask\\\":26740.222515103138,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":26527.998526888034,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6010246632184575,\\\"bias\\\":0.10102466321845749,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26374.287050405554,\\\"ask\\\":26799.678777025,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":26586.982913715277,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6012492892040301,\\\"bias\\\":0.10124928920403009,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26464.247765751785,\\\"ask\\\":26891.09047165101,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":26677.669118701397,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6009039354711431,\\\"bias\\\":0.10090393547114307,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26581.408900015344,\\\"ask\\\":27010.141301628497,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":26795.77510082192,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.601350652099407,\\\"bias\\\":0.10135065209940697,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":26488.783950620338,\\\"ask\\\":26916.022401436792,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":26702.403176028565,\\\"maxShares\\\":12500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.6009962530813411,\\\"bias\\\":0.10099625308134108,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[26407.586955488106,26402.60671386259,26404.47284712583,26416.077836576194,26350.026472103887,26346.029686274916,26220.00880831373,26087.831975207104,26105.71882956907,26170.29303193531,26314.918625890346,26379.051026531484,26243.187182381727,26287.177509598157,26439.347979443617,26527.998526888034,26586.982913715277,26677.669118701397,26795.77510082192,26702.403176028565]}],[\\\"VITA\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3632.470182919285,\\\"ask\\\":3691.058411676048,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":3661.7642972976664,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5583989469238549,\\\"bias\\\":0.058398946923854944},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3634.157606092266,\\\"ask\\\":3692.773051351819,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":3663.4653287220426,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5583718183498118,\\\"bias\\\":0.058371818349811755},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3647.9073061885174,\\\"ask\\\":3706.744520804461,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":3677.325913496489,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5581509707467697,\\\"bias\\\":0.05815097074676967},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3636.7257022311082,\\\"ask\\\":3695.3825683961263,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":3666.0541353136173,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5579721777395791,\\\"bias\\\":0.05797217773957908},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3649.088301259997,\\\"ask\\\":3707.9445641835455,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":3678.5164327217713,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5577751084946299,\\\"bias\\\":0.05777510849462986},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3657.74935560061,\\\"ask\\\":3716.745312949007,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":3687.2473342748085,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5576379801730067,\\\"bias\\\":0.0576379801730067},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3682.295565321031,\\\"ask\\\":3741.687429277822,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":3711.9914972994266,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5572511865981484,\\\"bias\\\":0.05725118659814843},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3677.708043764862,\\\"ask\\\":3737.0259154384885,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":3707.366979601675,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5571797722690309,\\\"bias\\\":0.057179772269030926},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3663.160595241593,\\\"ask\\\":3722.2438306487156,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":3692.7022129451543,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5574068493441492,\\\"bias\\\":0.05740684934414919},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3673.2782207262967,\\\"ask\\\":3732.5246436412367,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":3702.9014321837667,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5575654066846806,\\\"bias\\\":0.057565406684680576},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3650.6497580561163,\\\"ask\\\":3709.531205766699,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":3680.0904819114076,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5579222244411316,\\\"bias\\\":0.0579222244411316},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3644.5315743155847,\\\"ask\\\":3703.3143416432554,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":3673.92295797942,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5578249886772029,\\\"bias\\\":0.05782498867720287},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3623.9788775766565,\\\"ask\\\":3682.430149795635,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":3653.2045136861457,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5574970454147384,\\\"bias\\\":0.057497045414738435},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3627.3645955715424,\\\"ask\\\":3685.870476145277,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":3656.6175358584096,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5574433285505156,\\\"bias\\\":0.05744332855051559},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3642.6242685512025,\\\"ask\\\":3701.376272882673,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":3672.000270716938,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5576849823422558,\\\"bias\\\":0.05768498234225583},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3661.596716646818,\\\"ask\\\":3720.654728205638,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":3691.125722426228,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5573845326519504,\\\"bias\\\":0.057384532651950426},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3683.242600954523,\\\"ask\\\":3742.649739679596,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":3712.9461703170596,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5570452984186476,\\\"bias\\\":0.05704529841864758},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3696.289029539519,\\\"ask\\\":3755.9065945320917,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":3726.0978120358054,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.557247358802,\\\"bias\\\":0.05724735880200005},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3681.145807290502,\\\"ask\\\":3740.5191267629293,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":3710.8324670267157,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5570118588998253,\\\"bias\\\":0.057011858899825296},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3681.145807290502,\\\"ask\\\":3740.5191267629293,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":3726.8919820119163,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5572585913541928,\\\"bias\\\":0.057258591354192756},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3702.051503438328,\\\"ask\\\":3761.7620115583013,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":3731.9067574983146,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5571815461965399,\\\"bias\\\":0.05718154619653992,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3683.2450623124714,\\\"ask\\\":3742.6522407368666,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":3712.948651524669,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5574735119397467,\\\"bias\\\":0.0574735119397467,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3663.052608848053,\\\"ask\\\":3722.1341025391503,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":3692.5933556936016,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5577903327280905,\\\"bias\\\":0.05779033272809053,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3661.7691767071797,\\\"ask\\\":3720.829969879876,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":3691.299573293528,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5577700774998455,\\\"bias\\\":0.05777007749984553,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3684.0582368612895,\\\"ask\\\":3743.4785310042134,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":3713.7683839327515,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5574184330705099,\\\"bias\\\":0.05741843307050987,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3669.9621675886665,\\\"ask\\\":3729.1551057755805,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":3699.5586366821235,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5571978928651543,\\\"bias\\\":0.05719789286515431,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3695.6758181525784,\\\"ask\\\":3755.2834926389105,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":3725.4796553957444,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5575986508465623,\\\"bias\\\":0.05759865084656235,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3669.822334558481,\\\"ask\\\":3729.013017373941,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":3699.417675966211,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5571928748609838,\\\"bias\\\":0.05719287486098379,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3642.6148591870005,\\\"ask\\\":3701.366711754533,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":3671.9907854707667,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5567656889535085,\\\"bias\\\":0.05676568895350853,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3629.3183871923816,\\\"ask\\\":3687.855780534194,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":3658.5870838632877,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5565577205933644,\\\"bias\\\":0.05655772059336439,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3656.7978465945594,\\\"ask\\\":3715.778457023504,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":3686.2881518090317,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5569859485472439,\\\"bias\\\":0.056985948547243925,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3662.656868201402,\\\"ask\\\":3721.7319789788444,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":3692.1944235901233,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.556894644100613,\\\"bias\\\":0.05689464410061296,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3635.6313872597416,\\\"ask\\\":3694.2706031832854,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":3664.9509952215135,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5564717175285705,\\\"bias\\\":0.0564717175285705,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3662.354835523878,\\\"ask\\\":3721.4250748065215,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":3691.8899551652,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5568868088458724,\\\"bias\\\":0.05688680884587238,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3655.516996148662,\\\"ask\\\":3714.4769476994475,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":3684.996971924055,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5567803990379392,\\\"bias\\\":0.05678039903793919,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3672.473213277645,\\\"ask\\\":3731.706652201478,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":3702.0899327395614,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5570437764961133,\\\"bias\\\":0.05704377649611325,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3684.3511042059863,\\\"ask\\\":3743.77612201576,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":3714.063613110873,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5572282733504161,\\\"bias\\\":0.05722827335041614,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3707.9456318758766,\\\"ask\\\":3767.7512065835517,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":3737.848419229714,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.557594762330667,\\\"bias\\\":0.05759476233066696,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3694.8773246140217,\\\"ask\\\":3754.4721201723123,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":3724.674722393167,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5577984676190122,\\\"bias\\\":0.057798467619012195,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3678.5051545885185,\\\"ask\\\":3737.8358828883333,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":3708.170518738426,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5580557151419338,\\\"bias\\\":0.05805571514193375,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3682.0877229771736,\\\"ask\\\":3741.4762346380962,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":3711.781978807635,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5581122567426948,\\\"bias\\\":0.05811225674269482,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3698.004789553447,\\\"ask\\\":3757.650028094632,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":3727.8274088240396,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.558363466580445,\\\"bias\\\":0.058363466580445,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3673.057075193572,\\\"ask\\\":3732.299931245081,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":3702.6785032193266,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5579670569784448,\\\"bias\\\":0.05796705697844484,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3677.3355311972905,\\\"ask\\\":3736.647394603698,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":3706.9914629004943,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5580345782551008,\\\"bias\\\":0.05803457825510083,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3651.5691752804228,\\\"ask\\\":3710.4654523010745,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":3681.0173137907486,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5584440842858038,\\\"bias\\\":0.05844408428580383,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3628.3095839778252,\\\"ask\\\":3686.8307063000484,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":3657.570145138937,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5588187451252606,\\\"bias\\\":0.05881874512526064,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3604.411499043616,\\\"ask\\\":3662.5471683830297,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":3633.479333713323,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5584287631914276,\\\"bias\\\":0.058428763191427646,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3628.5006006856856,\\\"ask\\\":3687.0248039225517,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":3657.7627023041186,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5588192559017389,\\\"bias\\\":0.058819255901738865,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3610.5590878867256,\\\"ask\\\":3668.7939118848985,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":3639.676499885812,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5585269725165626,\\\"bias\\\":0.05852697251656258,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3624.9822759415088,\\\"ask\\\":3683.449732005082,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":3654.2160039732953,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.558293173398383,\\\"bias\\\":0.058293173398383025,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3649.3758469271033,\\\"ask\\\":3708.236747683992,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":3678.8062973055476,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5579009015043364,\\\"bias\\\":0.057900901504336355,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3668.42286623995,\\\"ask\\\":3727.5909769857553,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":3698.0069216128527,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5575987019953126,\\\"bias\\\":0.057598701995312585,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3694.973776111406,\\\"ask\\\":3754.570127339009,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":3724.7719517252076,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.557181820408551,\\\"bias\\\":0.05718182040855102,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3707.8191407323957,\\\"ask\\\":3767.622675260338,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":3737.720907996367,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5569830310862591,\\\"bias\\\":0.05698303108625913,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3695.3641210218416,\\\"ask\\\":3754.966768135097,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":3725.1654445784693,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.4428249107695085,\\\"bias\\\":0.05717508923049153,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3690.613966086961,\\\"ask\\\":3750.139997798041,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":3720.376981942501,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.4427513212435499,\\\"bias\\\":0.05724867875645012,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3676.657034309353,\\\"ask\\\":3735.9579542175684,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":3706.3074942634607,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.44253399993881415,\\\"bias\\\":0.05746600006118585,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3668.534031077562,\\\"ask\\\":3727.703934804619,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":3698.1189829410905,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.4426612432736887,\\\"bias\\\":0.05733875672631128,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3667.6577271688852,\\\"ask\\\":3726.813496961932,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":3697.2356120654085,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.4426475434738776,\\\"bias\\\":0.05735245652612242,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3667.986084705658,\\\"ask\\\":3727.147150588007,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":3697.5666176468326,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.44264240883134726,\\\"bias\\\":0.057357591168652744,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3665.9452136765817,\\\"ask\\\":3725.0733622842686,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":3695.509287980425,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.4426104772450057,\\\"bias\\\":0.057389522754994315,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3654.3421603546244,\\\"ask\\\":3713.2831629409898,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":3683.812661647807,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.44279269709838237,\\\"bias\\\":0.05720730290161763,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3653.6400848750773,\\\"ask\\\":3712.569763663385,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":3683.104924269231,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.44278170426830465,\\\"bias\\\":0.057218295731695346,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3675.883310796442,\\\"ask\\\":3735.171751293159,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":3705.5275310448005,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.44243336139674916,\\\"bias\\\":0.05756663860325084,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3699.474042525815,\\\"ask\\\":3759.142978695586,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":3729.3085106107005,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.44280280705457575,\\\"bias\\\":0.05719719294542425,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3702.6869506639105,\\\"ask\\\":3762.4077079326835,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":3732.547329298297,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.44285248150142364,\\\"bias\\\":0.057147518498576355,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3714.288145794698,\\\"ask\\\":3774.196019113967,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":3744.2420824543324,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.4430315351244212,\\\"bias\\\":0.05696846487557877,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3740.2882150142864,\\\"ask\\\":3800.6154442887105,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":3770.4518296514984,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.4426327550696816,\\\"bias\\\":0.05736724493031842,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3751.834516053246,\\\"ask\\\":3812.3479759895886,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":3782.091246021417,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.44280984823514474,\\\"bias\\\":0.05719015176485526,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3727.3915067254707,\\\"ask\\\":3787.5107245758813,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":3757.451115650676,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.44318488246766974,\\\"bias\\\":0.05681511753233026,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3719.49405780825,\\\"ask\\\":3779.485897450319,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":3749.4899776292846,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.44330551567247234,\\\"bias\\\":0.05669448432752766,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3692.4195972133634,\\\"ask\\\":3751.9747520071273,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":3722.1971746102454,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.44372122481425874,\\\"bias\\\":0.05627877518574126,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3676.803824412579,\\\"ask\\\":3736.107111903105,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":3706.455468157842,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.44396024669542955,\\\"bias\\\":0.05603975330457045,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3666.4775430185755,\\\"ask\\\":3725.6142775833914,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":3696.0459103009835,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.44411807727125713,\\\"bias\\\":0.05588192272874287,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3650.704655251398,\\\"ask\\\":3709.586988400614,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":3680.145821826006,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.4443595153985915,\\\"bias\\\":0.055640484601408524,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3630.346685898834,\\\"ask\\\":3688.900664703654,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":3659.623675301244,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.44467153168196105,\\\"bias\\\":0.05532846831803895,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":3614.337949182174,\\\"ask\\\":3672.6337225560796,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":3643.4858358691267,\\\"maxShares\\\":18700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.4449165942341333,\\\"bias\\\":0.05508340576586668,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[3698.1189829410905,3697.2356120654085,3697.5666176468326,3695.509287980425,3683.812661647807,3683.104924269231,3705.5275310448005,3729.3085106107005,3732.547329298297,3744.2420824543324,3770.4518296514984,3782.091246021417,3757.451115650676,3749.4899776292846,3722.1971746102454,3706.455468157842,3696.0459103009835,3680.145821826006,3659.623675301244,3643.4858358691267]}],[\\\"ICRS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19888.76552519436,\\\"ask\\\":20008.457193349994,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":19948.611359272178,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5677663533676196,\\\"bias\\\":0.0677663533676196},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19880.259465097257,\\\"ask\\\":19999.899943322514,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":19940.079704209886,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5677953481941368,\\\"bias\\\":0.0677953481941368},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19811.22194560047,\\\"ask\\\":19930.446952294154,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":19870.834448947313,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5675590971094941,\\\"bias\\\":0.06755909710949415},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19755.27696462837,\\\"ask\\\":19874.165291396443,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":19814.721128012407,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5677504177581011,\\\"bias\\\":0.06775041775810109},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19693.616164717245,\\\"ask\\\":19812.13341345175,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":19752.874789084497,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5679625446178072,\\\"bias\\\":0.06796254461780715},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19650.657781195492,\\\"ask\\\":19768.91650405123,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":19709.78714262336,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5678139714204458,\\\"bias\\\":0.06781397142044576},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19529.944251410157,\\\"ask\\\":19647.476513705504,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":19588.71038255783,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5682331259123145,\\\"bias\\\":0.06823312591231445},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19507.53188873482,\\\"ask\\\":19624.929272217672,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":19566.230580476247,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5681547323167976,\\\"bias\\\":0.06815473231679758},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19578.885776928648,\\\"ask\\\":19696.712571975357,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":19637.799174452004,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5684040260345959,\\\"bias\\\":0.06840402603459594},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19628.693313338477,\\\"ask\\\":19746.819852837,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":19687.75658308774,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5682300102067233,\\\"bias\\\":0.06823001020672326},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19740.75591947116,\\\"ask\\\":19859.55685780298,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":19800.15638863707,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5686195436635952,\\\"bias\\\":0.06861954366359524},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19771.279046561376,\\\"ask\\\":19890.263674725233,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":19830.771360643306,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5685134442284642,\\\"bias\\\":0.06851344422846417},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19874.555750688298,\\\"ask\\\":19994.161903651315,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":19934.358827169806,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5681555593039919,\\\"bias\\\":0.06815555930399186},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19857.46845034817,\\\"ask\\\":19976.97177101225,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":19917.22011068021,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5680969116211521,\\\"bias\\\":0.06809691162115206},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19934.410250996498,\\\"ask\\\":20054.376611584237,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":19994.39343129037,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5678330562857239,\\\"bias\\\":0.06783305628572389},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20030.04084122071,\\\"ask\\\":20150.58271188001,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":20090.311776550363,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5681584692338693,\\\"bias\\\":0.06815846923386926},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20139.102250546945,\\\"ask\\\":20260.300458674606,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":20199.701354610777,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5677873537293583,\\\"bias\\\":0.06778735372935829},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20204.805352055897,\\\"ask\\\":20326.398965007083,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":20265.602158531492,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5680085075488133,\\\"bias\\\":0.06800850754881327},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20128.539174293895,\\\"ask\\\":20249.673813256544,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":20189.10649377522,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5677508262098382,\\\"bias\\\":0.06775082620983819},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20128.539174293895,\\\"ask\\\":20249.673813256544,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":20108.950697216413,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5674807662985013,\\\"bias\\\":0.0674807662985013},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20073.4708304793,\\\"ask\\\":20194.27406516623,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":20133.872447822767,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5673971349418114,\\\"bias\\\":0.06739713494181143,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20167.87320588927,\\\"ask\\\":20289.24455918449,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":20228.558882536883,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5670801768189206,\\\"bias\\\":0.06708017681892064,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20270.270972563354,\\\"ask\\\":20392.258561164537,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":20331.264766863947,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5674207610850075,\\\"bias\\\":0.0674207610850075,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20276.81471125563,\\\"ask\\\":20398.841680430683,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":20337.828195843158,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5674425261538402,\\\"bias\\\":0.06744252615384017,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20163.76825913847,\\\"ask\\\":20285.114908641808,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":20224.44158389014,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5670644153659394,\\\"bias\\\":0.06706441536593943,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20092.686381479783,\\\"ask\\\":20213.605256393403,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":20153.145818936595,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5673016690849189,\\\"bias\\\":0.06730166908491886,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20222.35193066179,\\\"ask\\\":20344.05113987339,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":20283.20153526759,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5668673464803115,\\\"bias\\\":0.06686734648031145,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20091.98085948856,\\\"ask\\\":20212.895488532624,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":20152.438174010593,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5673012294134138,\\\"bias\\\":0.06730122941341377,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19954.70167925898,\\\"ask\\\":20074.790154761035,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":20014.74591701001,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5668382278736854,\\\"bias\\\":0.06683822787368543,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20022.03670670007,\\\"ask\\\":20142.530408044302,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":20082.283557372186,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5666126893524723,\\\"bias\\\":0.06661268935247233,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19883.37464315194,\\\"ask\\\":20003.033868687457,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":19943.2042559197,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5661481478382739,\\\"bias\\\":0.06614814783827394,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19912.717249708145,\\\"ask\\\":20032.553060639184,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":19972.635155173666,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5660505306524957,\\\"bias\\\":0.06605053065249566,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20049.05262625597,\\\"ask\\\":20169.708910867335,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":20109.380768561652,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5665027554219617,\\\"bias\\\":0.06650275542196171,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20184.787347724792,\\\"ask\\\":20306.26049124169,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":20245.523919483243,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5669529878170968,\\\"bias\\\":0.0669529878170968,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20150.071232530507,\\\"ask\\\":20271.335452585856,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":20210.703342558183,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5668376359847962,\\\"bias\\\":0.0668376359847962,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20236.15895042026,\\\"ask\\\":20357.941251024593,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":20297.050100722427,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5671231883029333,\\\"bias\\\":0.06712318830293329,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20176.05522360884,\\\"ask\\\":20297.475816729853,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":20236.76552016935,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5673231458133465,\\\"bias\\\":0.06732314581334653,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20057.74647435255,\\\"ask\\\":20178.45507901264,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":20118.100776682597,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5669260465087281,\\\"bias\\\":0.06692604650872813,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20123.08749268935,\\\"ask\\\":20244.189323136823,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":20183.638407913088,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5671440678122543,\\\"bias\\\":0.06714406781225435,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20040.931880380624,\\\"ask\\\":20161.539293903475,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":20101.23558714205,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5674193175879104,\\\"bias\\\":0.06741931758791042,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20058.90922236702,\\\"ask\\\":20179.624824507642,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":20119.267023437333,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5673588403538177,\\\"bias\\\":0.06735884035381767,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20138.77498856609,\\\"ask\\\":20259.971227213424,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":20199.373107889758,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5670906470370476,\\\"bias\\\":0.06709064703704759,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20013.572731640026,\\\"ask\\\":20134.015496323915,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":20073.79411398197,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5666709368463533,\\\"bias\\\":0.06667093684635328,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20035.044532226533,\\\"ask\\\":20155.61651536932,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":20095.330523797926,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5667424655573974,\\\"bias\\\":0.06674246555739738,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20165.255698560464,\\\"ask\\\":20286.61129955481,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":20225.93349905764,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5663086949076616,\\\"bias\\\":0.06630869490766156,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20284.321194287262,\\\"ask\\\":20406.393337883772,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":20345.357266085517,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5667002137531548,\\\"bias\\\":0.06670021375315482,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20408.19333994008,\\\"ask\\\":20531.010952818353,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":20469.602146379217,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.566292889371236,\\\"bias\\\":0.06629288937123601,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20533.818099998938,\\\"ask\\\":20657.391729487397,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":20595.60491474317,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5658848165848728,\\\"bias\\\":0.06588481658487277,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20627.798818445906,\\\"ask\\\":20751.938028988206,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":20689.868423717056,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.566186363153915,\\\"bias\\\":0.06618636315391502,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20703.695737072496,\\\"ask\\\":20828.291699381858,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":20765.99371822718,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5664298860359586,\\\"bias\\\":0.06642988603595856,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20576.163976820248,\\\"ask\\\":20699.992446088974,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":20638.078211454613,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5660181513555261,\\\"bias\\\":0.06601815135552613,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20675.077868416032,\\\"ask\\\":20799.501606841804,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":20737.28973762892,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5663355143136504,\\\"bias\\\":0.06633551431365037,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20812.904016327484,\\\"ask\\\":20938.157199976395,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":20875.53060815194,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5667777263558862,\\\"bias\\\":0.06677772635588619,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20746.474082245386,\\\"ask\\\":20871.327486952978,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":20808.900784599184,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5665639049642421,\\\"bias\\\":0.06656390496424214,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20810.87853981976,\\\"ask\\\":20936.119534041343,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":20873.499036930552,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.43322945692577064,\\\"bias\\\":0.06677054307422936,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20786.236907406383,\\\"ask\\\":20911.32960694945,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":20848.783257177918,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.43315030189709447,\\\"bias\\\":0.06684969810290553,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20713.81310261055,\\\"ask\\\":20838.469951773703,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":20776.14152719213,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.43338403527404834,\\\"bias\\\":0.06661596472595166,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20671.654737153007,\\\"ask\\\":20796.057874989434,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":20733.856306071222,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.4335198937828099,\\\"bias\\\":0.06648010621719008,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20676.203838784917,\\\"ask\\\":20800.634353361354,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":20738.419096073136,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.43350526385774935,\\\"bias\\\":0.06649473614225065,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20677.90879583149,\\\"ask\\\":20802.349570931776,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":20740.129183381632,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.433499780710561,\\\"bias\\\":0.066500219289439,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20688.511597887937,\\\"ask\\\":20813.016181225274,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":20750.763889556605,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.4334656820660221,\\\"bias\\\":0.0665343179339779,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20628.18504002872,\\\"ask\\\":20752.326574873423,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":20690.25580745107,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.43327110428941795,\\\"bias\\\":0.06672889571058205,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20624.53475606711,\\\"ask\\\":20748.654323305225,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":20686.594539686168,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.43325929411184694,\\\"bias\\\":0.06674070588815306,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20509.53095739672,\\\"ask\\\":20632.958425545545,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":20571.244691471133,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.4328850566551726,\\\"bias\\\":0.06711494334482743,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20389.010632016994,\\\"ask\\\":20511.712802320002,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":20450.3617171685,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.4332817759936312,\\\"bias\\\":0.06671822400636879,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20405.320067317087,\\\"ask\\\":20528.12038868509,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":20466.72022800109,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.43333514477043983,\\\"bias\\\":0.06666485522956017,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20346.603304814216,\\\"ask\\\":20469.05026552523,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":20407.826785169724,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.4335275279615387,\\\"bias\\\":0.0664724720384613,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20216.261358061554,\\\"ask\\\":20337.92391387737,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":20277.092635969464,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.43395610133905393,\\\"bias\\\":0.06604389866094607,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20158.94349075962,\\\"ask\\\":20280.261104545534,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":20219.60229765258,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.43414388377027535,\\\"bias\\\":0.06585611622972465,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":20037.915270815396,\\\"ask\\\":20158.504530218495,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":20098.209900516948,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.4337461154190272,\\\"bias\\\":0.06625388458097281,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19998.80494368507,\\\"ask\\\":20119.158835021186,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":20058.98188935313,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.43387568371607854,\\\"bias\\\":0.06612431628392146,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19864.647714213414,\\\"ask\\\":19984.194240076282,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":19924.420977144848,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.4334291087150524,\\\"bias\\\":0.06657089128494759,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19942.35439134839,\\\"ask\\\":20062.368560203045,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":20002.36147577572,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.4336895212242542,\\\"bias\\\":0.06631047877574581,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19890.756651548898,\\\"ask\\\":20010.460302410775,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":19950.608476979836,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.43351750811837847,\\\"bias\\\":0.06648249188162153,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19811.916861687416,\\\"ask\\\":19931.146050423748,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":19871.53145605558,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.43325294685830423,\\\"bias\\\":0.06674705314169577,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19710.11401090702,\\\"ask\\\":19828.730544573456,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":19769.42227774024,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.43359769576677093,\\\"bias\\\":0.06640230423322907,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19790.522497593527,\\\"ask\\\":19909.622933887968,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":19850.07271574075,\\\"maxShares\\\":9900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.43332680393971523,\\\"bias\\\":0.06667319606028477,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[20733.856306071222,20738.419096073136,20740.129183381632,20750.763889556605,20690.25580745107,20686.594539686168,20571.244691471133,20450.3617171685,20466.72022800109,20407.826785169724,20277.092635969464,20219.60229765258,20098.209900516948,20058.98188935313,19924.420977144848,20002.36147577572,19950.608476979836,19871.53145605558,19769.42227774024,19850.07271574075]}],[\\\"UNV\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13283.713906661127,\\\"ask\\\":13552.071763361353,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":13417.89283501124,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6176599951128188,\\\"bias\\\":0.11765999511281877},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13288.342006591876,\\\"ask\\\":13556.793360260399,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":13422.567683426138,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6176190018921683,\\\"bias\\\":0.11761900189216834},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13326.048967290431,\\\"ask\\\":13595.262077740745,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":13460.655522515588,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6179527572304604,\\\"bias\\\":0.11795275723046039},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13295.390113925036,\\\"ask\\\":13563.983853600288,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":13429.686983762662,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6176807609778506,\\\"bias\\\":0.11768076097785063},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13261.579290532836,\\\"ask\\\":13529.489983270874,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":13395.534636901855,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6179807918670014,\\\"bias\\\":0.11798079186700139},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13238.014125024432,\\\"ask\\\":13505.448753812803,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":13371.731439418618,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6177707726858084,\\\"bias\\\":0.11777077268580838},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13304.641791262118,\\\"ask\\\":13573.422433509837,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":13439.032112385978,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6183635195782771,\\\"bias\\\":0.11836351957827707},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13317.088809273377,\\\"ask\\\":13586.120906430413,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":13451.604857851895,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6184742533269327,\\\"bias\\\":0.11847425332693273},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13356.753258639385,\\\"ask\\\":13626.586657803817,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":13491.6699582216,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6188271244453554,\\\"bias\\\":0.11882712444535537},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13329.14200668569,\\\"ask\\\":13598.41760278035,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":13463.77980473302,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6185809746428889,\\\"bias\\\":0.11858097464288886},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13267.46347235431,\\\"ask\\\":13535.493037452376,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":13401.478254903343,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6191322405823655,\\\"bias\\\":0.11913224058236549},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13284.167837024937,\\\"ask\\\":13552.534864035542,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":13418.35135053024,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6189822474510587,\\\"bias\\\":0.11898224745105868},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13227.903212065683,\\\"ask\\\":13495.1335799862,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":13361.518396025942,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6184761588123441,\\\"bias\\\":0.11847615881234408},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13237.17188155562,\\\"ask\\\":13504.58949532442,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":13370.88068844002,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6185591739615226,\\\"bias\\\":0.1185591739615226},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13278.936689469063,\\\"ask\\\":13547.198036731066,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":13413.067363100065,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6189332418644845,\\\"bias\\\":0.1189332418644845},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13227.266463296879,\\\"ask\\\":13494.483967605907,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":13360.875215451393,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6184686479498174,\\\"bias\\\":0.11846864794981737},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13285.912165239564,\\\"ask\\\":13554.314431204,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":13420.113298221782,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6189939021311326,\\\"bias\\\":0.11899390213113259},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13321.207227843928,\\\"ask\\\":13590.322525376128,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":13455.764876610028,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6186777855428983,\\\"bias\\\":0.11867778554289832},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13280.233803562289,\\\"ask\\\":13548.521355149405,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":13414.377579355847,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6183116296956609,\\\"bias\\\":0.11831162969566089},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13280.233803562289,\\\"ask\\\":13548.521355149405,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":13457.91802472768,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6179276132909383,\\\"bias\\\":0.11792761329093826},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13336.784408510046,\\\"ask\\\":13606.214396560756,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":13471.4994025354,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.61804662274449,\\\"bias\\\":0.11804662274448996,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13285.906592364398,\\\"ask\\\":13554.308745745497,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":13420.107669054947,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6175945682063329,\\\"bias\\\":0.11759456820633285,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13340.835175006969,\\\"ask\\\":13610.34699672428,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":13475.591085865624,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6180807452626846,\\\"bias\\\":0.11808074526268464,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13344.342097990797,\\\"ask\\\":13613.924766637076,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":13479.133432313936,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6180497052210323,\\\"bias\\\":0.11804970522103231,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13283.699041441687,\\\"ask\\\":13552.05659783445,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":13417.877819638068,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6175107819190973,\\\"bias\\\":0.11751078191909725,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13321.96536409043,\\\"ask\\\":13591.095977506398,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":13456.530670798415,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6178492949704388,\\\"bias\\\":0.11784929497043883,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13391.970791916508,\\\"ask\\\":13662.515656399672,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":13527.24322415809,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6184685797447144,\\\"bias\\\":0.11846857974471436,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13462.729482446503,\\\"ask\\\":13734.703815425219,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":13598.71664893586,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6190945280612045,\\\"bias\\\":0.11909452806120446,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13538.146503251506,\\\"ask\\\":13811.6444124081,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":13674.895457829803,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6197616850825399,\\\"bias\\\":0.11976168508253993,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13501.04938763728,\\\"ask\\\":13773.7978601148,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":13637.42362387604,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6194326133970656,\\\"bias\\\":0.11943261339706557,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13577.716994117527,\\\"ask\\\":13852.01430713,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":13714.865650623764,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6187543985159899,\\\"bias\\\":0.1187543985159899,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13561.420634600769,\\\"ask\\\":13835.388728229069,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":13698.404681414919,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6186116948550271,\\\"bias\\\":0.1186116948550271,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13486.233157170895,\\\"ask\\\":13758.682311861217,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":13622.457734516056,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.617950419462121,\\\"bias\\\":0.11795041946212104,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13560.580350752594,\\\"ask\\\":13834.531468949617,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":13697.555909851106,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6173001798758263,\\\"bias\\\":0.1173001798758263,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13541.582661665612,\\\"ask\\\":13815.149988163907,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":13678.36632491476,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.617135617697032,\\\"bias\\\":0.11713561769703196,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13588.692417164597,\\\"ask\\\":13863.211455895196,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":13725.951936529897,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6175431203093781,\\\"bias\\\":0.11754312030937808,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13621.654878090038,\\\"ask\\\":13896.839825122159,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":13759.247351606098,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6172579927642614,\\\"bias\\\":0.11725799276426141,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13556.542959008295,\\\"ask\\\":13830.412513735735,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":13693.477736372015,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6166948039808348,\\\"bias\\\":0.11669480398083476,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13592.503774462844,\\\"ask\\\":13867.09981031058,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":13729.801792386712,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6170043548982883,\\\"bias\\\":0.11700435489828831,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13547.281926098536,\\\"ask\\\":13820.964389252042,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":13684.123157675289,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6166137855409783,\\\"bias\\\":0.11661378554097834,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13557.177398975633,\\\"ask\\\":13831.05977067211,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":13694.118584823871,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6166989648823555,\\\"bias\\\":0.11669896488235554,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13513.365338005648,\\\"ask\\\":13786.362617561319,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":13649.863977783483,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6163206118935423,\\\"bias\\\":0.11632061189354226,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13582.203278362613,\\\"ask\\\":13856.59122338004,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":13719.397250871327,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6169131564702284,\\\"bias\\\":0.11691315647022837,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13594.068910580629,\\\"ask\\\":13868.696565339835,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":13731.382737960232,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6170152936925694,\\\"bias\\\":0.11701529369256936,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13522.50535751524,\\\"ask\\\":13795.68728392969,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":13659.096320722465,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6176345598683433,\\\"bias\\\":0.11763455986834326,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13457.801062313281,\\\"ask\\\":13729.675831248902,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":13593.738446781092,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6170689800048551,\\\"bias\\\":0.1170689800048551,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13391.210934555083,\\\"ask\\\":13661.740448384478,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":13526.475691469781,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6164868341202788,\\\"bias\\\":0.11648683412027883,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13324.423321418353,\\\"ask\\\":13593.603590537916,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":13459.013455978135,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6170707151202348,\\\"bias\\\":0.11707071512023481,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13274.949127006166,\\\"ask\\\":13543.129917450737,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":13409.039522228451,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6166344061547978,\\\"bias\\\":0.11663440615479781,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13235.295609457535,\\\"ask\\\":13502.675318739504,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":13368.98546409852,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6169838478754595,\\\"bias\\\":0.11698384787545946,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13302.093754604486,\\\"ask\\\":13570.822921364173,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":13436.45833798433,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6163934338582123,\\\"bias\\\":0.11639343385821233,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13354.164008657368,\\\"ask\\\":13623.945099741355,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":13489.054554199362,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6168490490254852,\\\"bias\\\":0.11684904902548521,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13426.653989624157,\\\"ask\\\":13697.899524768081,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":13562.27675719612,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6174833369774944,\\\"bias\\\":0.11748333697749436,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13461.66173458807,\\\"ask\\\":13733.614496902981,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":13597.638115745525,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6177896550446461,\\\"bias\\\":0.11778965504464611,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13495.690572494865,\\\"ask\\\":13768.330786080618,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":13632.010679287741,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.617491902422597,\\\"bias\\\":0.117491902422597,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13508.718205924213,\\\"ask\\\":13781.621604023692,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":13645.169904973953,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6173784853708755,\\\"bias\\\":0.11737848537087547,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13547.178468190374,\\\"ask\\\":13820.858841285128,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":13684.01865473775,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6170443006419507,\\\"bias\\\":0.1170443006419507,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13524.718271018859,\\\"ask\\\":13797.944902756613,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":13661.331586887736,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6168499277894045,\\\"bias\\\":0.1168499277894045,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13527.141840303319,\\\"ask\\\":13800.417433036719,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":13663.779636670019,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6168708667760959,\\\"bias\\\":0.11687086677609593,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13528.050132319231,\\\"ask\\\":13801.344074386287,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":13664.697103352759,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.616878714174788,\\\"bias\\\":0.11687871417478801,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13533.698540298423,\\\"ask\\\":13807.106591617585,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":13670.402565958004,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6169275149003386,\\\"bias\\\":0.11692751490033859,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13501.546550075192,\\\"ask\\\":13774.305066238328,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":13637.92580815676,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6166490688495874,\\\"bias\\\":0.11664906884958737,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13499.601009744363,\\\"ask\\\":13772.320222062432,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":13635.960615903397,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6166658801218492,\\\"bias\\\":0.1166658801218492,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13561.239814087272,\\\"ask\\\":13835.204254775905,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":13698.222034431588,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6161331869442409,\\\"bias\\\":0.11613318694424091,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13496.278471903113,\\\"ask\\\":13768.930562244592,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":13632.604517073853,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6155742056138152,\\\"bias\\\":0.11557420561381515,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13505.069377536847,\\\"ask\\\":13777.899061931532,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":13641.48421973419,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6154989254588183,\\\"bias\\\":0.11549892545881835,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13536.804766024567,\\\"ask\\\":13810.275569378597,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":13673.540167701582,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6152275160223407,\\\"bias\\\":0.11522751602234071,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13466.10755940249,\\\"ask\\\":13738.150136360115,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":13602.128847881302,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6158324616959768,\\\"bias\\\":0.11583246169597683,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13497.285049497983,\\\"ask\\\":13769.957474740368,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":13633.621262119175,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.615564279861595,\\\"bias\\\":0.11556427986159501,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13563.668121366592,\\\"ask\\\":13837.681618767938,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":13700.674870067265,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6149959054168558,\\\"bias\\\":0.11499590541685578,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13585.267505809838,\\\"ask\\\":13859.717354412058,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":13722.492430110948,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6151790299778722,\\\"bias\\\":0.11517902997787222,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13659.977417577713,\\\"ask\\\":13935.936557326757,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":13797.956987452235,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.614545622121643,\\\"bias\\\":0.11454562212164299,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13616.60405472144,\\\"ask\\\":13891.686964917833,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":13754.145509819637,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6141807566374213,\\\"bias\\\":0.11418075663742133,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13587.902289685806,\\\"ask\\\":13862.405366245117,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":13725.153827965461,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6139395722972097,\\\"bias\\\":0.11393957229720975,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13631.932239663744,\\\"ask\\\":13907.324810162001,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":13769.628524912872,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6143087796672511,\\\"bias\\\":0.11430877966725106,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13574.8393116496,\\\"ask\\\":13849.078489662723,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":13711.958900656162,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6138280209062007,\\\"bias\\\":0.1138280209062007,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":13529.894044782071,\\\"ask\\\":13803.225237605951,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":13666.559641194011,\\\"maxShares\\\":7700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005699999999999999,\\\"forecast\\\":0.6142061488323839,\\\"bias\\\":0.11420614883238389,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[13661.331586887736,13663.779636670019,13664.697103352759,13670.402565958004,13637.92580815676,13635.960615903397,13698.222034431588,13632.604517073853,13641.48421973419,13673.540167701582,13602.128847881302,13633.621262119175,13700.674870067265,13722.492430110948,13797.956987452235,13754.145509819637,13725.153827965461,13769.628524912872,13711.958900656162,13666.559641194011]}],[\\\"AERO\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15718.295819046252,\\\"ask\\\":15844.547191086785,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":15781.421505066519,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5628578259236356,\\\"bias\\\":0.06285782592363565},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15712.245376228908,\\\"ask\\\":15838.448150335164,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":15775.346763282036,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5628820311006977,\\\"bias\\\":0.06288203110069768},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15761.523558288063,\\\"ask\\\":15888.122141085558,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":15824.82284968681,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5630792474821016,\\\"bias\\\":0.06307924748210159},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15721.45412225998,\\\"ask\\\":15847.730862197812,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":15784.592492228896,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5632400182258271,\\\"bias\\\":0.06324001822582714},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15765.755670840648,\\\"ask\\\":15892.38824651005,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":15829.07195867535,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5634182225266435,\\\"bias\\\":0.06341822252664353},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15734.797555951318,\\\"ask\\\":15861.181472063377,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":15797.989514007348,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5632934475740535,\\\"bias\\\":0.06329344757405353},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15647.751440675083,\\\"ask\\\":15773.436191202594,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":15710.593815938839,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5636455396145392,\\\"bias\\\":0.06364553961453923},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15663.931487136526,\\\"ask\\\":15789.746197876577,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":15726.838842506551,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5635797290223956,\\\"bias\\\":0.06357972902239561},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15715.496912232098,\\\"ask\\\":15841.725803093399,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":15778.611357662749,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.563370425517896,\\\"bias\\\":0.06337042551789596},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15751.478283910525,\\\"ask\\\":15877.996181773258,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":15814.737232841891,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5635155150971001,\\\"bias\\\":0.06351551509710007},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15670.95761497927,\\\"ask\\\":15796.828760481112,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":15733.893187730191,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5638418711430282,\\\"bias\\\":0.0638418711430282},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15649.180549508881,\\\"ask\\\":15774.876778822207,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":15712.028664165544,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5637530301584645,\\\"bias\\\":0.06375303015846445},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15575.954637854114,\\\"ask\\\":15701.06270723447,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":15638.508672544292,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5634533134564934,\\\"bias\\\":0.06345331345649341},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15563.901210721398,\\\"ask\\\":15688.912465425989,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":15626.406838073694,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5635024547276775,\\\"bias\\\":0.06350245472767746},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15618.176161656555,\\\"ask\\\":15743.62335974215,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":15680.899760699353,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5637239025875644,\\\"bias\\\":0.06372390258756444},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15685.608197376865,\\\"ask\\\":15811.59701823933,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":15748.602607808098,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5634487723526993,\\\"bias\\\":0.0634487723526993},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15762.473995841043,\\\"ask\\\":15889.080212675108,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":15825.777104258075,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5631378478104633,\\\"bias\\\":0.06313784781046328},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15808.756053228062,\\\"ask\\\":15935.734013494955,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":15872.245033361509,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5633232342857354,\\\"bias\\\":0.06332323428573539},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15755.03042779827,\\\"ask\\\":15881.576856937214,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":15818.303642367742,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.563107298151443,\\\"bias\\\":0.063107298151443},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15755.03042779827,\\\"ask\\\":15881.576856937214,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":15761.758837101617,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5628809027395016,\\\"bias\\\":0.06288090273950164},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15681.220927428794,\\\"ask\\\":15807.174509175211,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":15744.197718302003,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5629510402608281,\\\"bias\\\":0.0629510402608281,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15747.592611012637,\\\"ask\\\":15874.079298651292,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":15810.835954831964,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5626845963056794,\\\"bias\\\":0.06268459630567935,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15819.551933032328,\\\"ask\\\":15946.61660719323,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":15883.084270112779,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5629710363452878,\\\"bias\\\":0.06297103634528778,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15824.148177098174,\\\"ask\\\":15951.249768882095,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":15887.698972990134,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5629527406152097,\\\"bias\\\":0.06295274061520972,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15903.993244130614,\\\"ask\\\":16031.736161754152,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":15967.864702942383,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5626350953468489,\\\"bias\\\":0.06263509534684886,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":15954.630431838641,\\\"ask\\\":16082.78007386144,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":16018.70525285004,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5624356696408954,\\\"bias\\\":0.06243566964089542,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16047.29545879902,\\\"ask\\\":16176.189398227125,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":16111.742428513073,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5620730411842051,\\\"bias\\\":0.06207304118420509,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16141.009105140069,\\\"ask\\\":16270.655764619105,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":16205.832434879587,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5624355378456385,\\\"bias\\\":0.06243553784563849,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16240.947559760089,\\\"ask\\\":16371.396937750129,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":16306.172248755109,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5628221128810045,\\\"bias\\\":0.06282211288100448,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16290.270581495268,\\\"ask\\\":16421.116128334586,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":16355.693354914927,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.563012900790865,\\\"bias\\\":0.06301290079086497,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16392.514708441235,\\\"ask\\\":16524.181493247994,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":16458.348100844614,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5626174071128769,\\\"bias\\\":0.06261740711287689,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16414.2866262555,\\\"ask\\\":16546.128285904142,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":16480.20745607982,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5627005731838338,\\\"bias\\\":0.06270057318383382,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16515.43119271031,\\\"ask\\\":16648.085258515217,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":16581.758225612764,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5623142132745946,\\\"bias\\\":0.06231421327459463,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16415.410156790665,\\\"ask\\\":16547.26084078095,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":16481.335498785807,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5619345254017537,\\\"bias\\\":0.061934525401753704,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16440.863731472822,\\\"ask\\\":16572.9188618461,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":16506.89129665946,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5618384903314959,\\\"bias\\\":0.06183849033149591,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16504.08042089298,\\\"ask\\\":16636.643315839912,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":16570.361868366446,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5620762652258899,\\\"bias\\\":0.06207626522588994,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16548.32896486788,\\\"ask\\\":16681.24726980658,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":16614.78811733723,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5619098346050013,\\\"bias\\\":0.061909834605001324,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16636.17686413995,\\\"ask\\\":16769.80077469529,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":16702.98881941762,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5622384870584228,\\\"bias\\\":0.06223848705842283,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16684.952147297085,\\\"ask\\\":16818.96782719505,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":16751.959987246068,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5620560112495674,\\\"bias\\\":0.06205601124956739,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16746.510473095816,\\\"ask\\\":16881.02059737771,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":16813.765535236762,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.562284963908499,\\\"bias\\\":0.062284963908499025,\\\"countOfNegative\\\":2,\\\"countOfPositive\\\":18,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16760.03040185389,\\\"ask\\\":16894.64911994107,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":16827.33976089748,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5622346795059009,\\\"bias\\\":0.06223467950590089,\\\"countOfNegative\\\":1,\\\"countOfPositive\\\":19,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16700.18687372399,\\\"ask\\\":16834.324920902498,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":16767.255897313244,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5620116674628725,\\\"bias\\\":0.062011667462872455,\\\"countOfNegative\\\":2,\\\"countOfPositive\\\":18,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16606.686567726625,\\\"ask\\\":16740.07360843126,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":16673.380088078942,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.561662524371652,\\\"bias\\\":0.06166252437165198,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16590.667021951253,\\\"ask\\\":16723.92539160548,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":16657.296206778366,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5617220642099532,\\\"bias\\\":0.06172206420995319,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16687.710035244294,\\\"ask\\\":16821.747866852682,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":16754.728951048488,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5613610362241781,\\\"bias\\\":0.0613610362241781,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16776.38916968393,\\\"ask\\\":16911.13928349665,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":16843.76422659029,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5610349613122108,\\\"bias\\\":0.061034961312210756,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16684.688229844487,\\\"ask\\\":16818.70178992356,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":16751.695009884024,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5606995062387751,\\\"bias\\\":0.06069950623877507,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16592.76359352874,\\\"ask\\\":16726.03880311532,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":16659.40119832203,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5603632283183374,\\\"bias\\\":0.0603632283183374,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16524.695275503746,\\\"ask\\\":16657.423751612212,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":16591.05951355798,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5601145808635019,\\\"bias\\\":0.060114580863501854,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16579.415418807617,\\\"ask\\\":16712.583414139404,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":16645.99941647351,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5599155164677803,\\\"bias\\\":0.05991551646778026,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16487.444653171016,\\\"ask\\\":16619.873927493678,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":16553.659290332347,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.560249739025549,\\\"bias\\\":0.060249739025548976,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16558.777365306145,\\\"ask\\\":16691.77959313993,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":16625.278479223038,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5605104087278913,\\\"bias\\\":0.06051040872789126,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16658.1244759491,\\\"ask\\\":16791.924672543068,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":16725.024574246083,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.560873450886036,\\\"bias\\\":0.06087345088603602,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16610.257235473517,\\\"ask\\\":16743.67295624037,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":16676.965095856944,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5606980265039309,\\\"bias\\\":0.06069802650393086,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16656.664983742576,\\\"ask\\\":16790.453457507578,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":16723.559220625077,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5608676120012829,\\\"bias\\\":0.06086761200128288,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16674.436486868974,\\\"ask\\\":16808.367703630975,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":16741.402095249974,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5608026704924014,\\\"bias\\\":0.0608026704924014,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16726.90695739514,\\\"ask\\\":16861.259623719594,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":16794.083290557366,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5606113390052776,\\\"bias\\\":0.0606113390052776,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16757.608957738394,\\\"ask\\\":16892.20822647525,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":16824.90859210682,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5607225902578663,\\\"bias\\\":0.060722590257866305,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16754.29063249331,\\\"ask\\\":16888.863248015343,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":16821.576940254326,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5607346168669674,\\\"bias\\\":0.06073461686696735,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16755.534033433207,\\\"ask\\\":16890.116636111386,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":16822.825334772297,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5607391242186275,\\\"bias\\\":0.06073912421862748,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16747.805191093925,\\\"ask\\\":16882.325714717168,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":16815.065452905546,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5607671543461311,\\\"bias\\\":0.060767154346131114,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16791.885835766414,\\\"ask\\\":16926.76042079265,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":16859.32312827953,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5606072136668643,\\\"bias\\\":0.06060721366686428,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16794.560593623926,\\\"ask\\\":16929.456662649016,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":16862.00862813647,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5606168677118336,\\\"bias\\\":0.06061686771183361,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16879.316039389654,\\\"ask\\\":17014.8928750474,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":16947.104457218527,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5603109585685012,\\\"bias\\\":0.060310958568501216,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16969.11297108844,\\\"ask\\\":17105.41106724176,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":17037.2620191651,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.560631809189144,\\\"bias\\\":0.060631809189144015,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16981.32940422427,\\\"ask\\\":17117.72562433852,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":17049.527514281395,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5606754593459982,\\\"bias\\\":0.06067545934599816,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16937.339008021067,\\\"ask\\\":17073.381891619632,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":17005.36044982035,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.560517870394441,\\\"bias\\\":0.06051787039444101,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16839.624673934344,\\\"ask\\\":16974.882703443855,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":16907.2536886891,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5601667067835862,\\\"bias\\\":0.060166706783586155,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16882.716725639613,\\\"ask\\\":17018.32087604636,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":16950.518800842987,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5600127421383012,\\\"bias\\\":0.06001274213830121,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16974.490576010794,\\\"ask\\\":17110.831865777945,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":17042.66122089437,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.560338969279754,\\\"bias\\\":0.06033896927975402,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17004.366865771663,\\\"ask\\\":17140.948125737697,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":17072.65749575468,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5604451700827768,\\\"bias\\\":0.06044517008277683,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16901.63517262365,\\\"ask\\\":17037.391278427855,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":16969.513225525752,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5600777716268404,\\\"bias\\\":0.06007777162684036,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16961.139520935114,\\\"ask\\\":17097.373573312103,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":17029.25654712361,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5602892830345917,\\\"bias\\\":0.06028928303459169,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16921.633420280024,\\\"ask\\\":17057.550154579465,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":16989.591787429745,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5601485286272108,\\\"bias\\\":0.06014852862721076,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16982.237764072375,\\\"ask\\\":17118.641280249667,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":17050.43952216102,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5603639488539106,\\\"bias\\\":0.06036394885391061,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17061.17978310133,\\\"ask\\\":17198.217371720613,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":17129.69857741097,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5600833467291912,\\\"bias\\\":0.060083346729191245,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17123.82159643725,\\\"ask\\\":17261.362332151606,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":17192.591964294428,\\\"maxShares\\\":12900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5603039486944865,\\\"bias\\\":0.06030394869448652,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[16824.90859210682,16821.576940254326,16822.825334772297,16815.065452905546,16859.32312827953,16862.00862813647,16947.104457218527,17037.2620191651,17049.527514281395,17005.36044982035,16907.2536886891,16950.518800842987,17042.66122089437,17072.65749575468,16969.513225525752,17029.25654712361,16989.591787429745,17050.43952216102,17129.69857741097,17192.591964294428]}],[\\\"OMN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27890.588582380853,\\\"ask\\\":28283.809368033755,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":28087.198975207306,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4295509454972026,\\\"bias\\\":0.07044905450279743},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27878.489959112903,\\\"ask\\\":28271.540170016808,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":28075.015064564857,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4295815187661014,\\\"bias\\\":0.0704184812338986},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27977.027897254255,\\\"ask\\\":28371.46736408362,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":28174.24763066894,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42983041646314346,\\\"bias\\\":0.07016958353685654},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27896.898065303216,\\\"ask\\\":28290.207806405175,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":28093.552935854197,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4296288644151802,\\\"bias\\\":0.07037113558481978},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27808.585420446503,\\\"ask\\\":28200.650068871728,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":28004.617744659117,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4294053844714469,\\\"bias\\\":0.07059461552855312},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27870.246346770073,\\\"ask\\\":28263.180333532186,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":28066.71334015113,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4292488526191023,\\\"bias\\\":0.07075114738089772},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27696.609511205264,\\\"ask\\\":28087.095445905034,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":27891.85247855515,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4296924089085039,\\\"bias\\\":0.07030759109149609},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27664.3716341353,\\\"ask\\\":28054.403056973057,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":27859.38734555418,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4296104779863537,\\\"bias\\\":0.07038952201364629},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27767.00685869321,\\\"ask\\\":28158.485303830876,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":27962.746081262045,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4298716241455341,\\\"bias\\\":0.07012837585446591},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27695.544506810525,\\\"ask\\\":28086.015426342597,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":27890.779966576563,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42969067306616315,\\\"bias\\\":0.07030932693383685},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27855.920568874975,\\\"ask\\\":28248.65258092356,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":28052.28657489927,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4292835341858542,\\\"bias\\\":0.07071646581414581},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27812.302894559576,\\\"ask\\\":28204.419954503013,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":28008.361424531297,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4293944379030441,\\\"bias\\\":0.0706055620969559},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27665.724499981112,\\\"ask\\\":28055.77499645617,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":27860.74974821864,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4290203558890166,\\\"bias\\\":0.0709796441109834},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27641.599182030266,\\\"ask\\\":28031.30954310622,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":27836.454362568245,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42908230622955,\\\"bias\\\":0.07091769377044999},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27533.391403347305,\\\"ask\\\":27921.576176405575,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":27727.48378987644,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4288035956994958,\\\"bias\\\":0.07119640430050422},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27400.068304778688,\\\"ask\\\":27786.37339668896,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":27593.220850733826,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4284571686350555,\\\"bias\\\":0.07154283136494449},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27249.57771101015,\\\"ask\\\":27633.76108256518,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":27441.669396787667,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42806206074435077,\\\"bias\\\":0.07193793925564923},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27339.748495698826,\\\"ask\\\":27725.203157269603,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":27532.475826484217,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42830010848587396,\\\"bias\\\":0.07169989151412604},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27444.81748338892,\\\"ask\\\":27831.753480133575,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":27638.28548176125,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4285756572905772,\\\"bias\\\":0.07142434270942277},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27444.81748338892,\\\"ask\\\":27831.753480133575,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":27526.99331161,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42886442729941093,\\\"bias\\\":0.07113557270058907},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27368.664699879093,\\\"ask\\\":27754.527042072754,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":27561.595870975925,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4289538476312844,\\\"bias\\\":0.07104615236871559,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27238.73522059705,\\\"ask\\\":27622.765727231847,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":27430.75047391445,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4292927396359058,\\\"bias\\\":0.0707072603640942,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27099.179759225506,\\\"ask\\\":27481.24271655597,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":27290.21123789074,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4296568681604627,\\\"bias\\\":0.07034313183953728,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27108.05301190075,\\\"ask\\\":27490.241070477394,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":27299.147041189073,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42967990104884995,\\\"bias\\\":0.07032009895115005,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27262.20313446324,\\\"ask\\\":27646.5645079602,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":27454.383821211723,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4292800253415401,\\\"bias\\\":0.07071997465845992,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27164.729629813184,\\\"ask\\\":27547.7167545034,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":27356.223192158293,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4290262652683621,\\\"bias\\\":0.07097373473163793,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":26988.077509033228,\\\"ask\\\":27368.574070087067,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":27178.32578956015,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4285617023236387,\\\"bias\\\":0.07143829767636128,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":26811.619314549425,\\\"ask\\\":27189.628046073787,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":27000.623680311608,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4290318668771883,\\\"bias\\\":0.0709681331228117,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":26998.705961187967,\\\"ask\\\":27379.3523695028,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":27189.029165345386,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4295270697177322,\\\"bias\\\":0.07047293028226781,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27091.111724684128,\\\"ask\\\":27473.060933289944,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":27282.086328987036,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4292858690861942,\\\"bias\\\":0.0707141309138058,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27282.737841715698,\\\"ask\\\":27667.38872770162,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":27475.06328470866,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4287856801510193,\\\"bias\\\":0.07121431984898069,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27323.575126001797,\\\"ask\\\":27708.801764233438,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":27516.18844511762,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4286790852981939,\\\"bias\\\":0.07132091470180613,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27135.13631673456,\\\"ask\\\":27517.706214452868,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":27326.421265593715,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4281838002152156,\\\"bias\\\":0.07181619978478437,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":26950.074263942613,\\\"ask\\\":27330.03502899316,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":27140.05464646789,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4276906493160484,\\\"bias\\\":0.07230935068395161,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":26997.169264891792,\\\"ask\\\":27377.794007800636,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":27187.481636346216,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42756428940676783,\\\"bias\\\":0.07243571059323217,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":26880.6855377164,\\\"ask\\\":27259.668012568392,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":27070.176775142398,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42725039928894853,\\\"bias\\\":0.07274960071105147,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":26961.90606281985,\\\"ask\\\":27342.0336407448,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":27151.969851782327,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42703058492586143,\\\"bias\\\":0.07296941507413857,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27123.210244184036,\\\"ask\\\":27505.61199989257,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":27314.411122038306,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4274671368423221,\\\"bias\\\":0.07253286315767787,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27212.83028969547,\\\"ask\\\":27596.495570718365,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":27404.66293020692,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42770679868318623,\\\"bias\\\":0.07229320131681377,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27325.979974079826,\\\"ask\\\":27711.24051752103,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":27518.610245800428,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42740620690992887,\\\"bias\\\":0.07259379309007113,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27350.842406905384,\\\"ask\\\":27736.45347810042,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":27543.647942502903,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42747225608020434,\\\"bias\\\":0.07252774391979566,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27240.83193566718,\\\"ask\\\":27624.89200323952,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":27432.86196945335,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42776515503811086,\\\"bias\\\":0.07223484496188914,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27413.68146819488,\\\"ask\\\":27800.178487887457,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":27606.92997804117,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4273068078329535,\\\"bias\\\":0.0726931921670465,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27383.882640782365,\\\"ask\\\":27769.95953601998,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":27576.921088401174,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42738591173198287,\\\"bias\\\":0.07261408826801713,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27564.39762199708,\\\"ask\\\":27953.019542146078,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":27758.70858207158,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4278645849337188,\\\"bias\\\":0.07213541506628118,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27400.30167885819,\\\"ask\\\":27786.610061037456,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":27593.455869947826,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42829659218341093,\\\"bias\\\":0.07170340781658907,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27570.020042040516,\\\"ask\\\":27958.721230951454,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":27764.370636495987,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4278524589343739,\\\"bias\\\":0.0721475410656261,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27742.154602857394,\\\"ask\\\":28133.282663723458,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":27937.718633290428,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42740200277669205,\\\"bias\\\":0.07259799722330795,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27613.96343491597,\\\"ask\\\":28003.28416813734,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":27808.623801526657,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.427064984076852,\\\"bias\\\":0.072935015923148,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27717.016357091445,\\\"ask\\\":28107.790001602298,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":27912.40317934687,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.426792796908302,\\\"bias\\\":0.07320720309169798,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27543.859757382903,\\\"ask\\\":27932.192120528278,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":27738.02593895559,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42725301963936396,\\\"bias\\\":0.07274698036063604,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27678.160366884313,\\\"ask\\\":28068.386192802114,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":27873.273279843215,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4276077253301378,\\\"bias\\\":0.0723922746698622,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27492.270642432217,\\\"ask\\\":27879.87566659541,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":27686.073154513815,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4280972076346686,\\\"bias\\\":0.07190279236533142,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27403.27223045509,\\\"ask\\\":27789.622493522937,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":27596.447361989016,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42833072844500897,\\\"bias\\\":0.07166927155499103,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27489.557043582918,\\\"ask\\\":27877.12380955488,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":27683.3404265689,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5718949369299551,\\\"bias\\\":0.07189493692995508,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27456.54292061065,\\\"ask\\\":27843.644230669608,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":27650.09357564013,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5718084894738514,\\\"bias\\\":0.07180848947385143,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27553.91343091079,\\\"ask\\\":27942.387537691,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":27748.150484300895,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.571553831439001,\\\"bias\\\":0.07155383143900096,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27497.03407339681,\\\"ask\\\":27884.70625570049,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":27690.87016454865,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5717018450738187,\\\"bias\\\":0.07170184507381872,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27490.897871649464,\\\"ask\\\":27878.4835415418,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":27684.690706595633,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.571685840613394,\\\"bias\\\":0.071685840613394,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27488.598783894886,\\\"ask\\\":27876.152039659766,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":27682.375411777328,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5716798449626288,\\\"bias\\\":0.0716798449626288,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27474.309806866226,\\\"ask\\\":27861.66160676162,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":27667.985706813924,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5717171245763949,\\\"bias\\\":0.0717171245763949,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27555.805494251705,\\\"ask\\\":27944.306276648,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":27750.055885449852,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5719298555387283,\\\"bias\\\":0.07192985553872833,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27550.859678274686,\\\"ask\\\":27939.29073114059,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":27745.07520470764,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5719427680878431,\\\"bias\\\":0.07194276808784306,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27707.553517252338,\\\"ask\\\":28098.19374810987,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":27902.873632681105,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5715335979693784,\\\"bias\\\":0.07153359796937842,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27542.423281750474,\\\"ask\\\":27930.735392470015,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":27736.579337110245,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5719624767124775,\\\"bias\\\":0.07196247671247746,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27564.76956138025,\\\"ask\\\":27953.39672538762,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":27759.083143383938,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5720208627742636,\\\"bias\\\":0.07202086277426356,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27645.453085414054,\\\"ask\\\":28035.217781482326,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":27840.335433448192,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5722316716112337,\\\"bias\\\":0.07223167161123367,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27465.84058310715,\\\"ask\\\":27853.072978035143,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":27659.45678057115,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.571759313547236,\\\"bias\\\":0.07175931354723597,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27545.049752454328,\\\"ask\\\":27933.398892972313,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":27739.224322713322,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5719662613594394,\\\"bias\\\":0.0719662613594394,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27713.797498149626,\\\"ask\\\":28104.525760963414,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":27909.16162955652,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.57152537835216,\\\"bias\\\":0.07152537835216,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27768.769778411388,\\\"ask\\\":28160.27307840913,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":27964.52142841026,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5713835026981697,\\\"bias\\\":0.07138350269816973,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27579.846546035267,\\\"ask\\\":27968.686275788026,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":27774.26641091165,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5708945223825774,\\\"bias\\\":0.07089452238257743,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27470.85071470047,\\\"ask\\\":27858.153745924847,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":27664.50223031266,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5706132348649675,\\\"bias\\\":0.07061323486496751,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27543.129657468864,\\\"ask\\\":27931.45172716127,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":27737.29069231507,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5704274433867748,\\\"bias\\\":0.07042744338677476,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27432.405302596206,\\\"ask\\\":27819.166303841263,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":27625.785803218736,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5701431798251835,\\\"bias\\\":0.07014317982518348,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27289.44160858326,\\\"ask\\\":27674.187008905683,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":27481.814308744473,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.569775714332798,\\\"bias\\\":0.06977571433279794,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":27176.987745423783,\\\"ask\\\":27560.14769349622,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":27368.567719460003,\\\"maxShares\\\":10400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5694869940115859,\\\"bias\\\":0.06948699401158587,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[27690.87016454865,27684.690706595633,27682.375411777328,27667.985706813924,27750.055885449852,27745.07520470764,27902.873632681105,27736.579337110245,27759.083143383938,27840.335433448192,27659.45678057115,27739.224322713322,27909.16162955652,27964.52142841026,27774.26641091165,27664.50223031266,27737.29069231507,27625.785803218736,27481.814308744473,27368.567719460003]}],[\\\"SLRS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":34871.35243003414,\\\"ask\\\":35504.73723703778,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":35188.04483353596,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6244475219306785,\\\"bias\\\":0.12444752193067854},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":34855.58675842166,\\\"ask\\\":35488.685206102375,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":35172.13598226202,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6243912325680193,\\\"bias\\\":0.12439123256801932},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":34983.991184255974,\\\"ask\\\":35619.42190203257,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":35301.706543144275,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6248494771790604,\\\"bias\\\":0.12484947717906036},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35088.72358101764,\\\"ask\\\":35726.05660267083,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":35407.39009184424,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6252232419936733,\\\"bias\\\":0.1252232419936733},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35204.86441365161,\\\"ask\\\":35844.306955978274,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":35524.58568481494,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6256377207807597,\\\"bias\\\":0.12563772078075974},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35286.22371195623,\\\"ask\\\":35927.14402155785,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":35606.68386675704,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.625347368950876,\\\"bias\\\":0.12534736895087595},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35516.7889386557,\\\"ask\\\":36161.8971131217,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":35839.3430258887,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6261664065666395,\\\"bias\\\":0.12616640656663947},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35473.70399458054,\\\"ask\\\":36118.02959690389,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":35795.866795742215,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6260131698882279,\\\"bias\\\":0.12601316988822786},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35610.87285655686,\\\"ask\\\":36257.689921559904,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":35934.281389058386,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6255259052059088,\\\"bias\\\":0.12552590520590878},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35706.641511283175,\\\"ask\\\":36355.19806749215,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":36030.91978938766,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6251883272104664,\\\"bias\\\":0.12518832721046635},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35922.14386197038,\\\"ask\\\":36574.614688928465,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":36248.37927544942,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.624432770886752,\\\"bias\\\":0.12443277088675198},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35863.52304374234,\\\"ask\\\":36514.9291131544,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":36189.22607844837,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6242293789658058,\\\"bias\\\":0.12422937896580577},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35666.570030249844,\\\"ask\\\":36314.39874926548,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":35990.484389757665,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6235433766243733,\\\"bias\\\":0.12354337662437331},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35634.15475503277,\\\"ask\\\":36281.39470012922,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":35957.774727580996,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6236557601671305,\\\"bias\\\":0.12365576016713054},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35780.116351895194,\\\"ask\\\":36430.007466258576,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":36105.06190907689,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.624162268384859,\\\"bias\\\":0.124162268384859},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35599.576965804285,\\\"ask\\\":36246.18885822051,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":35922.8829120124,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6247919438366597,\\\"bias\\\":0.1247919438366597},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35395.837509390054,\\\"ask\\\":36038.748786049,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":35717.29314771953,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6240736378269371,\\\"bias\\\":0.12407363782693714},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35517.9138876996,\\\"ask\\\":36163.0424951452,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":35840.4781914224,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6245015542548387,\\\"bias\\\":0.12450155425483866},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35376.21554353883,\\\"ask\\\":36018.77041718534,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":35697.49298036208,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6240028671055126,\\\"bias\\\":0.12400286710551256},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35376.21554353883,\\\"ask\\\":36018.77041718534,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":35847.91690712678,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6234803374642754,\\\"bias\\\":0.12348033746427545},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35571.829300324214,\\\"ask\\\":36217.93719881648,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":35894.88324957035,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6233185590315309,\\\"bias\\\":0.12331855903153088,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35395.8560922019,\\\"ask\\\":36038.76770638922,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":35717.311899295564,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.622705471375245,\\\"bias\\\":0.12270547137524501,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35585.839854035425,\\\"ask\\\":36232.20223281709,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":35909.02104342626,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6220468618761923,\\\"bias\\\":0.12204686187619229,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35597.98428845116,\\\"ask\\\":36244.56725231808,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":35921.27577038462,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6220885129968567,\\\"bias\\\":0.12208851299685675,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35388.24588620011,\\\"ask\\\":36031.01927262957,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":35709.63257941484,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6213649210524718,\\\"bias\\\":0.12136492105247176,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35520.59273395294,\\\"ask\\\":36165.76999854542,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":35843.18136624918,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.621818808051582,\\\"bias\\\":0.12181880805158196,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35762.918995412154,\\\"ask\\\":36412.49774608563,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":36087.70837074889,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6209877437573665,\\\"bias\\\":0.12098774375736654,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35519.27470038198,\\\"ask\\\":36164.428024909605,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":35841.85136264579,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6218176586073659,\\\"bias\\\":0.12181765860736593,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35777.594209221745,\\\"ask\\\":36427.43951271921,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":36102.51686097048,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6227035966791568,\\\"bias\\\":0.12270359667915676,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35905.220637581224,\\\"ask\\\":36557.38408003981,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":36231.30235881052,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.623141306987442,\\\"bias\\\":0.12314130698744197,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35642.4548305537,\\\"ask\\\":36289.845533833184,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":35966.15018219344,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6222334760015348,\\\"bias\\\":0.12223347600153478,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35698.05932319387,\\\"ask\\\":36346.4599970763,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":36022.25966013509,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6224241679852665,\\\"bias\\\":0.12242416798526645,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35441.537528973386,\\\"ask\\\":36085.27887662376,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":35763.40820279857,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6233102601081564,\\\"bias\\\":0.12331026010815638,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35695.19247451433,\\\"ask\\\":36343.541076473215,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":36019.36677549378,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6224277290586272,\\\"bias\\\":0.1224277290586272,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35760.20513559343,\\\"ask\\\":36409.73459315214,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":36084.96986437279,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6222047479817874,\\\"bias\\\":0.12220474798178738,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35921.71471664378,\\\"ask\\\":36574.17774883307,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":36247.946232738424,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6227566809915132,\\\"bias\\\":0.12275668099151316,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35808.945553801495,\\\"ask\\\":36459.36030654461,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":36134.152930173055,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6223700969149754,\\\"bias\\\":0.12237009691497536,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36032.23075392496,\\\"ask\\\":36686.701140979094,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":36359.46594745203,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6231331305970964,\\\"bias\\\":0.12313313059709641,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36156.31841277747,\\\"ask\\\":36813.04266245456,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":36484.68053761602,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6235571760026479,\\\"bias\\\":0.12355717600264793,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36313.00694309297,\\\"ask\\\":36972.577200384265,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":36642.79207173862,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6240926285367463,\\\"bias\\\":0.1240926285367463,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36347.44221056866,\\\"ask\\\":37007.63793185043,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":36677.54007120955,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6239749527171117,\\\"bias\\\":0.12397495271711167,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36500.43144942319,\\\"ask\\\":37163.4059863451,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":36831.918717884146,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6234531324046029,\\\"bias\\\":0.12345313240460287,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36260.627391631424,\\\"ask\\\":36919.246254446116,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":36589.93682303877,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6226366941842162,\\\"bias\\\":0.12263669418421619,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36219.548326526296,\\\"ask\\\":36877.42105092334,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":36548.48468872482,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6227757848404346,\\\"bias\\\":0.12277578484043461,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36468.39659706784,\\\"ask\\\":37130.78926987028,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":36799.59293346906,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6236193221879046,\\\"bias\\\":0.12361932218790461,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36696.02819131897,\\\"ask\\\":37362.55544403717,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":37029.29181767807,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6228477044033119,\\\"bias\\\":0.12284770440331194,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36932.92866111234,\\\"ask\\\":37603.75884870065,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":37268.3437549065,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6220546300483858,\\\"bias\\\":0.12205463004838579,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":37173.26426454863,\\\"ask\\\":37848.45978095818,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":37510.862022753405,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6228488826091301,\\\"bias\\\":0.12284888260913007,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36994.2707889096,\\\"ask\\\":37666.21516247203,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":37330.24297569082,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6222544892609803,\\\"bias\\\":0.12225448926098026,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":37138.16370299378,\\\"ask\\\":37812.72167136298,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":37475.44268717838,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6227300103172004,\\\"bias\\\":0.12273001031720043,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":37381.50064597558,\\\"ask\\\":38060.478457910554,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":37720.98955194307,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6219258578620184,\\\"bias\\\":0.12192585786201837,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":37192.49192917224,\\\"ask\\\":37868.036686715226,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":37530.26430794373,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6213062422153031,\\\"bias\\\":0.12130624221530306,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36932.22224539892,\\\"ask\\\":37603.03960202574,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":37267.630923712335,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6221611146107772,\\\"bias\\\":0.12216111461077717,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":37057.236243224055,\\\"ask\\\":37730.32428800511,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":37393.78026561459,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.6217476044457296,\\\"bias\\\":0.12174760444572963,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36936.02150632306,\\\"ask\\\":37606.90787071641,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":37271.464688519736,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.37785285052371825,\\\"bias\\\":0.12214714947628175,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36889.79048685677,\\\"ask\\\":37559.8371354576,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":37224.81381115719,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.37800592776190967,\\\"bias\\\":0.12199407223809033,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":37026.142373620794,\\\"ask\\\":37698.66564579554,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":37362.40400970817,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3784568417330697,\\\"bias\\\":0.1215431582669303,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36946.48695007625,\\\"ask\\\":37617.56340325624,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":37282.02517666625,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.37819479863912747,\\\"bias\\\":0.12180520136087253,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36937.89372466539,\\\"ask\\\":37608.814095042755,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":37273.35390985407,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3782231353807758,\\\"bias\\\":0.12177686461922421,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36941.11366959648,\\\"ask\\\":37612.09252535101,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":37276.603097473744,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.37823375089667066,\\\"bias\\\":0.12176624910332934,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36921.10020156252,\\\"ask\\\":37591.71554326597,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":37256.407872414246,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.37829975556394063,\\\"bias\\\":0.12170024443605937,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":37035.24492522774,\\\"ask\\\":37707.933531336814,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":37371.589228282275,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.37792350890023596,\\\"bias\\\":0.12207649109976404,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":37042.17425755666,\\\"ask\\\":37714.988724394214,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":37378.58149097544,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.37790066826348345,\\\"bias\\\":0.12209933173651655,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36823.891306277306,\\\"ask\\\":37492.74099700686,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":37158.31615164209,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.37717689352009715,\\\"bias\\\":0.12282310647990285,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36595.214499064634,\\\"ask\\\":37259.910625182856,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":36927.56256212375,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3779443926651694,\\\"bias\\\":0.12205560733483062,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36564.29491416879,\\\"ask\\\":37228.42943329597,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":36896.362173732385,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3778411797159833,\\\"bias\\\":0.1221588202840167,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36453.0863667522,\\\"ask\\\":37115.200952626605,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":36784.143659689405,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3774685060602815,\\\"bias\\\":0.12253149393971852,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36206.311276038155,\\\"ask\\\":36863.94356964934,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":36535.12742284375,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.37830365660356013,\\\"bias\\\":0.12169634339643987,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36097.80951580506,\\\"ask\\\":36753.47104081463,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":36425.640278309846,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3779378652259237,\\\"bias\\\":0.12206213477407629,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36328.29768515787,\\\"ask\\\":36988.14567540291,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":36658.221680280396,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3771584861342629,\\\"bias\\\":0.1228415138657371,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36403.402214925736,\\\"ask\\\":37064.6143641373,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":36734.00828953152,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.37690452559323184,\\\"bias\\\":0.12309547440676816,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36145.34307569687,\\\"ask\\\":36801.86797515453,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":36473.6055254257,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3760256872847434,\\\"bias\\\":0.12397431271525661,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35996.48539441752,\\\"ask\\\":36650.306521662234,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":36323.39595803988,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3755130114352324,\\\"bias\\\":0.12448698856476759,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":36095.198122180256,\\\"ask\\\":36750.81221521683,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":36423.005168698546,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3758543906026025,\\\"bias\\\":0.1241456093973975,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35943.9886805336,\\\"ask\\\":36596.856285225425,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":36270.42248287951,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.3763766472849844,\\\"bias\\\":0.12362335271501562,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35748.794938617364,\\\"ask\\\":36398.117147391444,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":36073.45604300441,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.37705164919333134,\\\"bias\\\":0.12294835080666866,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":35595.28415234151,\\\"ask\\\":36241.81807236386,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":35918.55111235269,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0074,\\\"forecast\\\":0.37758188510668644,\\\"bias\\\":0.12241811489331356,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[37282.02517666625,37273.35390985407,37276.603097473744,37256.407872414246,37371.589228282275,37378.58149097544,37158.31615164209,36927.56256212375,36896.362173732385,36784.143659689405,36535.12742284375,36425.640278309846,36658.221680280396,36734.00828953152,36473.6055254257,36323.39595803988,36423.005168698546,36270.42248287951,36073.45604300441,35918.55111235269]}],[\\\"GPH\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34547.23609275165,\\\"ask\\\":34824.72393285407,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":34685.98001280286,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41278494055789716,\\\"bias\\\":0.08721505944210284},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34535.414906405946,\\\"ask\\\":34812.80779722045,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":34674.1113518132,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41281479355003897,\\\"bias\\\":0.08718520644996103},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34439.40422932733,\\\"ask\\\":34716.02595004482,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":34577.71508968608,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4125717373506123,\\\"bias\\\":0.08742826264938769},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34361.55741688117,\\\"ask\\\":34637.55386199668,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":34499.55563943893,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.412373666830048,\\\"bias\\\":0.087626333169952},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34447.626368313795,\\\"ask\\\":34724.31413030828,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":34585.97024931104,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41215418007855065,\\\"bias\\\":0.08784581992144935},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34387.48666786912,\\\"ask\\\":34663.69138006083,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":34525.589023964974,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41200054799294866,\\\"bias\\\":0.08799945200705134},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34557.524424974334,\\\"ask\\\":34835.09490228336,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":34696.30966362885,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41156541210790165,\\\"bias\\\":0.08843458789209835},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34525.79085454836,\\\"ask\\\":34803.10644374151,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":34664.448649144935,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41148412953178953,\\\"bias\\\":0.08851587046821047},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34425.05595450444,\\\"ask\\\":34701.562428034595,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":34563.309191269516,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41122511361687863,\\\"bias\\\":0.08877488638312137},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34355.137990598734,\\\"ask\\\":34631.082874057356,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":34493.110432328045,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41104444313598676,\\\"bias\\\":0.08895555686401324},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34512.04813171987,\\\"ask\\\":34789.25333759714,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":34650.650734658506,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4114507296420943,\\\"bias\\\":0.08854927035790572},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34469.41089072933,\\\"ask\\\":34746.27362880748,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":34607.842259768404,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4115602614409334,\\\"bias\\\":0.08843973855906662},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34325.96755409517,\\\"ask\\\":34601.67813685899,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":34463.82284547708,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4119298385306388,\\\"bias\\\":0.0880701614693612},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34302.35388452137,\\\"ask\\\":34577.87479925648,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":34440.114341888926,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41199046584791416,\\\"bias\\\":0.08800953415208584},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34408.68304247825,\\\"ask\\\":34685.058006674866,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":34546.87052457656,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41226327452133854,\\\"bias\\\":0.08773672547866146},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34277.13392685969,\\\"ask\\\":34552.45227165375,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":34414.79309925672,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41192655766897235,\\\"bias\\\":0.08807344233102765},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34426.4421609611,\\\"ask\\\":34702.95976867966,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":34564.70096482038,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41231019797489,\\\"bias\\\":0.08768980202511001},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34516.29419093755,\\\"ask\\\":34793.53350170814,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":34654.913846322845,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41208133009817616,\\\"bias\\\":0.08791866990182384},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34411.98575206734,\\\"ask\\\":34688.38724405182,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":34550.18649805958,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41234782617518484,\\\"bias\\\":0.08765217382481516},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34411.98575206734,\\\"ask\\\":34688.38724405182,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":34440.360993555514,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4120683156261232,\\\"bias\\\":0.08793168437387677},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34268.623273217694,\\\"ask\\\":34543.87325934796,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":34406.248266282826,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41215549716200184,\\\"bias\\\":0.08784450283799816,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34397.55122858092,\\\"ask\\\":34673.83678061771,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":34535.69400459932,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4118250020600975,\\\"bias\\\":0.08817499793990252,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34258.39987232469,\\\"ask\\\":34533.56774278513,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":34395.98380755491,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41218315277924833,\\\"bias\\\":0.08781684722075167,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34249.55459794551,\\\"ask\\\":34524.651422025396,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":34387.103009985454,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41216047324026156,\\\"bias\\\":0.08783952675973844,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34096.62672727591,\\\"ask\\\":34370.49521504519,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":34233.56097116055,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41255444511013123,\\\"bias\\\":0.08744555488986877,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34000.40018035904,\\\"ask\\\":34273.495764137035,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":34136.94797224804,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4128019299557697,\\\"bias\\\":0.0871980700442303,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34175.93392345705,\\\"ask\\\":34450.439416818146,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":34313.1866701376,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41325210711676164,\\\"bias\\\":0.08674789288323836,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34353.340149158976,\\\"ask\\\":34629.270592124114,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":34491.305370641545,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41370241277039727,\\\"bias\\\":0.08629758722960273,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34542.40830761615,\\\"ask\\\":34819.857370327925,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":34681.13283897204,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4141773629739569,\\\"bias\\\":0.08582263702604309,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34449.41159486726,\\\"ask\\\":34726.11369603086,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":34587.76264544906,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4144090424933846,\\\"bias\\\":0.08559095750661538,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34258.28410457699,\\\"ask\\\":34533.451045176,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":34395.867574876494,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41488655575265476,\\\"bias\\\":0.08511344424734524,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34217.886857760626,\\\"ask\\\":34492.7293224816,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":34355.308090121114,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41478607179147553,\\\"bias\\\":0.08521392820852447,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34031.48556093111,\\\"ask\\\":34304.830826480764,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":34168.15819370594,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41431932793753573,\\\"bias\\\":0.08568067206246427,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33848.160365269934,\\\"ask\\\":34120.03313928817,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":33984.09675227905,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4147833834667204,\\\"bias\\\":0.08521661653327961,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33894.81336697082,\\\"ask\\\":34167.06086389428,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":34030.93711543255,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4146659291970299,\\\"bias\\\":0.08533407080297012,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33779.36015614846,\\\"ask\\\":34050.68031804523,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":33915.02023709685,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41437426907021857,\\\"bias\\\":0.08562573092978143,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33859.86213385177,\\\"ask\\\":34131.828897979096,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":33995.84551591543,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4145783297939941,\\\"bias\\\":0.08542167020600588,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33700.837134890215,\\\"ask\\\":33971.52658978893,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":33836.181862339574,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4141752483820567,\\\"bias\\\":0.08582475161794328,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33788.66542686756,\\\"ask\\\":34060.06032989461,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":33924.362878381085,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4143989176432627,\\\"bias\\\":0.0856010823567373,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33899.47578294512,\\\"ask\\\":34171.76072899288,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":34035.618255969,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41467964747667696,\\\"bias\\\":0.08532035252332304,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33875.16611711648,\\\"ask\\\":34147.25580480416,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":34011.21096096032,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4146184194593426,\\\"bias\\\":0.08538158054065742,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33983.066943310856,\\\"ask\\\":34256.0233043013,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":34119.54512380608,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4143464578975818,\\\"bias\\\":0.08565354210241821,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33813.839029093055,\\\"ask\\\":34085.43612972835,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":33949.6375794107,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4139177881371654,\\\"bias\\\":0.0860822118628346,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33784.841852154255,\\\"ask\\\":34056.20604373782,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":33920.523947946036,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41384390467369997,\\\"bias\\\":0.08615609532630003,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33610.091684495215,\\\"ask\\\":33880.0522602743,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":33745.07197238476,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41429185918225797,\\\"bias\\\":0.08570814081774203,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33768.85197150207,\\\"ask\\\":34040.087730309315,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":33904.46985090569,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41388700908060455,\\\"bias\\\":0.08611299091939545,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33933.82747587815,\\\"ask\\\":34206.38833913821,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":34070.10790750818,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4134663097295503,\\\"bias\\\":0.08653369027044971,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33767.539788846094,\\\"ask\\\":34038.76500803361,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":33903.15239843985,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4138924434454029,\\\"bias\\\":0.08610755655459712,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33891.179635428445,\\\"ask\\\":34163.39794575317,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":34027.28879059081,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41357716062798217,\\\"bias\\\":0.08642283937201783,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33990.93768040799,\\\"ask\\\":34263.957260170304,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":34127.447470289146,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4138315446178602,\\\"bias\\\":0.0861684553821398,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33823.227673142195,\\\"ask\\\":34094.90018457306,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":33959.06392885763,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41340428461719225,\\\"bias\\\":0.08659571538280775,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33953.30389451172,\\\"ask\\\":34226.02119486925,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":34089.66254469049,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41307125775314957,\\\"bias\\\":0.08692874224685043,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34134.378059820534,\\\"ask\\\":34408.54977114439,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":34271.46391548246,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41353485179668054,\\\"bias\\\":0.08646514820331946,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34047.16320880817,\\\"ask\\\":34320.634399240356,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":34183.89880402426,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4137563400003252,\\\"bias\\\":0.08624365999967482,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33962.8170475867,\\\"ask\\\":34235.61075881229,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":34099.213903199496,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41354215512748416,\\\"bias\\\":0.08645784487251584,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33930.63782020883,\\\"ask\\\":34203.17306374464,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":34066.905441976734,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4134601600095764,\\\"bias\\\":0.08653983999042358,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34025.545923431186,\\\"ask\\\":34298.8434810491,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":34162.194702240144,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41321809759653905,\\\"bias\\\":0.08678190240346095,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34081.060062697616,\\\"ask\\\":34354.80351701647,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":34217.931789857044,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4133596859968155,\\\"bias\\\":0.0866403140031845,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34075.06108804468,\\\"ask\\\":34348.75635782817,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":34211.90872293642,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41337493917703094,\\\"bias\\\":0.08662506082296906,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34072.813376280355,\\\"ask\\\":34346.4905921541,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":34209.65198421723,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41338065364992005,\\\"bias\\\":0.08661934635007995,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":34058.84216998998,\\\"ask\\\":34332.40716733929,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":34195.624668664634,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4134161855905114,\\\"bias\\\":0.08658381440948859,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33979.34484499189,\\\"ask\\\":34252.27130961029,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":34115.80807730109,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.413618755171093,\\\"bias\\\":0.08638124482890702,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33974.53439183169,\\\"ask\\\":34247.422218272106,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":34110.978305051896,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.413606524453598,\\\"bias\\\":0.08639347554640198,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33822.80974787794,\\\"ask\\\":34094.47890247937,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":33958.644325178655,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4139940741401828,\\\"bias\\\":0.0860059258598172,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33663.62005434614,\\\"ask\\\":33934.01057687101,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":33798.815315608575,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.413587366336404,\\\"bias\\\":0.08641263366359597,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33642.09145646087,\\\"ask\\\":33912.3090585208,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":33777.20025749083,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41353206826301414,\\\"bias\\\":0.08646793173698586,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33719.75964174196,\\\"ask\\\":33990.60108464752,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":33855.18036319474,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41373169340676336,\\\"bias\\\":0.08626830659323664,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33893.682961702754,\\\"ask\\\":34165.921379065825,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":34029.80217038429,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41417665714462815,\\\"bias\\\":0.08582334285537185,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33816.762078135056,\\\"ask\\\":34088.3826570759,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":33952.57236760548,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41437187416002175,\\\"bias\\\":0.08562812583997825,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33654.146302365196,\\\"ask\\\":33924.46073049664,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":33789.30351643092,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4147856265691924,\\\"bias\\\":0.08521437343080762,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33601.57641533848,\\\"ask\\\":33871.46859538136,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":33736.52250535992,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41465230812219644,\\\"bias\\\":0.08534769187780356,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33783.120813713555,\\\"ask\\\":34054.47118169519,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":33918.79599770437,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4141911870371873,\\\"bias\\\":0.08580881296281268,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33677.72818301777,\\\"ask\\\":33948.23202384522,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":33812.980103431495,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.41445972108098883,\\\"bias\\\":0.08554027891901117,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33607.98338598207,\\\"ask\\\":33877.92702763655,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":33742.95520680931,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4142822040510896,\\\"bias\\\":0.08571779594891038,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33501.33089369964,\\\"ask\\\":33770.417888829754,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":33635.8743912647,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4140093188752762,\\\"bias\\\":0.0859906811247238,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33639.75854512889,\\\"ask\\\":33909.95740894519,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":33774.85797703704,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4136540049902646,\\\"bias\\\":0.08634599500973539,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":33530.32750313136,\\\"ask\\\":33799.647402754905,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":33664.98745294313,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.005600000000000001,\\\"forecast\\\":0.4133722024279322,\\\"bias\\\":0.08662779757206779,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[34217.931789857044,34211.90872293642,34209.65198421723,34195.624668664634,34115.80807730109,34110.978305051896,33958.644325178655,33798.815315608575,33777.20025749083,33855.18036319474,34029.80217038429,33952.57236760548,33789.30351643092,33736.52250535992,33918.79599770437,33812.980103431495,33742.95520680931,33635.8743912647,33774.85797703704,33664.98745294313]}],[\\\"NVMD\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13889.566738012933,\\\"ask\\\":14029.160373570849,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":13959.363555791891,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.555026346839728,\\\"bias\\\":0.05502634683972796},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13896.273673804255,\\\"ask\\\":14035.934715752035,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":13966.104194778145,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5549997759479178,\\\"bias\\\":0.05499977594791783},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13841.836361188358,\\\"ask\\\":13980.950294466633,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":13911.393327827496,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5547834722784513,\\\"bias\\\":0.05478347227845126},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13797.7387588381,\\\"ask\\\":13936.409500132955,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":13867.074129485529,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.554608384184806,\\\"bias\\\":0.05460838418480596},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13749.15526394722,\\\"ask\\\":13887.337728911512,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":13818.246496429367,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5548013463052497,\\\"bias\\\":0.05480134630524969},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13783.076830942167,\\\"ask\\\":13921.600216177765,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":13852.338523559967,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5546661418141795,\\\"bias\\\":0.0546661418141795},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13687.597094852215,\\\"ask\\\":13825.160884750227,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":13756.378989801222,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5542848105434456,\\\"bias\\\":0.05428481054344558},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13669.872397516954,\\\"ask\\\":13807.258049753305,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":13738.56522363513,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5543551975820956,\\\"bias\\\":0.054355197582095616},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13613.674543325367,\\\"ask\\\":13750.495393007028,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":13682.084968166198,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5541308169081965,\\\"bias\\\":0.054130816908196544},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13652.75966817355,\\\"ask\\\":13789.973333180318,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":13721.366500676935,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5539754062782261,\\\"bias\\\":0.05397540627822606},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13740.72647457036,\\\"ask\\\":13878.824228083628,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":13809.775351326994,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5536276345288021,\\\"bias\\\":0.05362763452880215},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13764.703979668573,\\\"ask\\\":13903.042713132578,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":13833.873346400576,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5535340545508658,\\\"bias\\\":0.053534054550865795},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13684.034211892471,\\\"ask\\\":13821.56219392154,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":13752.798202907006,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.553849647137223,\\\"bias\\\":0.053849647137222956},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13697.323226364499,\\\"ask\\\":13834.98476632796,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":13766.15399634623,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5537973519785703,\\\"bias\\\":0.053797351978570274},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13757.219971110308,\\\"ask\\\":13895.483488407897,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":13826.351729759102,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5535621026377897,\\\"bias\\\":0.05356210263778971},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13831.702287925598,\\\"ask\\\":13970.714371221333,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":13901.208329573466,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5538520906954306,\\\"bias\\\":0.05385209069543062},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13747.226275958275,\\\"ask\\\":13885.389354108607,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":13816.307815033442,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5541830090761085,\\\"bias\\\":0.05418300907610851},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13797.842517782525,\\\"ask\\\":13936.514301880841,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":13867.178409831684,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5543825067955108,\\\"bias\\\":0.05438250679551082},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13739.092658873224,\\\"ask\\\":13877.17399212823,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":13808.133325500727,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5541499612642521,\\\"bias\\\":0.05414996126425209},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13739.092658873224,\\\"ask\\\":13877.17399212823,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":13746.294643481382,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5539063638205172,\\\"bias\\\":0.05390636382051717},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13696.693696512706,\\\"ask\\\":13834.348909542983,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":13765.521303027845,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5539817615426994,\\\"bias\\\":0.0539817615426994,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13769.388814547216,\\\"ask\\\":13907.774631778844,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":13838.58172316303,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5542682694119713,\\\"bias\\\":0.05426826941197127,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13848.288286597885,\\\"ask\\\":13987.46706334761,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":13917.877674972748,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.554579230040898,\\\"bias\\\":0.05457923004089804,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13853.333639413506,\\\"ask\\\":13992.563123226704,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":13922.948381320106,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5545593451665899,\\\"bias\\\":0.05455934516658989,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13766.231392989484,\\\"ask\\\":13904.585477341136,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":13835.408435165311,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5549045552238503,\\\"bias\\\":0.05490455522385029,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13821.193706150476,\\\"ask\\\":13960.10017555902,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":13890.64694085475,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5546853462572107,\\\"bias\\\":0.054685346257210665,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13921.854697504272,\\\"ask\\\":14061.77283516763,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":13991.813766335952,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5550836245306949,\\\"bias\\\":0.05508362453069493,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14023.804086213599,\\\"ask\\\":14164.74684084891,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":14094.275463531254,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5554870005154914,\\\"bias\\\":0.05548700051549138,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13915.7613779619,\\\"ask\\\":14055.618276232872,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":13985.689827097387,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5550561965051588,\\\"bias\\\":0.055056196505158805,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13862.96780346306,\\\"ask\\\":14002.2941130456,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":13932.63095825433,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5552658639770179,\\\"bias\\\":0.05526586397701794,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13754.712759645574,\\\"ask\\\":13892.95107883799,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":13823.831919241782,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5548308997119702,\\\"bias\\\":0.054830899711970194,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13777.620864985854,\\\"ask\\\":13916.089416392746,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":13846.8551406893,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5547395803185046,\\\"bias\\\":0.054739580318504566,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13884.079603529282,\\\"ask\\\":14023.618092006964,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":13953.848847768124,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5543166113076564,\\\"bias\\\":0.054316611307656415,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13990.161981530868,\\\"ask\\\":14130.766624561327,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":14060.464303046097,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.554731621553711,\\\"bias\\\":0.05473162155371103,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14017.364325580234,\\\"ask\\\":14158.242359003149,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":14087.803342291692,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5546252018852433,\\\"bias\\\":0.054625201885243335,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14084.950835710528,\\\"ask\\\":14226.508130541788,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":14155.729483126159,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.554888584264044,\\\"bias\\\":0.05488858426404397,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14037.756280950889,\\\"ask\\\":14178.839258648886,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":14108.297769799889,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5550731181912532,\\\"bias\\\":0.055073118191253156,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14131.20244423386,\\\"ask\\\":14273.224579351787,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":14202.213511792825,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5554397274621369,\\\"bias\\\":0.05543972746213688,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14079.439594099815,\\\"ask\\\":14220.941499568153,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":14150.190546833985,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5556435507950838,\\\"bias\\\":0.05564355079508376,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14014.601665086406,\\\"ask\\\":14155.451933077224,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":14085.026799081816,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5553861183911722,\\\"bias\\\":0.055386118391172245,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14000.42813805427,\\\"ask\\\":14141.135958537227,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":14070.782048295749,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.555442189294039,\\\"bias\\\":0.05544218929403899,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":13937.79897655938,\\\"ask\\\":14077.877358233342,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":14007.838167396361,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5551930611617732,\\\"bias\\\":0.05519306116177325,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14036.20253001343,\\\"ask\\\":14177.269892124115,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":14106.736211068774,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5548033874870805,\\\"bias\\\":0.05480338748708047,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14053.197582831437,\\\"ask\\\":14194.43574949306,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":14123.816666162249,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5548697435020322,\\\"bias\\\":0.05486974350203222,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14156.274665987996,\\\"ask\\\":14298.548783234104,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":14227.41172461105,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5552722008844466,\\\"bias\\\":0.05527220088444662,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14250.606922412311,\\\"ask\\\":14393.829102537056,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":14322.218012474685,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5549038870766131,\\\"bias\\\":0.05490388707661309,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14153.0646825101,\\\"ask\\\":14295.306538615727,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":14224.185610562914,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5545254921321309,\\\"bias\\\":0.05452549213213087,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14055.421123889535,\\\"ask\\\":14196.681637697468,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":14126.051380793502,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5541467014121382,\\\"bias\\\":0.054146701412138176,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14128.022017095022,\\\"ask\\\":14270.012188121102,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":14199.017102608062,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5544263870118795,\\\"bias\\\":0.05442638701187952,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14069.599261657171,\\\"ask\\\":14211.002269312015,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":14140.300765484593,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5546523877272251,\\\"bias\\\":0.05465238772722514,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14168.01503758011,\\\"ask\\\":14310.407148510561,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":14239.211093045336,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5550346770194919,\\\"bias\\\":0.05503467701949194,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14244.880445607945,\\\"ask\\\":14388.045073201994,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":14316.46275940497,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5547360986446411,\\\"bias\\\":0.05473609864464113,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14138.510928535956,\\\"ask\\\":14280.606515757421,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":14209.558722146689,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.555147899605058,\\\"bias\\\":0.05514789960505795,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14189.60285127975,\\\"ask\\\":14332.211925161957,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":14260.907388220854,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5553471859542602,\\\"bias\\\":0.05534718595426025,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14239.315959861518,\\\"ask\\\":14382.424662975704,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":14310.870311418612,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4448467222681106,\\\"bias\\\":0.05515327773188938,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14220.29067679207,\\\"ask\\\":14363.208171031185,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":14291.749423911628,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4447729328678159,\\\"bias\\\":0.055227067132184116,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14276.403072163992,\\\"ask\\\":14419.884510075186,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":14348.14379111959,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.44455501024607863,\\\"bias\\\":0.05544498975392137,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14309.262225874912,\\\"ask\\\":14453.07390653697,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":14381.168066205943,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4446826247041193,\\\"bias\\\":0.05531737529588071,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14312.81605621388,\\\"ask\\\":14456.663453763767,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":14384.739754988825,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.44469636325775647,\\\"bias\\\":0.055303636742243534,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14311.484202997297,\\\"ask\\\":14455.31821508772,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":14383.40120904251,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4447015099165823,\\\"bias\\\":0.055298490083417695,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14319.766060714075,\\\"ask\\\":14463.683307555422,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":14391.72468413475,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4446695094461679,\\\"bias\\\":0.0553304905538321,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14272.65949065342,\\\"ask\\\":14416.103304629834,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":14344.381397641628,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4448521264021369,\\\"bias\\\":0.055147873597863106,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14275.510354297761,\\\"ask\\\":14418.982820170098,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":14347.24658723393,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.44484111100111745,\\\"bias\\\":0.05515888899888255,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14365.849743925877,\\\"ask\\\":14510.230143362318,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":14438.039943644098,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4444920502501493,\\\"bias\\\":0.05550794974985068,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14461.684824907657,\\\"ask\\\":14607.02839098713,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":14534.356607947395,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4441217547957048,\\\"bias\\\":0.055878245204295185,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14448.64118414955,\\\"ask\\\":14593.853658362108,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":14521.24742125583,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4441721993840469,\\\"bias\\\":0.055827800615953105,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14495.698401370077,\\\"ask\\\":14641.383812439122,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":14568.5411069046,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.44399037599269503,\\\"bias\\\":0.05600962400730497,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14390.984840917903,\\\"ask\\\":14535.617854394464,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":14463.301347656185,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.44439792052242844,\\\"bias\\\":0.055602079477571564,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14437.163553625942,\\\"ask\\\":14582.260674767911,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":14509.712114196927,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.44421950101309343,\\\"bias\\\":0.05578049898690657,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14339.41851968377,\\\"ask\\\":14483.533278675564,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":14411.475899179668,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.44383927173397014,\\\"bias\\\":0.05616072826602986,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14371.066645451196,\\\"ask\\\":14515.499476058745,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":14443.283060754971,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4437153209762101,\\\"bias\\\":0.05628467902378992,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14262.360604916492,\\\"ask\\\":14405.70091250359,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":14334.030758710041,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.44414431620139977,\\\"bias\\\":0.05585568379860023,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14199.67254185589,\\\"ask\\\":14342.382818658461,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":14271.027680257177,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.44389772709042286,\\\"bias\\\":0.056102272909577144,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14158.223243708995,\\\"ask\\\":14300.516944650792,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":14229.370094179894,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4440619708515587,\\\"bias\\\":0.055938029148441315,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14094.922225426606,\\\"ask\\\":14236.579735229887,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":14165.750980328246,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.44431319140809494,\\\"bias\\\":0.05568680859190506,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14177.082624179468,\\\"ask\\\":14319.565866633531,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":14248.3242454065,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.44463779414984905,\\\"bias\\\":0.05536220585015095,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":14112.109501317733,\\\"ask\\\":14253.939747562132,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":14183.024624439933,\\\"maxShares\\\":5500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.44438290274596204,\\\"bias\\\":0.05561709725403796,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[14381.168066205943,14384.739754988825,14383.40120904251,14391.72468413475,14344.381397641628,14347.24658723393,14438.039943644098,14534.356607947395,14521.24742125583,14568.5411069046,14463.301347656185,14509.712114196927,14411.475899179668,14443.283060754971,14334.030758710041,14271.027680257177,14229.370094179894,14165.750980328246,14248.3242454065,14183.024624439933]}],[\\\"WDS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":102622.37338940326,\\\"ask\\\":104486.35191716233,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":103554.3626532828,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.33323594856670224,\\\"bias\\\":0.16676405143329776},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":102468.92348701206,\\\"ask\\\":104330.11483188209,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":103399.51915944708,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3334856821107269,\\\"bias\\\":0.16651431788927312},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":101234.20138862019,\\\"ask\\\":103072.96589416526,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":102153.58364139273,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.33551660550594653,\\\"bias\\\":0.16448339449405347},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":100240.65092534813,\\\"ask\\\":102061.3691056269,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":101151.01001548753,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.33714690769663996,\\\"bias\\\":0.16285309230336004},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":101339.13966088061,\\\"ask\\\":103179.81020971597,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":102259.47493529829,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.33893153584690106,\\\"bias\\\":0.16106846415309894},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":100569.64466736416,\\\"ask\\\":102396.33851601456,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":101482.99159168937,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3376991423429851,\\\"bias\\\":0.1623008576570149},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":98440.06024709759,\\\"ask\\\":100228.07345037482,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":99334.06684873621,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3412102472427048,\\\"bias\\\":0.15878975275729518},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":98045.80057405047,\\\"ask\\\":99826.65265309477,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":98936.22661357262,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3405717252903236,\\\"bias\\\":0.1594282747096764},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":99300.99892316935,\\\"ask\\\":101104.64976132983,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":100202.82434224959,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34261275209664066,\\\"bias\\\":0.15738724790335934},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":100185.15462105341,\\\"ask\\\":102004.86479580513,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":101095.00970842928,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34401409582446874,\\\"bias\\\":0.15598590417553126},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":98222.48016966648,\\\"ask\\\":100006.54136346465,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":99114.51076656557,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34713099481106513,\\\"bias\\\":0.15286900518893487},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":97693.79119450685,\\\"ask\\\":99468.24956130917,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":98581.02037790802,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34630371442099306,\\\"bias\\\":0.15369628557900694},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":95939.77204389116,\\\"ask\\\":97682.37133429483,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":96811.071689093,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.349113667191787,\\\"bias\\\":0.150886332808213},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":95651.69391895659,\\\"ask\\\":97389.0607106228,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":96520.3773147897,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3495680977413439,\\\"bias\\\":0.1504319022586561},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":96948.87072387322,\\\"ask\\\":98709.79874913025,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":97829.33473650174,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3475280212269149,\\\"bias\\\":0.1524719787730851},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":98576.68271542744,\\\"ask\\\":100367.17745697909,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":99471.93008620327,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3500880893697376,\\\"bias\\\":0.14991191063026238},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":96733.22582618934,\\\"ask\\\":98490.23699154897,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":97611.73140886916,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3472311997946214,\\\"bias\\\":0.15276880020537859},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":97837.78625139441,\\\"ask\\\":99614.8600682714,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":98726.32315983291,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3489756094271103,\\\"bias\\\":0.1510243905728897},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":99135.24747136545,\\\"ask\\\":100935.88768779792,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":100035.5675795817,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34697282198121904,\\\"bias\\\":0.15302717801878096},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":99135.24747136545,\\\"ask\\\":100935.88768779792,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":98659.14772433622,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34483789936050313,\\\"bias\\\":0.15516210063949687},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":98195.3153188428,\\\"ask\\\":99978.88310465426,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":99087.09921174853,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3441648563301273,\\\"bias\\\":0.15583514366987272,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":96605.19863852087,\\\"ask\\\":98359.8843857392,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":97482.54151213005,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3415998177522653,\\\"bias\\\":0.15840018224773472,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":94918.45497583524,\\\"ask\\\":96642.50360304516,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":95780.4792894402,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34441466027833284,\\\"bias\\\":0.15558533972166716,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":94811.32902913445,\\\"ask\\\":96533.43187729227,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":95672.38045321337,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3445904538990016,\\\"bias\\\":0.15540954610099839,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":96671.7598178287,\\\"ask\\\":98427.65454711317,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":97549.70718247094,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34763997031633237,\\\"bias\\\":0.15236002968366763,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":97868.7443951444,\\\"ask\\\":99646.38051937507,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":98757.56245725974,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3495264840828593,\\\"bias\\\":0.1504735159171407,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":100079.28582653128,\\\"ask\\\":101897.07305647836,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":100988.17944150482,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.35292519879323003,\\\"bias\\\":0.14707480120676997,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":102352.13553973076,\\\"ask\\\":104211.20561007905,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":103281.67057490491,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.35626533973229596,\\\"bias\\\":0.14373466026770404,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":99945.60605090982,\\\"ask\\\":101760.96519209688,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":100853.28562150335,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3528044402273824,\\\"bias\\\":0.1471955597726176,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":98778.98872524679,\\\"ask\\\":100573.15804618971,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":99676.07338571825,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3510660048322899,\\\"bias\\\":0.1489339951677101,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":96425.41861098373,\\\"ask\\\":98176.83892884215,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":97301.12876991295,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3474307953089724,\\\"bias\\\":0.15256920469102758,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":95929.93330271296,\\\"ask\\\":97672.3538874242,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":96801.14359506858,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.346642763911302,\\\"bias\\\":0.153357236088698,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":93684.93589812676,\\\"ask\\\":95386.57953704328,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":94535.75771758502,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.35031770475096935,\\\"bias\\\":0.14968229524903065,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":91516.41240589185,\\\"ask\\\":93178.66813072137,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":92347.54026830662,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3538644955952121,\\\"bias\\\":0.1461355044047879,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":90967.8694999965,\\\"ask\\\":92620.16178153022,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":91794.01564076336,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.35298328781623156,\\\"bias\\\":0.14701671218376844,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":92328.12558478216,\\\"ask\\\":94005.12483859253,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":93166.62521168735,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.355181650583353,\\\"bias\\\":0.144818349416647,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":93290.77290680801,\\\"ask\\\":94985.25717756739,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":94138.0150421877,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3566915804705154,\\\"bias\\\":0.1433084195294846,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":91403.7942250037,\\\"ask\\\":93064.00441274341,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":92233.89931887356,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.353733060697151,\\\"bias\\\":0.146266939302849,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":90373.3788617819,\\\"ask\\\":92014.87312970527,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":91194.12599574358,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.35206536050393816,\\\"bias\\\":0.14793463949606184,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":89095.05478575964,\\\"ask\\\":90713.33025109129,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":89904.19251842547,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34994281383958936,\\\"bias\\\":0.15005718616041064,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":88816.20659382397,\\\"ask\\\":90429.41720804074,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":89622.81190093236,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3504139347830805,\\\"bias\\\":0.14958606521691947,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":90053.90152985282,\\\"ask\\\":91689.5929804455,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":90871.74725514917,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34832938374763533,\\\"bias\\\":0.15167061625236467,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":92025.67995927265,\\\"ask\\\":93697.18575066204,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":92861.43285496735,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3516502931632489,\\\"bias\\\":0.14834970683675108,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":91681.41470580842,\\\"ask\\\":93346.66744516719,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":92514.04107548781,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3522073488063079,\\\"bias\\\":0.14779265119369212,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":93766.90065133509,\\\"ask\\\":95470.0330546893,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":94618.4668530122,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3488454951753882,\\\"bias\\\":0.1511545048246118,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":95704.65980326328,\\\"ask\\\":97442.98863924586,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":96573.82422125457,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3519692096529329,\\\"bias\\\":0.14803079034706712,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":97750.22963320158,\\\"ask\\\":99525.71311796205,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":98637.97137558182,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3488052329013478,\\\"bias\\\":0.1511947670986522,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":99856.22065778094,\\\"ask\\\":101669.95624995051,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":100763.08845386573,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3455477999145615,\\\"bias\\\":0.15445220008543847,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":98281.83776059329,\\\"ask\\\":100066.9770942872,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":99174.40742744025,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34802197935389856,\\\"bias\\\":0.15197802064610144,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":97032.28226817393,\\\"ask\\\":98794.72533661705,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":97913.5038023955,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34606484750059935,\\\"bias\\\":0.15393515249940065,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":99137.21505375672,\\\"ask\\\":100937.89100831536,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":100037.55303103605,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3494041809860691,\\\"bias\\\":0.15059581901393088,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":100805.22115727223,\\\"ask\\\":102636.19389272218,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":101720.70752499721,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34687037221261363,\\\"bias\\\":0.15312962778738637,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":103157.2115069399,\\\"ask\\\":105030.90455146554,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":104094.05802920273,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34329754728678735,\\\"bias\\\":0.15670245271321265,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":102013.94596329807,\\\"ask\\\":103866.87333700075,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":102940.40965014942,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34154139019375973,\\\"bias\\\":0.15845860980624027,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":100917.4527364827,\\\"ask\\\":102750.46398699397,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":101833.95836173833,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34326308240528264,\\\"bias\\\":0.15673691759471736,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":100500.4588470352,\\\"ask\\\":102325.89604102777,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":101413.17744403149,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34261275366412425,\\\"bias\\\":0.15738724633587575,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":99285.4624480032,\\\"ask\\\":101088.83108984382,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":100187.14676892351,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34453876511471093,\\\"bias\\\":0.15546123488528907,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":98581.7856260199,\\\"ask\\\":100372.37305414134,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":99477.07934008063,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3434290827630372,\\\"bias\\\":0.15657091723696281,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":98505.91376352833,\\\"ask\\\":100295.12309525738,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":99400.51842939286,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34354967782833756,\\\"bias\\\":0.15645032217166244,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":98477.49221987397,\\\"ask\\\":100266.18531771224,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":99371.83876879311,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34350452477294285,\\\"bias\\\":0.15649547522705715,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":98654.22579509494,\\\"ask\\\":100446.12898814409,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":99550.17739161952,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3432236686684735,\\\"bias\\\":0.15677633133152652,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":99664.01625757503,\\\"ask\\\":101474.26075064903,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":100569.13850411204,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3448283768585717,\\\"bias\\\":0.1551716231414283,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":99725.75374040265,\\\"ask\\\":101537.1196004705,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":100631.43667043658,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34473225485006,\\\"bias\\\":0.15526774514994002,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":101682.93851719407,\\\"ask\\\":103529.85364666882,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":102606.39608193145,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3416850212545611,\\\"bias\\\":0.15831497874543887,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":103786.62141279531,\\\"ask\\\":105671.74672604486,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":104729.1840694201,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34496034470371517,\\\"bias\\\":0.15503965529628483,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":104077.19236109887,\\\"ask\\\":105967.59545141146,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":105022.39390625517,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34539440854596054,\\\"bias\\\":0.15460559145403946,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":103036.48349001471,\\\"ask\\\":104907.98369467694,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":103972.23359234583,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34695598562133717,\\\"bias\\\":0.15304401437866283,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":100762.68929167475,\\\"ask\\\":102592.88950080707,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":101677.78939624091,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3435024196791108,\\\"bias\\\":0.15649758032088917,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":99769.82586370049,\\\"ask\\\":101581.9922265124,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":100675.90904510645,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34194502772496077,\\\"bias\\\":0.15805497227503923,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":97704.36895686542,\\\"ask\\\":99479.01945255014,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":98591.69420470779,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34528628807626843,\\\"bias\\\":0.15471371192373157,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":97040.1566210185,\\\"ask\\\":98802.74271504304,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":97921.44966803078,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34422731661988737,\\\"bias\\\":0.15577268338011263,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":99333.94182248466,\\\"ask\\\":101138.19101804946,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":100236.06642026706,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3479093910143611,\\\"bias\\\":0.15209060898563892,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":97992.29732328292,\\\"ask\\\":99772.1775975706,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":98882.23746042677,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34999171314068744,\\\"bias\\\":0.15000828685931256,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":98881.98865171053,\\\"ask\\\":100678.02880885561,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":99780.00873028308,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3486297584191779,\\\"bias\\\":0.15137024158082207,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":97523.68425870157,\\\"ask\\\":99295.05289306749,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":98409.36857588454,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34652148220224743,\\\"bias\\\":0.15347851779775257,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":99286.67059897703,\\\"ask\\\":101090.06118503312,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":100188.36589200508,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.34374697124667913,\\\"bias\\\":0.15625302875332087,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":97888.96871773024,\\\"ask\\\":99666.97218586257,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":98777.97045179641,\\\"maxShares\\\":10900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2986177,\\\"averageShortPrice\\\":110027.38522532923,\\\"volatility\\\":0.0245,\\\"forecast\\\":0.3415159215676414,\\\"bias\\\":0.15848407843235862,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[99477.07934008063,99400.51842939286,99371.83876879311,99550.17739161952,100569.13850411204,100631.43667043658,102606.39608193145,104729.1840694201,105022.39390625517,103972.23359234583,101677.78939624091,100675.90904510645,98591.69420470779,97921.44966803078,100236.06642026706,98882.23746042677,99780.00873028308,98409.36857588454,100188.36589200508,98777.97045179641]}],[\\\"LXO\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":9685.850427905361,\\\"ask\\\":9881.52417392365,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":9783.687300914506,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5537673258565359,\\\"bias\\\":0.053767325856535875},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":9692.954827205233,\\\"ask\\\":9888.7720964417,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":9790.863461823466,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.55380676323532,\\\"bias\\\":0.053806763235319965},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":9750.859459787609,\\\"ask\\\":9947.846519581299,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":9849.352989684454,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5541281988461456,\\\"bias\\\":0.054128198846145614},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":9703.750789236974,\\\"ask\\\":9899.786158716508,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":9801.768473976741,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.554390974296827,\\\"bias\\\":0.054390974296827044},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":9651.944592378677,\\\"ask\\\":9846.93337202269,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":9749.438982200683,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5546829143815185,\\\"bias\\\":0.05468291438151851},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":9688.116287754423,\\\"ask\\\":9883.83580871916,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":9785.976048236791,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5548878444556953,\\\"bias\\\":0.05488784445569528},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":9790.770670233003,\\\"ask\\\":9988.564017106397,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":9889.6673436697,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5554694309696084,\\\"bias\\\":0.055469430969608435},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":9771.52509599531,\\\"ask\\\":9968.929643389156,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":9870.227369692233,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5555786811676237,\\\"bias\\\":0.055578681167623656},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":9710.635070274768,\\\"ask\\\":9906.809516138905,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":9808.722293206836,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5552301779748541,\\\"bias\\\":0.05523017797485408},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":9668.470462072091,\\\"ask\\\":9863.793097669506,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":9766.131779870799,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5549893168350897,\\\"bias\\\":0.054989316835089674},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":9763.096424468858,\\\"ask\\\":9960.33069567025,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":9861.713560069555,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5544511327399452,\\\"bias\\\":0.054451132739945174},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":9788.974741606147,\\\"ask\\\":9986.73180709314,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":9887.853274349643,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5545954623276359,\\\"bias\\\":0.0545954623276359},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":9876.63202719679,\\\"ask\\\":10076.159946938142,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":9976.395987067466,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5541065766006286,\\\"bias\\\":0.054106576600628564},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":9891.201426676573,\\\"ask\\\":10091.023677720543,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":9991.112552198558,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5540267619100734,\\\"bias\\\":0.054026761910073384},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":9956.902235582811,\\\"ask\\\":10158.051775695594,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":10057.477005639203,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5536678973185079,\\\"bias\\\":0.05366789731850785},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10038.786583209812,\\\"ask\\\":10241.590352567588,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":10140.1884678887,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5541092555498597,\\\"bias\\\":0.05410925554985968},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10132.489626956012,\\\"ask\\\":10337.186387096539,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":10234.838007026276,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.554614316783888,\\\"bias\\\":0.05461431678388795},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10189.158573300094,\\\"ask\\\":10395.00016063949,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":10292.079366969792,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5543088700574278,\\\"bias\\\":0.054308870057427794},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10255.340781182093,\\\"ask\\\":10462.519382822136,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":10358.930082002114,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5539561146358569,\\\"bias\\\":0.05395611463585692},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10255.340781182093,\\\"ask\\\":10462.519382822136,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":10429.715472595213,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.553587417809143,\\\"bias\\\":0.053587417809143},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10303.527686642665,\\\"ask\\\":10511.679761120293,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":10407.603723881479,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5537012683695842,\\\"bias\\\":0.05370126836958422,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10386.594891990668,\\\"ask\\\":10596.425091828862,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":10491.509991909765,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5532683278832994,\\\"bias\\\":0.05326832788329938,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10296.971147624543,\\\"ask\\\":10504.990766768475,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":10400.980957196509,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5528046860091426,\\\"bias\\\":0.052804686009142565,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10302.66962851269,\\\"ask\\\":10510.804368482646,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":10406.736998497669,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5527754631930626,\\\"bias\\\":0.05277546319306259,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10204.593311961135,\\\"ask\\\":10410.746712202776,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":10307.670012081955,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.55328268801585,\\\"bias\\\":0.05328268801585001,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10143.079319718427,\\\"ask\\\":10347.990013046072,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":10245.53466638225,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5529595483899077,\\\"bias\\\":0.052959548389907685,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10032.095046511069,\\\"ask\\\":10234.763633309274,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":10133.429339910172,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.552373661099148,\\\"bias\\\":0.05237366109914798,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10143.6871135698,\\\"ask\\\":10348.61008556111,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":10246.148599565455,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.551791082378114,\\\"bias\\\":0.05179108237811403,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10025.451964276572,\\\"ask\\\":10227.98634739327,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":10126.71915583492,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5524018804128414,\\\"bias\\\":0.05240188041284144,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10083.445951484584,\\\"ask\\\":10287.151930302454,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":10185.29894089352,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5527050082910825,\\\"bias\\\":0.05270500829108249,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10203.993877871955,\\\"ask\\\":10410.135168334014,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":10307.064523102985,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5533350983902696,\\\"bias\\\":0.05333509839026962,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10229.808275193525,\\\"ask\\\":10436.471068631778,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":10333.139671912651,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5534700272659148,\\\"bias\\\":0.053470027265914766,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10349.876678491864,\\\"ask\\\":10558.965096239173,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":10454.420887365519,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5528424435785738,\\\"bias\\\":0.05284244357857382,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10469.996722156488,\\\"ask\\\":10681.511807452578,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":10575.754264804533,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5522291573697444,\\\"bias\\\":0.05222915736974443,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10500.919912006344,\\\"ask\\\":10713.059708208491,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":10606.989810107418,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5520748982814274,\\\"bias\\\":0.05207489828142742,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10424.570449477038,\\\"ask\\\":10635.167832294757,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":10529.869140885898,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5516935021832069,\\\"bias\\\":0.051693502183206896,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10477.806584586791,\\\"ask\\\":10689.479444881474,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":10583.643014734133,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5514295141100427,\\\"bias\\\":0.05142951411004271,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10583.753498005592,\\\"ask\\\":10797.566699985504,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":10690.660098995548,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5509094817698196,\\\"bias\\\":0.050909481769819576,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10642.85883303153,\\\"ask\\\":10857.866082183684,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":10750.362457607607,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5506251760198256,\\\"bias\\\":0.050625176019825635,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10568.587795556969,\\\"ask\\\":10782.094619709636,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":10675.341207633302,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.550269406221811,\\\"bias\\\":0.050269406221810975,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10584.839829993121,\\\"ask\\\":10798.674978073792,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":10691.757404033457,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.550346708898082,\\\"bias\\\":0.050346708898082015,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10513.082441366107,\\\"ask\\\":10725.467945232089,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":10619.275193299098,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5500030657870687,\\\"bias\\\":0.0500030657870687,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10625.828354914029,\\\"ask\\\":10840.491554003202,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":10733.159954458615,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.550539315870125,\\\"bias\\\":0.050539315870124946,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10606.321294622074,\\\"ask\\\":10820.590411685145,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":10713.45585315361,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.550446364369373,\\\"bias\\\":0.050446364369373,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10724.490931749408,\\\"ask\\\":10941.14731420899,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":10832.8191229792,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5510084092486796,\\\"bias\\\":0.051008409248679554,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10617.025629874726,\\\"ask\\\":10831.51099613482,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":10724.268313004774,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5504921032427269,\\\"bias\\\":0.050492103242726905,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10507.02976719543,\\\"ask\\\":10719.292994815542,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":10613.161381005486,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5510206943458011,\\\"bias\\\":0.05102069434580114,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10617.904823652183,\\\"ask\\\":10832.40795140273,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":10725.156387527457,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5504823002904502,\\\"bias\\\":0.0504823002904502,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10701.213663081462,\\\"ask\\\":10917.399797689168,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":10809.306730385315,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5500862125576285,\\\"bias\\\":0.05008621255762846,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10768.71113368892,\\\"ask\\\":10986.260853561422,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":10877.48599362517,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5504021293093527,\\\"bias\\\":0.05040212930935273,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10655.494366027498,\\\"ask\\\":10870.756878472497,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":10763.125622249998,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5498665965628053,\\\"bias\\\":0.04986659656280534,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10743.30552037161,\\\"ask\\\":10960.341995530634,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":10851.823757951122,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5539760665291666,\\\"bias\\\":0.053976066529166644,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10621.918946547445,\\\"ask\\\":10836.503167689818,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":10729.211057118631,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5545929013795785,\\\"bias\\\":0.05459290137957851,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10563.932254129999,\\\"ask\\\":10777.345026940708,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":10670.638640535353,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5542932343896434,\\\"bias\\\":0.0542932343896434,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10620.150908013688,\\\"ask\\\":10834.699411205884,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":10727.425159609786,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5545821696534211,\\\"bias\\\":0.05458216965342111,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10598.611895067734,\\\"ask\\\":10812.725266685266,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":10705.6685808765,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5544712451219426,\\\"bias\\\":0.05447124512194257,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10535.464104313432,\\\"ask\\\":10748.30176298643,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":10641.882933649931,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5547977365564944,\\\"bias\\\":0.05479773655649445,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10498.758727830398,\\\"ask\\\":10710.854863746164,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":10604.806795788281,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5546061547130721,\\\"bias\\\":0.054606154713072064,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10494.799525012859,\\\"ask\\\":10706.815677033323,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":10600.80760102309,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5546267550914862,\\\"bias\\\":0.05462675509148618,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10493.316192204085,\\\"ask\\\":10705.302377905176,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":10599.30928505463,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5546190330657147,\\\"bias\\\":0.054619033065714695,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10484.100490281864,\\\"ask\\\":10695.900500186548,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":10590.000495234206,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5545710220104525,\\\"bias\\\":0.0545710220104525,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10536.661283219286,\\\"ask\\\":10749.523127324725,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":10643.092205272005,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5542974366713065,\\\"bias\\\":0.05429743667130649,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10533.465355364986,\\\"ask\\\":10746.26263527135,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":10639.863995318168,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.554280962445169,\\\"bias\\\":0.054280962445169,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10433.175689565525,\\\"ask\\\":10643.946915617353,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":10538.561302591439,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.553759182716266,\\\"bias\\\":0.05375918271626601,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10328.51460826802,\\\"ask\\\":10537.171469041112,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":10432.843038654566,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.554303936188198,\\\"bias\\\":0.054303936188197954,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10314.370723322829,\\\"ask\\\":10522.741849046522,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":10418.556286184676,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5543784020616982,\\\"bias\\\":0.054378402061698194,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10365.397264037265,\\\"ask\\\":10574.799228967311,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":10470.098246502288,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5546474191274231,\\\"bias\\\":0.0546474191274231,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10479.96241117276,\\\"ask\\\":10691.678823519684,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":10585.820617346222,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5552514181303971,\\\"bias\\\":0.055251418130397134,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10531.044092831173,\\\"ask\\\":10743.792458342912,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":10637.418275587042,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5549821103560578,\\\"bias\\\":0.05498211035605782,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10640.084822024553,\\\"ask\\\":10855.036030550302,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":10747.560426287428,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5544128135842499,\\\"bias\\\":0.054412813584249875,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10675.755856162183,\\\"ask\\\":10891.427691640207,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":10783.591773901195,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.554230393860784,\\\"bias\\\":0.05423039386078399,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10799.354883406124,\\\"ask\\\":11017.523668929482,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":10908.439276167803,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5548582486018026,\\\"bias\\\":0.05485824860180255,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10727.41729879231,\\\"ask\\\":10944.132799778015,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":10835.775049285163,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5544903716198004,\\\"bias\\\":0.054490371619800415,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10775.121623788253,\\\"ask\\\":10992.80084851125,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":10883.961236149751,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5547326877639848,\\\"bias\\\":0.054732687763984766,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10702.113411179795,\\\"ask\\\":10918.31772251676,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":10810.215566848277,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5551060659512063,\\\"bias\\\":0.05510606595120626,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10796.873085240417,\\\"ask\\\":11014.991733427092,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":10905.932409333755,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5546181405622971,\\\"bias\\\":0.05461814056229708,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":10872.38125692614,\\\"ask\\\":11092.02532272263,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":10982.203289824385,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012,\\\"forecast\\\":0.5550001137412142,\\\"bias\\\":0.05500011374121416,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[10604.806795788281,10600.80760102309,10599.30928505463,10590.000495234206,10643.092205272005,10639.863995318168,10538.561302591439,10432.843038654566,10418.556286184676,10470.098246502288,10585.820617346222,10637.418275587042,10747.560426287428,10783.591773901195,10908.439276167803,10835.775049285163,10883.961236149751,10810.215566848277,10905.932409333755,10982.203289824385]}],[\\\"RHOC\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2465.6841678931696,\\\"ask\\\":2485.4888600047616,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":2475.5865139489656,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4478533941731804,\\\"bias\\\":0.052146605826819625},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2466.452795503905,\\\"ask\\\":2486.263661331245,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":2476.358228417575,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44783713851417645,\\\"bias\\\":0.05216286148582355},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2472.714879080777,\\\"ask\\\":2492.5760427681726,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":2482.6454609244747,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44770470208610924,\\\"bias\\\":0.05229529791389076},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2467.6235747867167,\\\"ask\\\":2487.443844463718,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":2477.5337096252174,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4478125999346906,\\\"bias\\\":0.05218740006530942},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2462.007341166747,\\\"ask\\\":2481.782500533548,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":2471.8949208501476,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44793164776443695,\\\"bias\\\":0.052068352235563053},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2465.928661471656,\\\"ask\\\":2485.735317387091,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":2475.8319894293736,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4480145787465874,\\\"bias\\\":0.0519854212534126},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2454.873725299275,\\\"ask\\\":2474.5915865466586,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":2464.732655922967,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4482486826468932,\\\"bias\\\":0.051751317353106785},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2456.9286059832634,\\\"ask\\\":2476.662972296382,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":2466.795789139823,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44829200169068106,\\\"bias\\\":0.05170799830931894},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2463.4761735825928,\\\"ask\\\":2483.2631308001232,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":2473.369652191358,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4484298004095904,\\\"bias\\\":0.05157019959040959},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2468.042086147084,\\\"ask\\\":2487.8657173611164,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":2477.9539017541,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44852538283282967,\\\"bias\\\":0.05147461716717033},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2457.818781013495,\\\"ask\\\":2477.560297326856,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":2467.6895391701755,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4487394916686803,\\\"bias\\\":0.051260508331319676},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2460.5875533091053,\\\"ask\\\":2480.3513087573715,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":2470.4694310332384,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44879723745385497,\\\"bias\\\":0.05120276254614503},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2451.2586866422757,\\\"ask\\\":2470.947511434583,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":2461.1030990384293,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.448992102135975,\\\"bias\\\":0.05100789786402499},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2449.7228724908055,\\\"ask\\\":2469.3993614264746,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":2459.56111695864,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44896012355902815,\\\"bias\\\":0.051039876440971854},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2442.826776906121,\\\"ask\\\":2462.4478755158084,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":2452.6373262109646,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4491042090381521,\\\"bias\\\":0.050895790961847875},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2451.364818227658,\\\"ask\\\":2471.0544954824986,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":2461.2096568550783,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44892632071204047,\\\"bias\\\":0.05107367928795953},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2441.678696541198,\\\"ask\\\":2461.2905736218504,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":2451.484635081524,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44872371179660075,\\\"bias\\\":0.051276288203399245},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2447.482416037457,\\\"ask\\\":2467.1409093389625,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":2457.3116626882097,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44860183122567904,\\\"bias\\\":0.05139816877432096},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2454.2387551673464,\\\"ask\\\":2473.951516253028,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":2464.095135710187,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44845994523842164,\\\"bias\\\":0.05154005476157836},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2454.2387551673464,\\\"ask\\\":2473.951516253028,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":2456.9597786899662,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4483102656650093,\\\"bias\\\":0.05168973433499069},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2444.9243075234685,\\\"ask\\\":2464.562253768637,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":2454.743280646053,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4482635926805277,\\\"bias\\\":0.05173640731947232,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2453.3014905784607,\\\"ask\\\":2473.006723434513,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":2463.154107006487,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4484408600721558,\\\"bias\\\":0.05155913992784422,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2462.3766328275024,\\\"ask\\\":2482.154758392382,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":2472.265695609942,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4482501348266528,\\\"bias\\\":0.051749865173347176,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2461.797616411097,\\\"ask\\\":2481.571091241708,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":2471.6843538264025,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44826230642893333,\\\"bias\\\":0.05173769357106667,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2451.7828832024848,\\\"ask\\\":2471.4759184089303,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":2461.6294008057075,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.448473638028274,\\\"bias\\\":0.051526361971726,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2458.1022713403745,\\\"ask\\\":2477.846064684474,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":2467.9741680124243,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44860644549783574,\\\"bias\\\":0.05139355450216426,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2469.6596324334896,\\\"ask\\\":2489.496255987172,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":2479.5779442103308,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44884808469819176,\\\"bias\\\":0.05115191530180824,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2481.334923523311,\\\"ask\\\":2501.265324515466,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":2491.3001240193885,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44860626453272956,\\\"bias\\\":0.05139373546727044,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2468.959911997195,\\\"ask\\\":2488.7909153064097,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":2478.8754136518023,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4488638621007124,\\\"bias\\\":0.051136137899287615,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2462.904892033244,\\\"ask\\\":2482.6872606439524,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":2472.796076338598,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4487381445641314,\\\"bias\\\":0.051261855435868586,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2450.454405419038,\\\"ask\\\":2470.136770121199,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":2460.2955877701183,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44847768877131516,\\\"bias\\\":0.051522311228684836,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2453.089082278777,\\\"ask\\\":2472.7926090440687,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":2462.940845661423,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4484222930696631,\\\"bias\\\":0.05157770693033692,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2465.325759112508,\\\"ask\\\":2485.127572438713,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":2475.2266657756104,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4481650094120533,\\\"bias\\\":0.05183499058794672,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2453.2251662861245,\\\"ask\\\":2472.9297860956513,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":2463.077476190888,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44842068676441543,\\\"bias\\\":0.05157931323558457,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2450.1496411524563,\\\"ask\\\":2469.8295579488617,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":2459.989599550659,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4483559423620454,\\\"bias\\\":0.0516440576379546,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2457.7762128062354,\\\"ask\\\":2477.5173872062855,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":2467.6468000062605,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4481951900963665,\\\"bias\\\":0.05180480990363351,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2452.4534385130196,\\\"ask\\\":2472.1518597058953,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":2462.3026491094574,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44808275358438643,\\\"bias\\\":0.05191724641561357,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2441.959336314961,\\\"ask\\\":2461.5734675303424,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":2451.7664019226518,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4483058633150134,\\\"bias\\\":0.051694136684986625,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2447.755148784131,\\\"ask\\\":2467.4158327101077,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":2457.5854907471194,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4481831710500251,\\\"bias\\\":0.051816828949974914,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2455.065856714819,\\\"ask\\\":2474.785261186424,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":2464.9255589506215,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44833793232283287,\\\"bias\\\":0.051662067677167134,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2456.670368276603,\\\"ask\\\":2476.4026603912744,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":2466.5365143339386,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44837169613599775,\\\"bias\\\":0.051628303864002245,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2449.564545477649,\\\"ask\\\":2469.2397627104015,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":2459.4021540940253,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4482219300972357,\\\"bias\\\":0.05177806990276429,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2438.450463206746,\\\"ask\\\":2458.036410702383,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":2448.2434369545645,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44845792657836625,\\\"bias\\\":0.05154207342163375,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2440.356494009081,\\\"ask\\\":2459.9577509890732,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":2450.157122499077,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4484982147782047,\\\"bias\\\":0.051501785221795326,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2428.8555961018187,\\\"ask\\\":2448.3644763917932,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":2438.610036246806,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4482543481708905,\\\"bias\\\":0.05174565182910951,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2439.3041460348636,\\\"ask\\\":2458.8969504206857,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":2449.1005482277747,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44847694972358143,\\\"bias\\\":0.05152305027641857,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2428.4991831529774,\\\"ask\\\":2448.005200688343,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":2438.25219192066,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4487061878677242,\\\"bias\\\":0.051293812132275796,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2439.3905097934635,\\\"ask\\\":2458.984007864094,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":2449.187258828779,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4489362302191665,\\\"bias\\\":0.05106376978083349,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2431.283200613293,\\\"ask\\\":2450.8115797346845,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":2441.047390173989,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44876595397598196,\\\"bias\\\":0.05123404602401804,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2424.7831565648457,\\\"ask\\\":2444.2593264970938,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":2434.5212415309697,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4489032955584796,\\\"bias\\\":0.051096704441520424,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2413.8827611822016,\\\"ask\\\":2433.271377737882,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":2423.577069460042,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44867255764107966,\\\"bias\\\":0.05132744235892034,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2405.4578996276305,\\\"ask\\\":2424.778846612591,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":2415.118373120111,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4488523265723468,\\\"bias\\\":0.051147673427653195,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2417.14089919795,\\\"ask\\\":2436.555685536889,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":2426.8482923674196,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44910074424233415,\\\"bias\\\":0.05089925575766585,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2422.779789248912,\\\"ask\\\":2442.2398678774175,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":2432.509828563165,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4489820025889252,\\\"bias\\\":0.05101799741107482,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2417.3124433277007,\\\"ask\\\":2436.728607531136,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":2427.0205254294183,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44909739232301754,\\\"bias\\\":0.05090260767698246,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2415.226398749064,\\\"ask\\\":2434.625807574358,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":2424.926103161711,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44905342745544324,\\\"bias\\\":0.050946572544556756,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2421.378893707095,\\\"ask\\\":2440.8277201625733,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":2431.103306934834,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44918320764121444,\\\"bias\\\":0.050816792358785556,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2424.976746666421,\\\"ask\\\":2444.4544715392435,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":2434.7156091028323,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44925871476124707,\\\"bias\\\":0.05074128523875293,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2424.5880055430657,\\\"ask\\\":2444.0626079972267,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":2434.325306770146,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44925057926598805,\\\"bias\\\":0.05074942073401195,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2424.442350128095,\\\"ask\\\":2443.915782659244,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":2434.1790663936695,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4492536281848193,\\\"bias\\\":0.05074637181518071,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2425.3480786328932,\\\"ask\\\":2444.828786091792,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":2435.0884323623427,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4492725861259993,\\\"bias\\\":0.050727413874000704,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2420.1914081749396,\\\"ask\\\":2439.6306965940153,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":2429.9110523844774,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4491645018828899,\\\"bias\\\":0.05083549811711008,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2419.879369559097,\\\"ask\\\":2439.316151643909,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":2429.597760601503,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44917105701893006,\\\"bias\\\":0.050828942981069936,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2410.0335543020537,\\\"ask\\\":2429.3912535333957,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":2419.7124039177247,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44896340331991447,\\\"bias\\\":0.05103659668008553,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2399.698969239751,\\\"ask\\\":2418.973659755733,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":2409.336314497742,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44918319840939935,\\\"bias\\\":0.050816801590600646,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2398.3012541863523,\\\"ask\\\":2417.564718075399,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":2407.9329861308756,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4492128141252836,\\\"bias\\\":0.05078718587471642,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2403.3437559004014,\\\"ask\\\":2422.6477218112477,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":2412.9957388558246,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4493195957363835,\\\"bias\\\":0.050680404263616474,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2392.107124873031,\\\"ask\\\":2411.3208367194006,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":2401.7139807962158,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44955766074488873,\\\"bias\\\":0.05044233925511127,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2387.162011123345,\\\"ask\\\":2406.3360031805605,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":2396.749007151953,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4494531671645391,\\\"bias\\\":0.05054683283546091,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2397.666819644036,\\\"ask\\\":2416.925187673305,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":2407.2960036586705,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44923073366493177,\\\"bias\\\":0.05076926633506823,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2401.0830596432493,\\\"ask\\\":2420.3688673512274,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":2410.7259634972384,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44930307065394276,\\\"bias\\\":0.05069692934605724,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2412.8974831054834,\\\"ask\\\":2432.278185781029,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":2422.5878344432563,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4495525226623286,\\\"bias\\\":0.05044747733767141,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2406.040193605497,\\\"ask\\\":2425.3658176505205,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":2415.7030056280087,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4496962995441811,\\\"bias\\\":0.05030370045581889,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2410.58750178459,\\\"ask\\\":2429.9496503933015,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":2420.268576088946,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44960122780384637,\\\"bias\\\":0.05039877219615363,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2403.6187230482396,\\\"ask\\\":2422.924897530555,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":2413.2718102893973,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4497473482715607,\\\"bias\\\":0.05025265172843929,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2394.6076335736157,\\\"ask\\\":2413.8414298272187,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":2404.224531700417,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.4495582437457448,\\\"bias\\\":0.05044175625425518,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":2387.511360243944,\\\"ask\\\":2406.688158318193,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":2397.0997592810686,\\\"maxShares\\\":8500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0051,\\\"forecast\\\":0.44970816910131345,\\\"bias\\\":0.05029183089868655,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[2434.7156091028323,2434.325306770146,2434.1790663936695,2435.0884323623427,2429.9110523844774,2429.597760601503,2419.7124039177247,2409.336314497742,2407.9329861308756,2412.9957388558246,2401.7139807962158,2396.749007151953,2407.2960036586705,2410.7259634972384,2422.5878344432563,2415.7030056280087,2420.268576088946,2413.2718102893973,2404.224531700417,2397.0997592810686]}],[\\\"APHE\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":93663.24353261357,\\\"ask\\\":96323.05166538556,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":94993.14759899957,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5769289805410027,\\\"bias\\\":0.07692898054100272},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":93561.4488016097,\\\"ask\\\":96218.36621179742,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":94889.90750670356,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5768452819131931,\\\"bias\\\":0.07684528191319306},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":94390.5218857633,\\\"ask\\\":97070.98295351319,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":95730.75241963824,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5761643352658884,\\\"bias\\\":0.0761643352658884},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":93715.66426289079,\\\"ask\\\":96376.96101680654,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":95046.31263984866,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5767128036852235,\\\"bias\\\":0.07671280368522349},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":94461.79998947713,\\\"ask\\\":97144.28518187608,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":95803.04258567661,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5773235677871092,\\\"bias\\\":0.07732356778710925},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":94986.90845248058,\\\"ask\\\":97684.30544707437,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":96335.60694977747,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5768937299072556,\\\"bias\\\":0.07689372990725563},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":96479.84263177107,\\\"ask\\\":99219.63532313982,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":97849.73897745545,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5781022888489239,\\\"bias\\\":0.0781022888489239},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":96198.79694846277,\\\"ask\\\":98930.60862651242,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":97564.7027874876,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5783304654148871,\\\"bias\\\":0.07833046541488708},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":95312.28182826955,\\\"ask\\\":98018.91863475186,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":96665.6002315107,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5776019009462786,\\\"bias\\\":0.07760190094627861},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":95928.84547915965,\\\"ask\\\":98652.99119256379,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":97290.91833586172,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5770999036124025,\\\"bias\\\":0.07709990361240249},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":97321.49075002747,\\\"ask\\\":100085.18419931832,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":98703.3374746729,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.575980607162895,\\\"bias\\\":0.07598060716289501},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":97704.13567813924,\\\"ask\\\":100478.6953120012,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":99091.41549507022,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.576279344818285,\\\"bias\\\":0.07627934481828502},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":99001.91997118859,\\\"ask\\\":101813.33352006617,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":100407.62674562738,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5772925479432314,\\\"bias\\\":0.07729254794323137},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":99218.54825102542,\\\"ask\\\":102036.11351576041,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":100627.33088339292,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5774616734683728,\\\"bias\\\":0.07746167346837285},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":100196.13047312408,\\\"ask\\\":103041.4566934562,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":101618.79358329014,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5766984577570816,\\\"bias\\\":0.07669845775708162},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":101418.39823273697,\\\"ask\\\":104298.43388234818,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":102858.41605754258,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5757628322824665,\\\"bias\\\":0.0757628322824665},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":100033.3778432107,\\\"ask\\\":102874.08228500574,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":101453.73006410823,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5768118128301788,\\\"bias\\\":0.0768118128301788},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":100863.25280220968,\\\"ask\\\":103727.52367286068,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":102295.38823753518,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5761745835233468,\\\"bias\\\":0.07617458352334683},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":101835.04779355002,\\\"ask\\\":104726.91527653117,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":103280.9815350406,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5769085086812098,\\\"bias\\\":0.0769085086812098},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":101835.04779355002,\\\"ask\\\":104726.91527653117,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":104327.83969819422,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.576128962447893,\\\"bias\\\":0.07612896244789302},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":102544.08687566966,\\\"ask\\\":105456.08934272721,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":104000.08810919843,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.576368879440893,\\\"bias\\\":0.07636887944089299,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":103770.37644899105,\\\"ask\\\":106717.2025550476,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":105243.78950201932,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5754556101979951,\\\"bias\\\":0.07545561019799507,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":105110.13252983135,\\\"ask\\\":108095.00444751419,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":106602.56848867277,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.574481419720369,\\\"bias\\\":0.07448141972036904,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":105196.41706029802,\\\"ask\\\":108183.73924862292,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":106690.07815446047,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.574420278190296,\\\"bias\\\":0.07442027819029595,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":106696.13003889135,\\\"ask\\\":109726.0404253913,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":108211.08523214133,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5754812369205589,\\\"bias\\\":0.07548123692055886,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":105744.86369872518,\\\"ask\\\":108747.76043662001,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":107246.3120676726,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5761602558107927,\\\"bias\\\":0.07616025581079267,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":107480.13682992007,\\\"ask\\\":110532.31110095228,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":109006.22396543618,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5749104660720691,\\\"bias\\\":0.07491046607206908,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":109253.54477995269,\\\"ask\\\":112356.07952015418,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":110804.81215005343,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5761464787902429,\\\"bias\\\":0.07614647879024294,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":111164.79230762391,\\\"ask\\\":114321.60182548747,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":112743.19706655569,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5774785616038656,\\\"bias\\\":0.07747856160386557,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":112118.65315994543,\\\"ask\\\":115302.5500042441,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":113710.60158209477,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.578143374313663,\\\"bias\\\":0.07814337431366303,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":114106.88670950064,\\\"ask\\\":117347.24454709295,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":115727.0656282968,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5767576345272224,\\\"bias\\\":0.0767576345272224,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":113680.29173344349,\\\"ask\\\":116908.53531208083,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":115294.41352276216,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.576469594966767,\\\"bias\\\":0.07646959496676697,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":115659.4712002018,\\\"ask\\\":118943.91865821971,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":117301.69492921076,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.577800934373816,\\\"bias\\\":0.07780093437381597,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":113702.0363983101,\\\"ask\\\":116930.89747250147,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":115316.46693540578,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5791403145765549,\\\"bias\\\":0.0791403145765549,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":113206.07687079592,\\\"ask\\\":116420.8539016096,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":114813.46538620276,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5794870308846335,\\\"bias\\\":0.07948703088463349,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":111989.4325981691,\\\"ask\\\":115169.65989304613,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":113579.54624560762,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5803505716547783,\\\"bias\\\":0.08035057165477832,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":111147.48175993326,\\\"ask\\\":114303.79970037763,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":112725.64073015544,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5797419098111966,\\\"bias\\\":0.07974190981119655,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":112814.5612759224,\\\"ask\\\":116018.2202168208,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":114416.3907463716,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5785458763760961,\\\"bias\\\":0.07854587637609611,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":113749.08618600183,\\\"ask\\\":116979.28335964083,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":115364.18477282133,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5778952238607887,\\\"bias\\\":0.07789522386078873,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":112575.57974023698,\\\"ask\\\":115772.45218722141,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":114174.0159637292,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5787072165461105,\\\"bias\\\":0.07870721654611046,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":112832.36714776646,\\\"ask\\\":116036.53173208438,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":114434.44943992542,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5788867494620179,\\\"bias\\\":0.0788867494620179,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":113974.74299189741,\\\"ask\\\":117211.34826955777,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":115593.04563072759,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5780880573908909,\\\"bias\\\":0.07808805739089086,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":112190.0487079317,\\\"ask\\\":115375.9730120109,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":113783.0108599713,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5793302647994492,\\\"bias\\\":0.07933026479944916,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":112496.11826860922,\\\"ask\\\":115690.73420321476,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":114093.42623591199,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5791138411542575,\\\"bias\\\":0.07911384115425746,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":114355.28104887345,\\\"ask\\\":117602.69268109299,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":115978.98686498322,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5778063692953038,\\\"bias\\\":0.07780636929530382,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":116072.24184566321,\\\"ask\\\":119368.41098529666,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":117720.32641547994,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5766381636418764,\\\"bias\\\":0.07663816364187637,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":117874.69304983511,\\\"ask\\\":121222.04741636188,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":119548.3702330985,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.577828254813937,\\\"bias\\\":0.07782825481393696,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":119719.76464274446,\\\"ask\\\":123119.51455146338,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":121419.63959710392,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5790464866359465,\\\"bias\\\":0.07904648663594649,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":118342.45500345893,\\\"ask\\\":121703.09267089995,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":120022.77383717944,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5799664564641216,\\\"bias\\\":0.0799664564641216,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":117245.49852615212,\\\"ask\\\":120574.98529971424,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":118910.24191293318,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5807146278096169,\\\"bias\\\":0.08071462780961691,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":119093.37136369197,\\\"ask\\\":122475.33322797531,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":120784.35229583364,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.579442507598637,\\\"bias\\\":0.07944250759863702,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":120549.1737552251,\\\"ask\\\":123972.47686389276,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":122260.82530955893,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5784713990371178,\\\"bias\\\":0.07847139903711775,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":122592.65504068078,\\\"ask\\\":126073.9880438644,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":124333.32154227259,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5771411963457125,\\\"bias\\\":0.07714119634571248,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":123590.82831309953,\\\"ask\\\":127100.50700758917,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":125345.66766034435,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5777692949897066,\\\"bias\\\":0.07776929498970664,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":124566.44638021025,\\\"ask\\\":128103.83025307627,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":126335.13831664326,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5771553891659977,\\\"bias\\\":0.07715538916599773,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":124192.06914974532,\\\"ask\\\":127718.82162052918,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":125955.44538513725,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5773879742345063,\\\"bias\\\":0.07738797423450627,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":125296.24211250276,\\\"ask\\\":128854.35040778683,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":127075.2962601448,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5780760190458806,\\\"bias\\\":0.07807601904588057,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":125946.02538903226,\\\"ask\\\":129522.58594774717,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":127734.30566838972,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5784809193894076,\\\"bias\\\":0.0784809193894076,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":125875.586278142,\\\"ask\\\":129450.14653756187,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":127662.86640785194,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5784370020075936,\\\"bias\\\":0.07843700200759363,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":125901.98033243683,\\\"ask\\\":129477.2901187535,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":127689.63522559516,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5784534489656649,\\\"bias\\\":0.07845344896566486,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":125738.03363794179,\\\"ask\\\":129308.68773719369,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":127523.36068756774,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5783511554649832,\\\"bias\\\":0.07835115546498317,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":124809.88300377663,\\\"ask\\\":128354.17988420842,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":126582.03144399253,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5777684958800031,\\\"bias\\\":0.07776849588000312,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":124866.05416835107,\\\"ask\\\":128411.94617313183,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":126639.00017074145,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5778034958886215,\\\"bias\\\":0.07780349588862145,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":126646.47557617824,\\\"ask\\\":130242.92721525837,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":128444.70139571831,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5789128687330386,\\\"bias\\\":0.0789128687330386,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":128550.09099513404,\\\"ask\\\":132200.60067856585,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":130375.34583684994,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5777267342354869,\\\"bias\\\":0.07772673423548693,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":128811.57018009777,\\\"ask\\\":132469.50523592206,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":130640.53770800991,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5778848354313745,\\\"bias\\\":0.07788483543137448,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":129756.82090775912,\\\"ask\\\":133441.59878343585,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":131599.20984559748,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5784563733550435,\\\"bias\\\":0.07845637335504352,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":131884.15411094943,\\\"ask\\\":135629.3430715038,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":133756.7485912266,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5797426475321732,\\\"bias\\\":0.0797426475321732,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":130937.46334590245,\\\"ask\\\":134655.76859304775,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":132796.6159694751,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5803191947331807,\\\"bias\\\":0.08031919473318072,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":132948.50004162165,\\\"ask\\\":136723.91383590703,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":134836.20693876434,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5790855917302545,\\\"bias\\\":0.07908559173025453,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":133609.6390896873,\\\"ask\\\":137403.82762367438,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":135506.73335668084,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5786923073169976,\\\"bias\\\":0.07869230731699761,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":135904.16500171865,\\\"ask\\\":139763.51248655448,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":137833.83874413656,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.580043718333797,\\\"bias\\\":0.08004371833379698,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":134565.61825141442,\\\"ask\\\":138386.95426666757,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":136476.286259041,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5792475100567481,\\\"bias\\\":0.07924751005674813,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":133683.7979125313,\\\"ask\\\":137480.09237657883,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":135581.94514455507,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5787247685782362,\\\"bias\\\":0.07872476857823618,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":135036.5546284457,\\\"ask\\\":138871.26409051113,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":136953.90935947842,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5779281465412659,\\\"bias\\\":0.0779281465412659,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":136810.10739570402,\\\"ask\\\":140695.1814393954,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":138752.64441754972,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5769046482720316,\\\"bias\\\":0.07690464827203158,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":135405.44856206552,\\\"ask\\\":139250.63371392948,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":137328.0411379975,\\\"maxShares\\\":10100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0178,\\\"forecast\\\":0.5761068606298774,\\\"bias\\\":0.07610686062987737,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[127734.30566838972,127662.86640785194,127689.63522559516,127523.36068756774,126582.03144399253,126639.00017074145,128444.70139571831,130375.34583684994,130640.53770800991,131599.20984559748,133756.7485912266,132796.6159694751,134836.20693876434,135506.73335668084,137833.83874413656,136476.286259041,135581.94514455507,136953.90935947842,138752.64441754972,137328.0411379975]}],[\\\"SYSC\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":280.13669315063896,\\\"ask\\\":284.08625377914746,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":282.1114734648932,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3196990904336677,\\\"bias\\\":0.18030090956633232},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":280.4243585568004,\\\"ask\\\":284.3779748909345,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":282.4011667238675,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.31951394391180954,\\\"bias\\\":0.18048605608819046},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":278.09849732716367,\\\"ask\\\":282.01932206289405,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":280.0589096950289,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.31800445887546386,\\\"bias\\\":0.18199554112453614},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":276.2211433458961,\\\"ask\\\":280.1154998482551,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":278.16832159707565,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.31924140275877566,\\\"bias\\\":0.18075859724122434},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":278.29678245761056,\\\"ask\\\":282.22040275409245,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":280.2585926058515,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.32059969709377045,\\\"bias\\\":0.17940030290622955},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":276.8442774742196,\\\"ask\\\":280.74741935200313,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":278.7958484131114,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3196584465237008,\\\"bias\\\":0.1803415534762992},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":272.7975252541961,\\\"ask\\\":276.6436132235402,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":274.72056923886817,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3169832111775859,\\\"bias\\\":0.18301678882241412},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":273.54973158448587,\\\"ask\\\":277.4064246783255,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":275.4780781314057,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3174878579370213,\\\"bias\\\":0.18251214206297872},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":271.16923818977943,\\\"ask\\\":274.99236944321035,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":273.0808038164949,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3190900638197202,\\\"bias\\\":0.18090993618027978},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":269.5236724169159,\\\"ask\\\":273.32360334726513,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":271.42363788209053,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3201946020455451,\\\"bias\\\":0.17980539795445488},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":265.88060482947816,\\\"ask\\\":269.629173276218,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":267.7548890528481,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.322658276361896,\\\"bias\\\":0.17734172363810402},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":264.89760257094474,\\\"ask\\\":268.6323119727506,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":266.76495727184766,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.323316369576695,\\\"bias\\\":0.17668363042330498},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":261.6178116862109,\\\"ask\\\":265.3062803303267,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":263.4620460082688,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.32110136228491676,\\\"bias\\\":0.17889863771508324},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":261.07863370939225,\\\"ask\\\":264.7595006499073,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":262.9190671796498,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.32073190192667766,\\\"bias\\\":0.17926809807332234},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":258.67315747476397,\\\"ask\\\":262.32011034953405,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":260.49663391214904,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3223989676313381,\\\"bias\\\":0.17760103236866193},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":261.6513725005016,\\\"ask\\\":265.34031430816225,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":263.49584340433194,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.32035417075967787,\\\"bias\\\":0.17964582924032213},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":265.0705648222652,\\\"ask\\\":268.8077127653787,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":266.939138793822,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.31800660562327027,\\\"bias\\\":0.18199339437672973},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":267.14604461407134,\\\"ask\\\":270.91245410510555,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":269.02924935958845,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.31658161295188725,\\\"bias\\\":0.18341838704811275},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":264.7386443351533,\\\"ask\\\":268.4711126339369,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":266.6048784845451,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3182495276503523,\\\"bias\\\":0.1817504723496477},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":264.7386443351533,\\\"ask\\\":268.4711126339369,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":264.0785495699917,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3199882583207469,\\\"bias\\\":0.1800117416792531},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":263.0099784403007,\\\"ask\\\":266.7180748130743,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":264.8640266266875,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.32052368648503793,\\\"bias\\\":0.17947631351496207,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":260.07456302670084,\\\"ask\\\":263.74127388508333,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":261.9079184558921,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3225494037675613,\\\"bias\\\":0.1774505962324387,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":256.94358939002655,\\\"ask\\\":260.56615761909035,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":258.7548735045585,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.32471171939464055,\\\"bias\\\":0.17528828060535945,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":257.1426637933119,\\\"ask\\\":260.7680387108409,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":258.9553512520764,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3245759097799806,\\\"bias\\\":0.17542409022001942,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":253.72864442736204,\\\"ask\\\":257.30588614134297,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":255.5172652843525,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.32221550919290093,\\\"bias\\\":0.17778449080709907,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":251.59250387463908,\\\"ask\\\":255.13962880338525,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":253.36606633901218,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3207060339318754,\\\"bias\\\":0.1792939660681246,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":247.75524849733029,\\\"ask\\\":251.24827314885354,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":249.50176082309193,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3179291130004855,\\\"bias\\\":0.18207088699951451,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":243.95614192664158,\\\"ask\\\":247.39560414917227,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":245.67587303790694,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3207644861854696,\\\"bias\\\":0.1792355138145304,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":239.99363169139306,\\\"ask\\\":243.37722770718307,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":241.68542969928808,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3178051470021559,\\\"bias\\\":0.1821948529978441,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":238.0656461480775,\\\"ask\\\":241.4220600917563,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":239.7438531199169,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3192806603671874,\\\"bias\\\":0.18071933963281261,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":234.1467217370916,\\\"ask\\\":237.44788397709084,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":235.79730285709124,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.32230536823569866,\\\"bias\\\":0.17769463176430134,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":233.32035568750155,\\\"ask\\\":236.6098672480504,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":234.96511146777598,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.32167601547111985,\\\"bias\\\":0.17832398452888015,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":229.54842593704473,\\\"ask\\\":232.78475822618734,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":231.16659208161605,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3187458035138009,\\\"bias\\\":0.18125419648619912,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":225.87828432032717,\\\"ask\\\":229.0628724174919,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":227.47057836890954,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3158007281528365,\\\"bias\\\":0.1841992718471635,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":224.9481445969942,\\\"ask\\\":228.1196189417655,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":226.53388176937986,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3165623750651105,\\\"bias\\\":0.18343762493488952,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":227.25467012994113,\\\"ask\\\":230.45866346510644,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":228.8566667975238,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3146814812867978,\\\"bias\\\":0.1853185187132022,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":228.8794300694313,\\\"ask\\\":232.10633039266597,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":230.49288023104864,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3133565443555624,\\\"bias\\\":0.18664345564443757,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":232.11948766652563,\\\"ask\\\":235.39206856011205,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":233.75577811331885,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.31071438666482876,\\\"bias\\\":0.18928561333517124,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":233.9342786215522,\\\"ask\\\":237.23244569174526,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":235.58336215664875,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30923448584973284,\\\"bias\\\":0.19076551415026716,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":231.65513081780054,\\\"ask\\\":234.92116488773928,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":233.28814785276992,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3073576320927181,\\\"bias\\\":0.1926423679072819,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":231.15747766830913,\\\"ask\\\":234.4164954803497,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":232.78698657432943,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3077723670261564,\\\"bias\\\":0.1922276329738436,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":228.9695032838681,\\\"ask\\\":232.19767352150572,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":230.58358840268693,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30593548861703895,\\\"bias\\\":0.19406451138296105,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":232.40727011893904,\\\"ask\\\":235.68390836835002,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":234.04558924364454,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3030217881830144,\\\"bias\\\":0.1969782118169856,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":231.81038881133688,\\\"ask\\\":235.07861181572628,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":233.4445003135316,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3025145951566736,\\\"bias\\\":0.19748540484332638,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":228.2501411211305,\\\"ask\\\":231.46816929403664,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":229.85915520758357,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30559497422233123,\\\"bias\\\":0.19440502577766877,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":225.06085562012643,\\\"ask\\\":228.23391904276667,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":226.64738733144657,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3083498430258229,\\\"bias\\\":0.1916501569741771,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":228.35941562470492,\\\"ask\\\":231.57898442505322,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":229.9692000248791,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.31115872572079156,\\\"bias\\\":0.18884127427920844,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":225.03487416035742,\\\"ask\\\":228.2075712784289,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":226.62122271939316,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30836888859503975,\\\"bias\\\":0.19163111140496025,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":227.5067697284843,\\\"ask\\\":230.71431733794932,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":229.11054353321683,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30626391665784747,\\\"bias\\\":0.19373608334215253,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":229.51575532401665,\\\"ask\\\":232.75162700028673,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":231.1336911621517,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3045531411884681,\\\"bias\\\":0.1954468588115319,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":226.1516854158353,\\\"ask\\\":229.34012811051977,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":227.74590676317754,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30746046816755945,\\\"bias\\\":0.19253953183244055,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":223.57226551695658,\\\"ask\\\":226.7243417679509,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":225.14830364245375,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30968185416363114,\\\"bias\\\":0.19031814583636886,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":220.05163614345216,\\\"ask\\\":223.15407612936184,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":221.602856136407,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3066369340426755,\\\"bias\\\":0.1933630659573245,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":218.37348654456505,\\\"ask\\\":221.45226681810374,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":219.9128766813344,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30812288435976964,\\\"bias\\\":0.19187711564023036,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":220.00046865945626,\\\"ask\\\":223.10218725082822,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":221.55132795514226,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3066933122979624,\\\"bias\\\":0.19330668770203763,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":219.37631061521225,\\\"ask\\\":222.4692293952857,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":220.922770005249,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30614332618598405,\\\"bias\\\":0.19385667381401595,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":221.21717694163368,\\\"ask\\\":224.3360495269135,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":222.7766132342736,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30451660440378475,\\\"bias\\\":0.19548339559621525,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":220.13967494354225,\\\"ask\\\":223.24335616127595,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":221.6915155524091,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3054734230663118,\\\"bias\\\":0.1945265769336882,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":220.02346838357687,\\\"ask\\\":223.12551124094853,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":221.5744898122627,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30557616330803866,\\\"bias\\\":0.19442383669196134,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":219.97993354431244,\\\"ask\\\":223.0813626174447,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":221.5306480808786,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3056146405015862,\\\"bias\\\":0.1943853594984138,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":219.7095537571029,\\\"ask\\\":222.80717082920705,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":221.258362293155,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30585385573478413,\\\"bias\\\":0.19414614426521587,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":218.17821892502977,\\\"ask\\\":221.25424618077034,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":219.71623255290007,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30449119563658167,\\\"bias\\\":0.19550880436341833,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":218.08558273447375,\\\"ask\\\":221.16030394120347,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":219.62294333783862,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3045742418913102,\\\"bias\\\":0.19542575810868978,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":221.0204918362148,\\\"ask\\\":224.1365914190013,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":222.57854162760805,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30720420407861426,\\\"bias\\\":0.19279579592138574,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":224.15599992799343,\\\"ask\\\":227.31630606997922,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":225.73615299898634,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30993930240886497,\\\"bias\\\":0.19006069759113503,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":223.72649176109118,\\\"ask\\\":226.88074240022036,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":225.30361708065578,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3103041792778488,\\\"bias\\\":0.1896958207221512,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":222.1876240387907,\\\"ask\\\":225.32017865766585,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":223.75390134822828,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3116180093204873,\\\"bias\\\":0.18838199067951272,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":225.62569207108967,\\\"ask\\\":228.80671894822484,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":227.21620550965727,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30870304003352556,\\\"bias\\\":0.19129695996647444,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":224.09647715212833,\\\"ask\\\":227.25594410089948,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":225.67621062651392,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30739764617437043,\\\"bias\\\":0.19260235382562957,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":220.89441260299978,\\\"ask\\\":224.00873463365633,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":222.45157361832807,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3046057006380559,\\\"bias\\\":0.19539429936194408,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":219.86248370298514,\\\"ask\\\":222.9622568871158,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":221.4123702950505,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30552278763267976,\\\"bias\\\":0.19447721236732024,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":216.35566967140284,\\\"ask\\\":219.40600136868343,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":217.88083552004315,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3023705919070557,\\\"bias\\\":0.19762940809294433,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":214.34334194928945,\\\"ask\\\":217.36530246015553,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":215.8543222047225,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.3005151802437236,\\\"bias\\\":0.1994848197562764,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":215.6777867484773,\\\"ask\\\":218.71856118400467,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":217.198173966241,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30175711982449055,\\\"bias\\\":0.19824288017550945,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":213.63742330330024,\\\"ask\\\":216.6494312854213,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":215.14342729436078,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30365045629954474,\\\"bias\\\":0.19634954370045526,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":211.02159671478935,\\\"ask\\\":213.99672496655876,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":212.50916084067407,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.30121650468013855,\\\"bias\\\":0.19878349531986145,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":208.97553168466644,\\\"ask\\\":211.92181309814612,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":210.4486723914063,\\\"maxShares\\\":5600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0168,\\\"forecast\\\":0.2992702291757255,\\\"bias\\\":0.2007297708242745,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[221.6915155524091,221.5744898122627,221.5306480808786,221.258362293155,219.71623255290007,219.62294333783862,222.57854162760805,225.73615299898634,225.30361708065578,223.75390134822828,227.21620550965727,225.67621062651392,222.45157361832807,221.4123702950505,217.88083552004315,215.8543222047225,217.198173966241,215.14342729436078,212.50916084067407,210.4486723914063]}],[\\\"CTK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13655.840528629758,\\\"ask\\\":13876.096021027011,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":13765.968274828385,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5524661443132567,\\\"bias\\\":0.05246614431325669},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13663.853581865538,\\\"ask\\\":13884.238317056917,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":13774.045949461228,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5524969307014381,\\\"bias\\\":0.05249693070143813},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13729.154653451815,\\\"ask\\\":13950.592631733294,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":13839.873642592554,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.552747819355159,\\\"bias\\\":0.05274781935515904},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13676.040339797402,\\\"ask\\\":13896.621635600588,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":13786.330987698995,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.552542960042653,\\\"bias\\\":0.05254296004265302},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13617.567201216449,\\\"ask\\\":13837.20538188123,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":13727.386291548839,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5527685768315133,\\\"bias\\\":0.05276857683151326},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13576.862604658209,\\\"ask\\\":13795.84425957205,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":13686.35343211513,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5529267815429716,\\\"bias\\\":0.05292678154297159},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13691.949947153415,\\\"ask\\\":13912.787849526856,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":13802.368898340135,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5533754273613741,\\\"bias\\\":0.05337542736137413},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13670.410227013594,\\\"ask\\\":13890.900714546073,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":13780.655470779833,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5532913266102909,\\\"bias\\\":0.0532913266102909},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13738.985896827922,\\\"ask\\\":13960.582443550953,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":13849.784170189438,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5535586549754905,\\\"bias\\\":0.053558654975490505},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13786.918935230582,\\\"ask\\\":14009.288595476237,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":13898.10376535341,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5537455122213609,\\\"bias\\\":0.053745512221360925},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13679.810762217407,\\\"ask\\\":13900.45287128543,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":13790.131816751418,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5533247035039197,\\\"bias\\\":0.05332470350391971},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13650.864094081322,\\\"ask\\\":13871.039321405215,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":13760.951707743268,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5534377785799841,\\\"bias\\\":0.05343777857998411},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13748.655556336756,\\\"ask\\\":13970.408065309932,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":13859.531810823344,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.553820593797468,\\\"bias\\\":0.05382059379746795},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13732.449744831983,\\\"ask\\\":13953.940869748627,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":13843.195307290305,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5538841080585332,\\\"bias\\\":0.053884108058533164},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13659.862886875937,\\\"ask\\\":13880.183256019096,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":13770.023071447516,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5535977744305807,\\\"bias\\\":0.05359777443058067},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13749.73252180467,\\\"ask\\\":13971.502401188618,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":13860.617461496644,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5532451491911504,\\\"bias\\\":0.05324514919115042},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13852.405630934738,\\\"ask\\\":14075.831528207878,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":13964.118579571308,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5536427456538364,\\\"bias\\\":0.05364274565383642},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13914.384572761433,\\\"ask\\\":14138.810130386619,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":14026.597351574026,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.553402735311887,\\\"bias\\\":0.053402735311886995},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13842.455237788066,\\\"ask\\\":14065.720644849165,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":13954.087941318616,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5531252395085228,\\\"bias\\\":0.05312523950852277},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13842.455237788066,\\\"ask\\\":14065.720644849165,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":14030.369608052737,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5534156548930611,\\\"bias\\\":0.053415654893061104},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13941.782749344384,\\\"ask\\\":14166.650213043486,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":14054.216481193935,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5533248663834515,\\\"bias\\\":0.053324866383451464,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14031.701850124471,\\\"ask\\\":14258.019621900672,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":14144.860736012572,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5536687911254033,\\\"bias\\\":0.05366879112540335,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14129.406205442767,\\\"ask\\\":14357.299853917651,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":14243.35302968021,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5532950891544216,\\\"bias\\\":0.053295089154421604,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14135.661726610555,\\\"ask\\\":14363.656270588146,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":14249.65899859935,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.553318684523788,\\\"bias\\\":0.05331868452378796,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14027.804774002683,\\\"ask\\\":14254.059689712403,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":14140.932231857543,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5537286411009178,\\\"bias\\\":0.053728641100917796,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14095.863496357164,\\\"ask\\\":14323.216133395184,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":14209.539814876174,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5534679657688839,\\\"bias\\\":0.05346796576888391,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13972.20478017138,\\\"ask\\\":14197.562921787046,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":14084.883850979213,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5529947562713085,\\\"bias\\\":0.05299475627130845,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13848.965541765778,\\\"ask\\\":14072.335953729744,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":13960.65074774776,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5534663462527168,\\\"bias\\\":0.053466346252716845,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13979.62774147285,\\\"ask\\\":14205.105608270798,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":14092.366674871824,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5539707904576368,\\\"bias\\\":0.05397079045763675,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14044.321830501505,\\\"ask\\\":14270.843150348303,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":14157.582490424904,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5537210276465389,\\\"bias\\\":0.053721027646538855,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13911.27404131078,\\\"ask\\\":14135.649429073857,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":14023.461735192319,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5532072383314696,\\\"bias\\\":0.053207238331469564,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13939.42859801865,\\\"ask\\\":14164.25809153508,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":14051.843344776866,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5533149226603401,\\\"bias\\\":0.0533149226603401,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13809.759247572558,\\\"ask\\\":14032.49729995276,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":13921.128273762659,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5538155332261373,\\\"bias\\\":0.0538155332261373,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13937.979433017941,\\\"ask\\\":14162.785552905329,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":14050.382492961635,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5533158693633288,\\\"bias\\\":0.05331586936332877,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13970.912148896909,\\\"ask\\\":14196.249441621052,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":14083.58079525898,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5531898944050487,\\\"bias\\\":0.05318989440504873,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14052.77041931924,\\\"ask\\\":14279.428006727616,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":14166.099213023428,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5535015442610881,\\\"bias\\\":0.05350154426108811,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14110.18210363448,\\\"ask\\\":14337.765685951166,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":14223.973894792824,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5532829671636305,\\\"bias\\\":0.05328296716363046,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13996.957305160497,\\\"ask\\\":14222.714681050184,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":14109.83599310534,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.553713986069216,\\\"bias\\\":0.05371398606921596,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14059.490496321547,\\\"ask\\\":14286.25647206867,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":14172.873484195108,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5534740119887313,\\\"bias\\\":0.05347401198873125,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13980.889631356433,\\\"ask\\\":14206.38785121702,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":14093.638741286726,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.553173379932668,\\\"bias\\\":0.05317337993266802,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13998.089121326691,\\\"ask\\\":14223.864752315832,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":14110.976936821262,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5531079652817443,\\\"bias\\\":0.05310796528174433,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13922.068692552526,\\\"ask\\\":14146.618187593696,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":14034.343440073111,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5533979574072826,\\\"bias\\\":0.05339795740728259,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14041.51273663555,\\\"ask\\\":14267.98874851677,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":14154.75074257616,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5538560838624343,\\\"bias\\\":0.053856083862434345,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14020.88306090779,\\\"ask\\\":14247.026336083722,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":14133.954698495756,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5537768425235527,\\\"bias\\\":0.05377684252355275,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13897.016894835837,\\\"ask\\\":14121.162328623512,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":14009.089611729674,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5542561634711529,\\\"bias\\\":0.05425616347115292,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14009.54913637503,\\\"ask\\\":14235.509606316562,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":14122.529371345796,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5538168197084642,\\\"bias\\\":0.05381681970846419,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14126.879531521698,\\\"ask\\\":14354.732427191402,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":14240.80597935655,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5533661022256626,\\\"bias\\\":0.053366102225662626,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14008.619168650765,\\\"ask\\\":14234.564639112874,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":14121.59190388182,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5538166173362695,\\\"bias\\\":0.05381661733626952,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14096.549269688956,\\\"ask\\\":14323.912967587166,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":14210.231118638061,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5534788181183065,\\\"bias\\\":0.05347881811830646,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14025.775661367052,\\\"ask\\\":14251.997849453617,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":14138.886755410334,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5537486704971271,\\\"bias\\\":0.05374867049712706,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13907.559173862182,\\\"ask\\\":14131.874644408346,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":14019.716909135264,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5542055428321496,\\\"bias\\\":0.05420554283214962,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13816.470749147702,\\\"ask\\\":14039.31705155331,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":13927.893900350506,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5545629059820465,\\\"bias\\\":0.054562905982046495,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13942.785706361794,\\\"ask\\\":14167.669346786983,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":14055.227526574388,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5540640730123445,\\\"bias\\\":0.054064073012344505,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14004.012606099328,\\\"ask\\\":14229.883777165447,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":14116.948191632388,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5543014843623747,\\\"bias\\\":0.0543014843623747,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14063.633339647846,\\\"ask\\\":14290.466135448618,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":14177.049737548232,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5540703010278889,\\\"bias\\\":0.0540703010278889,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14040.805814594087,\\\"ask\\\":14267.270424506894,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":14154.03811955049,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5539823935980963,\\\"bias\\\":0.05398239359809631,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13973.800536150744,\\\"ask\\\":14199.18441576608,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":14086.492475958412,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5542412426710254,\\\"bias\\\":0.05424124267102537,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13934.82579330896,\\\"ask\\\":14159.58104803975,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":14047.203420674356,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5540895336711514,\\\"bias\\\":0.054089533671151435,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13939.031365900322,\\\"ask\\\":14163.854452447104,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":14051.442909173713,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5541058580560889,\\\"bias\\\":0.05410585805608892,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13937.455209481941,\\\"ask\\\":14162.252874151003,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":14049.854041816472,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5540997393425816,\\\"bias\\\":0.05409973934258161,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13947.256216855645,\\\"ask\\\":14172.2119622888,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":14059.734089572223,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5540616956727551,\\\"bias\\\":0.054061695672755095,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13891.541342412615,\\\"ask\\\":14115.598460838626,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":14003.56990162562,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5542785211863781,\\\"bias\\\":0.054278521186378104,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":13894.913175891348,\\\"ask\\\":14119.024678728305,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":14006.968927309827,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5542916959760146,\\\"bias\\\":0.054291695976014576,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14001.765872725839,\\\"ask\\\":14227.600806156901,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":14114.68333944137,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5547092023006184,\\\"bias\\\":0.054709202300618376,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14115.272219912753,\\\"ask\\\":14342.93790087909,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":14229.105060395921,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5542656981192815,\\\"bias\\\":0.0542656981192815,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14099.804401928695,\\\"ask\\\":14327.220601959803,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":14213.51250194425,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5543252288700182,\\\"bias\\\":0.05432522887001823,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14044.221521654144,\\\"ask\\\":14270.741223616307,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":14157.481372635226,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5545402320788123,\\\"bias\\\":0.05454023207881231,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14168.402255999108,\\\"ask\\\":14396.92487303135,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":14282.66356451523,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5550224835201221,\\\"bias\\\":0.05502248352012207,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14113.368881789389,\\\"ask\\\":14341.003863753733,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":14227.18637277156,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5548079300034618,\\\"bias\\\":0.05480793000346185,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14230.27520337952,\\\"ask\\\":14459.795771175965,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":14345.035487277743,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5552619246197963,\\\"bias\\\":0.05526192461979629,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14192.21153223233,\\\"ask\\\":14421.118169848982,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":14306.664851040656,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5551137115156644,\\\"bias\\\":0.055113711515664354,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14323.660288720084,\\\"ask\\\":14554.687067570407,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":14439.173678145246,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5556241766273,\\\"bias\\\":0.055624176627300015,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14400.5033532005,\\\"ask\\\":14632.769536316639,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":14516.63644475857,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5559225872363961,\\\"bias\\\":0.05592258723639609,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14451.734047257201,\\\"ask\\\":14684.826531890381,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":14568.280289573791,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5557236391241462,\\\"bias\\\":0.05572363912414624,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14373.292092874335,\\\"ask\\\":14605.11938469489,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":14489.205738784613,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5560277497711699,\\\"bias\\\":0.056027749771169866,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14272.195901511326,\\\"ask\\\":14502.39260960022,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":14387.294255555773,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.5564246187709785,\\\"bias\\\":0.056424618770978485,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":14352.046236693042,\\\"ask\\\":14583.530853413899,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":14467.78854505347,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0096,\\\"forecast\\\":0.55610893331147,\\\"bias\\\":0.056108933311470044,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[14047.203420674356,14051.442909173713,14049.854041816472,14059.734089572223,14003.56990162562,14006.968927309827,14114.68333944137,14229.105060395921,14213.51250194425,14157.481372635226,14282.66356451523,14227.18637277156,14345.035487277743,14306.664851040656,14439.173678145246,14516.63644475857,14568.280289573791,14489.205738784613,14387.294255555773,14467.78854505347]}],[\\\"NTLK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":24.77762655310339,\\\"ask\\\":25.0767528293984,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":24.927189691250895,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4435709030554367,\\\"bias\\\":0.05642909694456327},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":24.823061425871295,\\\"ask\\\":25.122736211696704,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":24.972898818784,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4434674287039047,\\\"bias\\\":0.05653257129609529},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":24.45779112539552,\\\"ask\\\":24.753056209404317,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":24.60542366739992,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4426231304924218,\\\"bias\\\":0.0573768695075782},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":24.754628412736118,\\\"ask\\\":25.053477045485444,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":24.90405272911078,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.441926763669539,\\\"bias\\\":0.05807323633046102},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":25.086800634724636,\\\"ask\\\":25.3896593949024,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":25.238230014813517,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.441147502691417,\\\"bias\\\":0.058852497308582996},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":24.853943600528076,\\\"ask\\\":25.15399120938757,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":25.003967404957823,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.44059611261028536,\\\"bias\\\":0.05940388738971464},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":25.51231880905405,\\\"ask\\\":25.82031460956577,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":25.66631670930991,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4390225173943283,\\\"bias\\\":0.06097748260567171},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":25.637938715054325,\\\"ask\\\":25.947451053666654,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":25.79269488436049,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.43872227084714505,\\\"bias\\\":0.061277729152854954},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":26.039842075772725,\\\"ask\\\":26.35420636642592,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":26.197024221099323,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.43776167391470666,\\\"bias\\\":0.06223832608529334},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":26.323744204628486,\\\"ask\\\":26.64153588516726,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":26.482640044897874,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.43844023383917224,\\\"bias\\\":0.061559766160827756},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":25.69504639167555,\\\"ask\\\":26.00524815897948,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":25.850147275327515,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4399464576366022,\\\"bias\\\":0.06005354236339783},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":25.865316286202695,\\\"ask\\\":26.177573625673954,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":26.021444955938325,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.439548508935972,\\\"bias\\\":0.06045149106402797},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":25.29895520146765,\\\"ask\\\":25.604375183779133,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":25.45166519262339,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.438195197236725,\\\"bias\\\":0.06180480276327499},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":25.20599935556616,\\\"ask\\\":25.510297134506597,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":25.35814824503638,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4384231238362854,\\\"bias\\\":0.0615768761637146},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":25.62456694799341,\\\"ask\\\":25.93391785682231,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":25.77924240240786,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4394456615441325,\\\"bias\\\":0.060554338455867496},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":25.108347001870715,\\\"ask\\\":25.411465879156882,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":25.2599064405138,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4382006828391284,\\\"bias\\\":0.061799317160871614},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":25.694256593136977,\\\"ask\\\":26.004448825649696,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":25.849352709393337,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.43675858023255043,\\\"bias\\\":0.06324141976744957},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":25.339953621944375,\\\"ask\\\":25.645868555006075,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":25.492911088475225,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4358743393511212,\\\"bias\\\":0.06412566064887881},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":24.935048604899688,\\\"ask\\\":25.236075348620812,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":25.08556197676025,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4369156367686419,\\\"bias\\\":0.06308436323135808},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":24.935048604899688,\\\"ask\\\":25.236075348620812,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":24.66421866759632,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4379933183574497,\\\"bias\\\":0.0620066816425503},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":24.386704814936724,\\\"ask\\\":24.681111714111008,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":24.533908264523866,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.43832266318057805,\\\"bias\\\":0.061677336819421946,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":24.878219827617677,\\\"ask\\\":25.17856050964123,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":25.028390168629453,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4370795539856713,\\\"bias\\\":0.06292044601432872,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":24.348404993342456,\\\"ask\\\":24.642349520425064,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":24.49537725688376,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4357104217699586,\\\"bias\\\":0.06428957823004139,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":24.314764707282173,\\\"ask\\\":24.608303114211132,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":24.461533910746653,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4356214749992047,\\\"bias\\\":0.06437852500079527,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":23.744249915606762,\\\"ask\\\":24.030900820020523,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":23.887575367813643,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4371683295391351,\\\"bias\\\":0.06283167046086491,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":23.3896265170369,\\\"ask\\\":23.67199625366109,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":23.530811385348994,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.43621570293347195,\\\"bias\\\":0.06378429706652805,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":22.760142384139318,\\\"ask\\\":23.034912714732553,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":22.897527549435935,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4344516013626758,\\\"bias\\\":0.0655483986373242,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":22.144335767844414,\\\"ask\\\":22.41167181333147,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":22.278003790587942,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4326287813877812,\\\"bias\\\":0.06737121861221879,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":22.797233725672136,\\\"ask\\\":23.072451839060534,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":22.934842782366335,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.43064242553094145,\\\"bias\\\":0.06935757446905855,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":22.472247078130405,\\\"ask\\\":22.743541811467995,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":22.6078944447992,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.42963939786174765,\\\"bias\\\":0.07036060213825235,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":23.14388820150411,\\\"ask\\\":23.423291278383438,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":23.283589739943775,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4275364896079764,\\\"bias\\\":0.07246351039202359,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":23.29026361409997,\\\"ask\\\":23.571433798576024,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":23.430848706337997,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.42799479100225496,\\\"bias\\\":0.07200520899774504,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":22.626343797814013,\\\"ask\\\":22.899498853723234,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":22.762921325768623,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4301076239706126,\\\"bias\\\":0.06989237602938742,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":21.988354997450855,\\\"ask\\\":22.253807975287287,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":22.12108148636907,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4321355407084808,\\\"bias\\\":0.06786445929151919,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":22.150711799968594,\\\"ask\\\":22.418124819686522,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":22.284418309827558,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4316344456235396,\\\"bias\\\":0.06836555437646041,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":22.556290847269768,\\\"ask\\\":22.828600193514472,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":22.69244552039212,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.43038267382213585,\\\"bias\\\":0.06961732617786415,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":22.844266681127827,\\\"ask\\\":23.120052596795368,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":22.982159638961598,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.42949387044161613,\\\"bias\\\":0.07050612955838387,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":23.42174430601112,\\\"ask\\\":23.704501782542444,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":23.563123044276782,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.42771155399410565,\\\"bias\\\":0.07228844600589435,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":23.099247946617137,\\\"ask\\\":23.37811210693847,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":23.238680026777804,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.426702310718436,\\\"bias\\\":0.073297689281564,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":23.505074425770438,\\\"ask\\\":23.788837899723404,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":23.64695616274692,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.427990064468686,\\\"bias\\\":0.07200993553131402,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":23.595437794647527,\\\"ask\\\":23.880292174462188,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":23.737864984554857,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4277132280609655,\\\"bias\\\":0.07228677193903449,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":23.99806637886585,\\\"ask\\\":24.287781465934657,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":24.142923922400254,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4289467173861828,\\\"bias\\\":0.07105328261381721,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":23.371457498614987,\\\"ask\\\":23.653607890952394,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":23.51253269478369,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4270417177574934,\\\"bias\\\":0.07295828224250661,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":23.478918987351793,\\\"ask\\\":23.76236670148481,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":23.620642844418303,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.42737717846318213,\\\"bias\\\":0.07262282153681787,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":22.842668726894914,\\\"ask\\\":23.118435351364468,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":22.98055203912969,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.42535437238608353,\\\"bias\\\":0.07464562761391647,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":22.278902318450008,\\\"ask\\\":22.547862909819628,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":22.413382614134818,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.42724327592291367,\\\"bias\\\":0.07275672407708633,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":21.710690793381946,\\\"ask\\\":21.972791688271872,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":21.84174124082691,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.42914746264549364,\\\"bias\\\":0.07085253735450636,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":21.152659093842423,\\\"ask\\\":21.40802318753066,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":21.28034114068654,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.43101663482196634,\\\"bias\\\":0.06898336517803366,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":21.567572278039034,\\\"ask\\\":21.827945384011333,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":21.697758831025183,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4296635137994209,\\\"bias\\\":0.07033648620057908,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":21.23276034400142,\\\"ask\\\":21.489091454794192,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":21.360925899397806,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.4285544024734939,\\\"bias\\\":0.07144559752650609,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":20.68334851411744,\\\"ask\\\":20.933046886521275,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":20.808197700319358,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.43045221203017175,\\\"bias\\\":0.06954778796982825,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":20.265825527345854,\\\"ask\\\":20.510483380794696,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":20.388154454070275,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.42901936637000676,\\\"bias\\\":0.07098063362999324,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":19.70291652215491,\\\"ask\\\":19.940778693448532,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":19.821847607801722,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.42699146162709445,\\\"bias\\\":0.07300853837290555,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":19.43619746875862,\\\"ask\\\":19.670839691721504,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":19.553518580240063,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.42799334320789073,\\\"bias\\\":0.07200665679210927,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":19.181005957416023,\\\"ask\\\":19.412567397545796,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":19.29678667748091,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5729646611644713,\\\"bias\\\":0.07296466116447131,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":19.278457383065795,\\\"ask\\\":19.511195299159144,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":19.39482634111247,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5733353669693867,\\\"bias\\\":0.0733353669693867,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":18.99384267810794,\\\"ask\\\":19.22314460178731,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":19.108493639947625,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5744342664489018,\\\"bias\\\":0.07443426644890183,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":18.829267188998045,\\\"ask\\\":19.056582285847114,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":18.94292473742258,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5750848523524533,\\\"bias\\\":0.07508485235245332,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":18.84702571967059,\\\"ask\\\":19.07455520521993,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":18.96079046244526,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5751556674638519,\\\"bias\\\":0.07515566746385194,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":18.840367544410224,\\\"ask\\\":19.06781664957413,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":18.954092096992177,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5751291074933734,\\\"bias\\\":0.07512910749337343,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":18.79905582314099,\\\"ask\\\":19.02600619525134,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":18.912531009196165,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5752942068886394,\\\"bias\\\":0.07529420688863941,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":19.034672908616045,\\\"ask\\\":19.264467752583244,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":19.149570330599644,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5762379033033508,\\\"bias\\\":0.07623790330335078,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":19.04911104442743,\\\"ask\\\":19.279080191845065,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":19.164095618136248,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.576180075506301,\\\"bias\\\":0.07618007550630101,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":18.602076486232907,\\\"ask\\\":18.826648838179377,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":18.714362662206142,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5743493591116884,\\\"bias\\\":0.07434935911168838,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":19.073323687129903,\\\"ask\\\":19.303585140093244,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":19.188454413611574,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5724658636107534,\\\"bias\\\":0.07246586361075336,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":19.0081599378348,\\\"ask\\\":19.237634705695985,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":19.122897321765393,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5727142909905854,\\\"bias\\\":0.07271429099058535,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":19.243249569813333,\\\"ask\\\":19.475562441883515,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":19.359406005848424,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5736136087554012,\\\"bias\\\":0.07361360875540124,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":18.72582443478081,\\\"ask\\\":18.951890725743958,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":18.838857580262385,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5715795444297875,\\\"bias\\\":0.07157954442978753,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":18.954009080163942,\\\"ask\\\":19.182830115336948,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":19.068419597750445,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5724517812180413,\\\"bias\\\":0.0724517812180413,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":19.44464394813633,\\\"ask\\\":19.67938814066916,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":19.562016044402746,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5705763273253089,\\\"bias\\\":0.07057632732530894,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":19.607615054492612,\\\"ask\\\":19.844326705049866,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":19.72597087977124,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5711678476523175,\\\"bias\\\":0.07116784765231754,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":20.175135092408738,\\\"ask\\\":20.418698091512262,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":20.2969165919605,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5691079755319294,\\\"bias\\\":0.06910797553192938,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":20.51336899516944,\\\"ask\\\":20.76101530094613,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":20.637192148057785,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5702665630788774,\\\"bias\\\":0.07026656307887735,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":20.28782150236393,\\\"ask\\\":20.532744900782813,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":20.41028320157337,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5710477434105682,\\\"bias\\\":0.07104774341056819,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":20.633822691264562,\\\"ask\\\":20.882923166410613,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":20.758372928837588,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.572259436035422,\\\"bias\\\":0.07225943603542195,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":21.090567597089972,\\\"ask\\\":21.345182095243977,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":21.217874846166975,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5706599200465127,\\\"bias\\\":0.07065992004651267,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":21.459310979201092,\\\"ask\\\":21.718377107722638,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":21.588844043461865,\\\"maxShares\\\":9000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.03,\\\"forecast\\\":0.5718953243464542,\\\"bias\\\":0.07189532434645418,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[18.94292473742258,18.96079046244526,18.954092096992177,18.912531009196165,19.149570330599644,19.164095618136248,18.714362662206142,19.188454413611574,19.122897321765393,19.359406005848424,18.838857580262385,19.068419597750445,19.562016044402746,19.72597087977124,20.2969165919605,20.637192148057785,20.41028320157337,20.758372928837588,21.217874846166975,21.588844043461865]}],[\\\"OMGA\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1472.1721595939123,\\\"ask\\\":1504.9201752774977,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":1488.546167435705,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43447086654715383,\\\"bias\\\":0.06552913345284617},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1471.3447688932627,\\\"ask\\\":1504.0743795258732,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":1487.709574209568,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4344340171310368,\\\"bias\\\":0.0655659828689632},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1464.6367599521923,\\\"ask\\\":1497.217152994607,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":1480.9269564733997,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43413372615695983,\\\"bias\\\":0.06586627384304017},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1470.0880303536737,\\\"ask\\\":1502.7896852250394,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":1486.4388577893567,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43437887558845995,\\\"bias\\\":0.06562112441154005},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1476.137493205171,\\\"ask\\\":1508.9737165120605,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":1492.5556048586159,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43410884240255226,\\\"bias\\\":0.06589115759744774},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1471.9084567741304,\\\"ask\\\":1504.6506064698137,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":1488.2795316219722,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43391952620922475,\\\"bias\\\":0.06608047379077525},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1460.047716862888,\\\"ask\\\":1492.5260280570067,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":1476.2868724599473,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4333827195666802,\\\"bias\\\":0.06661728043331983},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1457.8463781782123,\\\"ask\\\":1490.2757212721663,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":1474.0610497251894,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43328212790031473,\\\"bias\\\":0.06671787209968527},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1450.8715411026449,\\\"ask\\\":1483.145731096839,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":1467.008636099742,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4329613922081871,\\\"bias\\\":0.06703860779181292},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1446.03676673315,\\\"ask\\\":1478.2034086625022,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":1462.1200876978262,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43318553349572203,\\\"bias\\\":0.06681446650427797},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1435.2673564287152,\\\"ask\\\":1467.1944361470485,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":1451.230896287882,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43268419665361146,\\\"bias\\\":0.06731580334638854},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1432.3565978480747,\\\"ask\\\":1464.218928639437,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":1448.287763243756,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43254740107316897,\\\"bias\\\":0.06745259892683103},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1442.1901074090092,\\\"ask\\\":1474.271181587976,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":1458.2306444984927,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43301048113120294,\\\"bias\\\":0.06698951886879706},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1440.560920213528,\\\"ask\\\":1472.6057536257601,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":1456.5833369196441,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43308624222179004,\\\"bias\\\":0.06691375777820996},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1433.2620798903235,\\\"ask\\\":1465.144552850472,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":1449.203316370398,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43274548609609526,\\\"bias\\\":0.06725451390390474},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1424.2820201959603,\\\"ask\\\":1455.9647344975892,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":1440.1233773467748,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4331695239909844,\\\"bias\\\":0.0668304760090156},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1414.1620730673403,\\\"ask\\\":1445.619672266007,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":1429.8908726666737,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.433647772486452,\\\"bias\\\":0.06635222751354802},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1408.1243033411663,\\\"ask\\\":1439.447594214276,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":1423.7859487777212,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43393227824322006,\\\"bias\\\":0.06606772175677994},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1401.1469103444488,\\\"ask\\\":1432.3149912621209,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":1416.730950803285,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4342612804739579,\\\"bias\\\":0.0657387195260421},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1401.1469103444488,\\\"ask\\\":1432.3149912621209,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":1424.1529806115566,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43460567524814087,\\\"bias\\\":0.06539432475185913},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1406.1968255621214,\\\"ask\\\":1437.4772402864555,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":1421.8370329242885,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43449915823412133,\\\"bias\\\":0.06550084176587867,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1397.5586845016787,\\\"ask\\\":1428.6469464420597,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":1413.1028154718692,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4349040110084813,\\\"bias\\\":0.0650959889915187,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1388.2946149113095,\\\"ask\\\":1419.1768004806206,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":1403.7357076959652,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4344696264293047,\\\"bias\\\":0.0655303735706953,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1387.7058341705026,\\\"ask\\\":1418.57492249381,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":1403.1403783321564,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43449742988803947,\\\"bias\\\":0.06550257011196053,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1397.931048992144,\\\"ask\\\":1429.0275940657812,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":1413.4793215289626,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4340147787135096,\\\"bias\\\":0.06598522128649043,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1391.4613834296742,\\\"ask\\\":1422.4140127880694,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":1406.937698108872,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4337079773039462,\\\"bias\\\":0.06629202269605378,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1379.7588584564537,\\\"ask\\\":1410.451168755788,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":1395.105013606121,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43314571669849977,\\\"bias\\\":0.06685428330150023,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1368.0917432247022,\\\"ask\\\":1398.5245221437551,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":1383.3081326842287,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43371585143608415,\\\"bias\\\":0.06628414856391585,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1380.4615936078999,\\\"ask\\\":1411.1695360339602,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":1395.8155648209301,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4343151716239106,\\\"bias\\\":0.06568482837608941,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1386.583827506783,\\\"ask\\\":1417.4279571378743,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":1402.0058923223287,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43460647844822825,\\\"bias\\\":0.06539352155177175,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1373.9904832543261,\\\"ask\\\":1404.554477826212,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":1389.272480540269,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4340071124854951,\\\"bias\\\":0.06599288751450488,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1376.6553905560872,\\\"ask\\\":1407.2786651690637,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":1391.9670278625756,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4338791167461176,\\\"bias\\\":0.06612088325388238,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1364.3780992142804,\\\"ask\\\":1394.7282692675808,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":1379.5531842409307,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4332841311274296,\\\"bias\\\":0.06671586887257042,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1352.345085416505,\\\"ask\\\":1382.427584788763,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":1367.3863351026341,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4326905008629863,\\\"bias\\\":0.06730949913701367,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1355.4072734106305,\\\"ask\\\":1385.5578902104626,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":1370.4825818105467,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4328429133961265,\\\"bias\\\":0.06715708660387348,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1347.839076206117,\\\"ask\\\":1377.8213407931082,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":1362.8302084996126,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43322000446290976,\\\"bias\\\":0.06677999553709024,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1353.1161476558611,\\\"ask\\\":1383.2157990698438,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":1368.1659733628526,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43295854683485613,\\\"bias\\\":0.06704145316514387,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1342.7072236414224,\\\"ask\\\":1372.575331750736,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":1357.6412776960792,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43347826504261333,\\\"bias\\\":0.06652173495738667,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1348.4559928505398,\\\"ask\\\":1378.451980558034,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":1363.453986704287,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43376307627690686,\\\"bias\\\":0.06623692372309314,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1355.7211646749713,\\\"ask\\\":1385.8787638891768,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":1370.7999642820741,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4341199456404763,\\\"bias\\\":0.06588005435952371,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1357.3194993880152,\\\"ask\\\":1387.5126530649982,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":1372.4160762265067,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4340422759982787,\\\"bias\\\":0.06595772400172129,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1350.2537451547844,\\\"ask\\\":1380.2897233078734,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":1365.271734231329,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43438742672957775,\\\"bias\\\":0.06561257327042225,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1339.2424971789985,\\\"ask\\\":1369.0335335166506,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":1354.1380153478246,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43492689311907173,\\\"bias\\\":0.06507310688092827,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1337.3567611175654,\\\"ask\\\":1367.1058498380773,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":1352.2313054778215,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4348351369715406,\\\"bias\\\":0.06516486302845942,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1326.0301212157583,\\\"ask\\\":1355.5272523247033,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":1340.778686770231,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4342785139160272,\\\"bias\\\":0.06572148608397282,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1315.8191236535833,\\\"ask\\\":1345.089114270751,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":1330.4541189621673,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4337685031386168,\\\"bias\\\":0.06623149686138319,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1305.3423539278228,\\\"ask\\\":1334.379292033396,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":1319.8608229806096,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43430008180004703,\\\"bias\\\":0.06569991819995297,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1294.8665949046217,\\\"ask\\\":1323.6705029813675,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":1309.2685489429946,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4348316087647669,\\\"bias\\\":0.0651683912352331,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1287.1241295689936,\\\"ask\\\":1315.755808892065,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":1301.4399692305294,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4352236175839057,\\\"bias\\\":0.06477638241609429,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1280.9299126245642,\\\"ask\\\":1309.4238035019557,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":1295.17685806326,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4349103772093887,\\\"bias\\\":0.06508962279061131,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1291.3643514361588,\\\"ask\\\":1320.0903531870135,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":1305.7273523115862,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.4343801579682072,\\\"bias\\\":0.06561984203179277,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1299.5232485619447,\\\"ask\\\":1328.4307424632213,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":1313.976995512583,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43479474703437765,\\\"bias\\\":0.06520525296562235,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1288.2364742000366,\\\"ask\\\":1316.892897286387,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":1302.5646857432118,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43422345675330476,\\\"bias\\\":0.06577654324669524,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1282.8378750159397,\\\"ask\\\":1311.3742079283265,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":1297.1060414721333,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.43394664765714375,\\\"bias\\\":0.06605335234285625,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1277.6251493636682,\\\"ask\\\":1306.0455268014848,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":1291.8353380825765,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5663228507981329,\\\"bias\\\":0.06632285079813294,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1279.6157623886172,\\\"ask\\\":1308.0804203992839,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":1293.8480913939507,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5662195160048907,\\\"bias\\\":0.06621951600489073,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1273.7624793830335,\\\"ask\\\":1302.0969329183486,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":1287.9297061506911,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5659152194237439,\\\"bias\\\":0.0659152194237439,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1277.1766621102765,\\\"ask\\\":1305.5870630874515,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":1291.381862598864,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5657385407985988,\\\"bias\\\":0.06573854079859875,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1277.5460572340949,\\\"ask\\\":1305.9646752918804,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":1291.7553662629878,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5657575542186981,\\\"bias\\\":0.06575755421869811,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1277.684512344549,\\\"ask\\\":1306.106210293568,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":1291.8953613190586,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5657504276893797,\\\"bias\\\":0.06575042768937966,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1276.8240440396087,\\\"ask\\\":1305.2266011365464,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":1291.0253225880776,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5657061176222823,\\\"bias\\\":0.06570611762228229,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1271.935243531253,\\\"ask\\\":1300.229050768551,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":1286.082147149902,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.565453570094515,\\\"bias\\\":0.06545357009451502,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1272.2311110422131,\\\"ask\\\":1300.531499761049,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":1286.3813054016312,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5654383448030029,\\\"bias\\\":0.06543834480300292,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1281.6069957043662,\\\"ask\\\":1310.1159480860608,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":1295.8614718952135,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.564956087791655,\\\"bias\\\":0.06495608779165496,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1291.5635438893114,\\\"ask\\\":1320.2939766148572,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":1305.9287602520844,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5654607186341604,\\\"bias\\\":0.06546071863416036,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1292.921383073257,\\\"ask\\\":1321.6820205127024,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":1307.3017017929797,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5655295384217668,\\\"bias\\\":0.06552953842176679,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1288.0361193548795,\\\"ask\\\":1316.6880856094874,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":1302.3621024821834,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5657780788716217,\\\"bias\\\":0.06577807887162168,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1277.2133946509155,\\\"ask\\\":1305.6246127321288,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":1291.4190036915222,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5652206950842572,\\\"bias\\\":0.06522069508425721,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1272.4583388834562,\\\"ask\\\":1300.763782215545,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":1286.6110605495007,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.565464418617548,\\\"bias\\\":0.06546441861754804,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1262.436819983221,\\\"ask\\\":1290.5193377179337,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":1276.4780788505775,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5649447467432143,\\\"bias\\\":0.06494474674321427,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1259.2003467031434,\\\"ask\\\":1287.2108700878441,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":1273.2056083954938,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5651116716793979,\\\"bias\\\":0.06511167167939791,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1270.3771558560738,\\\"ask\\\":1298.6363039135395,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":1284.5067298848066,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5656896104719771,\\\"bias\\\":0.06568961047197708,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1276.9084603838226,\\\"ask\\\":1305.3128952963039,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":1291.1106778400633,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5660273360429415,\\\"bias\\\":0.06602733604294153,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1281.2618639204927,\\\"ask\\\":1309.7631389520911,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":1295.512501436292,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5662524450833812,\\\"bias\\\":0.06625244508338124,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1287.9629723975702,\\\"ask\\\":1316.6133115206708,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":1302.2881419591206,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5659059391630248,\\\"bias\\\":0.06590593916302478,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1296.7060426550704,\\\"ask\\\":1325.5508686797534,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":1311.128455667412,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5663533280001559,\\\"bias\\\":0.06635332800015592,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":1289.7905720822782,\\\"ask\\\":1318.4815655967475,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":1304.136068839513,\\\"maxShares\\\":3000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0092,\\\"forecast\\\":0.5659975613376262,\\\"bias\\\":0.06599756133762624,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[1291.381862598864,1291.7553662629878,1291.8953613190586,1291.0253225880776,1286.082147149902,1286.3813054016312,1295.8614718952135,1305.9287602520844,1307.3017017929797,1302.3621024821834,1291.4190036915222,1286.6110605495007,1276.4780788505775,1273.2056083954938,1284.5067298848066,1291.1106778400633,1295.512501436292,1302.2881419591206,1311.128455667412,1304.136068839513]}],[\\\"FNS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5623.935091081816,\\\"ask\\\":5726.085274370889,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":5675.0101827263525,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.438644065880259,\\\"bias\\\":0.061355934119740996},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5621.426800898121,\\\"ask\\\":5723.531424930578,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":5672.47911291435,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4386166887582729,\\\"bias\\\":0.06138331124172708},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5601.07185839255,\\\"ask\\\":5702.806766012192,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":5651.939312202371,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4388397628060116,\\\"bias\\\":0.06116023719398839},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5584.579100849601,\\\"ask\\\":5686.014442741924,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":5635.296771795763,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.43902038536414795,\\\"bias\\\":0.06097961463585205},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5566.403733049897,\\\"ask\\\":5667.508947171893,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":5616.956340110895,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4392194954139113,\\\"bias\\\":0.06078050458608869},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5553.742343053723,\\\"ask\\\":5654.61758238265,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":5604.179962718186,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.43908092836755,\\\"bias\\\":0.06091907163244997},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5518.173062362283,\\\"ask\\\":5618.402240084302,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":5568.287651223293,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.43947360317746775,\\\"bias\\\":0.06052639682253225},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5524.784645341733,\\\"ask\\\":5625.133912361058,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":5574.9592788513955,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4394010836514368,\\\"bias\\\":0.06059891634856318},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5545.859058601541,\\\"ask\\\":5646.5911101200345,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":5596.225084360788,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.43963223955853686,\\\"bias\\\":0.060367760441463136},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5531.185005263461,\\\"ask\\\":5631.650525036157,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":5581.417765149809,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4394720858598673,\\\"bias\\\":0.0605279141401327},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5498.448350476434,\\\"ask\\\":5598.319258961374,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":5548.383804718904,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4391117148417395,\\\"bias\\\":0.0608882851582605},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5489.596572834164,\\\"ask\\\":5589.306702310465,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":5539.451637572315,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4392098950183862,\\\"bias\\\":0.0607901049816138},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5459.854346012898,\\\"ask\\\":5559.024253407682,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":5509.4392997102905,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4388787445927027,\\\"bias\\\":0.06112125540729729},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5454.959197206609,\\\"ask\\\":5554.040191706829,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":5504.499694456719,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.43893359333301946,\\\"bias\\\":0.061066406666980544},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5433.005713500647,\\\"ask\\\":5531.687956530931,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":5482.346835015789,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4386868385099178,\\\"bias\\\":0.0613131614900822},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5460.186275128805,\\\"ask\\\":5559.362211508541,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":5509.774243318673,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4389935796127952,\\\"bias\\\":0.061006420387204774},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5429.35705814354,\\\"ask\\\":5527.973028927176,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":5478.665043535358,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4386471702402912,\\\"bias\\\":0.061352829759708793},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5447.8292736972535,\\\"ask\\\":5546.78076403686,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":5497.305018867057,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.438438430479024,\\\"bias\\\":0.06156156952097602},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5469.355506525975,\\\"ask\\\":5568.697987976497,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":5519.026747251236,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4386816812514386,\\\"bias\\\":0.06131831874856142},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5469.355506525975,\\\"ask\\\":5568.697987976497,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":5496.179637710469,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4389365758214217,\\\"bias\\\":0.061063424178578296},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5439.683498704887,\\\"ask\\\":5538.487033494683,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":5489.085266099785,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4388576543614803,\\\"bias\\\":0.061142345638519724,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5413.135355110278,\\\"ask\\\":5511.456683457387,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":5462.296019283833,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.43915752045852696,\\\"bias\\\":0.06084247954147304,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5441.797196555453,\\\"ask\\\":5540.6391234353705,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":5491.218159995412,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.43883536751252633,\\\"bias\\\":0.06116463248747367,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5439.965778961647,\\\"ask\\\":5538.774440940768,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":5489.370109951207,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4388147758418049,\\\"bias\\\":0.061185224158195106,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5408.344863714595,\\\"ask\\\":5506.579180109007,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":5457.4620219118015,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.43845704481018033,\\\"bias\\\":0.06154295518981967,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5428.2979500883375,\\\"ask\\\":5526.894683793272,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":5477.596316940805,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.43822999347903535,\\\"bias\\\":0.06177000652096465,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5464.830088603424,\\\"ask\\\":5564.090372755655,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":5514.46023067954,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.43864570213302784,\\\"bias\\\":0.06135429786697216,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5428.0992303208095,\\\"ask\\\":5526.692354584961,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":5477.395792452886,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.43906087435526586,\\\"bias\\\":0.06093912564473414,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5389.433397665243,\\\"ask\\\":5487.324216189939,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":5438.3788069275915,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.43949807468051283,\\\"bias\\\":0.06050192531948717,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5370.534428039262,\\\"ask\\\":5468.081975672669,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":5419.308201855965,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4397109816200823,\\\"bias\\\":0.06028901837991768,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5409.592417917354,\\\"ask\\\":5507.84939422665,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":5458.720906072002,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.43927252099736497,\\\"bias\\\":0.06072747900263503,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5417.917680871377,\\\"ask\\\":5516.3258728549135,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":5467.121776863146,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4393659794674629,\\\"bias\\\":0.06063402053253708,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5379.50758604694,\\\"ask\\\":5477.218117377762,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":5428.362851712351,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4397989110027362,\\\"bias\\\":0.060201088997263785,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5341.793031928105,\\\"ask\\\":5438.818536039816,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":5390.30578398396,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.44022394754298205,\\\"bias\\\":0.05977605245701795,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5332.212562070661,\\\"ask\\\":5429.064051593639,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":5380.63830683215,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4403313481130259,\\\"bias\\\":0.05966865188697412,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5308.560652315866,\\\"ask\\\":5404.982541056214,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":5356.7715966860405,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.44059719749519416,\\\"bias\\\":0.05940280250480584,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5325.052402507645,\\\"ask\\\":5421.773838678318,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":5373.413120592982,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.440412654783193,\\\"bias\\\":0.059587345216806975,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5357.807842043718,\\\"ask\\\":5455.124230698396,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":5406.466036371057,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.44004612136045246,\\\"bias\\\":0.05995387863954754,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5339.667611397947,\\\"ask\\\":5436.654510494984,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":5388.161060946466,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4398424425426346,\\\"bias\\\":0.060157557457365396,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5362.4951122969815,\\\"ask\\\":5459.896638050105,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":5411.195875173544,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.439585264231758,\\\"bias\\\":0.06041473576824202,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5357.483318250917,\\\"ask\\\":5454.793812427019,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":5406.138565338968,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4395287477304399,\\\"bias\\\":0.06047125226956013,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5379.728655644624,\\\"ask\\\":5477.443202366726,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":5428.585929005675,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4397798364094795,\\\"bias\\\":0.060220163590520515,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5414.825876216508,\\\"ask\\\":5513.177910295112,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":5464.0018932558105,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4393869615082158,\\\"bias\\\":0.06061303849178418,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5408.774313732346,\\\"ask\\\":5507.016430429805,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":5457.895372081076,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.43931914511054204,\\\"bias\\\":0.06068085488945796,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5445.433396756846,\\\"ask\\\":5544.3413696545485,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":5494.887383205698,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.438907868106112,\\\"bias\\\":0.06109213189388801,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5412.1081420711425,\\\"ask\\\":5510.410812663757,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":5461.25947736745,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4385316910599014,\\\"bias\\\":0.06146830894009858,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5446.575220109169,\\\"ask\\\":5545.503932482494,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":5496.0395762958315,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.43814022936965275,\\\"bias\\\":0.061859770630347255,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5481.539051018597,\\\"ask\\\":5581.102827929126,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":5531.3209394738615,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4385373329573219,\\\"bias\\\":0.06146266704267811,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5507.702583661029,\\\"ask\\\":5607.741581144277,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":5557.7220824026535,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4382439700020469,\\\"bias\\\":0.0617560299979531,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5528.835846642577,\\\"ask\\\":5629.258697540222,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":5579.0472720913995,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4384809302232678,\\\"bias\\\":0.061519069776732216,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5493.328815799362,\\\"ask\\\":5593.1067357634265,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":5543.217775781394,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4388785688102254,\\\"bias\\\":0.06112143118977459,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5520.868140848801,\\\"ask\\\":5621.146270551402,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":5571.007205700102,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4391849846497763,\\\"bias\\\":0.06081501535022371,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5559.249173834562,\\\"ask\\\":5660.224436326006,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":5609.736805080284,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.43960777017021213,\\\"bias\\\":0.06039222982978787,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5540.747428564515,\\\"ask\\\":5641.386635137836,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":5591.067031851176,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.4398094327919084,\\\"bias\\\":0.06019056720809163,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5522.867693122451,\\\"ask\\\":5623.1821416352695,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":5573.024917378861,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5603854281893041,\\\"bias\\\":0.06038542818930415,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5516.048288156519,\\\"ask\\\":5616.238872603358,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":5566.143580379939,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5604600817578286,\\\"bias\\\":0.060460081757828577,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5536.161163547268,\\\"ask\\\":5636.717067627844,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":5586.439115587556,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5602396293565832,\\\"bias\\\":0.060239629356583224,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5547.935652487984,\\\"ask\\\":5648.705422159814,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":5598.320537323899,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5603677489738953,\\\"bias\\\":0.0603677489738953,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5546.662715298431,\\\"ask\\\":5647.409364012226,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":5597.036039655329,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5603538948138962,\\\"bias\\\":0.06035389481389619,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5547.139694250469,\\\"ask\\\":5647.895006557742,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":5597.517350404106,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5603487047493515,\\\"bias\\\":0.0603487047493515,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5544.175028127929,\\\"ask\\\":5644.876491807346,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":5594.525759967638,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5603809753323692,\\\"bias\\\":0.06038097533236919,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5527.317776049035,\\\"ask\\\":5627.713053515112,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":5577.515414782074,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.560196825015129,\\\"bias\\\":0.06019682501512902,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5528.337967649344,\\\"ask\\\":5628.7517753362135,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":5578.544871492779,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5601857143285837,\\\"bias\\\":0.06018571432858366,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5560.665746210436,\\\"ask\\\":5661.666738573491,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":5611.166242391963,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5605376592452551,\\\"bias\\\":0.060537659245255115,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5526.597732154888,\\\"ask\\\":5626.9799311244005,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":5576.788831639645,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5601644824869653,\\\"bias\\\":0.060164482486965265,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5531.207992451573,\\\"ask\\\":5631.673929751399,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":5581.440961101486,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5602146713985385,\\\"bias\\\":0.06021467139853853,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5514.611743329737,\\\"ask\\\":5614.776235135927,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":5564.693989232832,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5600334550711102,\\\"bias\\\":0.06003345507111024,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5477.780801104999,\\\"ask\\\":5577.276315151305,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":5527.528558128152,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5596298082667639,\\\"bias\\\":0.059629808266763895,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5461.586363118361,\\\"ask\\\":5560.78772995603,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":5511.187046537196,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5594529967750236,\\\"bias\\\":0.05945299677502358,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5495.987891326004,\\\"ask\\\":5595.814109331925,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":5545.901000328964,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5590785132807414,\\\"bias\\\":0.05907851328074143,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5507.19666219333,\\\"ask\\\":5607.2264703865485,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":5557.21156628994,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5589580258394224,\\\"bias\\\":0.058958025839422445,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5468.68071332481,\\\"ask\\\":5568.010938188429,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":5518.34582575662,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5593732675453583,\\\"bias\\\":0.05937326754535832,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5490.989957597822,\\\"ask\\\":5590.725395778205,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":5540.857676688013,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.559615478198785,\\\"bias\\\":0.05961547819878499,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5505.844348330094,\\\"ask\\\":5605.849593809348,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":5555.846971069722,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5597767517785391,\\\"bias\\\":0.05977675177853914,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5528.693375332945,\\\"ask\\\":5629.113638457055,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":5578.903506895,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5600248228334256,\\\"bias\\\":0.060024822833425584,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5558.4729251231365,\\\"ask\\\":5659.434088243435,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":5608.953506683286,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.5597015073447804,\\\"bias\\\":0.05970150734478041,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":5534.925179976297,\\\"ask\\\":5635.458634304827,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":5585.191907140562,\\\"maxShares\\\":2100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0073,\\\"forecast\\\":0.559447513689198,\\\"bias\\\":0.059447513689197984,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[5598.320537323899,5597.036039655329,5597.517350404106,5594.525759967638,5577.515414782074,5578.544871492779,5611.166242391963,5576.788831639645,5581.440961101486,5564.693989232832,5527.528558128152,5511.187046537196,5545.901000328964,5557.21156628994,5518.34582575662,5540.857676688013,5555.846971069722,5578.903506895,5608.953506683286,5585.191907140562]}],[\\\"JGN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":67787.76853274832,\\\"ask\\\":69295.6865385324,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":68541.72753564037,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.40531914132111185,\\\"bias\\\":0.09468085867888815},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":67669.06041969852,\\\"ask\\\":69174.33780011648,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":68421.69910990751,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4054852347470586,\\\"bias\\\":0.09451476525294139},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":66715.85429602528,\\\"ask\\\":68199.92790018357,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":67457.89109810443,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.40413485028496515,\\\"bias\\\":0.09586514971503485},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":67490.4782379638,\\\"ask\\\":68991.78311282245,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":68241.13067539313,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.40302177992185034,\\\"bias\\\":0.09697822007814966},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":68356.86148839863,\\\"ask\\\":69877.43879147725,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":69117.15013993795,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4017768590422495,\\\"bias\\\":0.09822314095775048},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":67749.61982979954,\\\"ask\\\":69256.6892294513,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":68503.15452962542,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.40089648239692166,\\\"bias\\\":0.09910351760307834},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":66075.15137916066,\\\"ask\\\":67544.97274452115,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":66810.0620618409,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.3983850131061222,\\\"bias\\\":0.10161498689387782},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":66386.39993107566,\\\"ask\\\":67863.14492448684,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":67124.77242778125,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.39886367288765023,\\\"bias\\\":0.10113632711234977},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":65405.52505417014,\\\"ask\\\":66860.45078843883,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":66132.98792130449,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4003803961663769,\\\"bias\\\":0.09961960383362312},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":64730.376905838326,\\\"ask\\\":66170.28417775787,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":65450.3305417981,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4014194445124673,\\\"bias\\\":0.0985805554875327},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":63249.86205486776,\\\"ask\\\":64656.83573050687,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":63953.34889268732,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4037269590535996,\\\"bias\\\":0.09627304094640038},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":63650.82910505774,\\\"ask\\\":65066.722169073175,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":64358.77563706546,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.40311664440646866,\\\"bias\\\":0.09688335559353134},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":62316.22457504188,\\\"ask\\\":63702.42977286889,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":63009.32717395539,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4051915609493115,\\\"bias\\\":0.09480843905068848},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":62097.14340548717,\\\"ask\\\":63478.47521026039,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":62787.80930787378,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4055260488592505,\\\"bias\\\":0.09447395114074952},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":61126.07718555886,\\\"ask\\\":62485.807921739135,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":61805.942553649,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.40702688887451016,\\\"bias\\\":0.09297311112548984},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":59946.99329282415,\\\"ask\\\":61280.495671430945,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":60613.74448212755,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.40885555603134355,\\\"bias\\\":0.09114444396865645},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":58637.956202192436,\\\"ask\\\":59942.339454415116,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":59290.14782830378,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4068208422471767,\\\"bias\\\":0.09317915775282332},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":57863.961859195806,\\\"ask\\\":59151.12784595243,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":58507.54485257412,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.40557446818863274,\\\"bias\\\":0.09442553181136726},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":58762.86261737367,\\\"ask\\\":60070.02437428188,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":59416.44349582778,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.40410759348096703,\\\"bias\\\":0.09589240651903297},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":58762.86261737367,\\\"ask\\\":60070.02437428188,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":58461.020318385235,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.405674754423935,\\\"bias\\\":0.09432524557606498},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":58111.738192653436,\\\"ask\\\":59404.415887535506,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":58758.077040094475,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.40519546158791114,\\\"bias\\\":0.09480453841208886,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":57012.443918383244,\\\"ask\\\":58280.66815114808,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":57646.556034765665,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4070234499898893,\\\"bias\\\":0.09297655001011068,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":55849.82848757944,\\\"ask\\\":57092.19069862772,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":56471.00959310358,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4089589254366706,\\\"bias\\\":0.09104107456332938,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":55776.004474264686,\\\"ask\\\":57016.72449290353,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":56396.36448358411,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.40907942559734195,\\\"bias\\\":0.09092057440265805,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":54522.72860381715,\\\"ask\\\":55735.56988721854,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":55129.149245517845,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4111693533200367,\\\"bias\\\":0.08883064667996332,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":53743.20670794682,\\\"ask\\\":54938.70776717314,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":54340.95723755998,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4124578033094028,\\\"bias\\\":0.08754219669059721,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":55165.18848525391,\\\"ask\\\":56392.321090588164,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":55778.75478792104,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4147740664441267,\\\"bias\\\":0.08522593355587332,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":53735.6211757138,\\\"ask\\\":54930.95349711491,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":54333.28733641436,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4170413931423351,\\\"bias\\\":0.08295860685766487,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":52261.526475018465,\\\"ask\\\":53424.06801440209,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":52842.79724471028,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4193813332664416,\\\"bias\\\":0.08061866673355839,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":51548.35418176305,\\\"ask\\\":52695.031423420056,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":52121.692802591555,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4182659727404618,\\\"bias\\\":0.08173402725953821,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":53022.24809040298,\\\"ask\\\":54201.711647520126,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":53611.979868961556,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.41592899638459857,\\\"bias\\\":0.08407100361540143,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":53343.0600787447,\\\"ask\\\":54529.659999606556,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":53936.360039175626,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4164376693813707,\\\"bias\\\":0.08356233061862928,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":51886.5395860159,\\\"ask\\\":53040.73965769673,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":52463.63962185632,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4140919695536833,\\\"bias\\\":0.08590803044631667,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":50485.19482712882,\\\"ask\\\":51608.22241681216,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":51046.708621970494,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4117073740574297,\\\"bias\\\":0.08829262594257031,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":50841.81214415442,\\\"ask\\\":51972.77257607696,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":51407.292360115694,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.41108369261013405,\\\"bias\\\":0.08891630738986595,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":49966.57043037067,\\\"ask\\\":51078.061380287916,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":50522.3159053293,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4095261860493891,\\\"bias\\\":0.09047381395061088,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":50576.849593905026,\\\"ask\\\":51701.916015609684,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":51139.382804757355,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4106312105292358,\\\"bias\\\":0.08936878947076421,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":49382.60689552363,\\\"ask\\\":50481.10775669807,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":49931.857326110854,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.40846996326024404,\\\"bias\\\":0.09153003673975596,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":50042.17801383949,\\\"ask\\\":51155.3508311342,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":50598.76442248685,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4096924699784425,\\\"bias\\\":0.0903075300215575,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":49214.996836907696,\\\"ask\\\":50309.76926401787,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":49762.383050462784,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4112103140050628,\\\"bias\\\":0.0887896859949372,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":49034.65580259746,\\\"ask\\\":50125.416599015196,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":49580.03620080633,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4108837608041416,\\\"bias\\\":0.08911623919585843,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":48247.051671481604,\\\"ask\\\":49320.29245689372,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":48783.67206418767,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4123385298668832,\\\"bias\\\":0.08766147013311681,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":47040.50705840872,\\\"ask\\\":48086.908630992126,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":47563.707844700424,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4145869638480865,\\\"bias\\\":0.08541303615191348,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":46834.49457575517,\\\"ask\\\":47876.31346419461,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":47355.40401997489,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.41421125462376324,\\\"bias\\\":0.08578874537623676,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":48082.47453554994,\\\"ask\\\":49152.05435332759,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":48617.26444443877,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4164972328535977,\\\"bias\\\":0.08350276714640231,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":46945.98739572046,\\\"ask\\\":47990.2864075565,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":47468.136901638485,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.41447576464584385,\\\"bias\\\":0.08552423535415615,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":45799.27207830446,\\\"ask\\\":46818.06276154277,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":46308.667419923615,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4166171076463009,\\\"bias\\\":0.08338289235369911,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":46955.15305838294,\\\"ask\\\":47999.65595755829,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":47477.40450797061,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.418721523174364,\\\"bias\\\":0.08127847682563599,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":47836.27530708828,\\\"ask\\\":48900.37849895476,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":48368.32690302152,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42024672902733834,\\\"bias\\\":0.07975327097266166,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":48557.90180238126,\\\"ask\\\":49638.057353091455,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":49097.97957773636,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42144983426600274,\\\"bias\\\":0.07855016573399726,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":47354.53135583986,\\\"ask\\\":48407.91830207695,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":47881.22482895841,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4234459462601206,\\\"bias\\\":0.07655405373987939,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":48287.867911873676,\\\"ask\\\":49362.01664196591,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":48824.94227691979,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42495479229496147,\\\"bias\\\":0.07504520770503853,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":47003.18597616575,\\\"ask\\\":48048.75735278419,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":47525.97166447497,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4270059133136302,\\\"bias\\\":0.07299408668636981,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":46394.11725588869,\\\"ask\\\":47426.140086656684,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":46910.12867127269,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4260476363251783,\\\"bias\\\":0.07395236367482172,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":45811.04061543216,\\\"ask\\\":46830.09308614956,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":46320.56685079086,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42698889186502315,\\\"bias\\\":0.07301110813497685,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":45589.45485016219,\\\"ask\\\":46603.5782138665,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":46096.51653201435,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42734375950541215,\\\"bias\\\":0.07265624049458785,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":44945.155011238145,\\\"ask\\\":45944.94612372271,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":45445.05056748043,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4263022144482022,\\\"bias\\\":0.07369778555179779,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":45320.971007000066,\\\"ask\\\":46329.122030411585,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":45825.04651870583,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4256859788015419,\\\"bias\\\":0.07431402119845809,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":45280.11632941396,\\\"ask\\\":46287.358553121856,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":45783.73744126791,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4256189278391702,\\\"bias\\\":0.07438107216082979,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":45295.424878383084,\\\"ask\\\":46303.00763604175,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":45799.21625721242,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42564407499818513,\\\"bias\\\":0.07435592500181487,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":45200.39937759182,\\\"ask\\\":46205.868322290524,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":45703.13384994117,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42580039461277686,\\\"bias\\\":0.07419960538722314,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":44664.85274781428,\\\"ask\\\":45658.40862289204,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":45161.630685353164,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42491071635008754,\\\"bias\\\":0.07508928364991246,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":44697.263734534754,\\\"ask\\\":45691.540582016816,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":45194.402158275785,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42485622791845723,\\\"bias\\\":0.07514377208154277,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":45724.85700491807,\\\"ask\\\":46741.99234779794,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":46233.42467635801,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42658378857990653,\\\"bias\\\":0.07341621142009347,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":44642.92336131441,\\\"ask\\\":45635.991423952335,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":45139.457392633376,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42480452631075716,\\\"bias\\\":0.07519547368924284,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":44789.336231539855,\\\"ask\\\":45785.66120332335,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":45287.498717431605,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42455791196962855,\\\"bias\\\":0.07544208803037145,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":45319.278629932225,\\\"ask\\\":46327.39200693779,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":45823.33531843501,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4236652896529265,\\\"bias\\\":0.07633471034707351,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":44152.1490827037,\\\"ask\\\":45134.30002286495,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":44643.224552784326,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42568314150784564,\\\"bias\\\":0.07431685849215436,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":43643.375625561435,\\\"ask\\\":44614.20905707038,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":44128.79234131591,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42654949165782946,\\\"bias\\\":0.07345050834217054,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":44724.153140139,\\\"ask\\\":45719.028134156244,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":45221.59063714762,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42473057511636897,\\\"bias\\\":0.07526942488363103,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":45082.75570093897,\\\"ask\\\":46085.60769833094,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":45584.18169963496,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4241270576293271,\\\"bias\\\":0.07587294237067288,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":46331.080288622354,\\\"ask\\\":47361.70088149363,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":46846.39058505799,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4220261643270301,\\\"bias\\\":0.0779738356729699,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":45599.73304724569,\\\"ask\\\":46614.085046274406,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":46106.90904676005,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42327674071878,\\\"bias\\\":0.07672325928121998,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":46084.7149475251,\\\"ask\\\":47109.85521936084,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":46597.28508344297,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4240927409362217,\\\"bias\\\":0.07590725906377832,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":45344.88631476044,\\\"ask\\\":46353.5693268178,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":45849.22782078912,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42533121275199043,\\\"bias\\\":0.07466878724800957,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":46305.13335542517,\\\"ask\\\":47335.176766769306,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":46820.15506109724,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.4269124380634228,\\\"bias\\\":0.07308756193657717,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":47079.64107045672,\\\"ask\\\":48126.913167069506,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":47603.277118763115,\\\"maxShares\\\":16500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0287,\\\"forecast\\\":0.42813491333756204,\\\"bias\\\":0.07186508666243796,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[45825.04651870583,45783.73744126791,45799.21625721242,45703.13384994117,45161.630685353164,45194.402158275785,46233.42467635801,45139.457392633376,45287.498717431605,45823.33531843501,44643.224552784326,44128.79234131591,45221.59063714762,45584.18169963496,46846.39058505799,46106.90904676005,46597.28508344297,45849.22782078912,46820.15506109724,47603.277118763115]}],[\\\"SGC\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":31.463085433587008,\\\"ask\\\":31.906673747857113,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":31.684879590722062,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5552443299326477,\\\"bias\\\":0.05524432993264772},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":31.42351868231386,\\\"ask\\\":31.866549157190384,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":31.645033919752123,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5551747693374834,\\\"bias\\\":0.05517476933748344},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":31.74577238036353,\\\"ask\\\":32.19334621049957,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":31.96955929543155,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5557405962786925,\\\"bias\\\":0.055740596278692545},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":31.48339358923362,\\\"ask\\\":31.927268221911635,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":31.70533090557263,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5562051316607189,\\\"bias\\\":0.05620513166071894},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":31.19595101382751,\\\"ask\\\":31.63577308250181,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":31.415862048164662,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5556872520234406,\\\"bias\\\":0.0556872520234406},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":31.396646797462225,\\\"ask\\\":31.83929841394205,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":31.61797260570214,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5553289940982902,\\\"bias\\\":0.055328994098290174},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":30.835755477439896,\\\"ask\\\":31.27049926060622,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":31.05312736902306,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5563354086341039,\\\"bias\\\":0.05633540863410391},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":30.731848865255174,\\\"ask\\\":31.165127701220502,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":30.94848828323784,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5565258827407181,\\\"bias\\\":0.056525882740718125},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":31.062654719855516,\\\"ask\\\":31.50059748529154,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":31.28162610257353,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5559174229949648,\\\"bias\\\":0.05591742299496483},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":31.295203913524038,\\\"ask\\\":31.73642531814572,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":31.51581461583488,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5554987996755231,\\\"bias\\\":0.05549879967552307},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":30.778097083179325,\\\"ask\\\":31.212027958470873,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":30.9950625208251,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5564312422599553,\\\"bias\\\":0.05643124225995533},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":30.918144851197646,\\\"ask\\\":31.354050216672736,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":31.136097533935192,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5561744664916662,\\\"bias\\\":0.05617446649166624},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":30.450059627299897,\\\"ask\\\":30.879365603918423,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":30.66471261560916,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.555310939850112,\\\"bias\\\":0.05531093985011204},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":30.373145074963805,\\\"ask\\\":30.801366657088167,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":30.587255866025988,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5551708747970081,\\\"bias\\\":0.05517087479700811},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":30.71948089367129,\\\"ask\\\":31.152585357428986,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":30.93603312555014,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5557999716536053,\\\"bias\\\":0.055799971653605285},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":31.153167986753303,\\\"ask\\\":31.592386870755863,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":31.372777428754585,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.55501220679572,\\\"bias\\\":0.05501220679572005},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":30.661856522459864,\\\"ask\\\":31.094148558023246,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":30.878002540241557,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5558936970556141,\\\"bias\\\":0.05589369705561409},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":30.95623997296322,\\\"ask\\\":31.39268242978244,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":31.174461201372832,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5553570635550116,\\\"bias\\\":0.055357063555011576},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":31.301413205085222,\\\"ask\\\":31.74272215258894,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":31.522067678837082,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5559743147639683,\\\"bias\\\":0.0559743147639683},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":31.301413205085222,\\\"ask\\\":31.74272215258894,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":31.891835745446272,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5553177108139696,\\\"bias\\\":0.055317710813969634},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":31.553511263483607,\\\"ask\\\":31.998374463572997,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":31.775942863528304,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5551159566455767,\\\"bias\\\":0.05511595664557667,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":31.990205365035738,\\\"ask\\\":32.44122538025275,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":32.21571537264425,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.554353163149552,\\\"bias\\\":0.054353163149551964,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":31.519254606112312,\\\"ask\\\":31.963634832180357,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":31.741444719146337,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5551652909665026,\\\"bias\\\":0.05516529096650258,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":31.549198723242924,\\\"ask\\\":31.99400112216075,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":31.77159992270184,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5551128824957157,\\\"bias\\\":0.055112882495715665,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":31.03712103964139,\\\"ask\\\":31.47470381361418,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":31.255912426627788,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5542035817532608,\\\"bias\\\":0.05420358175326079,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":31.360246735755474,\\\"ask\\\":31.802385159018893,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":31.581315947387186,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5536392713565739,\\\"bias\\\":0.05363927135657387,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":31.955820076567782,\\\"ask\\\":32.40635530423339,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":32.18108769040059,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5546579533940513,\\\"bias\\\":0.05465795339405133,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":32.56602769527874,\\\"ask\\\":33.02516605150623,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":32.79559687339249,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5557016662295937,\\\"bias\\\":0.055701666229593716,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":31.919795314076772,\\\"ask\\\":32.36982263975358,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":32.14480897691518,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5568293746014765,\\\"bias\\\":0.05682937460147652,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":32.23677036483671,\\\"ask\\\":32.69126662375686,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":32.46401849429679,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5562650384670585,\\\"bias\\\":0.05626503846705855,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":32.898359355146916,\\\"ask\\\":33.36218315270185,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":33.130271253924384,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5574197549466532,\\\"bias\\\":0.05741975494665319,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":33.04123296419312,\\\"ask\\\":33.50707109259061,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":33.27415202839187,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5576691220208958,\\\"bias\\\":0.0576691220208958,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":33.706971137976645,\\\"ask\\\":34.18219530306393,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":33.944583220520286,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5588310803539731,\\\"bias\\\":0.05883108035397311,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":34.378532977115796,\\\"ask\\\":34.86322528495025,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":34.62087913103303,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5600032031282008,\\\"bias\\\":0.060003203128200844,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":34.20510679395135,\\\"ask\\\":34.687354019646534,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":34.446230406798946,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5596989758512959,\\\"bias\\\":0.05969897585129591,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":33.780390951249544,\\\"ask\\\":34.25665023958538,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":34.01852059541746,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5589483894867476,\\\"bias\\\":0.05894838948674763,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":33.48682324868117,\\\"ask\\\":33.958943616739106,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":33.72288343271014,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.558431608807278,\\\"bias\\\":0.058431608807278046,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":34.0680931771406,\\\"ask\\\":34.548408690212064,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":34.308250933676334,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5594458745326037,\\\"bias\\\":0.05944587453260375,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":34.394696626970344,\\\"ask\\\":34.87961682110688,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":34.63715672403861,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5600157692901279,\\\"bias\\\":0.06001576929012786,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":34.80963154969755,\\\"ask\\\":35.300401783026615,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":35.055016666362086,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5592917437561074,\\\"bias\\\":0.05929174375610735,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":34.71798181334268,\\\"ask\\\":35.207459905373696,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":34.96272085935819,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5591352233479661,\\\"bias\\\":0.05913522334796606,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":34.31589680300554,\\\"ask\\\":34.79970602278608,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":34.55780141289581,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5598281204920404,\\\"bias\\\":0.05982812049204045,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":34.94765671904741,\\\"ask\\\":35.4403729265667,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":35.194014822807056,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.558726677373827,\\\"bias\\\":0.058726677373826974,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":35.05799623711662,\\\"ask\\\":35.55226808738815,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":35.305132162252384,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5585412608427179,\\\"bias\\\":0.058541260842717935,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":35.728520021319355,\\\"ask\\\":36.232245379122446,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":35.9803827002209,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5574215930931191,\\\"bias\\\":0.057421593093119117,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":35.118302205182225,\\\"ask\\\":35.61342429065307,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":35.36586324791765,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5564238318992074,\\\"bias\\\":0.05642383189920741,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":34.49831848033369,\\\"ask\\\":34.98469960694463,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":34.74150904363916,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5574378482052786,\\\"bias\\\":0.05743784820527864,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":35.12325771732364,\\\"ask\\\":35.618449669028095,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":35.37085369317587,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5584783384846009,\\\"bias\\\":0.058478338484600934,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":34.65646667469322,\\\"ask\\\":35.14507748380269,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":34.90077207924796,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5592659884446718,\\\"bias\\\":0.05926598844467179,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":35.03172014777477,\\\"ask\\\":35.5256215395863,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":35.27867084368054,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5599077090276796,\\\"bias\\\":0.05990770902767961,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":34.404190192182725,\\\"ask\\\":34.88924423316012,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":34.646717212671426,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5588149967221214,\\\"bias\\\":0.058814996722121426,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":34.89090369694237,\\\"ask\\\":35.382819761149,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":35.136861729045684,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5596470480806084,\\\"bias\\\":0.05964704808060839,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":35.57539173485017,\\\"ask\\\":36.07695818428411,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":35.82617495956714,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5584768952160593,\\\"bias\\\":0.058476895216059255,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":35.243294542849895,\\\"ask\\\":35.74017885664637,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":35.49173669974813,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5590279223816534,\\\"bias\\\":0.05902792238165344,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":35.56526595240025,\\\"ask\\\":36.06668964155796,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":35.815977796979105,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5584886622580306,\\\"bias\\\":0.05848866225803062,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":35.68934225492301,\\\"ask\\\":36.19251525751004,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":35.94092875621653,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5586927112580351,\\\"bias\\\":0.0586927112580351,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":36.05656452239901,\\\"ask\\\":36.56491487820322,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":36.31073970030111,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5592966246156571,\\\"bias\\\":0.0592966246156571,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":36.272966909272014,\\\"ask\\\":36.78436825542489,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":36.528667582348454,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5596525079692242,\\\"bias\\\":0.05965250796922417,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":36.24949105036977,\\\"ask\\\":36.760561417645874,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":36.50502623400782,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5596138758720643,\\\"bias\\\":0.05961387587206435,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":36.24069660704593,\\\"ask\\\":36.75164298418454,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":36.49616979561524,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5596283422289988,\\\"bias\\\":0.05962834222899882,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":36.29538306002689,\\\"ask\\\":36.80710044455899,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":36.551241752292945,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5597183201499256,\\\"bias\\\":0.05971832014992562,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":35.98567934600012,\\\"ask\\\":36.49303031361744,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":36.23935482980878,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5592043661025935,\\\"bias\\\":0.0592043661025935,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":35.966946005243614,\\\"ask\\\":36.47403285728129,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":36.22048943126245,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.559235202625781,\\\"bias\\\":0.05923520262578097,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":35.383069310561176,\\\"ask\\\":35.88192426559426,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":35.63249678807772,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5602126773048265,\\\"bias\\\":0.06021267730482649,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":35.99857040101235,\\\"ask\\\":36.50610311562883,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":36.252336758320595,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5612600982680792,\\\"bias\\\":0.06126009826807921,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":36.083312107696685,\\\"ask\\\":36.592039569436615,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":36.33767583856665,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5614043063635968,\\\"bias\\\":0.06140430636359684,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":36.389752323178136,\\\"ask\\\":36.90280019077581,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":36.646276256976975,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5619257870086493,\\\"bias\\\":0.06192578700864926,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":37.080201378437096,\\\"ask\\\":37.60298367380277,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":37.34159252611993,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5607508243225455,\\\"bias\\\":0.06075082432254553,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":36.77251043356661,\\\"ask\\\":37.290954689427565,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":37.03173256149709,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5602424968160177,\\\"bias\\\":0.06024249681601768,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":37.42613229608088,\\\"ask\\\":37.95379176450498,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":37.68996203029293,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5613132916164578,\\\"bias\\\":0.06131329161645782,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":37.64152527008076,\\\"ask\\\":38.1722214974535,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":37.906873383767135,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5616661587554536,\\\"bias\\\":0.06166615875545356,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":38.38964241343898,\\\"ask\\\":38.93088611312492,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":38.66026426328195,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5604405572369445,\\\"bias\\\":0.060440557236944525,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":38.83157977429429,\\\"ask\\\":39.37905421219975,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":39.10531699324702,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5597447721586087,\\\"bias\\\":0.05974477215860874,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":39.128017596117964,\\\"ask\\\":39.679671419225365,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":39.403844507671664,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5592886843500006,\\\"bias\\\":0.059288684350000564,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":39.5862396489945,\\\"ask\\\":40.144353803159575,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":39.86529672607704,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5599830047966848,\\\"bias\\\":0.059983004796684836,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":38.99354271861321,\\\"ask\\\":39.54330062199748,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":39.26842167030535,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5608947389028827,\\\"bias\\\":0.06089473890288266,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":38.530957518172336,\\\"ask\\\":39.07419357583035,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":38.80257554700135,\\\"maxShares\\\":2800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0206,\\\"forecast\\\":0.5601636642861177,\\\"bias\\\":0.060163664286117746,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[36.528667582348454,36.50502623400782,36.49616979561524,36.551241752292945,36.23935482980878,36.22048943126245,35.63249678807772,36.252336758320595,36.33767583856665,36.646276256976975,37.34159252611993,37.03173256149709,37.68996203029293,37.906873383767135,38.66026426328195,39.10531699324702,39.403844507671664,39.86529672607704,39.26842167030535,38.80257554700135]}],[\\\"CTYS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":517.988260955296,\\\"ask\\\":527.3967258364214,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":522.6924933958587,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3764994543965078,\\\"bias\\\":0.12350054560349222},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":517.5074564172406,\\\"ask\\\":526.9071882189664,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":522.2073223181036,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3763847128173438,\\\"bias\\\":0.12361528718265619},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":521.4233968329133,\\\"ask\\\":530.8942557057613,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":526.1588262693374,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3754493251372806,\\\"bias\\\":0.12455067486271942},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":518.2366199817983,\\\"ask\\\":527.649595924959,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":522.9431079533787,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3762152208539075,\\\"bias\\\":0.12378477914609248},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":521.7599825114446,\\\"ask\\\":531.2369549485849,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":526.4984687300148,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3753736387738931,\\\"bias\\\":0.12462636122610687},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":519.2949057436961,\\\"ask\\\":528.727103829858,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":524.0110047867771,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3747820413129715,\\\"bias\\\":0.1252179586870285},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":512.4175031262139,\\\"ask\\\":521.7247837077192,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":517.0711434169666,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37310143065549783,\\\"bias\\\":0.12689856934450217},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":511.1423195709137,\\\"ask\\\":520.4264383925852,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":515.7843789817495,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3734180136552288,\\\"bias\\\":0.1265819863447712},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":507.1145286460696,\\\"ask\\\":516.3254888031122,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":511.7200087245909,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3744233995139409,\\\"bias\\\":0.12557660048605912},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":509.9158226353955,\\\"ask\\\":519.1776640152513,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":514.5467433253234,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3737297160237818,\\\"bias\\\":0.1262702839762182},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":516.2372239870186,\\\"ask\\\":525.6138839585285,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":520.9255539727736,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3721643495292264,\\\"bias\\\":0.1278356504707736},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":514.5097781986469,\\\"ask\\\":523.855061758259,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":519.182419978453,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.371735146498756,\\\"bias\\\":0.128264853501244},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":520.3456640013817,\\\"ask\\\":529.7969475049385,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":525.0713057531601,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3731900052191452,\\\"bias\\\":0.1268099947808548},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":519.3752069189504,\\\"ask\\\":528.8088635531997,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":524.092035236075,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3734269507951348,\\\"bias\\\":0.12657304920486517},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":523.7450438087974,\\\"ask\\\":533.258071849724,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":528.5015578292607,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37449189107781977,\\\"bias\\\":0.12550810892218023},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":518.345484548134,\\\"ask\\\":527.7604378497145,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":523.0529611989243,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3757992979946754,\\\"bias\\\":0.12420070200532463},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":512.2885970414882,\\\"ask\\\":521.5935362410308,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":516.9410666412596,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37726774699907856,\\\"bias\\\":0.12273225300092144},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":508.6849668647833,\\\"ask\\\":517.9244516312475,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":513.3047092480155,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37639828617483784,\\\"bias\\\":0.12360171382516216},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":504.53393891364385,\\\"ask\\\":513.6980266032963,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":509.11598275847007,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3774152131431242,\\\"bias\\\":0.1225847868568758},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":504.53393891364385,\\\"ask\\\":513.6980266032963,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":504.74715470345825,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3763541831780269,\\\"bias\\\":0.12364581682197312},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":498.8619279903419,\\\"ask\\\":507.92299227270934,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":503.39246013152564,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37668693015013516,\\\"bias\\\":0.12331306984986484,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":493.81910312658283,\\\"ask\\\":502.7885722045631,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":498.303837665573,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3754276710191535,\\\"bias\\\":0.12457232898084653,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":488.4341497057431,\\\"ask\\\":497.30580933712895,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":492.86997952143605,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37405426952891874,\\\"bias\\\":0.12594573047108126,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":488.09200199908065,\\\"ask\\\":496.95744704043625,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":492.5247245197585,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3739659828070136,\\\"bias\\\":0.1260340171929864,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":482.22147173222845,\\\"ask\\\":490.9802875659116,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":486.60087964907007,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37550031206432893,\\\"bias\\\":0.12449968793567107,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":478.5453529402089,\\\"ask\\\":487.23739769593413,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":482.89137531807154,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.374543922790859,\\\"bias\\\":0.12545607720914098,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":471.93215209792646,\\\"ask\\\":480.5040781703408,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":476.21811513413365,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3727859026352482,\\\"bias\\\":0.1272140973647518,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":465.3751218221932,\\\"ask\\\":473.8279494637668,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":469.60153564298,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3745783205123676,\\\"bias\\\":0.1254216794876324,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":458.5254707149889,\\\"ask\\\":466.8538849156647,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":462.68967781532683,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37270471740711314,\\\"bias\\\":0.12729528259288686,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":461.88520410277687,\\\"ask\\\":470.2746427242198,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":466.07992341349836,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3717719923169054,\\\"bias\\\":0.1282280076830946,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":454.99519303116165,\\\"ask\\\":463.25948513465397,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":459.12733908290784,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.36983023028038386,\\\"bias\\\":0.13016976971961614,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":453.54183873364553,\\\"ask\\\":461.77973287815166,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":457.6607858058986,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37024735341671217,\\\"bias\\\":0.12975264658328783,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":460.2846489986765,\\\"ask\\\":468.6450159835162,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":464.4648324910964,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3721763870858872,\\\"bias\\\":0.12782361291411282,\\\"countOfNegative\\\":17,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":467.05122772687014,\\\"ask\\\":475.5344992698405,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":471.29286349835536,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3702972704523277,\\\"bias\\\":0.1297027295476723,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":468.79851615614484,\\\"ask\\\":477.31352452225036,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":473.05602033919763,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.36981203871514334,\\\"bias\\\":0.13018796128485666,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":464.4894219833842,\\\"ask\\\":472.9261622414073,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":468.7077921123958,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37101979966466225,\\\"bias\\\":0.12898020033533775,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":467.4940209940671,\\\"ask\\\":475.985335199812,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":471.7396780969396,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3701854775811357,\\\"bias\\\":0.12981452241886432,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":473.4816700002984,\\\"ask\\\":482.08174069657014,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":477.7817053484343,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37184813798158933,\\\"bias\\\":0.12815186201841067,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":470.1559076959228,\\\"ask\\\":478.69557100422406,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":474.42573935007346,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37275465138482416,\\\"bias\\\":0.12724534861517584,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":474.3410166659023,\\\"ask\\\":482.95669608062093,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":478.64885637326165,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3716219725411458,\\\"bias\\\":0.12837802745885418,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":473.41887279658715,\\\"ask\\\":482.01780287765524,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":477.7183378371212,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3718720323038178,\\\"bias\\\":0.12812796769618218,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":477.5118984297053,\\\"ask\\\":486.18517206415,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":481.84853524692767,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3707642795583434,\\\"bias\\\":0.1292357204416566,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":471.11223019169034,\\\"ask\\\":479.6692636361407,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":475.39074691391556,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3725198394490109,\\\"bias\\\":0.1274801605509891,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":470.01725773846937,\\\"ask\\\":478.55440268225584,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":474.28583021036263,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3728168227232148,\\\"bias\\\":0.1271831772767852,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":463.4764536671034,\\\"ask\\\":471.8947949042455,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":467.68562428567446,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3746116932871006,\\\"bias\\\":0.1253883067128994,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":457.6093651166359,\\\"ask\\\":465.92113965962216,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":461.76525238812906,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37621931838124667,\\\"bias\\\":0.12378068161875333,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":463.6774777486972,\\\"ask\\\":472.09947028096406,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":467.88847401483065,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3778607076861716,\\\"bias\\\":0.12213929231382842,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":457.5615026182254,\\\"ask\\\":465.8724078120983,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":461.7169552151619,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37949327701285307,\\\"bias\\\":0.12050672298714693,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":453.05884205209276,\\\"ask\\\":461.2879633002639,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":457.17340267617834,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.38069091586058074,\\\"bias\\\":0.11930908413941926,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":456.67853236583005,\\\"ask\\\":464.9733997549167,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":460.8259660603734,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3797377020699741,\\\"bias\\\":0.12026229793002591,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":450.61390558629074,\\\"ask\\\":458.7986183012788,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":454.7062619437848,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3813562627569694,\\\"bias\\\":0.11864373724303062,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":455.317642401761,\\\"ask\\\":463.5877913051229,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":459.452716853442,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.38011779916790434,\\\"bias\\\":0.11988220083209566,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":448.82079032829404,\\\"ask\\\":456.9729338458614,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":452.89686208707775,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37838245860028474,\\\"bias\\\":0.12161754139971526,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":445.7217381600845,\\\"ask\\\":453.8175921327197,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":449.76966514640213,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3775368657716223,\\\"bias\\\":0.12246313422837768,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":442.7372951890614,\\\"ask\\\":450.7789413176215,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":446.7581182533415,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37671135537498573,\\\"bias\\\":0.12328864462501427,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":441.60053529963653,\\\"ask\\\":449.62153392263696,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":445.61103461113674,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37639398803770163,\\\"bias\\\":0.12360601196229837,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":444.95324864037906,\\\"ask\\\":453.035144175724,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":448.99419640805155,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3773324278541769,\\\"bias\\\":0.12266757214582308,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":442.9914725561199,\\\"ask\\\":451.03773542797677,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":447.01460399204836,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37787565797091316,\\\"bias\\\":0.12212434202908684,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":442.7798880651678,\\\"ask\\\":450.8223078282081,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":446.801097946688,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.377934015672872,\\\"bias\\\":0.12206598432712801,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":442.7006199895071,\\\"ask\\\":450.7415999691348,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":446.721109979321,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37791215906087655,\\\"bias\\\":0.12208784093912345,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":442.20825582935885,\\\"ask\\\":450.24029276672354,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":446.2242742980412,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3777762238392341,\\\"bias\\\":0.1222237761607659,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":445.01640336817593,\\\"ask\\\":453.09944601260287,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":449.0579246903894,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37700006827975213,\\\"bias\\\":0.12299993172024787,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":445.18743012370913,\\\"ask\\\":453.2735792076917,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":449.23050466570044,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37704733907492666,\\\"bias\\\":0.12295266092507334,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":439.8320673543311,\\\"ask\\\":447.82094446066606,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":443.8265059074986,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37555027655587286,\\\"bias\\\":0.12444972344412714,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":434.2581861913276,\\\"ask\\\":442.1458222674566,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":438.2020042293921,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3771476395793084,\\\"bias\\\":0.12285236042069159,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":435.01247268957593,\\\"ask\\\":442.9138092268235,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":438.96314095819974,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3769342506791336,\\\"bias\\\":0.12306574932086639,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":437.73841989885494,\\\"ask\\\":445.68926909984316,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":441.7138444993491,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37616307569685115,\\\"bias\\\":0.12383692430314885,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":443.86677008101816,\\\"ask\\\":451.92893139429594,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":447.89785073765705,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3744293552759041,\\\"bias\\\":0.1255706447240959,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":441.1431449165014,\\\"ask\\\":449.15583574243175,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":445.1494903294666,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.375204630539356,\\\"bias\\\":0.12479536946064401,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":435.43230087307245,\\\"ask\\\":443.3412629474572,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":439.38678191026486,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3735678964456683,\\\"bias\\\":0.1264321035543317,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":437.2813719024152,\\\"ask\\\":445.22391952526425,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":441.25264571383974,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3730310002636616,\\\"bias\\\":0.1269689997363384,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":430.96137149975556,\\\"ask\\\":438.78912597704675,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":434.8752487384012,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3711690140567158,\\\"bias\\\":0.12883098594328418,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":434.6220481007597,\\\"ask\\\":442.5162931722164,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":438.5691706364881,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.37226333156848185,\\\"bias\\\":0.12773666843151815,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":437.07019050232583,\\\"ask\\\":445.00890233788766,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":441.0395464201068,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3729828476528326,\\\"bias\\\":0.12701715234716737,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":433.3258177657322,\\\"ask\\\":441.19651879477675,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":437.2611682802545,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3740804041399599,\\\"bias\\\":0.1259195958600401,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":438.18575786567624,\\\"ask\\\":446.1447322769599,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":442.1652450713181,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3726681603543385,\\\"bias\\\":0.12733183964566153,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":442.067409514908,\\\"ask\\\":450.0968881942907,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":446.0821488545994,\\\"maxShares\\\":17500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.3715401961599572,\\\"bias\\\":0.1284598038400428,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[447.01460399204836,446.801097946688,446.721109979321,446.2242742980412,449.0579246903894,449.23050466570044,443.8265059074986,438.2020042293921,438.96314095819974,441.7138444993491,447.89785073765705,445.1494903294666,439.38678191026486,441.25264571383974,434.8752487384012,438.5691706364881,441.0395464201068,437.2611682802545,442.1652450713181,446.0821488545994]}],[\\\"MDYN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7343.342587904609,\\\"ask\\\":7402.325259293401,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":7372.833923599005,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4276911530512873,\\\"bias\\\":0.0723088469487127},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7346.843625311035,\\\"ask\\\":7405.854417482208,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":7376.3490213966215,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4276566788353628,\\\"bias\\\":0.07234332116463721},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7318.425975216202,\\\"ask\\\":7377.208513169746,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":7347.817244192974,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4279375899485607,\\\"bias\\\":0.07206241005143932},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7341.5196079472435,\\\"ask\\\":7400.4876369267395,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":7371.0036224369915,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.428164986227088,\\\"bias\\\":0.07183501377291202},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7367.132947742692,\\\"ask\\\":7426.306706359099,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":7396.719827050895,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4279143658221538,\\\"bias\\\":0.07208563417784619},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7349.230629316953,\\\"ask\\\":7408.260594211066,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":7378.7456117640095,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4280899624311138,\\\"bias\\\":0.0719100375688862},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7298.9602103758325,\\\"ask\\\":7357.586396804553,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":7328.273303590193,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42858523129276904,\\\"bias\\\":0.07141476870723096},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7289.627941531597,\\\"ask\\\":7348.179169977633,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":7318.903555754615,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4286766573334902,\\\"bias\\\":0.0713233426665098},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7319.3389397584415,\\\"ask\\\":7378.128810760518,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":7348.73387525948,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42896735635468775,\\\"bias\\\":0.07103264364531225},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7298.649622155712,\\\"ask\\\":7357.273313899934,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":7327.961468027823,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4291687109888489,\\\"bias\\\":0.0708312890111511},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7252.512090846724,\\\"ask\\\":7310.7652000101525,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":7281.638645428438,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42871811114517094,\\\"bias\\\":0.07128188885482906},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7265.0074939288925,\\\"ask\\\":7323.360967775711,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":7294.184230852302,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4288409232029162,\\\"bias\\\":0.07115907679708378},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7307.293847177349,\\\"ask\\\":7365.98697044785,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":7336.640408812599,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4292551083033156,\\\"bias\\\":0.07074489169668441},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7300.294033387627,\\\"ask\\\":7358.930933254194,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":7329.6124833209105,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42918727527273,\\\"bias\\\":0.07081272472727002},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7331.813247450916,\\\"ask\\\":7390.703313695501,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":7361.258280573208,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4294930110991057,\\\"bias\\\":0.0705069889008943},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7371.005606160061,\\\"ask\\\":7430.210470466567,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":7400.608038313314,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4291161145378811,\\\"bias\\\":0.07088388546211888},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7326.554190207817,\\\"ask\\\":7385.402015028763,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":7355.97810261829,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.428686050281863,\\\"bias\\\":0.07131394971813698},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7353.188539615072,\\\"ask\\\":7412.250294953346,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":7382.719417284209,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42842680144467526,\\\"bias\\\":0.07157319855532474},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7322.274036877247,\\\"ask\\\":7381.087482956583,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":7351.680759916915,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42872898213766075,\\\"bias\\\":0.07127101786233925},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7322.274036877247,\\\"ask\\\":7381.087482956583,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":7384.334183918387,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4290455414172699,\\\"bias\\\":0.07095445858273008},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7344.654066277765,\\\"ask\\\":7403.647271629395,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":7374.15066895358,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4289475551103398,\\\"bias\\\":0.07105244488966023,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7306.366438115986,\\\"ask\\\":7365.052112317721,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":7335.709275216854,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4293198919775038,\\\"bias\\\":0.07068010802249619,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7265.262987285305,\\\"ask\\\":7323.618513287596,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":7294.440750286451,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42971976688222435,\\\"bias\\\":0.07028023311777565,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7262.650476448517,\\\"ask\\\":7320.985018428023,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":7291.81774743827,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4296944857715296,\\\"bias\\\":0.07030551422847042,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7217.561302046627,\\\"ask\\\":7275.533681982745,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":7246.547492014686,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42925527681163295,\\\"bias\\\":0.07074472318836705,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7189.221337468916,\\\"ask\\\":7246.966087167462,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":7218.093712318189,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4289764005807999,\\\"bias\\\":0.07102359941920011,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7137.893469765765,\\\"ask\\\":7195.225947434566,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":7166.559708600165,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4284656770837021,\\\"bias\\\":0.07153432291629791,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7086.6549788947805,\\\"ask\\\":7143.575902420041,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":7115.1154406574105,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42794846398914266,\\\"bias\\\":0.07205153601085734,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7140.979672989686,\\\"ask\\\":7198.336939439403,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":7169.658306214545,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42739613321185566,\\\"bias\\\":0.07260386678814434,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7114.229890220095,\\\"ask\\\":7171.372298976883,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":7142.801094598489,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4276691265919944,\\\"bias\\\":0.07233087340800559,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7169.5129434940445,\\\"ask\\\":7227.099392839378,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":7198.306168166711,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4271070599186272,\\\"bias\\\":0.07289294008137281,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7157.742813833374,\\\"ask\\\":7215.234723984646,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":7186.48876890901,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4272269244315637,\\\"bias\\\":0.07277307556843632,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7212.350111745766,\\\"ask\\\":7270.2806347316755,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":7241.315373238721,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4266717297115346,\\\"bias\\\":0.07332827028846539,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7266.759076627066,\\\"ask\\\":7325.1266194112195,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":7295.942848019143,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42611855145186667,\\\"bias\\\":0.07388144854813333,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7280.709643634285,\\\"ask\\\":7339.189239165484,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":7309.949441399885,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4262603874598714,\\\"bias\\\":0.07373961254012862,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7315.370148451378,\\\"ask\\\":7374.12814161163,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":7344.749145031504,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4259093430808537,\\\"bias\\\":0.07409065691914629,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7291.167728321638,\\\"ask\\\":7349.731324533057,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":7320.449526427347,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42566340535547675,\\\"bias\\\":0.07433659464452325,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7243.559358430716,\\\"ask\\\":7301.740558096827,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":7272.649958263772,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42615198340380167,\\\"bias\\\":0.07384801659619833,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7217.3607191481,\\\"ask\\\":7275.331487976598,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":7246.346103562349,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4258839189930251,\\\"bias\\\":0.07411608100697492,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7184.542500371552,\\\"ask\\\":7242.249669049235,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":7213.396084710394,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42554536469242465,\\\"bias\\\":0.07445463530757535,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7177.368368302973,\\\"ask\\\":7235.017913429904,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":7206.193140866439,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42547094362896454,\\\"bias\\\":0.07452905637103546,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7209.211454213067,\\\"ask\\\":7267.116767098311,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":7238.164110655689,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42514028829360484,\\\"bias\\\":0.07485971170639516,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7159.305200145394,\\\"ask\\\":7216.809659584313,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":7188.0574298648535,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42461845444417257,\\\"bias\\\":0.07538154555582743,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7150.756651198531,\\\"ask\\\":7208.1924475937,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":7179.474549396115,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42452833771061466,\\\"bias\\\":0.07547166228938534,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7202.541949029004,\\\"ask\\\":7260.393691591486,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":7231.467820310245,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42507489840342766,\\\"bias\\\":0.07492510159657234,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7155.464105476469,\\\"ask\\\":7212.937712749372,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":7184.20090911292,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42458194474463956,\\\"bias\\\":0.07541805525536044,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7107.1023215645855,\\\"ask\\\":7164.1874807739405,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":7135.644901169263,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42509514288451267,\\\"bias\\\":0.07490485711548733,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7155.850659829027,\\\"ask\\\":7213.3273719561685,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":7184.589015892598,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42458136284489845,\\\"bias\\\":0.07541863715510155,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7192.345114740373,\\\"ask\\\":7250.114955019412,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":7221.230034879893,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4249659938530025,\\\"bias\\\":0.07503400614699751,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7162.977989431823,\\\"ask\\\":7220.511949186294,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":7191.744969309058,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42465836578766814,\\\"bias\\\":0.07534163421233186,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7212.448241257615,\\\"ask\\\":7270.379552432375,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":7241.413896844995,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42517870378437145,\\\"bias\\\":0.07482129621562855,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7174.019866778003,\\\"ask\\\":7231.642516310357,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":7202.83119154418,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42557949174473647,\\\"bias\\\":0.07442050825526353,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7121.123052487047,\\\"ask\\\":7178.320828009032,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":7149.72194024804,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42613229890388843,\\\"bias\\\":0.07386770109611157,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7146.530707081523,\\\"ask\\\":7203.9325601504515,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":7175.231633615987,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4258687442621129,\\\"bias\\\":0.07413125573788709,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7121.89507199123,\\\"ask\\\":7179.099048473086,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":7150.497060232158,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4261251746850106,\\\"bias\\\":0.0738748253149894,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7112.499733575068,\\\"ask\\\":7169.6282454913335,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":7141.063989533201,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4260275888839184,\\\"bias\\\":0.0739724111160816,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7140.20996221851,\\\"ask\\\":7197.561046252394,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":7168.885504235452,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4257393931015471,\\\"bias\\\":0.07426060689845287,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7156.436133907611,\\\"ask\\\":7213.9175486377935,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":7185.176841272702,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4259081507940586,\\\"bias\\\":0.07409184920594142,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7154.681698930768,\\\"ask\\\":7212.149021813746,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":7183.415360372257,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42592631922379676,\\\"bias\\\":0.07407368077620324,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7155.339098654447,\\\"ask\\\":7212.811701856492,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":7184.0754002554695,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42593312539901507,\\\"bias\\\":0.07406687460098493,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7159.427380431733,\\\"ask\\\":7216.932821238413,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":7188.180100835073,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4258908064747045,\\\"bias\\\":0.07410919352529549,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7136.172749850706,\\\"ask\\\":7193.491406476012,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":7164.832078163359,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4256493070073431,\\\"bias\\\":0.0743506929926569,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7134.765669927818,\\\"ask\\\":7192.073024706355,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":7163.419347317086,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42563464396552747,\\\"bias\\\":0.07436535603447253,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7179.344917495901,\\\"ask\\\":7237.0103385199645,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":7208.177628007933,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42609929154759485,\\\"bias\\\":0.07390070845240515,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7132.366932625931,\\\"ask\\\":7189.655020438187,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":7161.010976532059,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42658604529937905,\\\"bias\\\":0.07341395470062095,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7138.724237108404,\\\"ask\\\":7196.063387607267,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":7167.3938123578355,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42652060911701445,\\\"bias\\\":0.07347939088298555,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7161.679768595331,\\\"ask\\\":7219.203300873204,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":7190.441534734267,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4267568920178564,\\\"bias\\\":0.07324310798214362,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7110.595649919796,\\\"ask\\\":7167.708867991441,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":7139.152258955619,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4272830869816168,\\\"bias\\\":0.07271691301838318,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7133.123762134434,\\\"ask\\\":7190.417928898566,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":7161.7708455165,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42705270195383105,\\\"bias\\\":0.07294729804616895,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7085.437056927905,\\\"ask\\\":7142.348197947407,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":7113.892627437656,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4265617489936126,\\\"bias\\\":0.0734382510063874,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7070.030512001058,\\\"ask\\\":7126.817905671749,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":7098.4242088364035,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.4264017171929636,\\\"bias\\\":0.0735982828070364,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7017.223078709293,\\\"ask\\\":7073.586316289288,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":7045.404697499291,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42695557394885225,\\\"bias\\\":0.07304442605114775,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":6986.768654246465,\\\"ask\\\":7042.887277975353,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":7014.827966110909,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42663718270596296,\\\"bias\\\":0.07336281729403704,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7006.96404682099,\\\"ask\\\":7063.244882538428,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":7035.104464679709,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42642512603585614,\\\"bias\\\":0.07357487396414386,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7038.034344414569,\\\"ask\\\":7094.564740755248,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":7066.2995425849085,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42675137192697266,\\\"bias\\\":0.07324862807302734,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7078.5402874626825,\\\"ask\\\":7135.396032743508,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":7106.968160103095,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42632980468079495,\\\"bias\\\":0.07367019531920505,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":7110.717841112587,\\\"ask\\\":7167.832040639595,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":7139.274940876091,\\\"maxShares\\\":4000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0078000000000000005,\\\"forecast\\\":0.42599491548528085,\\\"bias\\\":0.07400508451471915,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[7185.176841272702,7183.415360372257,7184.0754002554695,7188.180100835073,7164.832078163359,7163.419347317086,7208.177628007933,7161.010976532059,7167.3938123578355,7190.441534734267,7139.152258955619,7161.7708455165,7113.892627437656,7098.4242088364035,7045.404697499291,7014.827966110909,7035.104464679709,7066.2995425849085,7106.968160103095,7139.274940876091]}],[\\\"TITN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23160.079114421784,\\\"ask\\\":23299.457724939864,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:22 AM\\\",\\\"price\\\":23229.768419680826,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5890870212407584,\\\"bias\\\":0.0890870212407584},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23167.723492474237,\\\"ask\\\":23307.14810727348,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:26 AM\\\",\\\"price\\\":23237.43579987386,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5891164259274422,\\\"bias\\\":0.08911642592744218},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23230.004122399023,\\\"ask\\\":23369.803545402425,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:30 AM\\\",\\\"price\\\":23299.903833900724,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5893559931488487,\\\"bias\\\":0.08935599314884868},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23179.366269182374,\\\"ask\\\":23318.860950842445,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:32 AM\\\",\\\"price\\\":23249.11361001241,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5891607852379613,\\\"bias\\\":0.08916078523796134},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23235.35246556222,\\\"ask\\\":23375.184075184457,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:36 AM\\\",\\\"price\\\":23305.26827037334,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5893761394100188,\\\"bias\\\":0.08937613941001876},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23196.233799611007,\\\"ask\\\":23335.829990982787,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:41 AM\\\",\\\"price\\\":23266.0318952969,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5892254134183861,\\\"bias\\\":0.08922541341838608},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23306.83711439491,\\\"ask\\\":23447.09892250561,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:45 AM\\\",\\\"price\\\":23376.96801845026,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5896508543141923,\\\"bias\\\":0.08965085431419229},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23327.49397775922,\\\"ask\\\":23467.88009999247,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:49 AM\\\",\\\"price\\\":23397.687038875847,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5897303119187987,\\\"bias\\\":0.08973031191879866},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23393.317197776243,\\\"ask\\\":23534.09944771271,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:53 AM\\\",\\\"price\\\":23463.70832274448,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5899835040563364,\\\"bias\\\":0.08998350405633637},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23347.49845551107,\\\"ask\\\":23488.004965774926,\\\"dateObserved\\\":\\\"7/24/2023, 11:28:57 AM\\\",\\\"price\\\":23417.751710643,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5901600938947865,\\\"bias\\\":0.09016009389478652},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23450.325038455023,\\\"ask\\\":23591.45036466438,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:02 AM\\\",\\\"price\\\":23520.887701559703,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5897630126232845,\\\"bias\\\":0.08976301262328445},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23478.29615692708,\\\"ask\\\":23619.589814842388,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:06 AM\\\",\\\"price\\\":23548.942985884736,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5898700803017229,\\\"bias\\\":0.08987008030172294},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23384.06741811414,\\\"ask\\\":23524.79400237561,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:10 AM\\\",\\\"price\\\":23454.430710244877,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5902322219331352,\\\"bias\\\":0.09023222193313518},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23399.59004955696,\\\"ask\\\":23540.410049855192,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:14 AM\\\",\\\"price\\\":23470.000049706076,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5901723246748741,\\\"bias\\\":0.09017232467487413},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23469.532755969016,\\\"ask\\\":23610.77367526271,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:19 AM\\\",\\\"price\\\":23540.153215615865,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5899027944643931,\\\"bias\\\":0.08990279446439309},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23556.387512600486,\\\"ask\\\":23698.151128523856,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:23 AM\\\",\\\"price\\\":23627.269320562173,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.590235501783916,\\\"bias\\\":0.09023550178391604},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23655.332473337006,\\\"ask\\\":23797.691545393194,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:27 AM\\\",\\\"price\\\":23726.512009365102,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5898564815213111,\\\"bias\\\":0.0898564815213111},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23595.947180947474,\\\"ask\\\":23737.948869097607,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:31 AM\\\",\\\"price\\\":23666.948025022542,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5896303344890552,\\\"bias\\\":0.08963033448905522},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23527.17935300298,\\\"ask\\\":23668.767192639905,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:35 AM\\\",\\\"price\\\":23597.973272821444,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5898923158905768,\\\"bias\\\":0.08989231589057678},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23527.17935300298,\\\"ask\\\":23668.767192639905,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:37 AM\\\",\\\"price\\\":23525.63259809437,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5901687322954148,\\\"bias\\\":0.09016873229541478},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23477.48012576459,\\\"ask\\\":23618.76887276016,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:44 AM\\\",\\\"price\\\":23548.124499262376,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5902549389556088,\\\"bias\\\":0.09025493895560877,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23392.613893107013,\\\"ask\\\":23533.391910517887,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:46 AM\\\",\\\"price\\\":23463.00290181245,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5899275024116252,\\\"bias\\\":0.08992750241162517,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23301.348284662574,\\\"ask\\\":23441.577060698655,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:50 AM\\\",\\\"price\\\":23371.462672680616,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5895752786637449,\\\"bias\\\":0.08957527866374493,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23307.15115899174,\\\"ask\\\":23447.414857039832,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:54 AM\\\",\\\"price\\\":23377.283008015787,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5895975861319109,\\\"bias\\\":0.08959758613191093,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23206.78301326388,\\\"ask\\\":23346.442690374795,\\\"dateObserved\\\":\\\"7/24/2023, 11:29:58 AM\\\",\\\"price\\\":23276.61285181934,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5892100811693916,\\\"bias\\\":0.08921008116939155,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23143.622167595142,\\\"ask\\\":23282.901739315872,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:03 AM\\\",\\\"price\\\":23213.26195345551,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5889666195311037,\\\"bias\\\":0.08896661953110374,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23028.976682024946,\\\"ask\\\":23167.56631100403,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:07 AM\\\",\\\"price\\\":23098.271496514488,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5894095233316727,\\\"bias\\\":0.08940952333167274,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22914.277488069132,\\\"ask\\\":23052.176851086595,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:11 AM\\\",\\\"price\\\":22983.227169577865,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.588961977025076,\\\"bias\\\":0.08896197702507602,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22793.311692293268,\\\"ask\\\":22930.483076599947,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:15 AM\\\",\\\"price\\\":22861.89738444661,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5894341048356333,\\\"bias\\\":0.0894341048356333,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22852.645053436445,\\\"ask\\\":22990.173509124124,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:19 AM\\\",\\\"price\\\":22921.409281280285,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5896669111128591,\\\"bias\\\":0.08966691111285907,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22975.58690725416,\\\"ask\\\":23113.855233676954,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:24 AM\\\",\\\"price\\\":23044.72107046556,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5901492979986024,\\\"bias\\\":0.09014929799860238,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22949.460674088867,\\\"ask\\\":23087.571771425406,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:28 AM\\\",\\\"price\\\":23018.516222757138,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5902519261872403,\\\"bias\\\":0.09025192618724032,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22828.88534341428,\\\"ask\\\":22966.27081188016,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:32 AM\\\",\\\"price\\\":22897.57807764722,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5907286098132845,\\\"bias\\\":0.09072860981328446,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22710.276996941917,\\\"ask\\\":22846.948673954605,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:36 AM\\\",\\\"price\\\":22778.61283544826,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5912024556580154,\\\"bias\\\":0.09120245565801544,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22680.13334555936,\\\"ask\\\":22816.623616445373,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:41 AM\\\",\\\"price\\\":22748.378481002368,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5913236707755238,\\\"bias\\\":0.09132367077552384,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22605.629800096038,\\\"ask\\\":22741.671704610155,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:45 AM\\\",\\\"price\\\":22673.650752353096,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5910226865818663,\\\"bias\\\":0.0910226865818663,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22553.79987440011,\\\"ask\\\":22689.52986361415,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:50 AM\\\",\\\"price\\\":22621.66486900713,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5912318619362835,\\\"bias\\\":0.09123186193628352,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22451.640429722283,\\\"ask\\\":22586.755617865045,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:54 AM\\\",\\\"price\\\":22519.198023793666,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5916469851154342,\\\"bias\\\":0.09164698511543423,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22508.062310520894,\\\"ask\\\":22643.51704859825,\\\"dateObserved\\\":\\\"7/24/2023, 11:30:58 AM\\\",\\\"price\\\":22575.789679559573,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5918772976970881,\\\"bias\\\":0.09187729769708808,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22579.241518874664,\\\"ask\\\":22715.124617283134,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:02 AM\\\",\\\"price\\\":22647.1830680789,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5921678492881375,\\\"bias\\\":0.09216784928813748,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22594.866253040902,\\\"ask\\\":22730.84338194586,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:06 AM\\\",\\\"price\\\":22662.854817493382,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5921040695485658,\\\"bias\\\":0.09210406954856576,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22525.678861471948,\\\"ask\\\":22661.23961690708,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:10 AM\\\",\\\"price\\\":22593.459239189517,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5923869662534393,\\\"bias\\\":0.09238696625343934,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22634.386770409183,\\\"ask\\\":22770.601735928194,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:14 AM\\\",\\\"price\\\":22702.49425316869,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5919411109264487,\\\"bias\\\":0.09194111092644874,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22615.66922029488,\\\"ask\\\":22751.771542583512,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:18 AM\\\",\\\"price\\\":22683.720381439198,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5920172047326752,\\\"bias\\\":0.09201720473267516,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22502.847914552975,\\\"ask\\\":22638.271272112972,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:23 AM\\\",\\\"price\\\":22570.559593332975,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5915558630736958,\\\"bias\\\":0.09155586307369579,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22400.814663688045,\\\"ask\\\":22535.623979617958,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:27 AM\\\",\\\"price\\\":22468.219321653003,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5919728899758602,\\\"bias\\\":0.09197288997586017,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22295.78025937639,\\\"ask\\\":22429.957472572238,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:31 AM\\\",\\\"price\\\":22362.868865974317,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5915396098843337,\\\"bias\\\":0.09153960988433374,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22401.654200670986,\\\"ask\\\":22536.468568979937,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:35 AM\\\",\\\"price\\\":22469.06138482546,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5911049240751681,\\\"bias\\\":0.09110492407516813,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22480.74844098368,\\\"ask\\\":22616.03880271477,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:39 AM\\\",\\\"price\\\":22548.393621849227,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5914265911580506,\\\"bias\\\":0.09142659115805063,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22544.556824519066,\\\"ask\\\":22680.231188558297,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:43 AM\\\",\\\"price\\\":22612.39400653868,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5916860924379685,\\\"bias\\\":0.09168609243796855,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22437.27656811726,\\\"ask\\\":22572.3053137629,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:48 AM\\\",\\\"price\\\":22504.79094094008,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5921244748537382,\\\"bias\\\":0.0921244748537382,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22354.37720934657,\\\"ask\\\":22488.90706216109,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:52 AM\\\",\\\"price\\\":22421.64213575383,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5924661108483776,\\\"bias\\\":0.09246611084837764,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22469.336151594376,\\\"ask\\\":22604.557833549807,\\\"dateObserved\\\":\\\"7/24/2023, 11:31:56 AM\\\",\\\"price\\\":22536.94699257209,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5919905974311462,\\\"bias\\\":0.09199059743114624,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22524.8377492766,\\\"ask\\\":22660.393442852986,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:00 AM\\\",\\\"price\\\":22592.615596064796,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5922178237761848,\\\"bias\\\":0.09221782377618482,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22578.779994648627,\\\"ask\\\":22714.66031557931,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:02 AM\\\",\\\"price\\\":22646.72015511397,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5924386660540818,\\\"bias\\\":0.0924386660540818,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22558.150299621782,\\\"ask\\\":22693.906469930436,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:06 AM\\\",\\\"price\\\":22626.02838477611,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5925232023065695,\\\"bias\\\":0.09252320230656952,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22618.99468230575,\\\"ask\\\":22755.117017404882,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:11 AM\\\",\\\"price\\\":22687.05584985532,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5922736465117231,\\\"bias\\\":0.0922736465117231,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22654.58054837356,\\\"ask\\\":22790.917041142104,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:15 AM\\\",\\\"price\\\":22722.748794757834,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5924188181991688,\\\"bias\\\":0.09241881819916875,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22658.42648516498,\\\"ask\\\":22794.78612298944,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:19 AM\\\",\\\"price\\\":22726.60630407721,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5924345076061022,\\\"bias\\\":0.09243450760610217,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22659.867830689433,\\\"ask\\\":22796.236142609327,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:23 AM\\\",\\\"price\\\":22728.05198664938,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5924286276715918,\\\"bias\\\":0.09242862767159177,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22668.831114136898,\\\"ask\\\":22805.253367582052,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:27 AM\\\",\\\"price\\\":22737.042240859475,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5923920668233701,\\\"bias\\\":0.09239206682337009,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22617.804858566622,\\\"ask\\\":22753.920033242044,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:31 AM\\\",\\\"price\\\":22685.862445904335,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5921836283279514,\\\"bias\\\":0.09218362832795135,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22620.892939416597,\\\"ask\\\":22757.02669832983,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:36 AM\\\",\\\"price\\\":22688.959818873216,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5921710422039176,\\\"bias\\\":0.09217104220391759,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22718.74318532607,\\\"ask\\\":22855.465812319006,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:40 AM\\\",\\\"price\\\":22787.10449882254,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5917723418002889,\\\"bias\\\":0.09177234180028893,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22615.61715357086,\\\"ask\\\":22751.719162519126,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:44 AM\\\",\\\"price\\\":22683.668158044995,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5921908188805508,\\\"bias\\\":0.0921908188805508,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22601.670210589917,\\\"ask\\\":22737.688286079923,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:48 AM\\\",\\\"price\\\":22669.67924833492,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5922477076008229,\\\"bias\\\":0.0922477076008229,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22551.465937680976,\\\"ask\\\":22687.18188113743,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:52 AM\\\",\\\"price\\\":22619.323909409202,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5920423449383506,\\\"bias\\\":0.09204234493835062,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22439.85695140358,\\\"ask\\\":22574.901225935595,\\\"dateObserved\\\":\\\"7/24/2023, 11:32:57 AM\\\",\\\"price\\\":22507.37908866959,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5925001354151531,\\\"bias\\\":0.09250013541515312,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22489.07654904388,\\\"ask\\\":22624.41702978035,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:01 AM\\\",\\\"price\\\":22556.746789412115,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5927030252756663,\\\"bias\\\":0.09270302527566632,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22593.86211236312,\\\"ask\\\":22729.83319829509,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:05 AM\\\",\\\"price\\\":22661.847655329108,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5931349655869426,\\\"bias\\\":0.09313496558694256,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22627.947920708295,\\\"ask\\\":22764.12413688106,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:09 AM\\\",\\\"price\\\":22696.03602879468,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5932754719143444,\\\"bias\\\":0.09327547191434438,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22510.669705277844,\\\"ask\\\":22646.140134798068,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:13 AM\\\",\\\"price\\\":22578.404920037956,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5927895165415026,\\\"bias\\\":0.09278951654150258,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22442.944080859208,\\\"ask\\\":22578.006933903496,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:18 AM\\\",\\\"price\\\":22510.475507381354,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5925095074694025,\\\"bias\\\":0.09250950746940245,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22398.122547456165,\\\"ask\\\":22532.915662084786,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:22 AM\\\",\\\"price\\\":22465.519104770476,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5926946309309941,\\\"bias\\\":0.09269463093099406,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22466.881032212088,\\\"ask\\\":22602.0879391261,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:26 AM\\\",\\\"price\\\":22534.484485669094,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.592410073939473,\\\"bias\\\":0.09241007393947298,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22556.398813316544,\\\"ask\\\":22692.14444308575,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:30 AM\\\",\\\"price\\\":22624.271628201146,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5927782756831373,\\\"bias\\\":0.09277827568313735,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":22485.634610075656,\\\"ask\\\":22620.954377036993,\\\"dateObserved\\\":\\\"7/24/2023, 11:33:34 AM\\\",\\\"price\\\":22553.294493556325,\\\"maxShares\\\":5200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0054,\\\"forecast\\\":0.5930702568022221,\\\"bias\\\":0.09307025680222214,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[],\\\"recentTicksOfPrices\\\":[22722.748794757834,22726.60630407721,22728.05198664938,22737.042240859475,22685.862445904335,22688.959818873216,22787.10449882254,22683.668158044995,22669.67924833492,22619.323909409202,22507.37908866959,22556.746789412115,22661.847655329108,22696.03602879468,22578.404920037956,22510.475507381354,22465.519104770476,22534.484485669094,22624.271628201146,22553.294493556325]}]]\"}}],[\"data/salesLedger.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/salesLedger.txt\",\"text\":\"[]\"}}],[\"data/stockMarketReserveMoney.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/stockMarketReserveMoney.txt\",\"text\":\"{\\\"stockMarketReserveMoneyLimit\\\":1500000000000,\\\"capitalToReserveForTrading\\\":292134328004.27905,\\\"moneyInvested\\\":362153990790.20184,\\\"moneyRequested\\\":[[\\\"purchase-server\\\",159010616543.96277]],\\\"countOfVisitedWithoutFillingRequest\\\":2}\"}}],[\"data/contracts.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/contracts.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T16:28:22.611Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T16:28:22.611Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"data/factionsWithAugsToBuyAndNotEnoughtFavor.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/factionsWithAugsToBuyAndNotEnoughtFavor.txt\",\"text\":\"[{\\\"faction\\\":\\\"CyberSec\\\",\\\"maximumAugRep\\\":56250},{\\\"faction\\\":\\\"NiteSec\\\",\\\"maximumAugRep\\\":150000},{\\\"faction\\\":\\\"Chongqing\\\",\\\"maximumAugRep\\\":112500}]\"}}],[\"data/organizations.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/organizations.txt\",\"text\":\"{\\\"toJoinInOrderInWhichIWantToComplete\\\":[\\\"CyberSec\\\",\\\"NiteSec\\\",\\\"Chongqing\\\",\\\"The Black Hand\\\",\\\"Bachman & Associates\\\",\\\"BitRunners\\\",\\\"Daedalus\\\",\\\"NWO\\\",\\\"OmniTek Incorporated\\\",\\\"Blade Industries\\\",\\\"ECorp\\\",\\\"Illuminati\\\",\\\"Aevum\\\",\\\"Volhaven\\\",\\\"New Tokyo\\\",\\\"Ishima\\\",\\\"Tian Di Hui\\\",\\\"Netburners\\\"],\\\"companiesWeWantToBecomePartOf\\\":[\\\"Bachman & Associates\\\",\\\"NWO\\\",\\\"OmniTek Incorporated\\\",\\\"Blade Industries\\\",\\\"ECorp\\\"],\\\"doNoWorkFor\\\":[\\\"Aevum\\\",\\\"Volhaven\\\",\\\"New Tokyo\\\",\\\"Ishima\\\",\\\"Tian Di Hui\\\",\\\"Netburners\\\"],\\\"stopAtAugments\\\":[{\\\"final\\\":true,\\\"faction\\\":\\\"Chongqing\\\",\\\"augmentToStopAt\\\":\\\"Neuregen Gene Modification\\\"},{\\\"final\\\":true,\\\"faction\\\":\\\"NiteSec\\\",\\\"augmentToStopAt\\\":\\\"Cranial Signal Processors - Gen III\\\"},{\\\"final\\\":true,\\\"faction\\\":\\\"The Black Hand\\\",\\\"augmentToStopAt\\\":\\\"Cranial Signal Processors - Gen IV\\\"}]}\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"scripts/coordinator.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":8970.214,\"onlineExpGained\":0,\"onlineMoneyMade\":459888822283.9802,\"onlineRunningTime\":75589.80999946101,\"ramUsage\":2.7,\"server\":\"home\",\"scriptKey\":\"scripts/coordinator.js*[]\",\"title\":\"scripts/coordinator.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":2786.148,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":373.20999999998736,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"omega-net\\\"]\",\"title\":\"scripts/hacking/weaken.js omega-net\",\"threads\":161,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":974.759,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":336.40999999998945,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"scripts/hacking/grow.js crush-fitness\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.41000000000082,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/weaken.js neo-net\",\"threads\":161,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.41000000000055,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"iron-gym\\\"]\",\"title\":\"scripts/hacking/grow.js iron-gym\",\"threads\":121,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"scripts/hacking/grow.js foodnstuff\",\"threads\":108,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"25.6.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":12580011794.2,\"moneyMax\":62900058971,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1177,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"85.5.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":9031935412.6,\"moneyMax\":45159677063,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1301,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"73.2.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":3866198594.6000004,\"moneyMax\":19330992973,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1090,\"serverGrowth\":77,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-824470.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":2206660927995210,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"71.7.6.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":5902648362.8,\"moneyMax\":29513241814,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1189,\"serverGrowth\":62,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"6.9.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":5668064556.6,\"moneyMax\":28340322783,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1268,\"serverGrowth\":94,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"25.5.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":4799026376,\"moneyMax\":23995131880,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1024,\"serverGrowth\":62,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"57.8.8.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":3965703763,\"moneyMax\":19828518815,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1022,\"serverGrowth\":96,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"81.0.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":3338986017.4,\"moneyMax\":16694930087,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1032,\"serverGrowth\":95,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"26.1.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":5980051534.400001,\"moneyMax\":29900257672,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1082,\"serverGrowth\":93,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-551305-NWO.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,2,5,6,7,7,9,7,0,8,5],\"reward\":{\"name\":\"NWO\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"46.2.3.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":340802285.40000004,\"moneyMax\":1704011427,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1036,\"serverGrowth\":91,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"3.7.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1386,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"45.6.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":207393733.20000002,\"moneyMax\":1036968666,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":996,\"serverGrowth\":83,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-214124.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)(((()\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"11.9.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":184069765.20000002,\"moneyMax\":920348826,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":893,\"serverGrowth\":69,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-121332.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"10.3.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":160029464,\"moneyMax\":800147320,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":926,\"serverGrowth\":64,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"61.6.9.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":125210190.60000001,\"moneyMax\":626050953,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":861,\"serverGrowth\":73,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"99.7.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":158737226.8,\"moneyMax\":793686134,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":784,\"serverGrowth\":68,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"18.5.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":180810429.60000002,\"moneyMax\":904052148,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":859,\"serverGrowth\":87,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"56.1.1.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":223326967.8,\"moneyMax\":1116634839,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":831,\"serverGrowth\":81,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"95.6.0.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":154487552.4,\"moneyMax\":772437762,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":865,\"serverGrowth\":74,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-909434.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"73.9.2.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":107483560.2,\"moneyMax\":537417801,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":828,\"serverGrowth\":79,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-41190-CyberSec.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[4,8],[3,8,9],[4,4,1,8]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"68.6.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":172440843.4,\"moneyMax\":862204217,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":875,\"serverGrowth\":80,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"31.7.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":157845129.8,\"moneyMax\":789225649,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":837,\"serverGrowth\":75,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"35.7.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":207287338,\"moneyMax\":1036436690,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":865,\"serverGrowth\":60,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"51.5.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":186407601.8,\"moneyMax\":932038009,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":918,\"serverGrowth\":63,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"60.3.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":209964880.60000002,\"moneyMax\":1049824403,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":777,\"serverGrowth\":68,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"43.3.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":170924266.20000002,\"moneyMax\":854621331,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":791,\"serverGrowth\":75,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"72.8.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":159280367.6,\"moneyMax\":796401838,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":839,\"serverGrowth\":73,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"68.1.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":300464910.6,\"moneyMax\":1502324553,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":868,\"serverGrowth\":50,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-320893-NiteSec.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[7,8],[4,7,8],[9,4,3,3],[4,5,7,1,4],[4,3,8,9,8,5],[3,3,6,9,6,9,9],[6,9,6,7,7,7,8,1],[9,4,4,5,8,4,2,7,4],[1,5,5,5,2,6,7,2,7,1],[7,7,5,5,1,2,2,3,3,7,3]],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"41.8.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":302862739.8,\"moneyMax\":1514313699,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":810,\"serverGrowth\":82,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"16.3.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":231833219.4,\"moneyMax\":1159166097,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":68,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"75.9.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":289543677,\"moneyMax\":1447718385,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":76,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"5.4.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":208695086.60000002,\"moneyMax\":1043475433,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":782,\"serverGrowth\":75,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-625266-CyberSec.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":123050623,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-124209-CyberSec.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[67,[5,8,9,13,14,16,18,22,23,25,28,30]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"71.5.0.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":156352466.8,\"moneyMax\":781762334,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":732,\"serverGrowth\":62,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"48.2.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":121177335,\"moneyMax\":605886675,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":491,\"serverGrowth\":42,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"0.4.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":137469858.6,\"moneyMax\":687349293,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":502,\"serverGrowth\":58,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"97.8.4.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":41959730.6,\"moneyMax\":209798653,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":427,\"serverGrowth\":39,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"39.8.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":35412301.800000004,\"moneyMax\":177061509,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":413,\"serverGrowth\":39,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"46.3.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":213291311.8,\"moneyMax\":1066456559,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":772,\"serverGrowth\":78,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-509024.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[123,189,111,22,168,109,185,155,101,119,190,141,25,121,96,126,181,93,16,77,147,28,128,182,30,178,20,159,42,134]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"95.0.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":67751922,\"moneyMax\":338759610,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":455,\"serverGrowth\":52,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"41.2.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":117846055.4,\"moneyMax\":589230277,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":578,\"serverGrowth\":67,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"50.6.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":77010199,\"moneyMax\":385050995,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":424,\"serverGrowth\":28,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"52.7.1.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":37778391,\"moneyMax\":188891955,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":293,\"serverGrowth\":50,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"84.5.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":49156514.800000004,\"moneyMax\":245782574,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":399,\"serverGrowth\":52,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"32.7.0.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":55000000,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":418,\"serverGrowth\":60,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"46.6.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":15938206.8,\"moneyMax\":79691034,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":299,\"serverGrowth\":42,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"42.0.6.0\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"n00dles\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"n00dles\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"n00dles\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  while(true){\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":5.712000000000001,\"minDifficulty\":1,\"moneyAvailable\":775,\"moneyMax\":70000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"n00dles\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"scripts/hacking/grow.js foodnstuff\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"10.5.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"foodnstuff\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"foodnstuff\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":4.934,\"minDifficulty\":3,\"moneyAvailable\":0,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"scripts/hacking/grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"0.6.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"sigma-cosmetics\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":100,\"minDifficulty\":3,\"moneyAvailable\":598628.6699170523,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"scripts/hacking/grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"13.4.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"joesguns\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"joesguns\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":93.8,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"scripts/hacking/grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"45.3.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"zer0\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"zer0\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":8.484,\"minDifficulty\":8,\"moneyAvailable\":4219096.622528873,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"scripts/hacking/grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"83.6.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"nectar-net\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"nectar-net\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":72.69600000000003,\"minDifficulty\":7,\"moneyAvailable\":2154131.5703422353,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"scripts/hacking/grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-570067.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,9],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"72.1.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"neo-net\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"neo-net\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":15.158,\"minDifficulty\":8,\"moneyAvailable\":1527.4396339757507,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"scripts/hacking/grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-815379.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[3,8],[6,7,6]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"10.5.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"silver-helix\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"silver-helix\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"computek\",\"netlink\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":18107737.383234084,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"scripts/hacking/grow.js foodnstuff\",\"threads\":36,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-346431.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")))a)a))))()((a())(\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"87.8.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"hong-fang-tea\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"hong-fang-tea\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":100,\"minDifficulty\":5,\"moneyAvailable\":2964371.164055575,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"scripts/hacking/grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"94.1.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"harakiri-sushi\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"harakiri-sushi\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":61.202,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"scripts/hacking/grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"46.7.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":4800000,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-327190-TianDiHui.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"ARRAYCACHELINUXPOPUPMOUSE\",\"PROGRAM\"],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"48.7.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"n00dles\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"37.8.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"omega-net\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"omega-net\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":28,\"hackDifficulty\":16.584000000000007,\"minDifficulty\":9,\"moneyAvailable\":69977499,\"moneyMax\":69977499,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":202,\"serverGrowth\":38,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"scripts/hacking/grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"39.2.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":42,\"hackDifficulty\":16.69199999999999,\"minDifficulty\":14,\"moneyAvailable\":17103457.52328664,\"moneyMax\":49686168,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":225,\"serverGrowth\":28,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-983199.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,2],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"64.9.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"iron-gym\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"iron-gym\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":11250584.134062514,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"scripts/hacking/grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"19.8.7.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":507,\"serverGrowth\":31,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"43.4.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1012,\"serverGrowth\":56,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"10.7.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":769,\"serverGrowth\":45,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"2.4.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":520,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"3.7.8.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":342,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"98.1.8.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"avmnite-02h\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"avmnite-02h\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":216,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"scripts/hacking/grow.js foodnstuff\",\"threads\":73,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-583952.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-431789-TianDiHui.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":71704917,\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-581142.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"21.5.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":515,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"88.9.6.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"CSEC\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"CSEC\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":60,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"CSEC\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"scripts/hacking/grow.js foodnstuff\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-193424.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,2],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"66.2.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"80.3.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-813084-CyberSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"84.2.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"CLOUD-000\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CLOUD-000\",\"httpPortOpen\":false,\"ip\":\"0.7.4.3\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"CLOUD-000\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"CLOUD-000\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"CLOUD-000\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":278.0099999999928,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"silver-helix\\\"]\",\"title\":\"scripts/hacking/weaken.js silver-helix\",\"threads\":161,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":2786.15,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":520.0099999999813,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"scripts/hacking/grow.js crush-fitness\",\"threads\":1059,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":974.76,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":336.40999999998945,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"scripts/hacking/grow.js crush-fitness\",\"threads\":599,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":315.8099999999906,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"scripts/hacking/grow.js crush-fitness\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":974.76,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":336.40999999998945,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"omega-net\\\"]\",\"title\":\"scripts/hacking/weaken.js omega-net\",\"threads\":161,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":315.8099999999906,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"omega-net\\\"]\",\"title\":\"scripts/hacking/weaken.js omega-net\",\"threads\":161,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":250.6099999999943,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/weaken.js johnson-ortho\",\"threads\":681,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":233.80999999999526,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"scripts/hacking/weaken.js hong-fang-tea\",\"threads\":1921,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":128.61000000000124,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"scripts/hacking/weaken.js harakiri-sushi\",\"threads\":1141,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.01000000000103,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"nectar-net\\\"]\",\"title\":\"scripts/hacking/weaken.js nectar-net\",\"threads\":1321,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.21000000000043,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"zer0\\\"]\",\"title\":\"scripts/hacking/grow.js zer0\",\"threads\":121,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.2100000000004,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"scripts/hacking/weaken.js sigma-cosmetics\",\"threads\":1961,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"joesguns\\\"]\",\"title\":\"scripts/hacking/weaken.js joesguns\",\"threads\":1781,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"n00dles\\\"]\",\"title\":\"scripts/hacking/grow.js n00dles\",\"threads\":138,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"scripts/hacking/grow.js foodnstuff\",\"threads\":26219,\"temporary\":false}}]}}}","CompaniesSave":"{\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":8001,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":32001,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":73260.67923695821}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Chongqing\",\"playerReputation\":4126.8426666648365}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":9779.909333330601}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":58361.930918173755}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":15011.349548673834,\"lastPrice\":14972.954529007111,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":true,\"otlkMag\":17.794381901873507,\"otlkMagForecast\":68.31747662136496,\"cap\":413709697,\"spreadPerc\":0.1,\"shareTxForMovement\":72921,\"shareTxUntilMovement\":44524,\"totalShares\":114300000,\"maxShares\":22900000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":28609.03508443637,\"lastPrice\":28535.860819780737,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":false,\"otlkMag\":15.077039208752003,\"otlkMagForecast\":33.75973333490524,\"cap\":295767297,\"spreadPerc\":0.5,\"shareTxForMovement\":59520,\"shareTxUntilMovement\":59520,\"totalShares\":96000000,\"maxShares\":19200000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":78153.20890229578,\"lastPrice\":78485.70334184064,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":13.028276511292109,\"otlkMagForecast\":35.88160455585634,\"cap\":407587922,\"spreadPerc\":0.5,\"shareTxForMovement\":38910,\"shareTxUntilMovement\":38910,\"totalShares\":79100000,\"maxShares\":15800000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":22532.875390956,\"lastPrice\":22620.859882762696,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":16.48969757615477,\"otlkMagForecast\":36.193381371885465,\"cap\":404125219,\"spreadPerc\":0.2,\"shareTxForMovement\":84221,\"shareTxUntilMovement\":41848,\"totalShares\":70000000,\"maxShares\":14000000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":22746.54307402563,\"lastPrice\":22655.439316197004,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":16.485919996867263,\"otlkMagForecast\":35.07158852910406,\"cap\":534599042,\"spreadPerc\":0.6,\"shareTxForMovement\":39503,\"shareTxUntilMovement\":35186,\"totalShares\":53600000,\"maxShares\":10700000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":50426.38250672267,\"lastPrice\":50743.77473000549,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.08,\"b\":true,\"otlkMag\":11.650216092968712,\"otlkMagForecast\":62.64419402241285,\"cap\":1054120782,\"spreadPerc\":0.4,\"shareTxForMovement\":39412,\"shareTxUntilMovement\":39412,\"totalShares\":39200000,\"maxShares\":7800000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":242975.53219144038,\"lastPrice\":244065.8873419994,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":8.632377622967475,\"otlkMagForecast\":60.85373154302682,\"cap\":132154359,\"spreadPerc\":0.5,\"shareTxForMovement\":77014,\"shareTxUntilMovement\":55020,\"totalShares\":78600000,\"maxShares\":15700000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":51230.0941823213,\"lastPrice\":50874.30361026697,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.2,\"b\":true,\"otlkMag\":25.848352697991402,\"otlkMagForecast\":74.6399237383895,\"cap\":437459817,\"spreadPerc\":0.9,\"shareTxForMovement\":59809,\"shareTxUntilMovement\":44466,\"totalShares\":62800000,\"maxShares\":12600000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":6295.455125251083,\"lastPrice\":6265.8762575433175,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":false,\"otlkMag\":1.5747185929388974,\"otlkMagForecast\":53.76947449341801,\"cap\":449783964,\"spreadPerc\":0.3,\"shareTxForMovement\":91630,\"shareTxUntilMovement\":30020,\"totalShares\":54900000,\"maxShares\":11000000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":5390.343946628622,\"lastPrice\":5370.937033464255,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":11.093028314118042,\"otlkMagForecast\":37.274483233131846,\"cap\":214327006,\"spreadPerc\":0.6,\"shareTxForMovement\":68680,\"shareTxUntilMovement\":52470,\"totalShares\":76600000,\"maxShares\":15300000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":26702.403176028565,\"lastPrice\":26795.77510082192,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":10.099625308134105,\"otlkMagForecast\":61.21938210790001,\"cap\":228752422,\"spreadPerc\":0.8,\"shareTxForMovement\":74568,\"shareTxUntilMovement\":74568,\"totalShares\":62400000,\"maxShares\":12500000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":3643.4858358691267,\"lastPrice\":3659.623675301244,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":5.508340576586671,\"otlkMagForecast\":42.71462190611449,\"cap\":249914480,\"spreadPerc\":0.8,\"shareTxForMovement\":83865,\"shareTxUntilMovement\":25630,\"totalShares\":93300000,\"maxShares\":18700000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":19850.07271574075,\"lastPrice\":19769.42227774024,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":6.667319606028478,\"otlkMagForecast\":41.566778890372525,\"cap\":393424420,\"spreadPerc\":0.3,\"shareTxForMovement\":90137,\"shareTxUntilMovement\":71892,\"totalShares\":49700000,\"maxShares\":9900000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":13666.559641194011,\"lastPrice\":13711.958900656162,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":11.420614883238388,\"otlkMagForecast\":61.32172541574858,\"cap\":363379978,\"spreadPerc\":1,\"shareTxForMovement\":106291,\"shareTxUntilMovement\":86882,\"totalShares\":38500000,\"maxShares\":7700000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":17192.591964294428,\"lastPrice\":17129.69857741097,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":6.030394869448647,\"otlkMagForecast\":55.904455030276864,\"cap\":156324592,\"spreadPerc\":0.4,\"shareTxForMovement\":75689,\"shareTxUntilMovement\":75689,\"totalShares\":64600000,\"maxShares\":12900000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":27368.567719460003,\"lastPrice\":27481.814308744473,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":6.948699401158592,\"otlkMagForecast\":56.96741958882456,\"cap\":219167744,\"spreadPerc\":0.7,\"shareTxForMovement\":51339,\"shareTxUntilMovement\":51339,\"totalShares\":51900000,\"maxShares\":10400000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":35918.55111235269,\"lastPrice\":36073.45604300441,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":12.24181148933135,\"otlkMagForecast\":40.06914579831437,\"cap\":420329629,\"spreadPerc\":0.9,\"shareTxForMovement\":95685,\"shareTxUntilMovement\":75561,\"totalShares\":35600000,\"maxShares\":7100000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":33664.98745294313,\"lastPrice\":33774.85797703704,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":8.662779757206781,\"otlkMagForecast\":39.9309379149895,\"cap\":560845063,\"spreadPerc\":0.4,\"shareTxForMovement\":83889,\"shareTxUntilMovement\":67536,\"totalShares\":26700000,\"maxShares\":5300000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":14183.024624439933,\"lastPrice\":14248.3242454065,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":5.561709725403796,\"otlkMagForecast\":45.76172433985373,\"cap\":192954536,\"spreadPerc\":0.5,\"shareTxForMovement\":63375,\"shareTxUntilMovement\":63375,\"totalShares\":27300000,\"maxShares\":5500000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":98777.97045179641,\"lastPrice\":100188.36589200508,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":2986177,\"playerAvgShortPx\":110027.38522532923,\"mv\":2.45,\"b\":false,\"otlkMag\":15.848407843235863,\"otlkMagForecast\":28.841304866951393,\"cap\":107236568,\"spreadPerc\":0.9,\"shareTxForMovement\":46342,\"shareTxUntilMovement\":21809,\"totalShares\":54400000,\"maxShares\":10900000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":10982.203289824385,\"lastPrice\":10905.932409333755,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.2,\"b\":true,\"otlkMag\":5.500011374121419,\"otlkMagForecast\":51.559316480562956,\"cap\":61590334,\"spreadPerc\":1,\"shareTxForMovement\":90124,\"shareTxUntilMovement\":19006,\"totalShares\":45500000,\"maxShares\":9100000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2397.0997592810686,\"lastPrice\":2404.224531700417,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.51,\"b\":false,\"otlkMag\":5.029183089868651,\"otlkMagForecast\":45.25393881199363,\"cap\":58031170,\"spreadPerc\":0.4,\"shareTxForMovement\":92355,\"shareTxUntilMovement\":23200,\"totalShares\":42600000,\"maxShares\":8500000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":137328.0411379975,\"lastPrice\":138752.64441754972,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.78,\"b\":true,\"otlkMag\":7.610686062987731,\"otlkMagForecast\":56.736868641304866,\"cap\":53784251,\"spreadPerc\":1.4,\"shareTxForMovement\":71715,\"shareTxUntilMovement\":54134,\"totalShares\":50500000,\"maxShares\":10100000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":210.4486723914063,\"lastPrice\":212.50916084067407,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.68,\"b\":false,\"otlkMag\":20.07297708242745,\"otlkMagForecast\":29.12956445004452,\"cap\":55848920,\"spreadPerc\":0.7,\"shareTxForMovement\":15733,\"shareTxUntilMovement\":15733,\"totalShares\":28000000,\"maxShares\":5600000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":14467.78854505347,\"lastPrice\":14387.294255555773,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.96,\"b\":true,\"otlkMag\":5.610893331147001,\"otlkMagForecast\":54.94054308027217,\"cap\":8612163,\"spreadPerc\":0.8,\"shareTxForMovement\":72534,\"shareTxUntilMovement\":48832,\"totalShares\":34800000,\"maxShares\":7000000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":21.588844043461865,\"lastPrice\":21.217874846166975,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3,\"b\":true,\"otlkMag\":7.189532434645416,\"otlkMagForecast\":59.20671483695147,\"cap\":31761380,\"spreadPerc\":0.6,\"shareTxForMovement\":49946,\"shareTxUntilMovement\":49946,\"totalShares\":45000000,\"maxShares\":9000000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":1304.136068839513,\"lastPrice\":1311.128455667412,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.92,\"b\":true,\"otlkMag\":6.599756133762624,\"otlkMagForecast\":54.99283864505605,\"cap\":7856465,\"spreadPerc\":1.1,\"shareTxForMovement\":82245,\"shareTxUntilMovement\":42171,\"totalShares\":15200000,\"maxShares\":3000000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":5585.191907140562,\"lastPrice\":5608.953506683286,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":5.944751368919801,\"otlkMagForecast\":54.45142594557276,\"cap\":55066798,\"spreadPerc\":0.9,\"shareTxForMovement\":151480,\"shareTxUntilMovement\":151480,\"totalShares\":10600000,\"maxShares\":2100000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":38.80257554700135,\"lastPrice\":39.26842167030535,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.06,\"b\":true,\"otlkMag\":6.0163664286117715,\"otlkMagForecast\":56.20029029014409,\"cap\":26299173,\"spreadPerc\":0.7,\"shareTxForMovement\":64363,\"shareTxUntilMovement\":37388,\"totalShares\":13800000,\"maxShares\":2800000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":47603.277118763115,\"lastPrice\":46820.15506109724,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.87,\"b\":false,\"otlkMag\":7.186508666243796,\"otlkMagForecast\":44.668604161919035,\"cap\":9533340,\"spreadPerc\":1.1,\"shareTxForMovement\":24404,\"shareTxUntilMovement\":24404,\"totalShares\":82500000,\"maxShares\":16500000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":446.0821488545994,\"lastPrice\":442.1652450713181,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.52,\"b\":false,\"otlkMag\":12.845980384004276,\"otlkMagForecast\":34.035695560444566,\"cap\":1655445,\"spreadPerc\":0.9,\"shareTxForMovement\":45284,\"shareTxUntilMovement\":25146,\"totalShares\":87700000,\"maxShares\":17500000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":7139.274940876091,\"lastPrice\":7106.968160103095,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":7.400508451471916,\"otlkMagForecast\":41.42701964374495,\"cap\":98373610,\"spreadPerc\":0.4,\"shareTxForMovement\":183321,\"shareTxUntilMovement\":111318,\"totalShares\":20200000,\"maxShares\":4000000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":22553.294493556325,\"lastPrice\":22624.271628201146,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":true,\"otlkMag\":9.307025680222209,\"otlkMagForecast\":60.182650115621186,\"cap\":251113832,\"spreadPerc\":0.3,\"shareTxForMovement\":147926,\"shareTxUntilMovement\":147926,\"totalShares\":26100000,\"maxShares\":5200000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":41891,\"lastUpdate\":1690216413746,\"ticksUntilCycle\":53}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":5,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"32","AllGangsSave":"","LastExportBonus":"1690143026918","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}